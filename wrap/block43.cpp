
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSimpleName
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSimpleName_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSimpleName_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSimpleNameObject* self = (PyoaSimpleNameObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaSimpleName();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaNameSpace,[oaChar])
    {
        PyParamoaNameSpace p1;
        PyParamoaChar_Array p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaNameSpace_Convert,&p1,
              &PyoaChar_Array_Convert,&p2)) {
            self->value =  new oaSimpleName(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSimpleName)
    {
        PyParamoaSimpleName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaSimpleName_Convert,&p1)) {
            self->value =  new oaSimpleName(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaScalarName)
    {
        PyParamoaScalarName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaScalarName_Convert,&p1)) {
            self->value =  new oaSimpleName(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVectorBitName)
    {
        PyParamoaVectorBitName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVectorBitName_Convert,&p1)) {
            self->value =  new oaSimpleName(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVectorName)
    {
        PyParamoaVectorName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVectorName_Convert,&p1)) {
            self->value =  new oaSimpleName(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSimpleName, Choices are:\n"
        "    ()\n"
        "    (oaNameSpace,[oaChar])\n"
        "    (oaSimpleName)\n"
        "    (oaScalarName)\n"
        "    (oaVectorBitName)\n"
        "    (oaVectorName)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSimpleName_tp_dealloc(PyoaSimpleNameObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSimpleName_tp_repr(PyObject *ob)
{
    PyParamoaSimpleName value;
    int convert_status=PyoaSimpleName_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult;
    value.DataCall()->get(sresult);

    char addr[34];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaSimpleName::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSimpleName_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSimpleName v1;
    PyParamoaSimpleName v2;
    int convert_status1=PyoaSimpleName_Convert(ob1,&v1);
    int convert_status2=PyoaSimpleName_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    if (v1.Data()==v2.Data()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSimpleName_Convert(PyObject* ob,PyParamoaSimpleName* result)
{
    if (ob == NULL) return 1;
    if (PyoaSimpleName_Check(ob)) {
        result->SetData(  ((PyoaSimpleNameObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSimpleName Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSimpleName_FromoaSimpleName(oaSimpleName* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSimpleName_Type.tp_alloc(&PyoaSimpleName_Type,0);
        if (bself == NULL) return bself;
        PyoaSimpleNameObject* self = (PyoaSimpleNameObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// IndexGetMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSimpleName_index_get_doc[] = 
"Class: oaSimpleName, Function: index_get\n"
;

static PyObject*
oaSimpleName_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    PyParamoaUInt4 p1;
    if (index<0 || index>=data.Data().getNumMembers()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    oaNameMem* result= new oaNameMem(data.Data()[index]);
    return PyoaNameMem_FromoaNameMem(result,0,NULL);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static Pyoa_ssize_t
oaSimpleName_index_get_length(PyObject* ob)
{
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    return data.Data().getNumMembers();
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSimpleName_addHierMem_doc[] = 
"Class: oaSimpleName, Function: addHierMem\n"
"  Paramegers: (oaNameSpace,[oaChar],oaUInt4)\n"
"    Calls: void addHierMem(const oaNameSpace& nSpace,const oaChar* in,oaUInt4 len)\n"
"    Signature: addHierMem|void-void|cref-oaNameSpace,cptr-oaChar,simple-oaUInt4,\n"
"    This function adds the given string as a member of the hierarchical portion of this name. An exception is thrown if this name is empty.\n"
"    The in string must not contain any hierarchy delimiters. Only len characters of in are considered. An exception is thrown if this name is empty.\n"
"    nSpace\n"
"    The nameSpace in which to evaluate the given string\n"
"    in\n"
"    The input string to add to the hierarchy of this name\n"
"    len\n"
"    The length of the specified input string\n"
"    oacInvalidName\n"
"  Paramegers: (oaNameMem)\n"
"    Calls: void addHierMem(const oaNameMem& in)\n"
"    Signature: addHierMem|void-void|cref-oaNameMem,\n"
"    This function adds a hierarchical member to this name, inserting a copy of in after the existing members that represent a partial hierarchical path, and before the last member, which represents the local name. An exception is thrown if this name is empty.\n"
"    in\n"
"    The member to be added\n"
"    oacInvalidName\n"
;

static PyObject*
oaSimpleName_addHierMem(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    // Case: (oaNameSpace,[oaChar],oaUInt4)
    {
        PyParamoaNameSpace p1;
        PyParamoaChar_Array p2;
        PyParamoaUInt4 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaNameSpace_Convert,&p1,
              &PyoaChar_Array_Convert,&p2,
              &PyoaUInt4_Convert,&p3)) {
            data.DataCall()->addHierMem(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaNameMem)
    {
        PyParamoaNameMem p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaNameMem_Convert,&p1)) {
            data.DataCall()->addHierMem(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSimpleName, function: addHierMem, Choices are:\n"
        "    (oaNameSpace,[oaChar],oaUInt4)\n"
        "    (oaNameMem)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_addHierPath_doc[] = 
"Class: oaSimpleName, Function: addHierPath\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: void addHierPath(const oaScalarName& path)\n"
"    Signature: addHierPath|void-void|cref-oaScalarName,\n"
"    This function prepends a hierarchical path to this name. An exception is thrown if this name is empty.\n"
"    path\n"
"    The path to add\n"
"    oacInvalidName\n"
"  Paramegers: (oaVectorBitName)\n"
"    Calls: void addHierPath(const oaVectorBitName& path)\n"
"    Signature: addHierPath|void-void|cref-oaVectorBitName,\n"
"    This function prepends a hierarchical path to this name. An exception is thrown if this name is empty.\n"
"    path\n"
"    The path to add\n"
"    oacInvalidName\n"
;

static PyObject*
oaSimpleName_addHierPath(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    // Case: (oaScalarName)
    {
        PyParamoaScalarName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaScalarName_Convert,&p1)) {
            data.DataCall()->addHierPath(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaVectorBitName)
    {
        PyParamoaVectorBitName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVectorBitName_Convert,&p1)) {
            data.DataCall()->addHierPath(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSimpleName, function: addHierPath, Choices are:\n"
        "    (oaScalarName)\n"
        "    (oaVectorBitName)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_get_doc[] = 
"Class: oaSimpleName, Function: get\n"
"  Paramegers: (oaNameSpace,oaString)\n"
"    Calls: void get(const oaNameSpace& nSpace,oaString& out) const\n"
"    Signature: get|void-void|cref-oaNameSpace,ref-oaString,\n"
"    This function returns this name mapped into the specified nameSpace. If the name cannot be properly mapped, an empty string is written to out .\n"
"    An exception is thrown if the specified nameSpace does not support the type of this oaSimpleName. For information on the names supported in each nameSpace, see Details of OpenAccess Name Spaces .\n"
"    nSpace\n"
"    The nameSpace in which to map this name\n"
"    out\n"
"    The string in which to place the mapped name\n"
"    oacVectorNameInvalid\n"
"    oacHierNameInvalid\n"
"    oacIndexedNameInvalid\n"
"  Paramegers: (oaString)\n"
"    Calls: void get(oaString& out) const\n"
"    Signature: get|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns this name mapped into the oaNative nameSpace.\n"
"    out\n"
"    The string in which to place the mapped name\n"
;

static PyObject*
oaSimpleName_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    // Case: (oaNameSpace,oaString)
    {
        PyParamoaNameSpace p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaNameSpace_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            data.DataCall()->get(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            data.DataCall()->get(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSimpleName, function: get, Choices are:\n"
        "    (oaNameSpace,oaString)\n"
        "    (oaString)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getBitName_doc[] = 
"Class: oaSimpleName, Function: getBitName\n"
"  Paramegers: (oaNameSpace,oaUInt4,oaString)\n"
"    Calls: void getBitName(const oaNameSpace& nSpace,oaUInt4 bit,oaString& out) const\n"
"    Signature: getBitName|void-void|cref-oaNameSpace,simple-oaUInt4,ref-oaString,\n"
"    This function returns the bit name of this oaSimpleName, mapped into the specified oaNameSpace .\n"
"    nSpace\n"
"    The nameSpace to which to map this name\n"
"    bit\n"
"    The bit name to map to the string out\n"
"    out\n"
"    The string in which to place the mapped name\n"
"    oacBitNotInRangeForName\n"
;

static PyObject*
oaSimpleName_getBitName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    PyParamoaNameSpace p1;
    PyParamoaUInt4 p2;
    PyParamoaString p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaNameSpace_Convert,&p1,
          &PyoaUInt4_Convert,&p2,
          &PyoaString_Convert,&p3)) {
        data.DataCall()->getBitName(p1.Data(),p2.Data(),p3.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getNumBits_doc[] = 
"Class: oaSimpleName, Function: getNumBits\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumBits() const\n"
"    Signature: getNumBits|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of bits this name represents.\n"
;

static PyObject*
oaSimpleName_getNumBits(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumBits());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getNumMembers_doc[] = 
"Class: oaSimpleName, Function: getNumMembers\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumMembers() const\n"
"    Signature: getNumMembers|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of hierarchical members in this name object.\n"
;

static PyObject*
oaSimpleName_getNumMembers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumMembers());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getRepeat_doc[] = 
"Class: oaSimpleName, Function: getRepeat\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getRepeat() const\n"
"    Signature: getRepeat|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the repeat value for this oaSimpleName.\n"
;

static PyObject*
oaSimpleName_getRepeat(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getRepeat());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getScalar_doc[] = 
"Class: oaSimpleName, Function: getScalar\n"
"  Paramegers: ()\n"
"    Calls: oaScalarName* getScalar() const\n"
"    Signature: getScalar|ptr-oaScalarName|\n"
"    BrowseData: 1\n"
"    This function returns an oaScalarName if this oaSimpleName represents an oaScalarName . Otherwise, this function returns NULL.\n"
;

static PyObject*
oaSimpleName_getScalar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaScalarName* result=(data.DataCall()->getScalar());
        if (result==NULL) {
            Py_INCREF(Py_None);
            return Py_None;
        }
        return PyoaScalarName_FromoaScalarName(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getType_doc[] = 
"Class: oaSimpleName, Function: getType\n"
"  Paramegers: ()\n"
"    Calls: oaNameType getType() const\n"
"    Signature: getType|simple-oaNameType|\n"
"    BrowseData: 1\n"
"    This function returns the name type for this oaSimpleName.\n"
;

static PyObject*
oaSimpleName_getType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaNameType* result= new oaNameType(data.DataCall()->getType());
        return PyoaNameType_FromoaNameType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getVector_doc[] = 
"Class: oaSimpleName, Function: getVector\n"
"  Paramegers: ()\n"
"    Calls: oaVectorName* getVector() const\n"
"    Signature: getVector|ptr-oaVectorName|\n"
"    BrowseData: 1\n"
"    This function returns an oaVectorName if this oaSimpleName represents an oaVectorName . Otherwise, this function returns NULL.\n"
;

static PyObject*
oaSimpleName_getVector(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVectorName* result=(data.DataCall()->getVector());
        if (result==NULL) {
            Py_INCREF(Py_None);
            return Py_None;
        }
        return PyoaVectorName_FromoaVectorName(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_getVectorBit_doc[] = 
"Class: oaSimpleName, Function: getVectorBit\n"
"  Paramegers: ()\n"
"    Calls: oaVectorBitName* getVectorBit() const\n"
"    Signature: getVectorBit|ptr-oaVectorBitName|\n"
"    BrowseData: 1\n"
"    This function returns an oaVectorBitName if this oaSimpleName represents an oaVectorBitName . Otherwise, this function returns NULL.\n"
;

static PyObject*
oaSimpleName_getVectorBit(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVectorBitName* result=(data.DataCall()->getVectorBit());
        if (result==NULL) {
            Py_INCREF(Py_None);
            return Py_None;
        }
        return PyoaVectorBitName_FromoaVectorBitName(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSimpleName_init_doc[] = 
"Class: oaSimpleName, Function: init\n"
"  Paramegers: (oaNameSpace,[oaChar])\n"
"    Calls: void init(const oaNameSpace& nSpace,const oaChar* in)\n"
"    Signature: init|void-void|cref-oaNameSpace,cptr-oaChar,\n"
"    This function initializes the oaSimpleName object by deleting old data previously allocated, then evaluates the input string in the specified namespace, then re-initializes the object to the string specified by in . This allows reuse of the oaName object to improve application performance.\n"
"    nSpace\n"
"    The nameSpace in which to evaluate the string\n"
"    in\n"
"    The input string to evaluate\n"
"    oacInvalidNameLength\n"
"    oacInvalidNameSyntax\n"
;

static PyObject*
oaSimpleName_init(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSimpleName data;
    int convert_status=PyoaSimpleName_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSimpleNameObject* self=(PyoaSimpleNameObject*)ob;

    PyParamoaNameSpace p1;
    PyParamoaChar_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNameSpace_Convert,&p1,
          &PyoaChar_Array_Convert,&p2)) {
        data.DataCall()->init(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSimpleName_assign_doc[] = 
"Class: oaSimpleName, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSimpleName_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSimpleName data;
  int convert_status=PyoaSimpleName_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSimpleName p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSimpleName_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSimpleName_methodlist[] = {
    {"addHierMem",(PyCFunction)oaSimpleName_addHierMem,METH_VARARGS,oaSimpleName_addHierMem_doc},
    {"addHierPath",(PyCFunction)oaSimpleName_addHierPath,METH_VARARGS,oaSimpleName_addHierPath_doc},
    {"get",(PyCFunction)oaSimpleName_get,METH_VARARGS,oaSimpleName_get_doc},
    {"getBitName",(PyCFunction)oaSimpleName_getBitName,METH_VARARGS,oaSimpleName_getBitName_doc},
    {"getNumBits",(PyCFunction)oaSimpleName_getNumBits,METH_VARARGS,oaSimpleName_getNumBits_doc},
    {"getNumMembers",(PyCFunction)oaSimpleName_getNumMembers,METH_VARARGS,oaSimpleName_getNumMembers_doc},
    {"getRepeat",(PyCFunction)oaSimpleName_getRepeat,METH_VARARGS,oaSimpleName_getRepeat_doc},
    {"getScalar",(PyCFunction)oaSimpleName_getScalar,METH_VARARGS,oaSimpleName_getScalar_doc},
    {"getType",(PyCFunction)oaSimpleName_getType,METH_VARARGS,oaSimpleName_getType_doc},
    {"getVector",(PyCFunction)oaSimpleName_getVector,METH_VARARGS,oaSimpleName_getVector_doc},
    {"getVectorBit",(PyCFunction)oaSimpleName_getVectorBit,METH_VARARGS,oaSimpleName_getVectorBit_doc},
    {"init",(PyCFunction)oaSimpleName_init,METH_VARARGS,oaSimpleName_init_doc},
    {"assign",(PyCFunction)oaSimpleName_tp_assign,METH_VARARGS,oaSimpleName_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------

static PySequenceMethods oaSimpleName_as_sequence = {
    (Pyoa_inquiry)oaSimpleName_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,		/* sq_concat */
    (Pyoa_intargfunc)0,		/* sq_repeat */
    (Pyoa_intargfunc)oaSimpleName_index_get,	/* sq_item */
};
// ------------------------------------------------------------------
static char oaSimpleName_doc[] = 
"Class: oaSimpleName\n"
"  The oaSimpleName utility class provides a name that can represent either a scalar, vector bit, or vector name. The oaSimpleName object cannot represent a bundle name. See the oaScalarName , oaVectorBitName and oaVectorName classes for more specialized name classes\n"
"  In conjunction with oaNameSpace objects, this class facilitates mapping names from one namespace to another. See the Name Mapping Section of the Programmers Guide for more information about mapping names between different namespaces.\n"
"  For a more generic object that can represent a scalar, vector bit, vector, or bundle name, use the oaName object instead.\n"
"  In general, when using oaName and related objects, it is best to choose the object type with closest match to the name. For example, where an application only uses scalar names, using oaScalarName object is the most performance efficient even though using oaSimpleName would work also.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSimpleName()\n"
"    Signature: oaSimpleName||\n"
"    This function constructs an empty oaSimpleName object.\n"
"  Paramegers: (oaNameSpace,[oaChar])\n"
"    Calls: oaSimpleName(const oaNameSpace& nSpace,const oaChar* in)\n"
"    Signature: oaSimpleName||cref-oaNameSpace,cptr-oaChar,\n"
"    This function constructs an oaSimpleName object, evaluating the specified input string in the specified nameSpace.\n"
"    in\n"
"    The input string to evaluate\n"
"    nSpace\n"
"    The nameSpace in which to evaluate the string\n"
"    oacInvalidNameLength\n"
"    oacInvalidNameSyntax\n"
"  Paramegers: (oaSimpleName)\n"
"    Calls: oaSimpleName(const oaSimpleName& name)\n"
"    Signature: oaSimpleName||cref-oaSimpleName,\n"
"    This function constructs a copy of the specified oaSimpleName object.\n"
"  Paramegers: (oaScalarName)\n"
"    Calls: oaSimpleName(const oaScalarName& name)\n"
"    Signature: oaSimpleName||cref-oaScalarName,\n"
"    This function constructs an oaSimpleName from the specified oaScalarName object.\n"
"  Paramegers: (oaVectorBitName)\n"
"    Calls: oaSimpleName(const oaVectorBitName& name)\n"
"    Signature: oaSimpleName||cref-oaVectorBitName,\n"
"    This function constructs an oaSimpleName from the specified oaVectorBitName object.\n"
"  Paramegers: (oaVectorName)\n"
"    Calls: oaSimpleName(const oaVectorName& name)\n"
"    Signature: oaSimpleName||cref-oaVectorName,\n"
"    This function constructs an oaSimpleName from the specified oaVectorName object.\n"
"  Paramegers: (oaSimpleName)\n"
"    Calls: (const oaSimpleName&)\n"
"    Signature: oaSimpleName||cref-oaSimpleName,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSimpleName_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSimpleName",
    sizeof(PyoaSimpleNameObject),
    0,
    (destructor)oaSimpleName_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSimpleName_tp_compare,	/* tp_compare */
    (reprfunc)oaSimpleName_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    &oaSimpleName_as_sequence,	/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSimpleName_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSimpleName_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSimpleName_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSimpleName_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSimpleName_Type)<0) {
      printf("** PyType_Ready failed for: oaSimpleName\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSimpleName",
           (PyObject*)(&PyoaSimpleName_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSimpleName\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSiteDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSiteDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSiteDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSiteDefObject* self = (PyoaSiteDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSiteDef)
    {
        PyParamoaSiteDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSiteDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSiteDef, Choices are:\n"
        "    (oaSiteDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSiteDef_tp_dealloc(PyoaSiteDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSiteDef_tp_repr(PyObject *ob)
{
    PyParamoaSiteDef value;
    int convert_status=PyoaSiteDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaSiteDef::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaString sresult;
        value.DataCall()->getName(sresult);
    
        char addr[31];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaSiteDef::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSiteDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSiteDef v1;
    PyParamoaSiteDef v2;
    int convert_status1=PyoaSiteDef_Convert(ob1,&v1);
    int convert_status2=PyoaSiteDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSiteDef_Convert(PyObject* ob,PyParamoaSiteDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaSiteDef_Check(ob)) {
        result->SetData( (oaSiteDef**) ((PyoaSiteDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSiteDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSiteDef_FromoaSiteDef(oaSiteDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaSiteDef* data=*value;
        if (data->getType()==oacScalarSiteDefType) return PyoaScalarSiteDef_FromoaScalarSiteDef((oaScalarSiteDef**)value,borrow,lock);
        if (data->getType()==oacArraySiteDefType) return PyoaArraySiteDef_FromoaArraySiteDef((oaArraySiteDef**)value,borrow,lock);
        PyObject* bself = PyoaSiteDef_Type.tp_alloc(&PyoaSiteDef_Type,0);
        if (bself == NULL) return bself;
        PyoaSiteDefObject* self = (PyoaSiteDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaSiteDef_FromoaSiteDef(oaSiteDef* data)
{
    if (data) {
        if (data->getType()==oacScalarSiteDefType) return PyoaScalarSiteDef_FromoaScalarSiteDef((oaScalarSiteDef*)data);
        if (data->getType()==oacArraySiteDefType) return PyoaArraySiteDef_FromoaArraySiteDef((oaArraySiteDef*)data);
       PyObject* bself = PyoaSiteDef_Type.tp_alloc(&PyoaSiteDef_Type,0);
       if (bself == NULL) return bself;
       PyoaSiteDefObject* self = (PyoaSiteDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteDef_destroy_doc[] = 
"Class: oaSiteDef, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function destroys this siteDef, removing it from the technology database.\n"
;

static PyObject*
oaSiteDef_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_getHeight_doc[] = 
"Class: oaSiteDef, Function: getHeight\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getHeight() const\n"
"    Signature: getHeight|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the height of the siteDef. For array siteDefs, the height is calculated from its list of scalar siteDefs and their transformations. If any of the scalar siteDefs cannot be found by name an exception is thrown.\n"
"    oacSiteDefNotFound\n"
;

static PyObject*
oaSiteDef_getHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getHeight());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_getName_doc[] = 
"Class: oaSiteDef, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getName(oaString& name) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of the siteDef.\n"
;

static PyObject*
oaSiteDef_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_getSiteDefType_doc[] = 
"Class: oaSiteDef, Function: getSiteDefType\n"
"  Paramegers: ()\n"
"    Calls: oaSiteDefType getSiteDefType() const\n"
"    Signature: getSiteDefType|simple-oaSiteDefType|\n"
"    BrowseData: 1\n"
"    This function returns the type of the siteDef.\n"
;

static PyObject*
oaSiteDef_getSiteDefType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaSiteDefType* result= new oaSiteDefType(data.DataCall()->getSiteDefType());
        return PyoaSiteDefType_FromoaSiteDefType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_getUsedIn_doc[] = 
"Class: oaSiteDef, Function: getUsedIn\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaRowHeader_oaSiteDef getUsedIn() const\n"
"    Signature: getUsedIn|simple-oaCollection_oaRowHeader_oaSiteDef|\n"
"    BrowseData: 1\n"
"    This function returns a collection of rowHeaders in all designs that refer to this siteDef object.\n"
;

static PyObject*
oaSiteDef_getUsedIn(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaRowHeader_oaSiteDef* result= new oaCollection_oaRowHeader_oaSiteDef(data.DataCall()->getUsedIn());
        return PyoaCollection_oaRowHeader_oaSiteDef_FromoaCollection_oaRowHeader_oaSiteDef(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_getUsedInIter_doc[] = 
"Class: oaSiteDef, Function: getUsedInIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaRowHeader getUsedInIter() const\n"
"    Signature: getUsedInIter|simple-oaIter_oaRowHeader|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns a collection of rowHeaders in all designs that refer to this siteDef object.\n"
;

static PyObject*
oaSiteDef_getUsedInIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaRowHeader* result= new oaIter_oaRowHeader(data.DataCall()->getUsedIn());
        return PyoaIter_oaRowHeader_FromoaIter_oaRowHeader(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_getWidth_doc[] = 
"Class: oaSiteDef, Function: getWidth\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getWidth() const\n"
"    Signature: getWidth|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the width of the siteDef. For array siteDefs, the width is calculated from its list of scalar siteDefs and their transformations. If any of the scalar siteDefs cannot be found by name an exception is thrown.\n"
"    oacSiteDefNotFound\n"
;

static PyObject*
oaSiteDef_getWidth(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getWidth());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_isSymmetricInRot_doc[] = 
"Class: oaSiteDef, Function: isSymmetricInRot\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isSymmetricInRot() const\n"
"    Signature: isSymmetricInRot|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if the siteDef is symmetrical in rotation.\n"
;

static PyObject*
oaSiteDef_isSymmetricInRot(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isSymmetricInRot());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_isSymmetricInX_doc[] = 
"Class: oaSiteDef, Function: isSymmetricInX\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isSymmetricInX() const\n"
"    Signature: isSymmetricInX|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if the siteDef is symmetrical in the X direction.\n"
;

static PyObject*
oaSiteDef_isSymmetricInX(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isSymmetricInX());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_isSymmetricInY_doc[] = 
"Class: oaSiteDef, Function: isSymmetricInY\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isSymmetricInY() const\n"
"    Signature: isSymmetricInY|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if the siteDef is symmetrical in the Y direction.\n"
;

static PyObject*
oaSiteDef_isSymmetricInY(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isSymmetricInY());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_setSymmetricInRot_doc[] = 
"Class: oaSiteDef, Function: setSymmetricInRot\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setSymmetricInRot(oaBoolean val)\n"
"    Signature: setSymmetricInRot|void-void|simple-oaBoolean,\n"
"    This function returns sets the siteDef symmetrical in rotation.\n"
;

static PyObject*
oaSiteDef_setSymmetricInRot(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setSymmetricInRot(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_setSymmetricInX_doc[] = 
"Class: oaSiteDef, Function: setSymmetricInX\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setSymmetricInX(oaBoolean val)\n"
"    Signature: setSymmetricInX|void-void|simple-oaBoolean,\n"
"    This function sets the siteDef symmetrical in the X direction.\n"
;

static PyObject*
oaSiteDef_setSymmetricInX(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setSymmetricInX(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_setSymmetricInY_doc[] = 
"Class: oaSiteDef, Function: setSymmetricInY\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setSymmetricInY(oaBoolean val)\n"
"    Signature: setSymmetricInY|void-void|simple-oaBoolean,\n"
"    This function sets the siteDef symmetrical in the Y direction.\n"
;

static PyObject*
oaSiteDef_setSymmetricInY(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setSymmetricInY(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_setType_doc[] = 
"Class: oaSiteDef, Function: setType\n"
"  Paramegers: (oaSiteDefType)\n"
"    Calls: void setType(oaSiteDefType type)\n"
"    Signature: setType|void-void|simple-oaSiteDefType,\n"
"    This function sets the type of the siteDef.\n"
;

static PyObject*
oaSiteDef_setType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefObject* self=(PyoaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDefType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSiteDefType_Convert,&p1)) {
        data.DataCall()->setType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDef_isNull_doc[] =
"Class: oaSiteDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaSiteDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaSiteDef data;
    int convert_status=PyoaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaSiteDef_assign_doc[] = 
"Class: oaSiteDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSiteDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSiteDef data;
  int convert_status=PyoaSiteDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSiteDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSiteDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSiteDef_methodlist[] = {
    {"destroy",(PyCFunction)oaSiteDef_destroy,METH_VARARGS,oaSiteDef_destroy_doc},
    {"getHeight",(PyCFunction)oaSiteDef_getHeight,METH_VARARGS,oaSiteDef_getHeight_doc},
    {"getName",(PyCFunction)oaSiteDef_getName,METH_VARARGS,oaSiteDef_getName_doc},
    {"getSiteDefType",(PyCFunction)oaSiteDef_getSiteDefType,METH_VARARGS,oaSiteDef_getSiteDefType_doc},
    {"getUsedIn",(PyCFunction)oaSiteDef_getUsedIn,METH_VARARGS,oaSiteDef_getUsedIn_doc},
    {"getUsedInIter",(PyCFunction)oaSiteDef_getUsedInIter,METH_VARARGS,oaSiteDef_getUsedInIter_doc},
    {"getWidth",(PyCFunction)oaSiteDef_getWidth,METH_VARARGS,oaSiteDef_getWidth_doc},
    {"isSymmetricInRot",(PyCFunction)oaSiteDef_isSymmetricInRot,METH_VARARGS,oaSiteDef_isSymmetricInRot_doc},
    {"isSymmetricInX",(PyCFunction)oaSiteDef_isSymmetricInX,METH_VARARGS,oaSiteDef_isSymmetricInX_doc},
    {"isSymmetricInY",(PyCFunction)oaSiteDef_isSymmetricInY,METH_VARARGS,oaSiteDef_isSymmetricInY_doc},
    {"setSymmetricInRot",(PyCFunction)oaSiteDef_setSymmetricInRot,METH_VARARGS,oaSiteDef_setSymmetricInRot_doc},
    {"setSymmetricInX",(PyCFunction)oaSiteDef_setSymmetricInX,METH_VARARGS,oaSiteDef_setSymmetricInX_doc},
    {"setSymmetricInY",(PyCFunction)oaSiteDef_setSymmetricInY,METH_VARARGS,oaSiteDef_setSymmetricInY_doc},
    {"setType",(PyCFunction)oaSiteDef_setType,METH_VARARGS,oaSiteDef_setType_doc},
    {"isNull",(PyCFunction)oaSiteDef_tp_isNull,METH_VARARGS,oaSiteDef_isNull_doc},
    {"assign",(PyCFunction)oaSiteDef_tp_assign,METH_VARARGS,oaSiteDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteDef_doc[] = 
"Class: oaSiteDef\n"
"  The oaSiteDef class defines a site where you can place cells in a row. A site has a type, symmetry and other information allowing for the specification of placeable objects within a row.\n"
"  The site can be either a simple oaScalarSiteDef , which has width and height information, or an oaArraySiteDef , which has a pattern of scalar siteDefs.\n"
"  The oaSiteDef class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaSiteDef)\n"
"    Calls: (const oaSiteDef&)\n"
"    Signature: oaSiteDef||cref-oaSiteDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSiteDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSiteDef",
    sizeof(PyoaSiteDefObject),
    0,
    (destructor)oaSiteDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSiteDef_tp_compare,	/* tp_compare */
    (reprfunc)oaSiteDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSiteDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSiteDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaTechObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSiteDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteDef_static_find_doc[] = 
"Class: oaSiteDef, Function: find\n"
"  Paramegers: (oaTech,oaString)\n"
"    Calls: oaSiteDef* find(const oaTech* tech,const oaString& name)\n"
"    Signature: find|ptr-oaSiteDef|cptr-oaTech,cref-oaString,\n"
"    This function searches the specified technology database for a siteDef with the specified name . If the specified technology database references other technology databases, those are searched as well and the first matching siteDef is returned. To find a siteDef in the current technology database only, refer to the find function that accepts the local argument.\n"
"    If found, the function returns the siteDef value. Otherwise, NULL is returned.\n"
"    tech\n"
"    The technology database to search\n"
"    name\n"
"    The siteDef to find\n"
"  Paramegers: (oaTech,oaString,oaBoolean)\n"
"    Calls: oaSiteDef* find(const oaTech* tech,const oaString& name,oaBoolean local)\n"
"    Signature: find|ptr-oaSiteDef|cptr-oaTech,cref-oaString,simple-oaBoolean,\n"
"    oaSiteDef::find2\n"
"    This function searches for a siteDef with the specified name. The local argument specifies whether (if true) to look only in the specified technology database or (if false) to look in the specified technology database and all of its referenced databases. If found, the siteDef is returned, otherwise NULL is returned.\n"
"    Refer to Incremental Technology Databases in the Using Technology Databases section of the Programmers Guide for more information about referenced tech databases.\n"
"    tech\n"
"    The technology database to search\n"
"    name\n"
"    The siteDef name to find\n"
"    local\n"
"    Specifies whether (if true) to look only in the specified technology database or (if false) to look in the specified technology database and all of its referenced databases.\n"
;

static PyObject*
oaSiteDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaTech,oaString)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSiteDefp result= (oaSiteDef::find(p1.Data(),p2.Data()));
            return PyoaSiteDef_FromoaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaString,oaBoolean)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSiteDefp result= (oaSiteDef::find(p1.Data(),p2.Data(),p3.Data()));
            return PyoaSiteDef_FromoaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSiteDef, function: find, Choices are:\n"
        "    (oaTech,oaString)\n"
        "    (oaTech,oaString,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaSiteDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaSiteDef_static_find,METH_VARARGS,oaSiteDef_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSiteDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSiteDef_Type)<0) {
      printf("** PyType_Ready failed for: oaSiteDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSiteDef",
           (PyObject*)(&PyoaSiteDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSiteDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaSiteDef_Type.tp_dict;
    for(method=oaSiteDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSiteDefModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaSiteDefModTypeEnum_Convert(PyObject* ob,PyParamoaSiteDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetTypeSiteDefModType")==0) { result->SetData(oacSetTypeSiteDefModType); return 1;}
        if (strcasecmp(str,"oacSetWidthSiteDefModType")==0) { result->SetData(oacSetWidthSiteDefModType); return 1;}
        if (strcasecmp(str,"oacSetHeightSiteDefModType")==0) { result->SetData(oacSetHeightSiteDefModType); return 1;}
        if (strcasecmp(str,"oacSetSymmetrySiteDefModType")==0) { result->SetData(oacSetSymmetrySiteDefModType); return 1;}
        if (strcasecmp(str,"oacSetSitePatternSiteDefModType")==0) { result->SetData(oacSetSitePatternSiteDefModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaSiteDefModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSiteDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaSiteDefModTypeEnum_FromoaSiteDefModTypeEnum(oaSiteDefModTypeEnum ob)
{
    if (ob==oacSetTypeSiteDefModType) return PyString_FromString("oacSetTypeSiteDefModType");
    if (ob==oacSetWidthSiteDefModType) return PyString_FromString("oacSetWidthSiteDefModType");
    if (ob==oacSetHeightSiteDefModType) return PyString_FromString("oacSetHeightSiteDefModType");
    if (ob==oacSetSymmetrySiteDefModType) return PyString_FromString("oacSetSymmetrySiteDefModType");
    if (ob==oacSetSitePatternSiteDefModType) return PyString_FromString("oacSetSitePatternSiteDefModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaSiteDefModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaSiteDefModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaSiteDefModTypeEnum_FromoaSiteDefModTypeEnum(oaSiteDefModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaSiteDefModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaSiteDefModTypeEnum_doc[] =
"Type convert function for enum: oaSiteDefModTypeEnum";
                               
static PyMethodDef PyoaSiteDefModTypeEnum_method =
  {"oaSiteDefModTypeEnum",(PyCFunction)PyoaSiteDefModTypeEnum_TypeFunction,METH_VARARGS,oaSiteDefModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaSiteDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetTypeSiteDefModType");
    PyDict_SetItemString(mod_dict,"oacSetTypeSiteDefModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetWidthSiteDefModType");
    PyDict_SetItemString(mod_dict,"oacSetWidthSiteDefModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetHeightSiteDefModType");
    PyDict_SetItemString(mod_dict,"oacSetHeightSiteDefModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetSymmetrySiteDefModType");
    PyDict_SetItemString(mod_dict,"oacSetSymmetrySiteDefModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetSitePatternSiteDefModType");
    PyDict_SetItemString(mod_dict,"oacSetSitePatternSiteDefModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaSiteDefModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaSiteDefModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaSiteDefModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSiteDefType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSiteDefType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSiteDefType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSiteDefTypeObject* self = (PyoaSiteDefTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSiteDefTypeEnum)
    {
        PyParamoaSiteDefTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaSiteDefTypeEnum_Convert,&p1)) {
            self->value =  new oaSiteDefType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaSiteDefType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSiteDefType)
    {
        PyParamoaSiteDefType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSiteDefType_Convert,&p1)) {
            self->value= new oaSiteDefType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSiteDefType, Choices are:\n"
        "    (oaSiteDefTypeEnum)\n"
        "    (oaString)\n"
        "    (oaSiteDefType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSiteDefType_tp_dealloc(PyoaSiteDefTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSiteDefType_tp_repr(PyObject *ob)
{
    PyParamoaSiteDefType value;
    int convert_status=PyoaSiteDefType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[35];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaSiteDefType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSiteDefType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSiteDefType v1;
    PyParamoaSiteDefType v2;
    int convert_status1=PyoaSiteDefType_Convert(ob1,&v1);
    int convert_status2=PyoaSiteDefType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSiteDefType_Convert(PyObject* ob,PyParamoaSiteDefType* result)
{
    if (ob == NULL) return 1;
    if (PyoaSiteDefType_Check(ob)) {
        result->SetData(  ((PyoaSiteDefTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSiteDefType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSiteDefType_FromoaSiteDefType(oaSiteDefType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSiteDefType_Type.tp_alloc(&PyoaSiteDefType_Type,0);
        if (bself == NULL) return bself;
        PyoaSiteDefTypeObject* self = (PyoaSiteDefTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteDefType_getName_doc[] = 
"Class: oaSiteDefType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaSiteDefTypeEnum object.\n"
;

static PyObject*
oaSiteDefType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDefType data;
    int convert_status=PyoaSiteDefType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefTypeObject* self=(PyoaSiteDefTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteDefType_oaSiteDefTypeEnum_doc[] = 
"Class: oaSiteDefType, Function: oaSiteDefTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaSiteDefTypeEnum oaSiteDefTypeEnum() const\n"
"    Signature: operator oaSiteDefTypeEnum|simple-oaSiteDefTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaSiteDefType object into the corresponding #oaSiteDefTypeEnum value.\n"
;

static PyObject*
oaSiteDefType_oaSiteDefTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteDefType data;
    int convert_status=PyoaSiteDefType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteDefTypeObject* self=(PyoaSiteDefTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaSiteDefTypeEnum result= (data.DataCall()->operator oaSiteDefTypeEnum());
        return PyoaSiteDefTypeEnum_FromoaSiteDefTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSiteDefType_assign_doc[] = 
"Class: oaSiteDefType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSiteDefType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSiteDefType data;
  int convert_status=PyoaSiteDefType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSiteDefType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSiteDefType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSiteDefType_methodlist[] = {
    {"getName",(PyCFunction)oaSiteDefType_getName,METH_VARARGS,oaSiteDefType_getName_doc},
    {"oaSiteDefTypeEnum",(PyCFunction)oaSiteDefType_oaSiteDefTypeEnum,METH_VARARGS,oaSiteDefType_oaSiteDefTypeEnum_doc},
    {"assign",(PyCFunction)oaSiteDefType_tp_assign,METH_VARARGS,oaSiteDefType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteDefType_doc[] = 
"Class: oaSiteDefType\n"
"  The oaSiteDefType class encapsulates the enumerated values that describe the different uses of an oaSiteDef object.\n"
"  oaSiteDefTypeEnum\n"
"Constructors:\n"
"  Paramegers: (oaSiteDefTypeEnum)\n"
"    Calls: oaSiteDefType(oaSiteDefTypeEnum valueIn)\n"
"    Signature: oaSiteDefType||simple-oaSiteDefTypeEnum,\n"
"    This function constructs an instance of an oaSiteDefType class using the specified #oaSiteDefTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaSiteDefType(const oaString& name)\n"
"    Signature: oaSiteDefType||cref-oaString,\n"
"    This function constructs an instance of an oaSiteDefType class using the #oaSiteDefTypeEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaSiteDefTypeEnum.\n"
"    oacInvalidSiteDefTypeName\n"
"  Paramegers: (oaSiteDefType)\n"
"    Calls: (const oaSiteDefType&)\n"
"    Signature: oaSiteDefType||cref-oaSiteDefType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSiteDefType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSiteDefType",
    sizeof(PyoaSiteDefTypeObject),
    0,
    (destructor)oaSiteDefType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSiteDefType_tp_compare,	/* tp_compare */
    (reprfunc)oaSiteDefType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSiteDefType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSiteDefType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSiteDefType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSiteDefType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSiteDefType_Type)<0) {
      printf("** PyType_Ready failed for: oaSiteDefType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSiteDefType",
           (PyObject*)(&PyoaSiteDefType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSiteDefType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSiteDefTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaSiteDefTypeEnum_Convert(PyObject* ob,PyParamoaSiteDefTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacPadSiteDefType")==0) { result->SetData(oacPadSiteDefType); return 1;}
        if (strcasecmp(str,"oacCoreSiteDefType")==0) { result->SetData(oacCoreSiteDefType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaSiteDefTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSiteDefTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaSiteDefTypeEnum_FromoaSiteDefTypeEnum(oaSiteDefTypeEnum ob)
{
    if (ob==oacPadSiteDefType) return PyString_FromString("oacPadSiteDefType");
    if (ob==oacCoreSiteDefType) return PyString_FromString("oacCoreSiteDefType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaSiteDefTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaSiteDefTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaSiteDefTypeEnum_FromoaSiteDefTypeEnum(oaSiteDefTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaSiteDefTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaSiteDefTypeEnum_doc[] =
"Type convert function for enum: oaSiteDefTypeEnum";
                               
static PyMethodDef PyoaSiteDefTypeEnum_method =
  {"oaSiteDefTypeEnum",(PyCFunction)PyoaSiteDefTypeEnum_TypeFunction,METH_VARARGS,oaSiteDefTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaSiteDefTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacPadSiteDefType");
    PyDict_SetItemString(mod_dict,"oacPadSiteDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCoreSiteDefType");
    PyDict_SetItemString(mod_dict,"oacCoreSiteDefType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaSiteDefTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaSiteDefTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaSiteDefTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSitePattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSitePattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSitePattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSitePatternObject* self = (PyoaSitePatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaArrayBase_oaSiteRef*)  new oaSitePattern();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->value = (oaArrayBase_oaSiteRef*)  new oaSitePattern(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSitePattern)
    {
        PyParamoaSitePattern p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaSitePattern_Convert,&p1)) {
            self->value = (oaArrayBase_oaSiteRef*)  new oaSitePattern(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSitePattern, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaSitePattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSitePattern_tp_dealloc(PyoaSitePatternObject* self)
{
    if (!self->borrow) {
        delete (oaSitePattern*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSitePattern_tp_repr(PyObject *ob)
{
    PyParamoaSitePattern value;
    int convert_status=PyoaSitePattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[35];
    sprintf(buffer,"<oaSitePattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSitePattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSitePattern v1;
    PyParamoaSitePattern v2;
    int convert_status1=PyoaSitePattern_Convert(ob1,&v1);
    int convert_status2=PyoaSitePattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSitePattern_Convert(PyObject* ob,PyParamoaSitePattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaSitePattern_Check(ob)) {
        result->SetData( (oaSitePattern*) ((PyoaSitePatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSitePattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSitePattern_FromoaSitePattern(oaSitePattern* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSitePattern_Type.tp_alloc(&PyoaSitePattern_Type,0);
        if (bself == NULL) return bself;
        PyoaSitePatternObject* self = (PyoaSitePatternObject*)bself;
        self->value = (oaArrayBase_oaSiteRef*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSitePattern_doc[] = 
"Class: oaSitePattern\n"
"  The oaSitePattern class implements an array of oaSiteRef values. The allocated size of the oaSitePattern can be different than the number of values actually stored. This is useful when the oaSitePattern is used repeatedly, because it reduces the need to re-allocate the array.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSitePattern()\n"
"    Signature: oaSitePattern||simple-oaUInt4,\n"
"    This function constructs an oaSitePattern object, allocating storage for sizeOf oaSiteRef elements.\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaSitePattern(oaUInt4 size)\n"
"    Signature: oaSitePattern||simple-oaUInt4,\n"
"    This function constructs an oaSitePattern object, allocating storage for sizeOf oaSiteRef elements.\n"
"  Paramegers: (oaSitePattern)\n"
"    Calls: oaSitePattern(const oaSitePattern& pattern)\n"
"    Signature: oaSitePattern||cref-oaSitePattern,\n"
"    This function constructs an oaSitePattern object, creating a copy of the specified oaSitePattern.\n"
"  Paramegers: (oaSitePattern)\n"
"    Calls: (const oaSitePattern&)\n"
"    Signature: oaSitePattern||cref-oaSitePattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSitePattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSitePattern",
    sizeof(PyoaSitePatternObject),
    0,
    (destructor)oaSitePattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSitePattern_tp_compare,	/* tp_compare */
    (reprfunc)oaSitePattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSitePattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    0,					/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaArray_oaSiteRef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSitePattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSitePattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSitePattern_Type)<0) {
      printf("** PyType_Ready failed for: oaSitePattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSitePattern",
           (PyObject*)(&PyoaSitePattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSitePattern\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSiteRef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSiteRef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSiteRef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSiteRefObject* self = (PyoaSiteRefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaSiteRef();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTransform)
    {
        PyParamoaString p1;
        PyParamoaTransform p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTransform_Convert,&p2)) {
            self->value =  new oaSiteRef(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSiteRef)
    {
        PyParamoaSiteRef p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaSiteRef_Convert,&p1)) {
            self->value =  new oaSiteRef(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSiteRef, Choices are:\n"
        "    ()\n"
        "    (oaString,oaTransform)\n"
        "    (oaSiteRef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSiteRef_tp_dealloc(PyoaSiteRefObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSiteRef_tp_repr(PyObject *ob)
{
    PyParamoaSiteRef value;
    int convert_status=PyoaSiteRef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[31];
    sprintf(buffer,"<oaSiteRef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSiteRef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSiteRef v1;
    PyParamoaSiteRef v2;
    int convert_status1=PyoaSiteRef_Convert(ob1,&v1);
    int convert_status2=PyoaSiteRef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    if (v1.Data()==v2.Data()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSiteRef_Convert(PyObject* ob,PyParamoaSiteRef* result)
{
    if (ob == NULL) return 1;
    if (PyoaSiteRef_Check(ob)) {
        result->SetData(  ((PyoaSiteRefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSiteRef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSiteRef_FromoaSiteRef(oaSiteRef* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSiteRef_Type.tp_alloc(&PyoaSiteRef_Type,0);
        if (bself == NULL) return bself;
        PyoaSiteRefObject* self = (PyoaSiteRefObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaSiteRef_FromoaSiteRef(const oaSiteRef& data)
{
    PyObject* bself = PyoaSiteRef_Type.tp_alloc(&PyoaSiteRef_Type,0);
    if (bself == NULL) return bself;
    PyoaSiteRefObject* self = (PyoaSiteRefObject*)bself;
    self->value =  new oaSiteRef(data);
    self->borrow = 0;
    self->locks = NULL;
    return bself;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteRef_siteName_doc[] = 
"Class: oaSiteRef, Function: siteName\n"
"  Paramegers: ()\n"
"    Calls: oaString& siteName()\n"
"    Signature: siteName|ref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns a reference to the siteName value of this oaSiteRef object.\n"
;

static PyObject*
oaSiteRef_siteName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteRef data;
    int convert_status=PyoaSiteRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteRefObject* self=(PyoaSiteRefObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString* result=&(data.DataCall()->siteName());
        return PyoaString_FromoaString(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSiteRef_transform_doc[] = 
"Class: oaSiteRef, Function: transform\n"
"  Paramegers: ()\n"
"    Calls: oaTransform& transform()\n"
"    Signature: transform|ref-oaTransform|\n"
"    BrowseData: 1\n"
"    This function returns a reference to the transform of this oaSiteRef object.\n"
;

static PyObject*
oaSiteRef_transform(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSiteRef data;
    int convert_status=PyoaSiteRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSiteRefObject* self=(PyoaSiteRefObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTransform* result=&(data.DataCall()->transform());
        return PyoaTransform_FromoaTransform(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSiteRef_assign_doc[] = 
"Class: oaSiteRef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSiteRef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSiteRef data;
  int convert_status=PyoaSiteRef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSiteRef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSiteRef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSiteRef_methodlist[] = {
    {"siteName",(PyCFunction)oaSiteRef_siteName,METH_VARARGS,oaSiteRef_siteName_doc},
    {"transform",(PyCFunction)oaSiteRef_transform,METH_VARARGS,oaSiteRef_transform_doc},
    {"assign",(PyCFunction)oaSiteRef_tp_assign,METH_VARARGS,oaSiteRef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSiteRef_doc[] = 
"Class: oaSiteRef\n"
"  The oaSiteRef class implements a reference by name to a site and its placement. This is used for array sites, where each site that is part of an array site has its own placement.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSiteRef()\n"
"    Signature: oaSiteRef||\n"
"    Constructor oaSiteRef\n"
"  Paramegers: (oaString,oaTransform)\n"
"    Calls: oaSiteRef(const oaString& siteName,const oaTransform& xform)\n"
"    Signature: oaSiteRef||cref-oaString,cref-oaTransform,\n"
"    This function constructs the oaSiteRef object.\n"
"  Paramegers: (oaSiteRef)\n"
"    Calls: oaSiteRef(const oaSiteRef& siteRefIn)\n"
"    Signature: oaSiteRef||cref-oaSiteRef,\n"
"    This is the copy constructor for the oaSiteRef utility object.\n"
"    siteRefIn\n"
"    the siteRef to be copied\n"
"  Paramegers: (oaSiteRef)\n"
"    Calls: (const oaSiteRef&)\n"
"    Signature: oaSiteRef||cref-oaSiteRef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSiteRef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSiteRef",
    sizeof(PyoaSiteRefObject),
    0,
    (destructor)oaSiteRef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSiteRef_tp_compare,	/* tp_compare */
    (reprfunc)oaSiteRef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSiteRef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSiteRef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSiteRef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSiteRef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSiteRef_Type)<0) {
      printf("** PyType_Ready failed for: oaSiteRef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSiteRef",
           (PyObject*)(&PyoaSiteRef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSiteRef\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaSiteRef
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSiteRef_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSiteRef_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaSiteRef_ArrayObject* self = (PyoaSiteRef_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaSiteRef_Array) */
    {
        PyParamoaSiteRef_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSiteRef_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSiteRef_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaSiteRef_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSiteRef_Array_dealloc(PyObject* gself)
{
    PyoaSiteRef_ArrayObject* self = (PyoaSiteRef_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaSiteRef_Array_str(PyObject *ob)
{
    PyParamoaSiteRef_Array value;
    int convert_status=PyoaSiteRef_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaSiteRef_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaSiteRef_Array_repr(PyObject *ob)
{
    PyParamoaSiteRef_Array value;
    int convert_status=PyoaSiteRef_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaSiteRef_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaSiteRef_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSiteRef_Array p1;
    PyParamoaSiteRef_Array p2;
    int s1=PyoaSiteRef_Array_Convert(ob1,&p1);
    int s2=PyoaSiteRef_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaSiteRef_Array_CreateList(p1);
    PyObject* l2=PyoaSiteRef_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaSiteRef_Array_Convert(PyObject* ob,PyParamoaSiteRef_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaSiteRef_Array_Check(ob)) {
    PyoaSiteRef_ArrayObject* self = (PyoaSiteRef_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaSiteRef data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaSiteRef_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaSiteRef data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaSiteRef_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaSiteRef_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaSiteRef_Array_FromoaSiteRef_Array(const oaSiteRef_Array& value)
{
  PyObject* gself = PyoaSiteRef_Array_Type.tp_alloc(&PyoaSiteRef_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaSiteRef_ArrayObject* self = (PyoaSiteRef_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaSiteRef_Array_FromoaSiteRef_Array(PyTypeoaSiteRef* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaSiteRef_Array_Type.tp_alloc(&PyoaSiteRef_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaSiteRef_ArrayObject* self = (PyoaSiteRef_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaSiteRef_Array_CreateList(PyParamoaSiteRef_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaSiteRef_FromoaSiteRef(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaSiteRef_Array_assign_doc[] = 
"Class: oaSiteRef_Array, Function: assign\n"
"  Paramegers: (oaSiteRef_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaSiteRef_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaSiteRef_ArrayObject* self=(PyoaSiteRef_ArrayObject*)ob;
  try {
    PyParamoaSiteRef_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSiteRef_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaSiteRef_Array_list_doc[] = 
"Class: oaSiteRef_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaSiteRef_Array_list(PyObject* ob, PyObject *args)
{
  PyoaSiteRef_ArrayObject* self=(PyoaSiteRef_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaSiteRef_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaSiteRef_Array_methodlist[] = {
    {"assign",(PyCFunction)oaSiteRef_Array_assign,METH_VARARGS,oaSiteRef_Array_assign_doc},
    {"list",(PyCFunction)oaSiteRef_Array_list,METH_VARARGS,oaSiteRef_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaSiteRef_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaSiteRef_ArrayObject* self=(PyoaSiteRef_ArrayObject*)ob;
  try {
    PyParamoaSiteRef_Array data;
    int convert_status=PyoaSiteRef_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaSiteRef_FromoaSiteRef(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaSiteRef_Array_index_get_length(PyObject* ob)
{
    PyParamoaSiteRef_Array data;
    int convert_status=PyoaSiteRef_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaSiteRef_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaSiteRef_Array data;
    PyParamoaSiteRef dataitem;
    int convert_status=PyoaSiteRef_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaSiteRef_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaSiteRef_Array_doc[] =
"Class: oaSiteRef_Array\n"
"  The oaSiteRef_Array utility class provides an array of oaSiteRef.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSiteRef_Array()\n"
"    Signature: oaSiteRef_Array||\n"
"    This is the default constructor for the oaSiteRef_Array class. This constructor creates an empty oaSiteRef_Array.\n"
"  Paramegers: (oaSiteRef_Array)\n"
"    Calls: (const oaSiteRef_Array&)\n"
"    Signature: oaSiteRef_Array||cref-oaSiteRef_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaSiteRef_Array_as_sequence = {
    (Pyoa_inquiry)oaSiteRef_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaSiteRef_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaSiteRef_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaSiteRef_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSiteRef_Array",
    sizeof(PyoaSiteRef_ArrayObject),
    0,
    oaSiteRef_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaSiteRef_Array_compare,    /* tp_compare */
    oaSiteRef_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaSiteRef_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaSiteRef_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSiteRef_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaSiteRef_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaSiteRef_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaSiteRef_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSiteRef_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaSiteRef_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaSiteRef_Array",
           (PyObject*)(&PyoaSiteRef_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSiteRef_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSizeOp
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSizeOp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSizeOp_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSizeOpObject* self = (PyoaSizeOpObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSizeOpEnum)
    {
        PyParamoaSizeOpEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaSizeOpEnum_Convert,&p1)) {
            self->value =  new oaSizeOp(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaSizeOp(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSizeOp)
    {
        PyParamoaSizeOp p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSizeOp_Convert,&p1)) {
            self->value= new oaSizeOp(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSizeOp, Choices are:\n"
        "    (oaSizeOpEnum)\n"
        "    (oaString)\n"
        "    (oaSizeOp)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSizeOp_tp_dealloc(PyoaSizeOpObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSizeOp_tp_repr(PyObject *ob)
{
    PyParamoaSizeOp value;
    int convert_status=PyoaSizeOp_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[30];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaSizeOp::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSizeOp_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSizeOp v1;
    PyParamoaSizeOp v2;
    int convert_status1=PyoaSizeOp_Convert(ob1,&v1);
    int convert_status2=PyoaSizeOp_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSizeOp_Convert(PyObject* ob,PyParamoaSizeOp* result)
{
    if (ob == NULL) return 1;
    if (PyoaSizeOp_Check(ob)) {
        result->SetData(  ((PyoaSizeOpObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSizeOp Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSizeOp_FromoaSizeOp(oaSizeOp* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSizeOp_Type.tp_alloc(&PyoaSizeOp_Type,0);
        if (bself == NULL) return bself;
        PyoaSizeOpObject* self = (PyoaSizeOpObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSizeOp_getName_doc[] = 
"Class: oaSizeOp, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaSizeOpEnum object.\n"
;

static PyObject*
oaSizeOp_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSizeOp data;
    int convert_status=PyoaSizeOp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSizeOpObject* self=(PyoaSizeOpObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSizeOp_oaSizeOpEnum_doc[] = 
"Class: oaSizeOp, Function: oaSizeOpEnum\n"
"  Paramegers: ()\n"
"    Calls: oaSizeOpEnum oaSizeOpEnum() const\n"
"    Signature: operator oaSizeOpEnum|simple-oaSizeOpEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaSizeOp object into the corresponding #oaSizeOpEnum value.\n"
;

static PyObject*
oaSizeOp_oaSizeOpEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSizeOp data;
    int convert_status=PyoaSizeOp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSizeOpObject* self=(PyoaSizeOpObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaSizeOpEnum result= (data.DataCall()->operator oaSizeOpEnum());
        return PyoaSizeOpEnum_FromoaSizeOpEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSizeOp_assign_doc[] = 
"Class: oaSizeOp, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSizeOp_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSizeOp data;
  int convert_status=PyoaSizeOp_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSizeOp p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSizeOp_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSizeOp_methodlist[] = {
    {"getName",(PyCFunction)oaSizeOp_getName,METH_VARARGS,oaSizeOp_getName_doc},
    {"oaSizeOpEnum",(PyCFunction)oaSizeOp_oaSizeOpEnum,METH_VARARGS,oaSizeOp_oaSizeOpEnum_doc},
    {"assign",(PyCFunction)oaSizeOp_tp_assign,METH_VARARGS,oaSizeOp_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSizeOp_doc[] = 
"Class: oaSizeOp\n"
"  The oaSizeOp class encapsulates the enumerated values that describe the different uses of a sized layer object.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"  oaSizeOpEnum\n"
"Constructors:\n"
"  Paramegers: (oaSizeOpEnum)\n"
"    Calls: oaSizeOp(oaSizeOpEnum valueIn)\n"
"    Signature: oaSizeOp||simple-oaSizeOpEnum,\n"
"    This function constructs an instance of an oaSizeOp class using the specified #oaSizeOpEnum value.\n"
"    valueIn\n"
"    type of size operation\n"
"  Paramegers: (oaString)\n"
"    Calls: oaSizeOp(const oaString& name)\n"
"    Signature: oaSizeOp||cref-oaString,\n"
"    This function constructs an instance of an oaSizeOp class using the #oaSizeOpEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaSizeOpEnum.\n"
"    name\n"
"    name of size operation\n"
"    oacInvalidSizeOpName\n"
"  Paramegers: (oaSizeOp)\n"
"    Calls: (const oaSizeOp&)\n"
"    Signature: oaSizeOp||cref-oaSizeOp,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSizeOp_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSizeOp",
    sizeof(PyoaSizeOpObject),
    0,
    (destructor)oaSizeOp_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSizeOp_tp_compare,	/* tp_compare */
    (reprfunc)oaSizeOp_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSizeOp_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSizeOp_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSizeOp_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSizeOp_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSizeOp_Type)<0) {
      printf("** PyType_Ready failed for: oaSizeOp\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSizeOp",
           (PyObject*)(&PyoaSizeOp_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSizeOp\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSizeOpEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaSizeOpEnum_Convert(PyObject* ob,PyParamoaSizeOpEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacGrowSizeOp")==0) { result->SetData(oacGrowSizeOp); return 1;}
        if (strcasecmp(str,"oacShrinkSizeOp")==0) { result->SetData(oacShrinkSizeOp); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaSizeOpEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSizeOpEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaSizeOpEnum_FromoaSizeOpEnum(oaSizeOpEnum ob)
{
    if (ob==oacGrowSizeOp) return PyString_FromString("oacGrowSizeOp");
    if (ob==oacShrinkSizeOp) return PyString_FromString("oacShrinkSizeOp");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaSizeOpEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaSizeOpEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaSizeOpEnum_FromoaSizeOpEnum(oaSizeOpEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaSizeOpEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaSizeOpEnum_doc[] =
"Type convert function for enum: oaSizeOpEnum";
                               
static PyMethodDef PyoaSizeOpEnum_method =
  {"oaSizeOpEnum",(PyCFunction)PyoaSizeOpEnum_TypeFunction,METH_VARARGS,oaSizeOpEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaSizeOpEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacGrowSizeOp");
    PyDict_SetItemString(mod_dict,"oacGrowSizeOp",value);
    Py_DECREF(value);
    value=PyString_FromString("oacShrinkSizeOp");
    PyDict_SetItemString(mod_dict,"oacShrinkSizeOp",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaSizeOpEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaSizeOpEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaSizeOpEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSizedLayer
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSizedLayer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSizedLayer_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSizedLayerObject* self = (PyoaSizedLayerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSizedLayer)
    {
        PyParamoaSizedLayer p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSizedLayer_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSizedLayer, Choices are:\n"
        "    (oaSizedLayer)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSizedLayer_tp_dealloc(PyoaSizedLayerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSizedLayer_tp_repr(PyObject *ob)
{
    PyParamoaSizedLayer value;
    int convert_status=PyoaSizedLayer_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaSizedLayer::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaString sresult;
        value.DataCall()->getName(sresult);
    
        char addr[34];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaSizedLayer::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSizedLayer_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSizedLayer v1;
    PyParamoaSizedLayer v2;
    int convert_status1=PyoaSizedLayer_Convert(ob1,&v1);
    int convert_status2=PyoaSizedLayer_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSizedLayer_Convert(PyObject* ob,PyParamoaSizedLayer* result)
{
    if (ob == NULL) return 1;
    if (PyoaSizedLayer_Check(ob)) {
        result->SetData( (oaSizedLayer**) ((PyoaSizedLayerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSizedLayer Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSizedLayer_FromoaSizedLayer(oaSizedLayer** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaSizedLayer* data=*value;
        PyObject* bself = PyoaSizedLayer_Type.tp_alloc(&PyoaSizedLayer_Type,0);
        if (bself == NULL) return bself;
        PyoaSizedLayerObject* self = (PyoaSizedLayerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaSizedLayer_FromoaSizedLayer(oaSizedLayer* data)
{
    if (data) {
       PyObject* bself = PyoaSizedLayer_Type.tp_alloc(&PyoaSizedLayer_Type,0);
       if (bself == NULL) return bself;
       PyoaSizedLayerObject* self = (PyoaSizedLayerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSizedLayer_getLayer_doc[] = 
"Class: oaSizedLayer, Function: getLayer\n"
"  Paramegers: ()\n"
"    Calls: oaLayer* getLayer() const\n"
"    Signature: getLayer|ptr-oaLayer|\n"
"    BrowseData: 1\n"
"    This function returns a pointer to the layer from which the sized layer was created.\n"
;

static PyObject*
oaSizedLayer_getLayer(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSizedLayer data;
    int convert_status=PyoaSizedLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSizedLayerObject* self=(PyoaSizedLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerp result= (data.DataCall()->getLayer());
        return PyoaLayer_FromoaLayer(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSizedLayer_getOperation_doc[] = 
"Class: oaSizedLayer, Function: getOperation\n"
"  Paramegers: ()\n"
"    Calls: oaSizeOp getOperation() const\n"
"    Signature: getOperation|simple-oaSizeOp|\n"
"    BrowseData: 1\n"
"    This function returns the sizeOp used to create this SizedLayer.\n"
;

static PyObject*
oaSizedLayer_getOperation(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSizedLayer data;
    int convert_status=PyoaSizedLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSizedLayerObject* self=(PyoaSizedLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaSizeOp* result= new oaSizeOp(data.DataCall()->getOperation());
        return PyoaSizeOp_FromoaSizeOp(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSizedLayer_getValue_doc[] = 
"Class: oaSizedLayer, Function: getValue\n"
"  Paramegers: ()\n"
"    Calls: oaDist getValue() const\n"
"    Signature: getValue|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the value used to create this SizedLayer.\n"
;

static PyObject*
oaSizedLayer_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSizedLayer data;
    int convert_status=PyoaSizedLayer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSizedLayerObject* self=(PyoaSizedLayerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getValue());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSizedLayer_isNull_doc[] =
"Class: oaSizedLayer, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaSizedLayer_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaSizedLayer data;
    int convert_status=PyoaSizedLayer_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaSizedLayer_assign_doc[] = 
"Class: oaSizedLayer, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSizedLayer_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSizedLayer data;
  int convert_status=PyoaSizedLayer_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSizedLayer p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSizedLayer_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSizedLayer_methodlist[] = {
    {"getLayer",(PyCFunction)oaSizedLayer_getLayer,METH_VARARGS,oaSizedLayer_getLayer_doc},
    {"getOperation",(PyCFunction)oaSizedLayer_getOperation,METH_VARARGS,oaSizedLayer_getOperation_doc},
    {"getValue",(PyCFunction)oaSizedLayer_getValue,METH_VARARGS,oaSizedLayer_getValue_doc},
    {"isNull",(PyCFunction)oaSizedLayer_tp_isNull,METH_VARARGS,oaSizedLayer_isNull_doc},
    {"assign",(PyCFunction)oaSizedLayer_tp_assign,METH_VARARGS,oaSizedLayer_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSizedLayer_doc[] = 
"Class: oaSizedLayer\n"
"  The functionality provided by oaSizedLayer is now available using oaDerivedLayer . Specifically, in OpenAccess 2.2.0, to create a derived layer that represents layer metal1 sized up by .001 um you created an oaSizedLayer with an operation of oacGrowSizeOp and an oaValue of 1 (assuming 1000 DBU per UU and user units of microns). With the availability of the more flexible mechanism provided by oaDerivedLayerParams, an oaDerivedLayer can be used to represent oaSIzedLayers. Using the example cited above, you create an oaDerivedLayer with the following attributes:\n"
"  Layer1 = metal1 layer\n"
"  operation = oacGrowLayerOp operation\n"
"  an oaDerivedLayerParam of type \"distance\" with a value of 1\n"
"  New applications should use oaDerivedLayers to represent sizing operations rather than use oaSizedLayer.\n"
"Constructors:\n"
"  Paramegers: (oaSizedLayer)\n"
"    Calls: (const oaSizedLayer&)\n"
"    Signature: oaSizedLayer||cref-oaSizedLayer,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSizedLayer_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSizedLayer",
    sizeof(PyoaSizedLayerObject),
    0,
    (destructor)oaSizedLayer_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSizedLayer_tp_compare,	/* tp_compare */
    (reprfunc)oaSizedLayer_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSizedLayer_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSizedLayer_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaLayer_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSizedLayer_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSizedLayer_static_create_doc[] = 
"Class: oaSizedLayer, Function: create\n"
"  Paramegers: (oaLayer,oaSizeOp,oaDist,oaString,oaLayerNum)\n"
"    Calls: oaSizedLayer* create(oaLayer* layer,oaSizeOp operation,oaDist value,const oaString& name,oaLayerNum number)\n"
"    Signature: create|ptr-oaSizedLayer|ptr-oaLayer,simple-oaSizeOp,simple-oaDist,cref-oaString,simple-oaLayerNum,\n"
"    This functions creates a sized layer with the specified number, name, layer, operation and value. The combination must be unique.\n"
"    layer\n"
"    The layer to size\n"
"    operation\n"
"    The sizing operation (grow, shrink)\n"
"    value\n"
"    The amount to size the layer\n"
"    name\n"
"    The name of the layer to create\n"
"    number\n"
"    The number of the layer to create\n"
"    oacLayerNumberExists\n"
"    oacLayerNameExists\n"
"    oacSizedLayerExists\n"
;

static PyObject*
oaSizedLayer_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaLayer p1;
    PyParamoaSizeOp p2;
    PyParamoaDist p3;
    PyParamoaString p4;
    PyParamoaLayerNum p5;
    if (PyArg_ParseTuple(args,"O&O&O&O&O&",
          &PyoaLayer_Convert,&p1,
          &PyoaSizeOp_Convert,&p2,
          &PyoaDist_Convert,&p3,
          &PyoaString_Convert,&p4,
          &PyoaLayerNum_Convert,&p5)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaSizedLayerp result= (oaSizedLayer::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
        return PyoaSizedLayer_FromoaSizedLayer(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSizedLayer_static_find_doc[] = 
"Class: oaSizedLayer, Function: find\n"
"  Paramegers: (oaTech,oaString)\n"
"    Calls: oaSizedLayer* find(const oaTech* tech,const oaString& name)\n"
"    Signature: find|ptr-oaSizedLayer|cptr-oaTech,cref-oaString,\n"
"    This function searches the specified tech looking for a sized layer with the specified name. If the layer is found, a pointer to the sized layer object is returned; otherwise NULL is returned.\n"
"    tech\n"
"    The technology database to search\n"
"    name\n"
"    The layer name to find\n"
"  Paramegers: (oaTech,oaLayerNum)\n"
"    Calls: oaSizedLayer* find(const oaTech* tech,oaLayerNum number)\n"
"    Signature: find|ptr-oaSizedLayer|cptr-oaTech,simple-oaLayerNum,\n"
"    This function searches the specified tech looking for a sized layer with the specified number. If the layer is found, a pointer to the sized layer object is returned; otherwise NULL is returned.\n"
"    tech\n"
"    The technology database to search\n"
"    number\n"
"    The layer number to find\n"
"  Paramegers: (oaLayer,oaSizeOp,oaDist)\n"
"    Calls: oaSizedLayer* find(const oaLayer* layer,oaSizeOp operation,oaDist value)\n"
"    Signature: find|ptr-oaSizedLayer|cptr-oaLayer,simple-oaSizeOp,simple-oaDist,\n"
"    This function searches the technology database associated with the given layer looking for a sized layer with the specified layer derivation. For this variant of find function, the given layer must be in the same technology database, and the oaSizedLayer lookup is local to that database.\n"
"    If the sized layer is found, a pointer to the sized layer object is returned. Otherwise, NULL is returned.\n"
"    layer\n"
"    The layer that was sized\n"
"    operation\n"
"    The sizing operation (grow, shrink)\n"
"    value\n"
"    The amount that the layer was sized\n"
;

static PyObject*
oaSizedLayer_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaTech,oaString)
    {
        PyParamoaTech p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSizedLayerp result= (oaSizedLayer::find(p1.Data(),p2.Data()));
            return PyoaSizedLayer_FromoaSizedLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaTech,oaLayerNum)
    {
        PyParamoaTech p1;
        PyParamoaLayerNum p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTech_Convert,&p1,
              &PyoaLayerNum_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSizedLayerp result= (oaSizedLayer::find(p1.Data(),p2.Data()));
            return PyoaSizedLayer_FromoaSizedLayer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaLayer,oaSizeOp,oaDist)
    {
        PyParamoaLayer p1;
        PyParamoaSizeOp p2;
        PyParamoaDist p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaLayer_Convert,&p1,
              &PyoaSizeOp_Convert,&p2,
              &PyoaDist_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSizedLayerp result= (oaSizedLayer::find(p1.Data(),p2.Data(),p3.Data()));
            return PyoaSizedLayer_FromoaSizedLayer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSizedLayer, function: find, Choices are:\n"
        "    (oaTech,oaString)\n"
        "    (oaTech,oaLayerNum)\n"
        "    (oaLayer,oaSizeOp,oaDist)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaSizedLayer_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaSizedLayer_static_create,METH_VARARGS,oaSizedLayer_static_create_doc},
    {"static_find",(PyCFunction)oaSizedLayer_static_find,METH_VARARGS,oaSizedLayer_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSizedLayer_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSizedLayer_Type)<0) {
      printf("** PyType_Ready failed for: oaSizedLayer\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSizedLayer",
           (PyObject*)(&PyoaSizedLayer_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSizedLayer\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaSizedLayer_Type.tp_dict;
    for(method=oaSizedLayer_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSnapBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSnapBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSnapBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSnapBoundaryObject* self = (PyoaSnapBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSnapBoundary)
    {
        PyParamoaSnapBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSnapBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSnapBoundary, Choices are:\n"
        "    (oaSnapBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSnapBoundary_tp_dealloc(PyoaSnapBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSnapBoundary_tp_repr(PyObject *ob)
{
    PyParamoaSnapBoundary value;
    int convert_status=PyoaSnapBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[36];
    sprintf(buffer,"<oaSnapBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSnapBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSnapBoundary v1;
    PyParamoaSnapBoundary v2;
    int convert_status1=PyoaSnapBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaSnapBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSnapBoundary_Convert(PyObject* ob,PyParamoaSnapBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaSnapBoundary_Check(ob)) {
        result->SetData( (oaSnapBoundary**) ((PyoaSnapBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSnapBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSnapBoundary_FromoaSnapBoundary(oaSnapBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaSnapBoundary* data=*value;
        PyObject* bself = PyoaSnapBoundary_Type.tp_alloc(&PyoaSnapBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaSnapBoundaryObject* self = (PyoaSnapBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaSnapBoundary_FromoaSnapBoundary(oaSnapBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaSnapBoundary_Type.tp_alloc(&PyoaSnapBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaSnapBoundaryObject* self = (PyoaSnapBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSnapBoundary_doc[] = 
"Class: oaSnapBoundary\n"
"  The oaSnapBoundary class is used for the designs that implement standard cells. An oaSnapBoundary must be a rectangle. Placement tools use the snapBoundary to place instances of the design in rows, abutting the snapBoundary edges and aligning the snapBoundary corners.\n"
"  oaSnapBoundaries are optional adjuncts to oaPRBoundaries. If the PRBoundary is rectangular then it will suffice for these purposes and no SnapBoundary need be created. oaSnapBoundaries are needed for cells with rectilinear (but non-rectangular) PRBoundaries.\n"
"Constructors:\n"
"  Paramegers: (oaSnapBoundary)\n"
"    Calls: (const oaSnapBoundary&)\n"
"    Signature: oaSnapBoundary||cref-oaSnapBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSnapBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSnapBoundary",
    sizeof(PyoaSnapBoundaryObject),
    0,
    (destructor)oaSnapBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSnapBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaSnapBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSnapBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    0,					/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBoundary_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSnapBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSnapBoundary_static_create_doc[] = 
"Class: oaSnapBoundary, Function: create\n"
"  Paramegers: (oaBlock,oaPointArray)\n"
"    Calls: oaSnapBoundary* create(oaBlock* block,const oaPointArray& bBox)\n"
"    Signature: create|ptr-oaSnapBoundary|ptr-oaBlock,cref-oaPointArray,cptr-oaString,\n"
"    This function creates a new snap boundary object in the specified design with the specified attributes.\n"
"    Note: The order of the points actually set on the oaSnapBoundary is not guaranteed to be the same as the order of points inbBox passed to the create() function. Consequently, the order of points returned by a subsequent oaSnapBoundary::getPoints() may be different from the order of points specified in bBox .\n"
"    block\n"
"    The block in which to create the snap boundary\n"
"    bBox\n"
"    The bounding box of the snap boundary\n"
"    edgeNames\n"
"    The boundary edge names; if omitted, the edges are automatically named, using the form EDGE_ n , where n starts at zero and increments by one\n"
"    oacBoundaryHasExtraPoints\n"
"    oacSnapBoundaryExists\n"
"    oacSnapBoundaryNotRectangle\n"
"  Paramegers: (oaBlock,oaPointArray,[oaString])\n"
"    Calls: oaSnapBoundary* create(oaBlock* block,const oaPointArray& bBox,const oaString* edgeNames)\n"
"    Signature: create|ptr-oaSnapBoundary|ptr-oaBlock,cref-oaPointArray,cptr-oaString,\n"
"    This function creates a new snap boundary object in the specified design with the specified attributes.\n"
"    Note: The order of the points actually set on the oaSnapBoundary is not guaranteed to be the same as the order of points inbBox passed to the create() function. Consequently, the order of points returned by a subsequent oaSnapBoundary::getPoints() may be different from the order of points specified in bBox .\n"
"    block\n"
"    The block in which to create the snap boundary\n"
"    bBox\n"
"    The bounding box of the snap boundary\n"
"    edgeNames\n"
"    The boundary edge names; if omitted, the edges are automatically named, using the form EDGE_ n , where n starts at zero and increments by one\n"
"    oacBoundaryHasExtraPoints\n"
"    oacSnapBoundaryExists\n"
"    oacSnapBoundaryNotRectangle\n"
;

static PyObject*
oaSnapBoundary_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaPointArray)
    {
        PyParamoaBlock p1;
        PyParamoaPointArray p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaPointArray_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaSnapBoundaryp result= (oaSnapBoundary::create(p1.Data(),p2.Data()));
            return PyoaSnapBoundary_FromoaSnapBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaPointArray,[oaString])
    {
        PyParamoaBlock p1;
        PyParamoaPointArray p2;
        PyParamoaString_Array p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaPointArray_Convert,&p2,
              &PyoaString_Array_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!(p2.Data().getNumElements()==p3.Len())) {
                PyErr_SetString(PyExc_TypeError,
                    "number of edges does not match number of points");
                return NULL;
            }
            oaSnapBoundaryp result= (oaSnapBoundary::create(p1.Data(),p2.Data(),p3.Data()));
            return PyoaSnapBoundary_FromoaSnapBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSnapBoundary, function: create, Choices are:\n"
        "    (oaBlock,oaPointArray)\n"
        "    (oaBlock,oaPointArray,[oaString])\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSnapBoundary_static_find_doc[] = 
"Class: oaSnapBoundary, Function: find\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaSnapBoundary* find(const oaBlock* block)\n"
"    Signature: find|ptr-oaSnapBoundary|cptr-oaBlock,\n"
"    This function searches the specified block for a snap boundary. If found, the boundary is returned. Otherwise, NULL is returned.\n"
;

static PyObject*
oaSnapBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaSnapBoundaryp result= (oaSnapBoundary::find(p1.Data()));
        return PyoaSnapBoundary_FromoaSnapBoundary(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaSnapBoundary_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaSnapBoundary_static_create,METH_VARARGS,oaSnapBoundary_static_create_doc},
    {"static_find",(PyCFunction)oaSnapBoundary_static_find,METH_VARARGS,oaSnapBoundary_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSnapBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSnapBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaSnapBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSnapBoundary",
           (PyObject*)(&PyoaSnapBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSnapBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaSnapBoundary_Type.tp_dict;
    for(method=oaSnapBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSource
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSource_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSource_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSourceObject* self = (PyoaSourceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaSourceEnum)
    {
        PyParamoaSourceEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaSourceEnum_Convert,&p1)) {
            self->value =  new oaSource(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaSource(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSource)
    {
        PyParamoaSource p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSource_Convert,&p1)) {
            self->value= new oaSource(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSource, Choices are:\n"
        "    (oaSourceEnum)\n"
        "    (oaString)\n"
        "    (oaSource)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSource_tp_dealloc(PyoaSourceObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSource_tp_repr(PyObject *ob)
{
    PyParamoaSource value;
    int convert_status=PyoaSource_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[30];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaSource::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSource_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSource v1;
    PyParamoaSource v2;
    int convert_status1=PyoaSource_Convert(ob1,&v1);
    int convert_status2=PyoaSource_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSource_Convert(PyObject* ob,PyParamoaSource* result)
{
    if (ob == NULL) return 1;
    if (PyoaSource_Check(ob)) {
        result->SetData(  ((PyoaSourceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSource Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSource_FromoaSource(oaSource* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSource_Type.tp_alloc(&PyoaSource_Type,0);
        if (bself == NULL) return bself;
        PyoaSourceObject* self = (PyoaSourceObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSource_getName_doc[] = 
"Class: oaSource, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaSourceEnum object.\n"
;

static PyObject*
oaSource_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSource data;
    int convert_status=PyoaSource_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSourceObject* self=(PyoaSourceObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSource_oaSourceEnum_doc[] = 
"Class: oaSource, Function: oaSourceEnum\n"
"  Paramegers: ()\n"
"    Calls: oaSourceEnum oaSourceEnum() const\n"
"    Signature: operator oaSourceEnum|simple-oaSourceEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaSource object into the corresponding #oaSourceEnum value.\n"
;

static PyObject*
oaSource_oaSourceEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSource data;
    int convert_status=PyoaSource_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSourceObject* self=(PyoaSourceObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaSourceEnum result= (data.DataCall()->operator oaSourceEnum());
        return PyoaSourceEnum_FromoaSourceEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSource_assign_doc[] = 
"Class: oaSource, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSource_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSource data;
  int convert_status=PyoaSource_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSource p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSource_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSource_methodlist[] = {
    {"getName",(PyCFunction)oaSource_getName,METH_VARARGS,oaSource_getName_doc},
    {"oaSourceEnum",(PyCFunction)oaSource_oaSourceEnum,METH_VARARGS,oaSource_oaSourceEnum_doc},
    {"assign",(PyCFunction)oaSource_tp_assign,METH_VARARGS,oaSource_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSource_doc[] = 
"Class: oaSource\n"
"  The oaSource class encapsulates the enumerated values that describe the different sources you can assign to an instance or a net.\n"
"  oaSourceEnum\n"
"Constructors:\n"
"  Paramegers: (oaSourceEnum)\n"
"    Calls: oaSource(oaSourceEnum valueIn)\n"
"    Signature: oaSource||simple-oaSourceEnum,\n"
"    This function constructs an instance of an oaSource class using the specified enum value. The enum values are defined in #oaSourceEnum.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaSource(const oaString& name)\n"
"    Signature: oaSource||cref-oaString,\n"
"    This function constructs an instance of an oaSource class using the oaSourceEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaSourceEnum.\n"
"    oacInvalidSourceName\n"
"  Paramegers: (oaSource)\n"
"    Calls: (const oaSource&)\n"
"    Signature: oaSource||cref-oaSource,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSource_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSource",
    sizeof(PyoaSourceObject),
    0,
    (destructor)oaSource_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSource_tp_compare,	/* tp_compare */
    (reprfunc)oaSource_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSource_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSource_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSource_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSource_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSource_Type)<0) {
      printf("** PyType_Ready failed for: oaSource\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSource",
           (PyObject*)(&PyoaSource_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSource\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSourceEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaSourceEnum_Convert(PyObject* ob,PyParamoaSourceEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacNetlistSource")==0) { result->SetData(oacNetlistSource); return 1;}
        if (strcasecmp(str,"oacTimingSource")==0) { result->SetData(oacTimingSource); return 1;}
        if (strcasecmp(str,"oacDistSource")==0) { result->SetData(oacDistSource); return 1;}
        if (strcasecmp(str,"oacTestSource")==0) { result->SetData(oacTestSource); return 1;}
        if (strcasecmp(str,"oacUserSource")==0) { result->SetData(oacUserSource); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaSourceEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSourceEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaSourceEnum_FromoaSourceEnum(oaSourceEnum ob)
{
    if (ob==oacNetlistSource) return PyString_FromString("oacNetlistSource");
    if (ob==oacTimingSource) return PyString_FromString("oacTimingSource");
    if (ob==oacDistSource) return PyString_FromString("oacDistSource");
    if (ob==oacTestSource) return PyString_FromString("oacTestSource");
    if (ob==oacUserSource) return PyString_FromString("oacUserSource");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaSourceEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaSourceEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaSourceEnum_FromoaSourceEnum(oaSourceEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaSourceEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaSourceEnum_doc[] =
"Type convert function for enum: oaSourceEnum";
                               
static PyMethodDef PyoaSourceEnum_method =
  {"oaSourceEnum",(PyCFunction)PyoaSourceEnum_TypeFunction,METH_VARARGS,oaSourceEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaSourceEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacNetlistSource");
    PyDict_SetItemString(mod_dict,"oacNetlistSource",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTimingSource");
    PyDict_SetItemString(mod_dict,"oacTimingSource",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDistSource");
    PyDict_SetItemString(mod_dict,"oacDistSource",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTestSource");
    PyDict_SetItemString(mod_dict,"oacTestSource",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUserSource");
    PyDict_SetItemString(mod_dict,"oacUserSource",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaSourceEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaSourceEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaSourceEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSpefNS
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSpefNS_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSpefNS_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSpefNSObject* self = (PyoaSpefNSObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaNameSpace*)  new oaSpefNS();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSpefNS)
    {
        PyParamoaSpefNS p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSpefNS_Convert,&p1)) {
            self->value=(oaNameSpace*)  new oaSpefNS(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSpefNS, Choices are:\n"
        "    ()\n"
        "    (oaSpefNS)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSpefNS_tp_dealloc(PyoaSpefNSObject* self)
{
    if (!self->borrow) {
        delete (oaSpefNS*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSpefNS_tp_repr(PyObject *ob)
{
    PyParamoaSpefNS value;
    int convert_status=PyoaSpefNS_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[30];
    sprintf(buffer,"<oaSpefNS::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSpefNS_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSpefNS v1;
    PyParamoaSpefNS v2;
    int convert_status1=PyoaSpefNS_Convert(ob1,&v1);
    int convert_status2=PyoaSpefNS_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSpefNS_Convert(PyObject* ob,PyParamoaSpefNS* result)
{
    if (ob == NULL) return 1;
    if (PyoaSpefNS_Check(ob)) {
        result->SetData( (oaSpefNS*) ((PyoaSpefNSObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSpefNS Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSpefNS_FromoaSpefNS(oaSpefNS* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSpefNS_Type.tp_alloc(&PyoaSpefNS_Type,0);
        if (bself == NULL) return bself;
        PyoaSpefNSObject* self = (PyoaSpefNSObject*)bself;
        self->value = (oaNameSpace*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSpefNS_getHierDelimiter_doc[] = 
"Class: oaSpefNS, Function: getHierDelimiter\n"
"  Paramegers: ()\n"
"    Calls: oaChar getHierDelimiter() const\n"
"    Signature: getHierDelimiter|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the hierarchy character for this nameSpace.\n"
;

static PyObject*
oaSpefNS_getHierDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getHierDelimiter());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_getOpenBusChar_doc[] = 
"Class: oaSpefNS, Function: getOpenBusChar\n"
"  Paramegers: ()\n"
"    Calls: oaChar getOpenBusChar() const\n"
"    Signature: getOpenBusChar|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the open bus character for this nameSpace.\n"
;

static PyObject*
oaSpefNS_getOpenBusChar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getOpenBusChar());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_getPinDelimiter_doc[] = 
"Class: oaSpefNS, Function: getPinDelimiter\n"
"  Paramegers: ()\n"
"    Calls: oaChar getPinDelimiter() const\n"
"    Signature: getPinDelimiter|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the pin delimiter for this nameSpace.\n"
;

static PyObject*
oaSpefNS_getPinDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getPinDelimiter());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_getType_doc[] = 
"Class: oaSpefNS, Function: getType\n"
"  Paramegers: ([oaChar])\n"
"    Calls: oaNameType getType(const oaChar* in) const\n"
"    Signature: getType|simple-oaNameType|cptr-oaChar,\n"
"    Function getType\n"
;

static PyObject*
oaSpefNS_getType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    PyParamoaChar_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Array_Convert,&p1)) {
        oaNameType* result= new oaNameType(data.DataCall()->getType(p1.Data()));
        return PyoaNameType_FromoaNameType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_isEqual_doc[] = 
"Class: oaSpefNS, Function: isEqual\n"
"  Paramegers: (oaScalarName,oaScalarName)\n"
"    Calls: oaBoolean isEqual(const oaScalarName& n1,const oaScalarName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaScalarName,cref-oaScalarName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorName,oaVectorName)\n"
"    Calls: oaBoolean isEqual(const oaVectorName& n1,const oaVectorName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorName,cref-oaVectorName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorBitName,oaVectorBitName)\n"
"    Calls: oaBoolean isEqual(const oaVectorBitName& n1,const oaVectorBitName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorBitName,cref-oaVectorBitName,\n"
"    Function isEqual\n"
"  Paramegers: (oaBundleName,oaBundleName)\n"
"    Calls: oaBoolean isEqual(const oaBundleName& n1,const oaBundleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaBundleName,cref-oaBundleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaSimpleName,oaSimpleName)\n"
"    Calls: oaBoolean isEqual(const oaSimpleName& n1,const oaSimpleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaSimpleName,cref-oaSimpleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaName,oaName)\n"
"    Calls: oaBoolean isEqual(const oaName& n1,const oaName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaName,cref-oaName,\n"
"    Function isEqual\n"
;

static PyObject*
oaSpefNS_isEqual(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    // Case: (oaScalarName,oaScalarName)
    {
        PyParamoaScalarName p1;
        PyParamoaScalarName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaScalarName_Convert,&p1,
              &PyoaScalarName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorName,oaVectorName)
    {
        PyParamoaVectorName p1;
        PyParamoaVectorName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorName_Convert,&p1,
              &PyoaVectorName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorBitName,oaVectorBitName)
    {
        PyParamoaVectorBitName p1;
        PyParamoaVectorBitName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorBitName_Convert,&p1,
              &PyoaVectorBitName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBundleName,oaBundleName)
    {
        PyParamoaBundleName p1;
        PyParamoaBundleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBundleName_Convert,&p1,
              &PyoaBundleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaSimpleName,oaSimpleName)
    {
        PyParamoaSimpleName p1;
        PyParamoaSimpleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaSimpleName_Convert,&p1,
              &PyoaSimpleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaName,oaName)
    {
        PyParamoaName p1;
        PyParamoaName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaName_Convert,&p1,
              &PyoaName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSpefNS, function: isEqual, Choices are:\n"
        "    (oaScalarName,oaScalarName)\n"
        "    (oaVectorName,oaVectorName)\n"
        "    (oaVectorBitName,oaVectorBitName)\n"
        "    (oaBundleName,oaBundleName)\n"
        "    (oaSimpleName,oaSimpleName)\n"
        "    (oaName,oaName)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_setHierDelimiter_doc[] = 
"Class: oaSpefNS, Function: setHierDelimiter\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setHierDelimiter(oaChar c)\n"
"    Signature: setHierDelimiter|void-void|simple-oaChar,\n"
"    This function sets the value of the hierarchy delimiter character for this nameSpace.\n"
"    c\n"
"    The value of the open bus character\n"
"    oacProgrammableCharTaken\n"
"    oacProgrammableCharInvalid\n"
;

static PyObject*
oaSpefNS_setHierDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setHierDelimiter(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_setOpenBusChar_doc[] = 
"Class: oaSpefNS, Function: setOpenBusChar\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setOpenBusChar(oaChar c)\n"
"    Signature: setOpenBusChar|void-void|simple-oaChar,\n"
"    This function sets the value of the open bus character for this nameSpace.\n"
"    c\n"
"    The value of the open bus character\n"
"    oacProgrammableCharTaken\n"
"    oacProgrammableCharInvalid\n"
;

static PyObject*
oaSpefNS_setOpenBusChar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setOpenBusChar(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpefNS_setPinDelimiter_doc[] = 
"Class: oaSpefNS, Function: setPinDelimiter\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setPinDelimiter(oaChar c)\n"
"    Signature: setPinDelimiter|void-void|simple-oaChar,\n"
"    This function sets the value of the pin delimiter for this nameSpace.\n"
"    c\n"
"    The value of the pin delimiter\n"
"    oacProgrammableCharTaken\n"
"    oacProgrammableCharInvalid\n"
;

static PyObject*
oaSpefNS_setPinDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpefNS data;
    int convert_status=PyoaSpefNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpefNSObject* self=(PyoaSpefNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setPinDelimiter(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSpefNS_assign_doc[] = 
"Class: oaSpefNS, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSpefNS_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSpefNS data;
  int convert_status=PyoaSpefNS_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSpefNS p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSpefNS_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSpefNS_methodlist[] = {
    {"getHierDelimiter",(PyCFunction)oaSpefNS_getHierDelimiter,METH_VARARGS,oaSpefNS_getHierDelimiter_doc},
    {"getOpenBusChar",(PyCFunction)oaSpefNS_getOpenBusChar,METH_VARARGS,oaSpefNS_getOpenBusChar_doc},
    {"getPinDelimiter",(PyCFunction)oaSpefNS_getPinDelimiter,METH_VARARGS,oaSpefNS_getPinDelimiter_doc},
    {"getType",(PyCFunction)oaSpefNS_getType,METH_VARARGS,oaSpefNS_getType_doc},
    {"isEqual",(PyCFunction)oaSpefNS_isEqual,METH_VARARGS,oaSpefNS_isEqual_doc},
    {"setHierDelimiter",(PyCFunction)oaSpefNS_setHierDelimiter,METH_VARARGS,oaSpefNS_setHierDelimiter_doc},
    {"setOpenBusChar",(PyCFunction)oaSpefNS_setOpenBusChar,METH_VARARGS,oaSpefNS_setOpenBusChar_doc},
    {"setPinDelimiter",(PyCFunction)oaSpefNS_setPinDelimiter,METH_VARARGS,oaSpefNS_setPinDelimiter_doc},
    {"assign",(PyCFunction)oaSpefNS_tp_assign,METH_VARARGS,oaSpefNS_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSpefNS_doc[] = 
"Class: oaSpefNS\n"
"  The oaSpefNS class implements the SPEF nameSpace used in name mapping. The SPEF name space reflects the rules for specifying legal names of objects in SPEF files. In conjunction with the oaName object, the oaSpefNS class facilitates mapping names to and from SPEF. See the Name Mapping Section of the Programmers Guide for more information.\n"
"  The SPEF NameSpace does not support vectored, stepped or bundled names though it allows vector bits. This nameSpace is case sensitive, with programmable bus, pin, and hierarchy characters. Although the pin delimiter is supported, it is interpreted and output as a hierarchy character. See the SPEF Name Space Section of the Programmers Guide for a more detailed description of the characteristics of the SPEF name space.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSpefNS()\n"
"    Signature: oaSpefNS||\n"
"    This function constructs the oaSpefNS instance.\n"
"  Paramegers: (oaSpefNS)\n"
"    Calls: (const oaSpefNS&)\n"
"    Signature: oaSpefNS||cref-oaSpefNS,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSpefNS_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSpefNS",
    sizeof(PyoaSpefNSObject),
    0,
    (destructor)oaSpefNS_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSpefNS_tp_compare,	/* tp_compare */
    (reprfunc)oaSpefNS_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSpefNS_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSpefNS_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaNameSpace_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSpefNS_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSpefNS_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSpefNS_Type)<0) {
      printf("** PyType_Ready failed for: oaSpefNS\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSpefNS",
           (PyObject*)(&PyoaSpefNS_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSpefNS\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSpfNS
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSpfNS_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSpfNS_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSpfNSObject* self = (PyoaSpfNSObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaNameSpace*)  new oaSpfNS();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSpfNS)
    {
        PyParamoaSpfNS p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSpfNS_Convert,&p1)) {
            self->value=(oaNameSpace*)  new oaSpfNS(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSpfNS, Choices are:\n"
        "    ()\n"
        "    (oaSpfNS)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSpfNS_tp_dealloc(PyoaSpfNSObject* self)
{
    if (!self->borrow) {
        delete (oaSpfNS*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSpfNS_tp_repr(PyObject *ob)
{
    PyParamoaSpfNS value;
    int convert_status=PyoaSpfNS_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[29];
    sprintf(buffer,"<oaSpfNS::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSpfNS_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSpfNS v1;
    PyParamoaSpfNS v2;
    int convert_status1=PyoaSpfNS_Convert(ob1,&v1);
    int convert_status2=PyoaSpfNS_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSpfNS_Convert(PyObject* ob,PyParamoaSpfNS* result)
{
    if (ob == NULL) return 1;
    if (PyoaSpfNS_Check(ob)) {
        result->SetData( (oaSpfNS*) ((PyoaSpfNSObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSpfNS Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSpfNS_FromoaSpfNS(oaSpfNS* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSpfNS_Type.tp_alloc(&PyoaSpfNS_Type,0);
        if (bself == NULL) return bself;
        PyoaSpfNSObject* self = (PyoaSpfNSObject*)bself;
        self->value = (oaNameSpace*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSpfNS_getCloseBusChar_doc[] = 
"Class: oaSpfNS, Function: getCloseBusChar\n"
"  Paramegers: ()\n"
"    Calls: oaChar getCloseBusChar() const\n"
"    Signature: getCloseBusChar|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the close bus character for this nameSpace.\n"
;

static PyObject*
oaSpfNS_getCloseBusChar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getCloseBusChar());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_getHierDelimiter_doc[] = 
"Class: oaSpfNS, Function: getHierDelimiter\n"
"  Paramegers: ()\n"
"    Calls: oaChar getHierDelimiter() const\n"
"    Signature: getHierDelimiter|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the hierarchy character for this nameSpace.\n"
;

static PyObject*
oaSpfNS_getHierDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getHierDelimiter());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_getOpenBusChar_doc[] = 
"Class: oaSpfNS, Function: getOpenBusChar\n"
"  Paramegers: ()\n"
"    Calls: oaChar getOpenBusChar() const\n"
"    Signature: getOpenBusChar|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the open bus character for this nameSpace.\n"
;

static PyObject*
oaSpfNS_getOpenBusChar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getOpenBusChar());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_getPinDelimiter_doc[] = 
"Class: oaSpfNS, Function: getPinDelimiter\n"
"  Paramegers: ()\n"
"    Calls: oaChar getPinDelimiter() const\n"
"    Signature: getPinDelimiter|simple-oaChar|\n"
"    BrowseData: 1\n"
"    This function returns the pin delimiter for this nameSpace.\n"
;

static PyObject*
oaSpfNS_getPinDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaChar result= (data.DataCall()->getPinDelimiter());
        return PyoaChar_FromoaChar(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_getType_doc[] = 
"Class: oaSpfNS, Function: getType\n"
"  Paramegers: ([oaChar])\n"
"    Calls: oaNameType getType(const oaChar* in) const\n"
"    Signature: getType|simple-oaNameType|cptr-oaChar,\n"
"    Function getType\n"
;

static PyObject*
oaSpfNS_getType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    PyParamoaChar_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Array_Convert,&p1)) {
        oaNameType* result= new oaNameType(data.DataCall()->getType(p1.Data()));
        return PyoaNameType_FromoaNameType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_isEqual_doc[] = 
"Class: oaSpfNS, Function: isEqual\n"
"  Paramegers: (oaScalarName,oaScalarName)\n"
"    Calls: oaBoolean isEqual(const oaScalarName& n1,const oaScalarName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaScalarName,cref-oaScalarName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorName,oaVectorName)\n"
"    Calls: oaBoolean isEqual(const oaVectorName& n1,const oaVectorName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorName,cref-oaVectorName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorBitName,oaVectorBitName)\n"
"    Calls: oaBoolean isEqual(const oaVectorBitName& n1,const oaVectorBitName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorBitName,cref-oaVectorBitName,\n"
"    Function isEqual\n"
"  Paramegers: (oaBundleName,oaBundleName)\n"
"    Calls: oaBoolean isEqual(const oaBundleName& n1,const oaBundleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaBundleName,cref-oaBundleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaSimpleName,oaSimpleName)\n"
"    Calls: oaBoolean isEqual(const oaSimpleName& n1,const oaSimpleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaSimpleName,cref-oaSimpleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaName,oaName)\n"
"    Calls: oaBoolean isEqual(const oaName& n1,const oaName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaName,cref-oaName,\n"
"    Function isEqual\n"
;

static PyObject*
oaSpfNS_isEqual(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    // Case: (oaScalarName,oaScalarName)
    {
        PyParamoaScalarName p1;
        PyParamoaScalarName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaScalarName_Convert,&p1,
              &PyoaScalarName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorName,oaVectorName)
    {
        PyParamoaVectorName p1;
        PyParamoaVectorName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorName_Convert,&p1,
              &PyoaVectorName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorBitName,oaVectorBitName)
    {
        PyParamoaVectorBitName p1;
        PyParamoaVectorBitName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorBitName_Convert,&p1,
              &PyoaVectorBitName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBundleName,oaBundleName)
    {
        PyParamoaBundleName p1;
        PyParamoaBundleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBundleName_Convert,&p1,
              &PyoaBundleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaSimpleName,oaSimpleName)
    {
        PyParamoaSimpleName p1;
        PyParamoaSimpleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaSimpleName_Convert,&p1,
              &PyoaSimpleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaName,oaName)
    {
        PyParamoaName p1;
        PyParamoaName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaName_Convert,&p1,
              &PyoaName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSpfNS, function: isEqual, Choices are:\n"
        "    (oaScalarName,oaScalarName)\n"
        "    (oaVectorName,oaVectorName)\n"
        "    (oaVectorBitName,oaVectorBitName)\n"
        "    (oaBundleName,oaBundleName)\n"
        "    (oaSimpleName,oaSimpleName)\n"
        "    (oaName,oaName)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_setCloseBusChar_doc[] = 
"Class: oaSpfNS, Function: setCloseBusChar\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setCloseBusChar(oaChar c)\n"
"    Signature: setCloseBusChar|void-void|simple-oaChar,\n"
"    This function sets the value of the close bus character for this nameSpace.\n"
"    oacProgrammableCharTaken\n"
;

static PyObject*
oaSpfNS_setCloseBusChar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setCloseBusChar(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_setHierDelimiter_doc[] = 
"Class: oaSpfNS, Function: setHierDelimiter\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setHierDelimiter(oaChar c)\n"
"    Signature: setHierDelimiter|void-void|simple-oaChar,\n"
"    This function sets the value of the hierarchy delimiter character for this nameSpace.\n"
"    c\n"
"    The value of the open bus character\n"
"    oacProgrammableCharTaken\n"
;

static PyObject*
oaSpfNS_setHierDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setHierDelimiter(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_setOpenBusChar_doc[] = 
"Class: oaSpfNS, Function: setOpenBusChar\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setOpenBusChar(oaChar c)\n"
"    Signature: setOpenBusChar|void-void|simple-oaChar,\n"
"    This function sets the value of the open bus character for this nameSpace.\n"
"    c\n"
"    The value of the open bus character\n"
"    oacProgrammableCharTaken\n"
;

static PyObject*
oaSpfNS_setOpenBusChar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setOpenBusChar(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpfNS_setPinDelimiter_doc[] = 
"Class: oaSpfNS, Function: setPinDelimiter\n"
"  Paramegers: (oaChar)\n"
"    Calls: void setPinDelimiter(oaChar c)\n"
"    Signature: setPinDelimiter|void-void|simple-oaChar,\n"
"    This function sets the value of the pin delimiter for this nameSpace.\n"
"    c\n"
"    The value of the pin delimiter\n"
"    oacProgrammableCharTaken\n"
;

static PyObject*
oaSpfNS_setPinDelimiter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpfNS data;
    int convert_status=PyoaSpfNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpfNSObject* self=(PyoaSpfNSObject*)ob;

    PyParamoaChar p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Convert,&p1)) {
        data.DataCall()->setPinDelimiter(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSpfNS_assign_doc[] = 
"Class: oaSpfNS, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSpfNS_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSpfNS data;
  int convert_status=PyoaSpfNS_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSpfNS p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSpfNS_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSpfNS_methodlist[] = {
    {"getCloseBusChar",(PyCFunction)oaSpfNS_getCloseBusChar,METH_VARARGS,oaSpfNS_getCloseBusChar_doc},
    {"getHierDelimiter",(PyCFunction)oaSpfNS_getHierDelimiter,METH_VARARGS,oaSpfNS_getHierDelimiter_doc},
    {"getOpenBusChar",(PyCFunction)oaSpfNS_getOpenBusChar,METH_VARARGS,oaSpfNS_getOpenBusChar_doc},
    {"getPinDelimiter",(PyCFunction)oaSpfNS_getPinDelimiter,METH_VARARGS,oaSpfNS_getPinDelimiter_doc},
    {"getType",(PyCFunction)oaSpfNS_getType,METH_VARARGS,oaSpfNS_getType_doc},
    {"isEqual",(PyCFunction)oaSpfNS_isEqual,METH_VARARGS,oaSpfNS_isEqual_doc},
    {"setCloseBusChar",(PyCFunction)oaSpfNS_setCloseBusChar,METH_VARARGS,oaSpfNS_setCloseBusChar_doc},
    {"setHierDelimiter",(PyCFunction)oaSpfNS_setHierDelimiter,METH_VARARGS,oaSpfNS_setHierDelimiter_doc},
    {"setOpenBusChar",(PyCFunction)oaSpfNS_setOpenBusChar,METH_VARARGS,oaSpfNS_setOpenBusChar_doc},
    {"setPinDelimiter",(PyCFunction)oaSpfNS_setPinDelimiter,METH_VARARGS,oaSpfNS_setPinDelimiter_doc},
    {"assign",(PyCFunction)oaSpfNS_tp_assign,METH_VARARGS,oaSpfNS_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSpfNS_doc[] = 
"Class: oaSpfNS\n"
"  The oaSpfNS class implements the SPF nameSpace used in name mapping. The SPF name space reflects the rules for specifying legal names of objects in SPF files. In conjunction with the oaName object, the oaSpfNS class facilitates mapping names to and from SPF. See the Name Mapping Section of the Programmers Guide for more information.\n"
"  The SPF nameSpace is case sensitive, with programmable bus and hierarchy characters. This nameSpace does not support vectored, stepped, or bundled names though it allows vector bits. See the SPF Name Space Section of the Programmers Guide for a more detailed description of the characteristics of the SPF name space.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSpfNS()\n"
"    Signature: oaSpfNS||\n"
"    This function constructs the SpfNS instance.\n"
"  Paramegers: (oaSpfNS)\n"
"    Calls: (const oaSpfNS&)\n"
"    Signature: oaSpfNS||cref-oaSpfNS,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSpfNS_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSpfNS",
    sizeof(PyoaSpfNSObject),
    0,
    (destructor)oaSpfNS_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSpfNS_tp_compare,	/* tp_compare */
    (reprfunc)oaSpfNS_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSpfNS_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSpfNS_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaNameSpace_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSpfNS_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSpfNS_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSpfNS_Type)<0) {
      printf("** PyType_Ready failed for: oaSpfNS\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSpfNS",
           (PyObject*)(&PyoaSpfNS_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSpfNS\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaSpiceNS
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaSpiceNS_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaSpiceNS_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaSpiceNSObject* self = (PyoaSpiceNSObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaNameSpace*)  new oaSpiceNS();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaSpiceNS)
    {
        PyParamoaSpiceNS p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaSpiceNS_Convert,&p1)) {
            self->value=(oaNameSpace*)  new oaSpiceNS(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaSpiceNS, Choices are:\n"
        "    ()\n"
        "    (oaSpiceNS)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaSpiceNS_tp_dealloc(PyoaSpiceNSObject* self)
{
    if (!self->borrow) {
        delete (oaSpiceNS*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaSpiceNS_tp_repr(PyObject *ob)
{
    PyParamoaSpiceNS value;
    int convert_status=PyoaSpiceNS_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[31];
    sprintf(buffer,"<oaSpiceNS::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaSpiceNS_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaSpiceNS v1;
    PyParamoaSpiceNS v2;
    int convert_status1=PyoaSpiceNS_Convert(ob1,&v1);
    int convert_status2=PyoaSpiceNS_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaSpiceNS_Convert(PyObject* ob,PyParamoaSpiceNS* result)
{
    if (ob == NULL) return 1;
    if (PyoaSpiceNS_Check(ob)) {
        result->SetData( (oaSpiceNS*) ((PyoaSpiceNSObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaSpiceNS Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaSpiceNS_FromoaSpiceNS(oaSpiceNS* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaSpiceNS_Type.tp_alloc(&PyoaSpiceNS_Type,0);
        if (bself == NULL) return bself;
        PyoaSpiceNSObject* self = (PyoaSpiceNSObject*)bself;
        self->value = (oaNameSpace*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSpiceNS_getType_doc[] = 
"Class: oaSpiceNS, Function: getType\n"
"  Paramegers: ([oaChar])\n"
"    Calls: oaNameType getType(const oaChar* in) const\n"
"    Signature: getType|simple-oaNameType|cptr-oaChar,\n"
"    Function getType\n"
;

static PyObject*
oaSpiceNS_getType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpiceNS data;
    int convert_status=PyoaSpiceNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpiceNSObject* self=(PyoaSpiceNSObject*)ob;

    PyParamoaChar_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Array_Convert,&p1)) {
        oaNameType* result= new oaNameType(data.DataCall()->getType(p1.Data()));
        return PyoaNameType_FromoaNameType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaSpiceNS_isEqual_doc[] = 
"Class: oaSpiceNS, Function: isEqual\n"
"  Paramegers: (oaScalarName,oaScalarName)\n"
"    Calls: oaBoolean isEqual(const oaScalarName& n1,const oaScalarName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaScalarName,cref-oaScalarName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorName,oaVectorName)\n"
"    Calls: oaBoolean isEqual(const oaVectorName& n1,const oaVectorName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorName,cref-oaVectorName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorBitName,oaVectorBitName)\n"
"    Calls: oaBoolean isEqual(const oaVectorBitName& n1,const oaVectorBitName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorBitName,cref-oaVectorBitName,\n"
"    Function isEqual\n"
"  Paramegers: (oaBundleName,oaBundleName)\n"
"    Calls: oaBoolean isEqual(const oaBundleName& n1,const oaBundleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaBundleName,cref-oaBundleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaSimpleName,oaSimpleName)\n"
"    Calls: oaBoolean isEqual(const oaSimpleName& n1,const oaSimpleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaSimpleName,cref-oaSimpleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaName,oaName)\n"
"    Calls: oaBoolean isEqual(const oaName& n1,const oaName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaName,cref-oaName,\n"
"    Function isEqual\n"
;

static PyObject*
oaSpiceNS_isEqual(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaSpiceNS data;
    int convert_status=PyoaSpiceNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaSpiceNSObject* self=(PyoaSpiceNSObject*)ob;

    // Case: (oaScalarName,oaScalarName)
    {
        PyParamoaScalarName p1;
        PyParamoaScalarName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaScalarName_Convert,&p1,
              &PyoaScalarName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorName,oaVectorName)
    {
        PyParamoaVectorName p1;
        PyParamoaVectorName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorName_Convert,&p1,
              &PyoaVectorName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorBitName,oaVectorBitName)
    {
        PyParamoaVectorBitName p1;
        PyParamoaVectorBitName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorBitName_Convert,&p1,
              &PyoaVectorBitName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBundleName,oaBundleName)
    {
        PyParamoaBundleName p1;
        PyParamoaBundleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBundleName_Convert,&p1,
              &PyoaBundleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaSimpleName,oaSimpleName)
    {
        PyParamoaSimpleName p1;
        PyParamoaSimpleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaSimpleName_Convert,&p1,
              &PyoaSimpleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaName,oaName)
    {
        PyParamoaName p1;
        PyParamoaName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaName_Convert,&p1,
              &PyoaName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaSpiceNS, function: isEqual, Choices are:\n"
        "    (oaScalarName,oaScalarName)\n"
        "    (oaVectorName,oaVectorName)\n"
        "    (oaVectorBitName,oaVectorBitName)\n"
        "    (oaBundleName,oaBundleName)\n"
        "    (oaSimpleName,oaSimpleName)\n"
        "    (oaName,oaName)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaSpiceNS_assign_doc[] = 
"Class: oaSpiceNS, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaSpiceNS_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaSpiceNS data;
  int convert_status=PyoaSpiceNS_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaSpiceNS p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaSpiceNS_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaSpiceNS_methodlist[] = {
    {"getType",(PyCFunction)oaSpiceNS_getType,METH_VARARGS,oaSpiceNS_getType_doc},
    {"isEqual",(PyCFunction)oaSpiceNS_isEqual,METH_VARARGS,oaSpiceNS_isEqual_doc},
    {"assign",(PyCFunction)oaSpiceNS_tp_assign,METH_VARARGS,oaSpiceNS_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaSpiceNS_doc[] = 
"Class: oaSpiceNS\n"
"  The oaSpiceNS class implements the Spice name space used in name mapping. In conjunction with the oaName object, the oaSpiceNS class facilitates mapping between the Spice name space and the native name space. See the Name Mapping Section of the Programmer's Guide for more information.\n"
"  The Spice name space reflects the rules for creating names using the HSPICE syntax. The name space is case insensitive. The Spice name space supports scalar, vector bit, and hierarchical names. There are no keywords in this name space since keywords in Spice are position sensitive.\n"
"  Note that bus characters in the Spice name space are defined by the left square bracket ([) and the right square bracket (]). These characters are normal characters in Spice. If a name ends with the open and close bus characters enclosing only digits, the name becomes a vector bit name. Otherwise, a name that contains the '[' or ']' character is just a scalar name in Spice.\n"
"  See the Spice Name Space Section of the Programmer's Guide for a more detailed description of the characteristics of the Spice name space.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaSpiceNS()\n"
"    Signature: oaSpiceNS||\n"
"    This function constructs the oaSpiceNS instance.\n"
"  Paramegers: (oaSpiceNS)\n"
"    Calls: (const oaSpiceNS&)\n"
"    Signature: oaSpiceNS||cref-oaSpiceNS,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaSpiceNS_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaSpiceNS",
    sizeof(PyoaSpiceNSObject),
    0,
    (destructor)oaSpiceNS_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaSpiceNS_tp_compare,	/* tp_compare */
    (reprfunc)oaSpiceNS_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaSpiceNS_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaSpiceNS_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaNameSpace_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaSpiceNS_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaSpiceNS_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaSpiceNS_Type)<0) {
      printf("** PyType_Ready failed for: oaSpiceNS\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaSpiceNS",
           (PyObject*)(&PyoaSpiceNS_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaSpiceNS\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdDeviceObject* self = (PyoaStdDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaStdDevice)
    {
        PyParamoaStdDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaStdDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdDevice, Choices are:\n"
        "    (oaStdDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdDevice_tp_dealloc(PyoaStdDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdDevice_tp_repr(PyObject *ob)
{
    PyParamoaStdDevice value;
    int convert_status=PyoaStdDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[33];
    sprintf(buffer,"<oaStdDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdDevice v1;
    PyParamoaStdDevice v2;
    int convert_status1=PyoaStdDevice_Convert(ob1,&v1);
    int convert_status2=PyoaStdDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdDevice_Convert(PyObject* ob,PyParamoaStdDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdDevice_Check(ob)) {
        result->SetData( (oaStdDevice**) ((PyoaStdDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdDevice_FromoaStdDevice(oaStdDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaStdDevice* data=*value;
        if (data->getType()==oacInductorType) return PyoaInductor_FromoaInductor((oaInductor**)value,borrow,lock);
        if (data->getType()==oacDiodeType) return PyoaDiode_FromoaDiode((oaDiode**)value,borrow,lock);
        if (data->getType()==oacResistorType) return PyoaResistor_FromoaResistor((oaResistor**)value,borrow,lock);
        if (data->getType()==oacCouplingCapType) return PyoaCouplingCap_FromoaCouplingCap((oaCouplingCap**)value,borrow,lock);
        PyObject* bself = PyoaStdDevice_Type.tp_alloc(&PyoaStdDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaStdDeviceObject* self = (PyoaStdDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaStdDevice_FromoaStdDevice(oaStdDevice* data)
{
    if (data) {
        if (data->getType()==oacInductorType) return PyoaInductor_FromoaInductor((oaInductor*)data);
        if (data->getType()==oacDiodeType) return PyoaDiode_FromoaDiode((oaDiode*)data);
        if (data->getType()==oacResistorType) return PyoaResistor_FromoaResistor((oaResistor*)data);
        if (data->getType()==oacCouplingCapType) return PyoaCouplingCap_FromoaCouplingCap((oaCouplingCap*)data);
       PyObject* bself = PyoaStdDevice_Type.tp_alloc(&PyoaStdDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaStdDeviceObject* self = (PyoaStdDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdDevice_getEndpoint_doc[] = 
"Class: oaStdDevice, Function: getEndpoint\n"
"  Paramegers: (oaNode)\n"
"    Calls: oaEndpointType getEndpoint(oaNode* node) const\n"
"    Signature: getEndpoint|simple-oaEndpointType|ptr-oaNode,\n"
"    This function returns the endpoint of this device to which node is connected.\n"
"    oacDeviceNotConnectedToNode\n"
;

static PyObject*
oaStdDevice_getEndpoint(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaEndpointType* result= new oaEndpointType(data.DataCall()->getEndpoint(p1.Data()));
        return PyoaEndpointType_FromoaEndpointType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_getNode_doc[] = 
"Class: oaStdDevice, Function: getNode\n"
"  Paramegers: (oaEndpointType)\n"
"    Calls: oaNode* getNode(oaEndpointType endpoint) const\n"
"    Signature: getNode|ptr-oaNode|simple-oaEndpointType,\n"
"    This function returns the node connected to the specified endpoint of this device.\n"
;

static PyObject*
oaStdDevice_getNode(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaEndpointType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaEndpointType_Convert,&p1)) {
        oaNodep result= (data.DataCall()->getNode(p1.Data()));
        return PyoaNode_FromoaNode(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_getNodes_doc[] = 
"Class: oaStdDevice, Function: getNodes\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaNode_oaStdDevice getNodes() const\n"
"    Signature: getNodes|simple-oaCollection_oaNode_oaStdDevice|\n"
"    BrowseData: 1\n"
"    This function returns a collection containing the nodes connected to this stdDevice.\n"
;

static PyObject*
oaStdDevice_getNodes(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaNode_oaStdDevice* result= new oaCollection_oaNode_oaStdDevice(data.DataCall()->getNodes());
        return PyoaCollection_oaNode_oaStdDevice_FromoaCollection_oaNode_oaStdDevice(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_getNodesIter_doc[] = 
"Class: oaStdDevice, Function: getNodesIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaNode getNodesIter() const\n"
"    Signature: getNodesIter|simple-oaIter_oaNode|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns a collection containing the nodes connected to this stdDevice.\n"
;

static PyObject*
oaStdDevice_getNodesIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaNode* result= new oaIter_oaNode(data.DataCall()->getNodes());
        return PyoaIter_oaNode_FromoaIter_oaNode(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_getOtherNode_doc[] = 
"Class: oaStdDevice, Function: getOtherNode\n"
"  Paramegers: (oaNode)\n"
"    Calls: oaNode* getOtherNode(oaNode* node) const\n"
"    Signature: getOtherNode|ptr-oaNode|ptr-oaNode,\n"
"    This function returns the node connected to the other endpoint of this device (the endpoint that is not connected to node ).\n"
;

static PyObject*
oaStdDevice_getOtherNode(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaNodep result= (data.DataCall()->getOtherNode(p1.Data()));
        return PyoaNode_FromoaNode(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_getValue_doc[] = 
"Class: oaStdDevice, Function: getValue\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaFloat getValue(const oaAnalysisPoint* ap) const\n"
"    Signature: getValue|simple-oaFloat|cptr-oaAnalysisPoint,\n"
"    This function gets the value of this device for the specified analysis point.\n"
;

static PyObject*
oaStdDevice_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->getValue(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_setValue_doc[] = 
"Class: oaStdDevice, Function: setValue\n"
"  Paramegers: (oaAnalysisPoint,oaFloat)\n"
"    Calls: void setValue(const oaAnalysisPoint* ap,oaFloat value)\n"
"    Signature: setValue|void-void|cptr-oaAnalysisPoint,simple-oaFloat,\n"
"    This function sets the value of this device for the specified analysis point.\n"
;

static PyObject*
oaStdDevice_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdDeviceObject* self=(PyoaStdDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->setValue(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdDevice_isNull_doc[] =
"Class: oaStdDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaStdDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaStdDevice data;
    int convert_status=PyoaStdDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaStdDevice_assign_doc[] = 
"Class: oaStdDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdDevice data;
  int convert_status=PyoaStdDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdDevice_methodlist[] = {
    {"getEndpoint",(PyCFunction)oaStdDevice_getEndpoint,METH_VARARGS,oaStdDevice_getEndpoint_doc},
    {"getNode",(PyCFunction)oaStdDevice_getNode,METH_VARARGS,oaStdDevice_getNode_doc},
    {"getNodes",(PyCFunction)oaStdDevice_getNodes,METH_VARARGS,oaStdDevice_getNodes_doc},
    {"getNodesIter",(PyCFunction)oaStdDevice_getNodesIter,METH_VARARGS,oaStdDevice_getNodesIter_doc},
    {"getOtherNode",(PyCFunction)oaStdDevice_getOtherNode,METH_VARARGS,oaStdDevice_getOtherNode_doc},
    {"getValue",(PyCFunction)oaStdDevice_getValue,METH_VARARGS,oaStdDevice_getValue_doc},
    {"setValue",(PyCFunction)oaStdDevice_setValue,METH_VARARGS,oaStdDevice_setValue_doc},
    {"isNull",(PyCFunction)oaStdDevice_tp_isNull,METH_VARARGS,oaStdDevice_isNull_doc},
    {"assign",(PyCFunction)oaStdDevice_tp_assign,METH_VARARGS,oaStdDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdDevice_doc[] = 
"Class: oaStdDevice\n"
"  The oaStdDevice class is an abstract base class for parasitic devices contained within an oaParasiticNetwork that have two endpoints and one value for each analysis point that the parasitic network represents.\n"
"Constructors:\n"
"  Paramegers: (oaStdDevice)\n"
"    Calls: (const oaStdDevice&)\n"
"    Signature: oaStdDevice||cref-oaStdDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdDevice",
    sizeof(PyoaStdDeviceObject),
    0,
    (destructor)oaStdDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaStdDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaDevice_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaStdDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdDevice",
           (PyObject*)(&PyoaStdDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdDevice\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self = (PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum* p=new pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum* p=new pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_dealloc(PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[74];
    sprintf(buffer,"<oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum v1;
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum*) ((PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_FromoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self = (PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostCreate(oaAnalysisLib* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAnalysisLib_FromoaAnalysisLib(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostModify(oaAnalysisLib* p1,oaAnalysisLibModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAnalysisLib_FromoaAnalysisLib(p1));
    PyTuple_SetItem(args,1,PyoaAnalysisLibModTypeEnum_FromoaAnalysisLibModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreDestroy(oaAnalysisLib* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAnalysisLib_FromoaAnalysisLib(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreModify(oaAnalysisLib* p1,oaAnalysisLibModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAnalysisLib_FromoaAnalysisLib(p1));
    PyTuple_SetItem(args,1,PyoaAnalysisLibModTypeEnum_FromoaAnalysisLibModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAnalysisLib)\n"
"    Calls: virtual void onPostCreate(oaAnalysisLib* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAnalysisLib,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)ob;

    PyParamoaAnalysisLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisLib_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAnalysisLib,oaAnalysisLibModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAnalysisLib* object,oaAnalysisLibModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAnalysisLib,simple-oaAnalysisLibModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)ob;

    PyParamoaAnalysisLib p1;
    PyParamoaAnalysisLibModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisLib_Convert,&p1,
          &PyoaAnalysisLibModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAnalysisLib)\n"
"    Calls: virtual void onPreDestroy(oaAnalysisLib* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAnalysisLib,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)ob;

    PyParamoaAnalysisLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisLib_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAnalysisLib,oaAnalysisLibModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAnalysisLib* object,oaAnalysisLibModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAnalysisLib,simple-oaAnalysisLibModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject*)ob;

    PyParamoaAnalysisLib p1;
    PyParamoaAnalysisLibModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisLib_Convert,&p1,
          &PyoaAnalysisLibModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum",
    sizeof(PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAnalysisLib)\n"
"    Calls: void notifyPostCreateObservers(oaAnalysisLib* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAnalysisLib,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisLib_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAnalysisLib,oaAnalysisLibModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAnalysisLib* object,oaAnalysisLibModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAnalysisLib,simple-oaAnalysisLibModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib p1;
    PyParamoaAnalysisLibModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisLib_Convert,&p1,
          &PyoaAnalysisLibModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAnalysisLib)\n"
"    Calls: void notifyPreDestroyObservers(oaAnalysisLib* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAnalysisLib,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisLib_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAnalysisLib,oaAnalysisLibModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAnalysisLib* object,oaAnalysisLibModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAnalysisLib,simple-oaAnalysisLibModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisLib p1;
    PyParamoaAnalysisLibModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisLib_Convert,&p1,
          &PyoaAnalysisLibModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAnalysisLib_oaAnalysisLibModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self = (PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum* p=new pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum* p=new pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_dealloc(PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[82];
    sprintf(buffer,"<oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum v1;
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum*) ((PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_FromoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self = (PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostCreate(oaAnalysisOpPoint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostModify(oaAnalysisOpPoint* p1,oaAnalysisOpPointModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(p1));
    PyTuple_SetItem(args,1,PyoaAnalysisOpPointModTypeEnum_FromoaAnalysisOpPointModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreDestroy(oaAnalysisOpPoint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreModify(oaAnalysisOpPoint* p1,oaAnalysisOpPointModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(p1));
    PyTuple_SetItem(args,1,PyoaAnalysisOpPointModTypeEnum_FromoaAnalysisOpPointModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: virtual void onPostCreate(oaAnalysisOpPoint* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAnalysisOpPoint,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)ob;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAnalysisOpPoint,oaAnalysisOpPointModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAnalysisOpPoint* object,oaAnalysisOpPointModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAnalysisOpPoint,simple-oaAnalysisOpPointModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)ob;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaAnalysisOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaAnalysisOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: virtual void onPreDestroy(oaAnalysisOpPoint* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAnalysisOpPoint,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)ob;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAnalysisOpPoint,oaAnalysisOpPointModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAnalysisOpPoint* object,oaAnalysisOpPointModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAnalysisOpPoint,simple-oaAnalysisOpPointModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject*)ob;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaAnalysisOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaAnalysisOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum",
    sizeof(PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: void notifyPostCreateObservers(oaAnalysisOpPoint* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAnalysisOpPoint,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAnalysisOpPoint,oaAnalysisOpPointModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAnalysisOpPoint* object,oaAnalysisOpPointModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAnalysisOpPoint,simple-oaAnalysisOpPointModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint p1;
    PyParamoaAnalysisOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaAnalysisOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: void notifyPreDestroyObservers(oaAnalysisOpPoint* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAnalysisOpPoint,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAnalysisOpPoint,oaAnalysisOpPointModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAnalysisOpPoint* object,oaAnalysisOpPointModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAnalysisOpPoint,simple-oaAnalysisOpPointModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisOpPoint p1;
    PyParamoaAnalysisOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaAnalysisOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAnalysisOpPoint_oaAnalysisOpPointModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self = (PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum* p=new pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum* p=new pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_dealloc(PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum v1;
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum*) ((PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_FromoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self = (PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostCreate(oaAnalysisPoint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAnalysisPoint_FromoaAnalysisPoint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostModify(oaAnalysisPoint* p1,oaAnalysisPointModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAnalysisPoint_FromoaAnalysisPoint(p1));
    PyTuple_SetItem(args,1,PyoaAnalysisPointModTypeEnum_FromoaAnalysisPointModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreDestroy(oaAnalysisPoint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAnalysisPoint_FromoaAnalysisPoint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreModify(oaAnalysisPoint* p1,oaAnalysisPointModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAnalysisPoint_FromoaAnalysisPoint(p1));
    PyTuple_SetItem(args,1,PyoaAnalysisPointModTypeEnum_FromoaAnalysisPointModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: virtual void onPostCreate(oaAnalysisPoint* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAnalysisPoint,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)ob;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAnalysisPoint,oaAnalysisPointModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAnalysisPoint* object,oaAnalysisPointModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAnalysisPoint,simple-oaAnalysisPointModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)ob;

    PyParamoaAnalysisPoint p1;
    PyParamoaAnalysisPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaAnalysisPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: virtual void onPreDestroy(oaAnalysisPoint* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAnalysisPoint,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)ob;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAnalysisPoint,oaAnalysisPointModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAnalysisPoint* object,oaAnalysisPointModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAnalysisPoint,simple-oaAnalysisPointModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject* self=(PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject*)ob;

    PyParamoaAnalysisPoint p1;
    PyParamoaAnalysisPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaAnalysisPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum",
    sizeof(PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: void notifyPostCreateObservers(oaAnalysisPoint* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAnalysisPoint,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAnalysisPoint,oaAnalysisPointModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAnalysisPoint* object,oaAnalysisPointModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAnalysisPoint,simple-oaAnalysisPointModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint p1;
    PyParamoaAnalysisPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaAnalysisPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: void notifyPreDestroyObservers(oaAnalysisPoint* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAnalysisPoint,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAnalysisPoint,oaAnalysisPointModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAnalysisPoint* object,oaAnalysisPointModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAnalysisPoint,simple-oaAnalysisPointModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAnalysisPoint p1;
    PyParamoaAnalysisPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaAnalysisPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAnalysisPoint_oaAnalysisPointModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self = (PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum* p=new pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum* p=new pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_dealloc(PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAppObject_oaAppObjectModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum v1;
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAppObject_oaAppObjectModTypeEnum*) ((PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_FromoaStdObserver_oaAppObject_oaAppObjectModTypeEnum(oaStdObserver_oaAppObject_oaAppObjectModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self = (PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostCreate(oaAppObject* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAppObject_FromoaAppObject(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostModify(oaAppObject* p1,oaAppObjectModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAppObject_FromoaAppObject(p1));
    PyTuple_SetItem(args,1,PyoaAppObjectModTypeEnum_FromoaAppObjectModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreDestroy(oaAppObject* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAppObject_FromoaAppObject(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreModify(oaAppObject* p1,oaAppObjectModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAppObject_FromoaAppObject(p1));
    PyTuple_SetItem(args,1,PyoaAppObjectModTypeEnum_FromoaAppObjectModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: virtual void onPostCreate(oaAppObject* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAppObject,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self=(PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)ob;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAppObject,oaAppObjectModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAppObject* object,oaAppObjectModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAppObject,simple-oaAppObjectModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self=(PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)ob;

    PyParamoaAppObject p1;
    PyParamoaAppObjectModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaAppObjectModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: virtual void onPreDestroy(oaAppObject* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAppObject,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self=(PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)ob;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAppObject,oaAppObjectModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAppObject* object,oaAppObjectModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAppObject,simple-oaAppObjectModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject* self=(PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject*)ob;

    PyParamoaAppObject p1;
    PyParamoaAppObjectModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaAppObjectModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAppObject_oaAppObjectModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAppObject_oaAppObjectModTypeEnum",
    sizeof(PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: void notifyPostCreateObservers(oaAppObject* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAppObject,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAppObject,oaAppObjectModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAppObject* object,oaAppObjectModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAppObject,simple-oaAppObjectModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppObject p1;
    PyParamoaAppObjectModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaAppObjectModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: void notifyPreDestroyObservers(oaAppObject* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAppObject,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAppObject,oaAppObjectModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAppObject* object,oaAppObjectModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAppObject,simple-oaAppObjectModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppObject p1;
    PyParamoaAppObjectModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaAppObjectModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppObject_oaAppObjectModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAppObject_oaAppObjectModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAppObject_oaAppObjectModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAppObject_oaAppObjectModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAppObject_oaAppObjectModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAppProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAppProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAppProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAppProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaAppProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAppProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAppProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAppProp_oaPropModTypeEnum_FromoaStdObserver_oaAppProp_oaPropModTypeEnum(oaStdObserver_oaAppProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum::pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAppProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum::pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAppProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostCreate(oaAppProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAppProp_FromoaAppProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostModify(oaAppProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAppProp_FromoaAppProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreDestroy(oaAppProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAppProp_FromoaAppProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreModify(oaAppProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAppProp_FromoaAppProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAppProp)\n"
"    Calls: virtual void onPostCreate(oaAppProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAppProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)ob;

    PyParamoaAppProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAppProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAppProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAppProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)ob;

    PyParamoaAppProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAppProp)\n"
"    Calls: virtual void onPreDestroy(oaAppProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAppProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)ob;

    PyParamoaAppProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAppProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAppProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAppProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject*)ob;

    PyParamoaAppProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAppProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAppProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAppProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAppProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAppProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAppProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAppProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAppProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAppProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaAppProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAppProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAppProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAppProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAppProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAppProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAppProp)\n"
"    Calls: void notifyPostCreateObservers(oaAppProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAppProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAppProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAppProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAppProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAppProp)\n"
"    Calls: void notifyPreDestroyObservers(oaAppProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAppProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAppProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAppProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAppProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAppProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAppProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAppProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAppProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAppProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAppProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAppProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAppProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAppProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAppProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAppProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaArc_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaArc_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaArc_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaArc_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaArc_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaArc_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaArc_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaArc_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaArc_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaArc_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaArc_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaArc_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaArc_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaArc_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaArc_oaShapeModTypeEnum*) ((PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaArc_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaArc_oaShapeModTypeEnum_FromoaStdObserver_oaArc_oaShapeModTypeEnum(oaStdObserver_oaArc_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaArc_oaShapeModTypeEnum::pyv_oaStdObserver_oaArc_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaArc_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaArc_oaShapeModTypeEnum::pyv_oaStdObserver_oaArc_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaArc_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArc_oaShapeModTypeEnum::onPostCreate(oaArc* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaArc_FromoaArc(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArc_oaShapeModTypeEnum::onPostModify(oaArc* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaArc_FromoaArc(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArc_oaShapeModTypeEnum::onPreDestroy(oaArc* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaArc_FromoaArc(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArc_oaShapeModTypeEnum::onPreModify(oaArc* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaArc_FromoaArc(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArc_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaArc)\n"
"    Calls: virtual void onPostCreate(oaArc* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaArc,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)ob;

    PyParamoaArc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArc_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaArc,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaArc* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaArc,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)ob;

    PyParamoaArc p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArc_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArc_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaArc)\n"
"    Calls: virtual void onPreDestroy(oaArc* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaArc,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)ob;

    PyParamoaArc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArc_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaArc,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaArc* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaArc,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArc_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaArc_oaShapeModTypeEnumObject*)ob;

    PyParamoaArc p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArc_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArc_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaArc_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaArc_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaArc_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaArc_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaArc_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaArc_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaArc_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaArc_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaArc_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaArc_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaArc_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaArc_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaArc_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaArc_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaArc_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaArc_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaArc_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaArc_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaArc)\n"
"    Calls: void notifyPostCreateObservers(oaArc* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaArc,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArc_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaArc,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaArc* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaArc,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArc p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArc_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArc_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaArc)\n"
"    Calls: void notifyPreDestroyObservers(oaArc* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaArc,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArc_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaArc_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaArc,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaArc* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaArc,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArc p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArc_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArc_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaArc_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaArc_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaArc_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaArc_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaArc_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaArc_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaArc_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaArc_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_dealloc(PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum v1;
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum*) ((PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_FromoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostCreate(oaAreaBlockage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAreaBlockage_FromoaAreaBlockage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostModify(oaAreaBlockage* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAreaBlockage_FromoaAreaBlockage(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreDestroy(oaAreaBlockage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAreaBlockage_FromoaAreaBlockage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreModify(oaAreaBlockage* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAreaBlockage_FromoaAreaBlockage(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAreaBlockage)\n"
"    Calls: virtual void onPostCreate(oaAreaBlockage* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAreaBlockage,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAreaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAreaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAreaBlockage,simple-oaBlockageModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAreaBlockage)\n"
"    Calls: virtual void onPreDestroy(oaAreaBlockage* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAreaBlockage,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAreaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAreaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAreaBlockage,simple-oaBlockageModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum",
    sizeof(PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAreaBlockage)\n"
"    Calls: void notifyPostCreateObservers(oaAreaBlockage* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAreaBlockage,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAreaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAreaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAreaBlockage,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAreaBlockage)\n"
"    Calls: void notifyPreDestroyObservers(oaAreaBlockage* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAreaBlockage,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAreaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAreaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAreaBlockage,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAreaBlockage_oaBlockageModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_dealloc(PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum v1;
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum*) ((PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_FromoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostCreate(oaAreaBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAreaBoundary_FromoaAreaBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostModify(oaAreaBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAreaBoundary_FromoaAreaBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreDestroy(oaAreaBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAreaBoundary_FromoaAreaBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreModify(oaAreaBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAreaBoundary_FromoaAreaBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAreaBoundary)\n"
"    Calls: virtual void onPostCreate(oaAreaBoundary* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAreaBoundary,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaAreaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAreaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAreaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAreaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaAreaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAreaBoundary)\n"
"    Calls: virtual void onPreDestroy(oaAreaBoundary* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAreaBoundary,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaAreaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAreaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAreaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAreaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaAreaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum",
    sizeof(PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAreaBoundary)\n"
"    Calls: void notifyPostCreateObservers(oaAreaBoundary* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAreaBoundary,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAreaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAreaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAreaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAreaBoundary)\n"
"    Calls: void notifyPreDestroyObservers(oaAreaBoundary* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAreaBoundary,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAreaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAreaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAreaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAreaBoundary_oaBoundaryModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_dealloc(PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum v1;
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum*) ((PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_FromoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostCreate(oaAreaHalo* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAreaHalo_FromoaAreaHalo(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostModify(oaAreaHalo* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAreaHalo_FromoaAreaHalo(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreDestroy(oaAreaHalo* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAreaHalo_FromoaAreaHalo(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreModify(oaAreaHalo* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAreaHalo_FromoaAreaHalo(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAreaHalo)\n"
"    Calls: virtual void onPostCreate(oaAreaHalo* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAreaHalo,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAreaHalo,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAreaHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAreaHalo,simple-oaBlockageModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAreaHalo)\n"
"    Calls: virtual void onPreDestroy(oaAreaHalo* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAreaHalo,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAreaHalo,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAreaHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAreaHalo,simple-oaBlockageModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject*)ob;

    PyParamoaAreaHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum",
    sizeof(PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAreaHalo)\n"
"    Calls: void notifyPostCreateObservers(oaAreaHalo* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAreaHalo,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAreaHalo,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAreaHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAreaHalo,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAreaHalo)\n"
"    Calls: void notifyPreDestroyObservers(oaAreaHalo* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAreaHalo,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaHalo p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAreaHalo_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAreaHalo,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAreaHalo* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAreaHalo,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAreaHalo p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAreaHalo_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAreaHalo_oaBlockageModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaArrayInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaArrayInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaArrayInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[65];
    sprintf(buffer,"<oaStdObserver_oaArrayInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaArrayInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaArrayInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_FromoaStdObserver_oaArrayInst_oaInstModTypeEnum(oaStdObserver_oaArrayInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum::pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaArrayInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum::pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaArrayInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostCreate(oaArrayInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaArrayInst_FromoaArrayInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostModify(oaArrayInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaArrayInst_FromoaArrayInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreDestroy(oaArrayInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaArrayInst_FromoaArrayInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreModify(oaArrayInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaArrayInst_FromoaArrayInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaArrayInst)\n"
"    Calls: virtual void onPostCreate(oaArrayInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaArrayInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaArrayInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaArrayInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaArrayInst)\n"
"    Calls: virtual void onPreDestroy(oaArrayInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaArrayInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaArrayInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaArrayInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArrayInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaArrayInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaArrayInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaArrayInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaArrayInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaArrayInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaArrayInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaArrayInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaArrayInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaArrayInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaArrayInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaArrayInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaArrayInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaArrayInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaArrayInst)\n"
"    Calls: void notifyPostCreateObservers(oaArrayInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaArrayInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArrayInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaArrayInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaArrayInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArrayInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaArrayInst)\n"
"    Calls: void notifyPreDestroyObservers(oaArrayInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaArrayInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArrayInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaArrayInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaArrayInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaArrayInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArrayInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaArrayInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaArrayInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaArrayInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaArrayInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaArrayInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaArrayInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self = (PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum* p=new pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum* p=new pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[71];
    sprintf(buffer,"<oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum v1;
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum*) ((PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_FromoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self = (PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostCreate(oaArraySiteDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaArraySiteDef_FromoaArraySiteDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostModify(oaArraySiteDef* p1,oaSiteDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaArraySiteDef_FromoaArraySiteDef(p1));
    PyTuple_SetItem(args,1,PyoaSiteDefModTypeEnum_FromoaSiteDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreDestroy(oaArraySiteDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaArraySiteDef_FromoaArraySiteDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreModify(oaArraySiteDef* p1,oaSiteDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaArraySiteDef_FromoaArraySiteDef(p1));
    PyTuple_SetItem(args,1,PyoaSiteDefModTypeEnum_FromoaSiteDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaArraySiteDef)\n"
"    Calls: virtual void onPostCreate(oaArraySiteDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaArraySiteDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self=(PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)ob;

    PyParamoaArraySiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArraySiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaArraySiteDef,oaSiteDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaArraySiteDef* object,oaSiteDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaArraySiteDef,simple-oaSiteDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self=(PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)ob;

    PyParamoaArraySiteDef p1;
    PyParamoaSiteDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArraySiteDef_Convert,&p1,
          &PyoaSiteDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaArraySiteDef)\n"
"    Calls: virtual void onPreDestroy(oaArraySiteDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaArraySiteDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self=(PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)ob;

    PyParamoaArraySiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArraySiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaArraySiteDef,oaSiteDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaArraySiteDef* object,oaSiteDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaArraySiteDef,simple-oaSiteDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject* self=(PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject*)ob;

    PyParamoaArraySiteDef p1;
    PyParamoaSiteDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArraySiteDef_Convert,&p1,
          &PyoaSiteDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum",
    sizeof(PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaArraySiteDef)\n"
"    Calls: void notifyPostCreateObservers(oaArraySiteDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaArraySiteDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArraySiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArraySiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaArraySiteDef,oaSiteDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaArraySiteDef* object,oaSiteDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaArraySiteDef,simple-oaSiteDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArraySiteDef p1;
    PyParamoaSiteDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArraySiteDef_Convert,&p1,
          &PyoaSiteDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaArraySiteDef)\n"
"    Calls: void notifyPreDestroyObservers(oaArraySiteDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaArraySiteDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArraySiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArraySiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaArraySiteDef,oaSiteDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaArraySiteDef* object,oaSiteDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaArraySiteDef,simple-oaSiteDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaArraySiteDef p1;
    PyParamoaSiteDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaArraySiteDef_Convert,&p1,
          &PyoaSiteDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaArraySiteDef_oaSiteDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_FromoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostCreate(oaAssignAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAssignAssignment_FromoaAssignAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostModify(oaAssignAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAssignAssignment_FromoaAssignAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy(oaAssignAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAssignAssignment_FromoaAssignAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreModify(oaAssignAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAssignAssignment_FromoaAssignAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAssignAssignment)\n"
"    Calls: virtual void onPostCreate(oaAssignAssignment* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAssignAssignment,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAssignAssignment)\n"
"    Calls: virtual void onPreDestroy(oaAssignAssignment* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAssignAssignment,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAssignAssignment)\n"
"    Calls: void notifyPostCreateObservers(oaAssignAssignment* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAssignAssignment,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAssignAssignment)\n"
"    Calls: void notifyPreDestroyObservers(oaAssignAssignment* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAssignAssignment,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAssignAssignment_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[73];
    sprintf(buffer,"<oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_FromoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostCreate(oaAssignValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAssignValue_FromoaAssignValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostModify(oaAssignValue* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAssignValue_FromoaAssignValue(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreDestroy(oaAssignValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAssignValue_FromoaAssignValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreModify(oaAssignValue* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAssignValue_FromoaAssignValue(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAssignValue)\n"
"    Calls: virtual void onPostCreate(oaAssignValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAssignValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAssignValue)\n"
"    Calls: virtual void onPreDestroy(oaAssignValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAssignValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAssignValue)\n"
"    Calls: void notifyPostCreateObservers(oaAssignValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAssignValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAssignValue)\n"
"    Calls: void notifyPreDestroyObservers(oaAssignValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAssignValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAssignValue_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAssignment_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAssignment_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_FromoaStdObserver_oaAssignment_oaAssignmentModTypeEnum(oaStdObserver_oaAssignment_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostCreate(oaAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAssignment_FromoaAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostModify(oaAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAssignment_FromoaAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreDestroy(oaAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAssignment_FromoaAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreModify(oaAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAssignment_FromoaAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: virtual void onPostCreate(oaAssignment* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAssignment,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: virtual void onPreDestroy(oaAssignment* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAssignment,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAssignment_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAssignment_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: void notifyPostCreateObservers(oaAssignment* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAssignment,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: void notifyPreDestroyObservers(oaAssignment* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAssignment,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAssignment_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAssignment_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAssignment_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAssignment_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAssignment_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum*) ((PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_FromoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostCreate(oaAttrDisplay* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAttrDisplay_FromoaAttrDisplay(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostModify(oaAttrDisplay* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAttrDisplay_FromoaAttrDisplay(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreDestroy(oaAttrDisplay* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaAttrDisplay_FromoaAttrDisplay(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreModify(oaAttrDisplay* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaAttrDisplay_FromoaAttrDisplay(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaAttrDisplay)\n"
"    Calls: virtual void onPostCreate(oaAttrDisplay* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaAttrDisplay,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaAttrDisplay)\n"
"    Calls: virtual void onPreDestroy(oaAttrDisplay* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaAttrDisplay,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject*)ob;

    PyParamoaAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaAttrDisplay)\n"
"    Calls: void notifyPostCreateObservers(oaAttrDisplay* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaAttrDisplay,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaAttrDisplay)\n"
"    Calls: void notifyPreDestroyObservers(oaAttrDisplay* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaAttrDisplay,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAttrDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAttrDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaAttrDisplay,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaAttrDisplay* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaAttrDisplay,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaAttrDisplay p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAttrDisplay_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaAttrDisplay_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBitInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBitInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBitInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaBitInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBitInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBitInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBitInst_oaInstModTypeEnum_FromoaStdObserver_oaBitInst_oaInstModTypeEnum(oaStdObserver_oaBitInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBitInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBitInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostCreate(oaBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBitInst_FromoaBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostModify(oaBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBitInst_FromoaBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreDestroy(oaBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBitInst_FromoaBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreModify(oaBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBitInst_FromoaBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBitInst)\n"
"    Calls: virtual void onPostCreate(oaBitInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBitInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBitInst)\n"
"    Calls: virtual void onPreDestroy(oaBitInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBitInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBitInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBitInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBitInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBitInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBitInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBitInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaBitInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBitInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBitInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBitInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBitInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBitInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBitInst)\n"
"    Calls: void notifyPostCreateObservers(oaBitInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBitInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBitInst)\n"
"    Calls: void notifyPreDestroyObservers(oaBitInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBitInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBitInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBitInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBitInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBitInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBitInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBitInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBitInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBitInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBitNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBitNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBitNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBitNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaStdObserver_oaBitNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBitNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBitNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBitNet_oaNetModTypeEnum_FromoaStdObserver_oaBitNet_oaNetModTypeEnum(oaStdObserver_oaBitNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum::pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBitNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum::pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBitNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostCreate(oaBitNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBitNet_FromoaBitNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostModify(oaBitNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBitNet_FromoaBitNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreDestroy(oaBitNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBitNet_FromoaBitNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreModify(oaBitNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBitNet_FromoaBitNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBitNet)\n"
"    Calls: virtual void onPostCreate(oaBitNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBitNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBitNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBitNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBitNet)\n"
"    Calls: virtual void onPreDestroy(oaBitNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBitNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBitNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBitNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBitNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBitNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBitNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBitNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBitNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBitNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBitNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBitNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaBitNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBitNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBitNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBitNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBitNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBitNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBitNet)\n"
"    Calls: void notifyPostCreateObservers(oaBitNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBitNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBitNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBitNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBitNet)\n"
"    Calls: void notifyPreDestroyObservers(oaBitNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBitNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBitNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBitNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBitNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBitNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBitNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBitNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBitNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBitNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBitNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBitNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBitTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBitTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBitTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaBitTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBitTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBitTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_FromoaStdObserver_oaBitTerm_oaTermModTypeEnum(oaStdObserver_oaBitTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBitTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBitTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostCreate(oaBitTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBitTerm_FromoaBitTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostModify(oaBitTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBitTerm_FromoaBitTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreDestroy(oaBitTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBitTerm_FromoaBitTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreModify(oaBitTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBitTerm_FromoaBitTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBitTerm)\n"
"    Calls: virtual void onPostCreate(oaBitTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBitTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBitTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBitTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBitTerm)\n"
"    Calls: virtual void onPreDestroy(oaBitTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBitTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBitTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBitTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBitTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBitTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBitTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBitTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBitTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBitTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBitTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBitTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaBitTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBitTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBitTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBitTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBitTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBitTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBitTerm)\n"
"    Calls: void notifyPostCreateObservers(oaBitTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBitTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBitTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBitTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBitTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaBitTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBitTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBitTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBitTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBitTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBitTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBitTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBitTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBitTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBitTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBitTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBitTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBlock_oaBlockModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self = (PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBlock_oaBlockModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum* p=new pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBlock_oaBlockModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum* p=new pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_dealloc(PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBlock_oaBlockModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[62];
    sprintf(buffer,"<oaStdObserver_oaBlock_oaBlockModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum v1;
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBlock_oaBlockModTypeEnum*) ((PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBlock_oaBlockModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBlock_oaBlockModTypeEnum_FromoaStdObserver_oaBlock_oaBlockModTypeEnum(oaStdObserver_oaBlock_oaBlockModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self = (PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum::pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBlock_oaBlockModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum::pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBlock_oaBlockModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostCreate(oaBlock* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBlock_FromoaBlock(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostModify(oaBlock* p1,oaBlockModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBlock_FromoaBlock(p1));
    PyTuple_SetItem(args,1,PyoaBlockModTypeEnum_FromoaBlockModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreDestroy(oaBlock* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBlock_FromoaBlock(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreModify(oaBlock* p1,oaBlockModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBlock_FromoaBlock(p1));
    PyTuple_SetItem(args,1,PyoaBlockModTypeEnum_FromoaBlockModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBlock)\n"
"    Calls: virtual void onPostCreate(oaBlock* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBlock,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self=(PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)ob;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBlock,oaBlockModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBlock* object,oaBlockModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBlock,simple-oaBlockModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self=(PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)ob;

    PyParamoaBlock p1;
    PyParamoaBlockModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaBlockModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlock_oaBlockModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBlock)\n"
"    Calls: virtual void onPreDestroy(oaBlock* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBlock,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self=(PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)ob;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBlock,oaBlockModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBlock* object,oaBlockModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBlock,simple-oaBlockModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject* self=(PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject*)ob;

    PyParamoaBlock p1;
    PyParamoaBlockModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaBlockModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlock_oaBlockModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBlock_oaBlockModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBlock_oaBlockModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBlock_oaBlockModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBlock_oaBlockModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBlock_oaBlockModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBlock_oaBlockModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBlock_oaBlockModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBlock_oaBlockModTypeEnum",
    sizeof(PyoaStdObserver_oaBlock_oaBlockModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBlock_oaBlockModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBlock_oaBlockModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBlock_oaBlockModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBlock_oaBlockModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBlock_oaBlockModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBlock)\n"
"    Calls: void notifyPostCreateObservers(oaBlock* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBlock,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlock_oaBlockModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBlock,oaBlockModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBlock* object,oaBlockModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBlock,simple-oaBlockModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    PyParamoaBlockModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaBlockModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlock_oaBlockModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBlock)\n"
"    Calls: void notifyPreDestroyObservers(oaBlock* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBlock,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlock_oaBlockModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBlock_oaBlockModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBlock,oaBlockModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBlock* object,oaBlockModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBlock,simple-oaBlockModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    PyParamoaBlockModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaBlockModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlock_oaBlockModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBlock_oaBlockModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBlock_oaBlockModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBlock_oaBlockModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBlock_oaBlockModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBlock_oaBlockModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBlock_oaBlockModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBlock_oaBlockModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBlock_oaBlockModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBlockage_oaBlockageModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBlockage_oaBlockageModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum* p=new pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_dealloc(PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBlockage_oaBlockageModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaBlockage_oaBlockageModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum v1;
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBlockage_oaBlockageModTypeEnum*) ((PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_FromoaStdObserver_oaBlockage_oaBlockageModTypeEnum(oaStdObserver_oaBlockage_oaBlockageModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self = (PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum::pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBlockage_oaBlockageModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum::pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBlockage_oaBlockageModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostCreate(oaBlockage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBlockage_FromoaBlockage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostModify(oaBlockage* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBlockage_FromoaBlockage(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreDestroy(oaBlockage* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBlockage_FromoaBlockage(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreModify(oaBlockage* p1,oaBlockageModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBlockage_FromoaBlockage(p1));
    PyTuple_SetItem(args,1,PyoaBlockageModTypeEnum_FromoaBlockageModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: virtual void onPostCreate(oaBlockage* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBlockage,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBlockage,simple-oaBlockageModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: virtual void onPreDestroy(oaBlockage* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBlockage,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBlockage,simple-oaBlockageModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject* self=(PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject*)ob;

    PyParamoaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBlockage_oaBlockageModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBlockage_oaBlockageModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBlockage_oaBlockageModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBlockage_oaBlockageModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBlockage_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBlockage_oaBlockageModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBlockage_oaBlockageModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBlockage_oaBlockageModTypeEnum",
    sizeof(PyoaStdObserver_oaBlockage_oaBlockageModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBlockage_oaBlockageModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBlockage_oaBlockageModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBlockage_oaBlockageModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBlockage_oaBlockageModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: void notifyPostCreateObservers(oaBlockage* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBlockage,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlockage_oaBlockageModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBlockage,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlockage_oaBlockageModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: void notifyPreDestroyObservers(oaBlockage* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBlockage,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlockage_oaBlockageModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBlockage_oaBlockageModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBlockage,oaBlockageModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBlockage* object,oaBlockageModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBlockage,simple-oaBlockageModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlockage p1;
    PyParamoaBlockageModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaBlockageModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBlockage_oaBlockageModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBlockage_oaBlockageModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBlockage_oaBlockageModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBlockage_oaBlockageModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBlockage_oaBlockageModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBlockage_oaBlockageModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBlockage_oaBlockageModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBlockage_oaBlockageModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBooleanProp_oaPropModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBooleanProp_oaPropModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum* p=new pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_dealloc(PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBooleanProp_oaPropModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaBooleanProp_oaPropModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum v1;
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBooleanProp_oaPropModTypeEnum*) ((PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_FromoaStdObserver_oaBooleanProp_oaPropModTypeEnum(oaStdObserver_oaBooleanProp_oaPropModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self = (PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum::pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBooleanProp_oaPropModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum::pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBooleanProp_oaPropModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostCreate(oaBooleanProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBooleanProp_FromoaBooleanProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostModify(oaBooleanProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBooleanProp_FromoaBooleanProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreDestroy(oaBooleanProp* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBooleanProp_FromoaBooleanProp(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreModify(oaBooleanProp* p1,oaPropModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBooleanProp_FromoaBooleanProp(p1));
    PyTuple_SetItem(args,1,PyoaPropModTypeEnum_FromoaPropModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBooleanProp)\n"
"    Calls: virtual void onPostCreate(oaBooleanProp* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBooleanProp,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)ob;

    PyParamoaBooleanProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBooleanProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBooleanProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBooleanProp,simple-oaPropModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)ob;

    PyParamoaBooleanProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBooleanProp)\n"
"    Calls: virtual void onPreDestroy(oaBooleanProp* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBooleanProp,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)ob;

    PyParamoaBooleanProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBooleanProp,oaPropModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBooleanProp* object,oaPropModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBooleanProp,simple-oaPropModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject* self=(PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject*)ob;

    PyParamoaBooleanProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanProp_oaPropModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBooleanProp_oaPropModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBooleanProp_oaPropModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBooleanProp_oaPropModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBooleanProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBooleanProp_oaPropModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBooleanProp_oaPropModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBooleanProp_oaPropModTypeEnum",
    sizeof(PyoaStdObserver_oaBooleanProp_oaPropModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBooleanProp_oaPropModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBooleanProp_oaPropModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBooleanProp_oaPropModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBooleanProp_oaPropModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBooleanProp)\n"
"    Calls: void notifyPostCreateObservers(oaBooleanProp* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBooleanProp,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanProp_oaPropModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBooleanProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBooleanProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBooleanProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanProp_oaPropModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBooleanProp)\n"
"    Calls: void notifyPreDestroyObservers(oaBooleanProp* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBooleanProp,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanProp_oaPropModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBooleanProp_oaPropModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBooleanProp,oaPropModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBooleanProp* object,oaPropModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBooleanProp,simple-oaPropModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanProp p1;
    PyParamoaPropModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanProp_Convert,&p1,
          &PyoaPropModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanProp_oaPropModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBooleanProp_oaPropModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBooleanProp_oaPropModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBooleanProp_oaPropModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBooleanProp_oaPropModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBooleanProp_oaPropModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBooleanProp_oaPropModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBooleanProp_oaPropModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBooleanValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBooleanValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBooleanValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaBooleanValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBooleanValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_FromoaStdObserver_oaBooleanValue_oaValueModTypeEnum(oaStdObserver_oaBooleanValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum::pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBooleanValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum::pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBooleanValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostCreate(oaBooleanValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBooleanValue_FromoaBooleanValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostModify(oaBooleanValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBooleanValue_FromoaBooleanValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreDestroy(oaBooleanValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBooleanValue_FromoaBooleanValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreModify(oaBooleanValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBooleanValue_FromoaBooleanValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBooleanValue)\n"
"    Calls: virtual void onPostCreate(oaBooleanValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBooleanValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBooleanValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBooleanValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBooleanValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBooleanValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBooleanValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBooleanValue)\n"
"    Calls: virtual void onPreDestroy(oaBooleanValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBooleanValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBooleanValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBooleanValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBooleanValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBooleanValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBooleanValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBooleanValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBooleanValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBooleanValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBooleanValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBooleanValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBooleanValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBooleanValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBooleanValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaBooleanValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBooleanValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBooleanValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBooleanValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBooleanValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBooleanValue)\n"
"    Calls: void notifyPostCreateObservers(oaBooleanValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBooleanValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBooleanValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBooleanValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBooleanValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBooleanValue)\n"
"    Calls: void notifyPreDestroyObservers(oaBooleanValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBooleanValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBooleanValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBooleanValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBooleanValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBooleanValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBooleanValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBooleanValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBooleanValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBooleanValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBooleanValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBooleanValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBooleanValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBooleanValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBooleanValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBooleanValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBooleanValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_dealloc(PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBoundary_oaBoundaryModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum v1;
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBoundary_oaBoundaryModTypeEnum*) ((PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_FromoaStdObserver_oaBoundary_oaBoundaryModTypeEnum(oaStdObserver_oaBoundary_oaBoundaryModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostCreate(oaBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBoundary_FromoaBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostModify(oaBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBoundary_FromoaBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreDestroy(oaBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBoundary_FromoaBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreModify(oaBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBoundary_FromoaBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: virtual void onPostCreate(oaBoundary* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBoundary,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: virtual void onPreDestroy(oaBoundary* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBoundary,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBoundary_oaBoundaryModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBoundary_oaBoundaryModTypeEnum",
    sizeof(PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: void notifyPostCreateObservers(oaBoundary* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBoundary,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: void notifyPreDestroyObservers(oaBoundary* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBoundary,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoundary_oaBoundaryModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBoundary_oaBoundaryModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBoundary_oaBoundaryModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBoundary_oaBoundaryModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBoundary_oaBoundaryModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum* p=new pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_dealloc(PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum v1;
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum*) ((PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_FromoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self = (PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostCreate(oaBoxArrayValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBoxArrayValue_FromoaBoxArrayValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostModify(oaBoxArrayValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBoxArrayValue_FromoaBoxArrayValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreDestroy(oaBoxArrayValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBoxArrayValue_FromoaBoxArrayValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreModify(oaBoxArrayValue* p1,oaValueModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBoxArrayValue_FromoaBoxArrayValue(p1));
    PyTuple_SetItem(args,1,PyoaValueModTypeEnum_FromoaValueModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBoxArrayValue)\n"
"    Calls: virtual void onPostCreate(oaBoxArrayValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBoxArrayValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBoxArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoxArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBoxArrayValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBoxArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBoxArrayValue,simple-oaValueModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBoxArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoxArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBoxArrayValue)\n"
"    Calls: virtual void onPreDestroy(oaBoxArrayValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBoxArrayValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBoxArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoxArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBoxArrayValue,oaValueModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBoxArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBoxArrayValue,simple-oaValueModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject* self=(PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject*)ob;

    PyParamoaBoxArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoxArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum",
    sizeof(PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBoxArrayValue)\n"
"    Calls: void notifyPostCreateObservers(oaBoxArrayValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBoxArrayValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoxArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoxArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBoxArrayValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBoxArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBoxArrayValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoxArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoxArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBoxArrayValue)\n"
"    Calls: void notifyPreDestroyObservers(oaBoxArrayValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBoxArrayValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoxArrayValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoxArrayValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBoxArrayValue,oaValueModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBoxArrayValue* object,oaValueModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBoxArrayValue,simple-oaValueModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBoxArrayValue p1;
    PyParamoaValueModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoxArrayValue_Convert,&p1,
          &PyoaValueModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBoxArrayValue_oaValueModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBundleNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBundleNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBundleNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaBundleNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBundleNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBundleNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_FromoaStdObserver_oaBundleNet_oaNetModTypeEnum(oaStdObserver_oaBundleNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum::pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBundleNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum::pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBundleNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostCreate(oaBundleNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBundleNet_FromoaBundleNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostModify(oaBundleNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBundleNet_FromoaBundleNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreDestroy(oaBundleNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBundleNet_FromoaBundleNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreModify(oaBundleNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBundleNet_FromoaBundleNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBundleNet)\n"
"    Calls: virtual void onPostCreate(oaBundleNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBundleNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBundleNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBundleNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBundleNet)\n"
"    Calls: virtual void onPreDestroy(oaBundleNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBundleNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBundleNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBundleNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBundleNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBundleNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBundleNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBundleNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBundleNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBundleNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBundleNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaBundleNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBundleNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBundleNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBundleNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBundleNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBundleNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBundleNet)\n"
"    Calls: void notifyPostCreateObservers(oaBundleNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBundleNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBundleNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBundleNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBundleNet)\n"
"    Calls: void notifyPreDestroyObservers(oaBundleNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBundleNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBundleNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBundleNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBundleNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBundleNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBundleNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBundleNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBundleNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBundleNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBundleNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBundleTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBundleTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBundleTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaBundleTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBundleTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_FromoaStdObserver_oaBundleTerm_oaTermModTypeEnum(oaStdObserver_oaBundleTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBundleTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBundleTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostCreate(oaBundleTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBundleTerm_FromoaBundleTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostModify(oaBundleTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBundleTerm_FromoaBundleTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreDestroy(oaBundleTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBundleTerm_FromoaBundleTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreModify(oaBundleTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBundleTerm_FromoaBundleTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBundleTerm)\n"
"    Calls: virtual void onPostCreate(oaBundleTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBundleTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBundleTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBundleTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBundleTerm)\n"
"    Calls: virtual void onPreDestroy(oaBundleTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBundleTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBundleTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBundleTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBundleTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBundleTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBundleTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBundleTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBundleTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBundleTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBundleTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBundleTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaBundleTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBundleTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBundleTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBundleTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBundleTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBundleTerm)\n"
"    Calls: void notifyPostCreateObservers(oaBundleTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBundleTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBundleTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBundleTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBundleTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaBundleTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBundleTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBundleTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBundleTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBundleTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBundleTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBundleTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBundleTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBundleTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBundleTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBundleTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBundleTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusNetBit_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusNetBit_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBusNetBit_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaBusNetBit_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBusNetBit_oaNetModTypeEnum*) ((PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_FromoaStdObserver_oaBusNetBit_oaNetModTypeEnum(oaStdObserver_oaBusNetBit_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum::pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBusNetBit_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum::pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBusNetBit_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostCreate(oaBusNetBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusNetBit_FromoaBusNetBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostModify(oaBusNetBit* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusNetBit_FromoaBusNetBit(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreDestroy(oaBusNetBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusNetBit_FromoaBusNetBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreModify(oaBusNetBit* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusNetBit_FromoaBusNetBit(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBusNetBit)\n"
"    Calls: virtual void onPostCreate(oaBusNetBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBusNetBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBusNetBit,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBusNetBit,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBusNetBit)\n"
"    Calls: virtual void onPreDestroy(oaBusNetBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBusNetBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBusNetBit,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBusNetBit,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetBit_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBusNetBit_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBusNetBit_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBusNetBit_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBusNetBit_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBusNetBit_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBusNetBit_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBusNetBit_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaBusNetBit_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBusNetBit_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBusNetBit_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBusNetBit_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBusNetBit_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBusNetBit)\n"
"    Calls: void notifyPostCreateObservers(oaBusNetBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBusNetBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetBit_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBusNetBit,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBusNetBit,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetBit_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBusNetBit)\n"
"    Calls: void notifyPreDestroyObservers(oaBusNetBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBusNetBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetBit_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusNetBit_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBusNetBit,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBusNetBit,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetBit_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBusNetBit_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBusNetBit_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBusNetBit_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBusNetBit_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBusNetBit_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBusNetBit_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum v1;
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum*) ((PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_FromoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostCreate(oaBusNetDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusNetDef_FromoaBusNetDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostModify(oaBusNetDef* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusNetDef_FromoaBusNetDef(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy(oaBusNetDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusNetDef_FromoaBusNetDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreModify(oaBusNetDef* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusNetDef_FromoaBusNetDef(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: virtual void onPostCreate(oaBusNetDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBusNetDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: virtual void onPreDestroy(oaBusNetDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBusNetDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum",
    sizeof(PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: void notifyPostCreateObservers(oaBusNetDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBusNetDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: void notifyPreDestroyObservers(oaBusNetDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBusNetDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBusNetDef_oaBusNetDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBusNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBusNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaStdObserver_oaBusNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBusNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBusNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBusNet_oaNetModTypeEnum_FromoaStdObserver_oaBusNet_oaNetModTypeEnum(oaStdObserver_oaBusNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum::pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBusNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum::pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBusNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostCreate(oaBusNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusNet_FromoaBusNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostModify(oaBusNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusNet_FromoaBusNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreDestroy(oaBusNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusNet_FromoaBusNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreModify(oaBusNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusNet_FromoaBusNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBusNet)\n"
"    Calls: virtual void onPostCreate(oaBusNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBusNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBusNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBusNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBusNet)\n"
"    Calls: virtual void onPreDestroy(oaBusNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBusNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBusNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBusNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject*)ob;

    PyParamoaBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBusNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBusNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBusNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBusNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBusNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBusNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBusNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBusNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaBusNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBusNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBusNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBusNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBusNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBusNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBusNet)\n"
"    Calls: void notifyPostCreateObservers(oaBusNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBusNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBusNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBusNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBusNet)\n"
"    Calls: void notifyPreDestroyObservers(oaBusNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBusNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBusNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBusNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBusNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBusNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBusNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBusNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBusNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBusNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBusNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBusNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBusNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusTermBit_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusTermBit_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBusTermBit_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaBusTermBit_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBusTermBit_oaTermModTypeEnum*) ((PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_FromoaStdObserver_oaBusTermBit_oaTermModTypeEnum(oaStdObserver_oaBusTermBit_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum::pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBusTermBit_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum::pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBusTermBit_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostCreate(oaBusTermBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusTermBit_FromoaBusTermBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostModify(oaBusTermBit* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusTermBit_FromoaBusTermBit(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreDestroy(oaBusTermBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusTermBit_FromoaBusTermBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreModify(oaBusTermBit* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusTermBit_FromoaBusTermBit(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBusTermBit)\n"
"    Calls: virtual void onPostCreate(oaBusTermBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBusTermBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBusTermBit,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBusTermBit,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBusTermBit)\n"
"    Calls: virtual void onPreDestroy(oaBusTermBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBusTermBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBusTermBit,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBusTermBit,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermBit_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBusTermBit_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBusTermBit_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBusTermBit_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBusTermBit_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBusTermBit_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBusTermBit_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBusTermBit_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaBusTermBit_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBusTermBit_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBusTermBit_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBusTermBit_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBusTermBit_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBusTermBit)\n"
"    Calls: void notifyPostCreateObservers(oaBusTermBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBusTermBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermBit_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBusTermBit,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBusTermBit,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermBit_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBusTermBit)\n"
"    Calls: void notifyPreDestroyObservers(oaBusTermBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBusTermBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermBit_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusTermBit_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBusTermBit,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBusTermBit,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermBit_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBusTermBit_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBusTermBit_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBusTermBit_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBusTermBit_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBusTermBit_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBusTermBit_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self = (PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum* p=new pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum* p=new pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum v1;
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum*) ((PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_FromoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self = (PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostCreate(oaBusTermDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusTermDef_FromoaBusTermDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostModify(oaBusTermDef* p1,oaBusTermDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusTermDef_FromoaBusTermDef(p1));
    PyTuple_SetItem(args,1,PyoaBusTermDefModTypeEnum_FromoaBusTermDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy(oaBusTermDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusTermDef_FromoaBusTermDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreModify(oaBusTermDef* p1,oaBusTermDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusTermDef_FromoaBusTermDef(p1));
    PyTuple_SetItem(args,1,PyoaBusTermDefModTypeEnum_FromoaBusTermDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: virtual void onPostCreate(oaBusTermDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBusTermDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: virtual void onPreDestroy(oaBusTermDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBusTermDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum",
    sizeof(PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: void notifyPostCreateObservers(oaBusTermDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBusTermDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: void notifyPreDestroyObservers(oaBusTermDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBusTermDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBusTermDef_oaBusTermDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaBusTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaBusTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaBusTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaBusTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaBusTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_FromoaStdObserver_oaBusTerm_oaTermModTypeEnum(oaStdObserver_oaBusTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaBusTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaBusTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostCreate(oaBusTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusTerm_FromoaBusTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostModify(oaBusTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusTerm_FromoaBusTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreDestroy(oaBusTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaBusTerm_FromoaBusTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreModify(oaBusTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaBusTerm_FromoaBusTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaBusTerm)\n"
"    Calls: virtual void onPostCreate(oaBusTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaBusTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaBusTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaBusTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaBusTerm)\n"
"    Calls: virtual void onPreDestroy(oaBusTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaBusTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaBusTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaBusTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaBusTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaBusTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaBusTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaBusTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaBusTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaBusTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaBusTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaBusTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaBusTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaBusTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaBusTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaBusTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaBusTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaBusTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaBusTerm)\n"
"    Calls: void notifyPostCreateObservers(oaBusTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaBusTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaBusTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaBusTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaBusTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaBusTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaBusTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaBusTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaBusTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaBusTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaBusTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaBusTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaBusTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaBusTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaBusTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaBusTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaBusTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaCMap_oaCMapModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self = (PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCMap_oaCMapModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum* p=new pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaCMap_oaCMapModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum* p=new pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_dealloc(PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaCMap_oaCMapModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum value;
    int convert_status=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaCMap_oaCMapModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum v1;
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaCMap_oaCMapModTypeEnum*) ((PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaCMap_oaCMapModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaCMap_oaCMapModTypeEnum_FromoaStdObserver_oaCMap_oaCMapModTypeEnum(oaStdObserver_oaCMap_oaCMapModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self = (PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum::pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaCMap_oaCMapModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum::pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaCMap_oaCMapModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostCreate(oaCMap* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCMap_FromoaCMap(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostModify(oaCMap* p1,oaCMapModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCMap_FromoaCMap(p1));
    PyTuple_SetItem(args,1,PyoaCMapModTypeEnum_FromoaCMapModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreDestroy(oaCMap* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaCMap_FromoaCMap(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreModify(oaCMap* p1,oaCMapModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaCMap_FromoaCMap(p1));
    PyTuple_SetItem(args,1,PyoaCMapModTypeEnum_FromoaCMapModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaCMap)\n"
"    Calls: virtual void onPostCreate(oaCMap* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaCMap,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self=(PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)ob;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaCMap,oaCMapModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaCMap* object,oaCMapModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaCMap,simple-oaCMapModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self=(PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)ob;

    PyParamoaCMap p1;
    PyParamoaCMapModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaCMapModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCMap_oaCMapModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaCMap)\n"
"    Calls: virtual void onPreDestroy(oaCMap* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaCMap,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self=(PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)ob;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaCMap,oaCMapModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaCMap* object,oaCMapModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaCMap,simple-oaCMapModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum data;
    int convert_status=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject* self=(PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject*)ob;

    PyParamoaCMap p1;
    PyParamoaCMapModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaCMapModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaCMap_oaCMapModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaCMap_oaCMapModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum data;
  int convert_status=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaCMap_oaCMapModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaCMap_oaCMapModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaCMap_oaCMapModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaCMap_oaCMapModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaCMap_oaCMapModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaCMap_oaCMapModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaCMap_oaCMapModTypeEnum",
    sizeof(PyoaStdObserver_oaCMap_oaCMapModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaCMap_oaCMapModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaCMap_oaCMapModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaCMap_oaCMapModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaCMap_oaCMapModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaCMap_oaCMapModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaCMap)\n"
"    Calls: void notifyPostCreateObservers(oaCMap* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaCMap,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCMap_oaCMapModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaCMap,oaCMapModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaCMap* object,oaCMapModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaCMap,simple-oaCMapModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCMap p1;
    PyParamoaCMapModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaCMapModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCMap_oaCMapModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaCMap)\n"
"    Calls: void notifyPreDestroyObservers(oaCMap* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaCMap,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCMap_oaCMapModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaCMap_oaCMapModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaCMap,oaCMapModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaCMap* object,oaCMapModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaCMap,simple-oaCMapModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaCMap p1;
    PyParamoaCMapModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaCMapModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaCMap_oaCMapModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaCMap_oaCMapModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaCMap_oaCMapModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaCMap_oaCMapModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaCMap_oaCMapModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaCMap_oaCMapModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaCMap_oaCMapModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaCMap_oaCMapModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaCMap_oaCMapModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

