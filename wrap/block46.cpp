
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaModTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModTerm_oaTermModTypeEnum_FromoaStdObserver_oaModTerm_oaTermModTypeEnum(oaStdObserver_oaModTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostCreate(oaModTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModTerm_FromoaModTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostModify(oaModTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModTerm_FromoaModTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreDestroy(oaModTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModTerm_FromoaModTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreModify(oaModTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModTerm_FromoaModTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModTerm)\n"
"    Calls: virtual void onPostCreate(oaModTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModTerm)\n"
"    Calls: virtual void onPreDestroy(oaModTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaModTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaModTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModTerm)\n"
"    Calls: void notifyPostCreateObservers(oaModTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaModTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum*) ((PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_FromoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostCreate(oaModVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModVectorInstBit_FromoaModVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostModify(oaModVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModVectorInstBit_FromoaModVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreDestroy(oaModVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModVectorInstBit_FromoaModVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreModify(oaModVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModVectorInstBit_FromoaModVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModVectorInstBit)\n"
"    Calls: virtual void onPostCreate(oaModVectorInstBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModVectorInstBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModVectorInstBit)\n"
"    Calls: virtual void onPreDestroy(oaModVectorInstBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModVectorInstBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModVectorInstBit)\n"
"    Calls: void notifyPostCreateObservers(oaModVectorInstBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModVectorInstBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModVectorInstBit)\n"
"    Calls: void notifyPreDestroyObservers(oaModVectorInstBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModVectorInstBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModVectorInstBit_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self = (PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum* p=new pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum* p=new pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[81];
    sprintf(buffer,"<oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum v1;
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum*) ((PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_FromoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self = (PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate(oaModVectorInstDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModVectorInstDef_FromoaModVectorInstDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify(oaModVectorInstDef* p1,oaVectorInstDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModVectorInstDef_FromoaModVectorInstDef(p1));
    PyTuple_SetItem(args,1,PyoaVectorInstDefModTypeEnum_FromoaVectorInstDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy(oaModVectorInstDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModVectorInstDef_FromoaModVectorInstDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify(oaModVectorInstDef* p1,oaVectorInstDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModVectorInstDef_FromoaModVectorInstDef(p1));
    PyTuple_SetItem(args,1,PyoaVectorInstDefModTypeEnum_FromoaVectorInstDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModVectorInstDef)\n"
"    Calls: virtual void onPostCreate(oaModVectorInstDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModVectorInstDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaModVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModVectorInstDef)\n"
"    Calls: virtual void onPreDestroy(oaModVectorInstDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModVectorInstDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaModVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum",
    sizeof(PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModVectorInstDef)\n"
"    Calls: void notifyPostCreateObservers(oaModVectorInstDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModVectorInstDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModVectorInstDef)\n"
"    Calls: void notifyPreDestroyObservers(oaModVectorInstDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModVectorInstDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModVectorInstDef_oaVectorInstDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModVectorInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModVectorInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaModVectorInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModVectorInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_FromoaStdObserver_oaModVectorInst_oaInstModTypeEnum(oaStdObserver_oaModVectorInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModVectorInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModVectorInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostCreate(oaModVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModVectorInst_FromoaModVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostModify(oaModVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModVectorInst_FromoaModVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreDestroy(oaModVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModVectorInst_FromoaModVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreModify(oaModVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModVectorInst_FromoaModVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModVectorInst)\n"
"    Calls: virtual void onPostCreate(oaModVectorInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModVectorInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModVectorInst)\n"
"    Calls: virtual void onPreDestroy(oaModVectorInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModVectorInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaModVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModVectorInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModVectorInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModVectorInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModVectorInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaModVectorInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModVectorInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModVectorInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModVectorInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModVectorInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModVectorInst)\n"
"    Calls: void notifyPostCreateObservers(oaModVectorInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModVectorInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModVectorInst)\n"
"    Calls: void notifyPreDestroyObservers(oaModVectorInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModVectorInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModVectorInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModVectorInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModVectorInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModVectorInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModVectorInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModVectorInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModVectorInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModVectorInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaModule_oaModuleModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self = (PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModule_oaModuleModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaModule_oaModuleModTypeEnum* p=new pyv_oaStdObserver_oaModule_oaModuleModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaModule_oaModuleModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaModule_oaModuleModTypeEnum* p=new pyv_oaStdObserver_oaModule_oaModuleModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaModule_oaModuleModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaModule_oaModuleModTypeEnum_tp_dealloc(PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaModule_oaModuleModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum value;
    int convert_status=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaModule_oaModuleModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaModule_oaModuleModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum v1;
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaModule_oaModuleModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaModule_oaModuleModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaModule_oaModuleModTypeEnum*) ((PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaModule_oaModuleModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaModule_oaModuleModTypeEnum_FromoaStdObserver_oaModule_oaModuleModTypeEnum(oaStdObserver_oaModule_oaModuleModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self = (PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModule_oaModuleModTypeEnum::pyv_oaStdObserver_oaModule_oaModuleModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaModule_oaModuleModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaModule_oaModuleModTypeEnum::pyv_oaStdObserver_oaModule_oaModuleModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaModule_oaModuleModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModule_oaModuleModTypeEnum::onPostCreate(oaModule* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModule_FromoaModule(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModule_oaModuleModTypeEnum::onPostModify(oaModule* p1,oaModuleModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModule_FromoaModule(p1));
    PyTuple_SetItem(args,1,PyoaModuleModTypeEnum_FromoaModuleModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModule_oaModuleModTypeEnum::onPreDestroy(oaModule* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaModule_FromoaModule(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaModule_oaModuleModTypeEnum::onPreModify(oaModule* p1,oaModuleModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaModule_FromoaModule(p1));
    PyTuple_SetItem(args,1,PyoaModuleModTypeEnum_FromoaModuleModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaModule_oaModuleModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaModule)\n"
"    Calls: virtual void onPostCreate(oaModule* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaModule,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self=(PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)ob;

    PyParamoaModule p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModule_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModule_oaModuleModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaModule,oaModuleModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaModule* object,oaModuleModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaModule,simple-oaModuleModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self=(PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)ob;

    PyParamoaModule p1;
    PyParamoaModuleModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaModuleModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModule_oaModuleModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaModule)\n"
"    Calls: virtual void onPreDestroy(oaModule* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaModule,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self=(PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)ob;

    PyParamoaModule p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModule_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModule_oaModuleModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaModule,oaModuleModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaModule* object,oaModuleModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaModule,simple-oaModuleModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum data;
    int convert_status=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaModule_oaModuleModTypeEnumObject* self=(PyoaStdObserver_oaModule_oaModuleModTypeEnumObject*)ob;

    PyParamoaModule p1;
    PyParamoaModuleModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaModuleModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaModule_oaModuleModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaModule_oaModuleModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaModule_oaModuleModTypeEnum data;
  int convert_status=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaModule_oaModuleModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaModule_oaModuleModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaModule_oaModuleModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaModule_oaModuleModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaModule_oaModuleModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaModule_oaModuleModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaModule_oaModuleModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaModule_oaModuleModTypeEnum",
    sizeof(PyoaStdObserver_oaModule_oaModuleModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaModule_oaModuleModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaModule_oaModuleModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaModule_oaModuleModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaModule_oaModuleModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaModule_oaModuleModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaModule_oaModuleModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaModule_oaModuleModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaModule)\n"
"    Calls: void notifyPostCreateObservers(oaModule* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaModule,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModule p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModule_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModule_oaModuleModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaModule,oaModuleModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaModule* object,oaModuleModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaModule,simple-oaModuleModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModule p1;
    PyParamoaModuleModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaModuleModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModule_oaModuleModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaModule)\n"
"    Calls: void notifyPreDestroyObservers(oaModule* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaModule,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModule p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModule_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModule_oaModuleModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaModule_oaModuleModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaModule,oaModuleModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaModule* object,oaModuleModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaModule,simple-oaModuleModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaModule p1;
    PyParamoaModuleModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaModuleModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaModule_oaModuleModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaModule_oaModuleModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaModule_oaModuleModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaModule_oaModuleModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaModule_oaModuleModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaModule_oaModuleModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaModule_oaModuleModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaModule_oaModuleModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaModule_oaModuleModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum* p=new pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_dealloc(PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum value;
    int convert_status=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum v1;
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum*) ((PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_FromoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self = (PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostCreate(oaMutualInductor* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaMutualInductor_FromoaMutualInductor(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostModify(oaMutualInductor* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaMutualInductor_FromoaMutualInductor(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreDestroy(oaMutualInductor* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaMutualInductor_FromoaMutualInductor(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreModify(oaMutualInductor* p1,oaDeviceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaMutualInductor_FromoaMutualInductor(p1));
    PyTuple_SetItem(args,1,PyoaDeviceModTypeEnum_FromoaDeviceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaMutualInductor)\n"
"    Calls: virtual void onPostCreate(oaMutualInductor* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaMutualInductor,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaMutualInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMutualInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaMutualInductor,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaMutualInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaMutualInductor,simple-oaDeviceModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaMutualInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMutualInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaMutualInductor)\n"
"    Calls: virtual void onPreDestroy(oaMutualInductor* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaMutualInductor,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaMutualInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMutualInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaMutualInductor,oaDeviceModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaMutualInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaMutualInductor,simple-oaDeviceModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject* self=(PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject*)ob;

    PyParamoaMutualInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMutualInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum data;
  int convert_status=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum",
    sizeof(PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaMutualInductor)\n"
"    Calls: void notifyPostCreateObservers(oaMutualInductor* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaMutualInductor,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMutualInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMutualInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaMutualInductor,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaMutualInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaMutualInductor,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMutualInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMutualInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaMutualInductor)\n"
"    Calls: void notifyPreDestroyObservers(oaMutualInductor* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaMutualInductor,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMutualInductor p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaMutualInductor_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaMutualInductor,oaDeviceModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaMutualInductor* object,oaDeviceModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaMutualInductor,simple-oaDeviceModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaMutualInductor p1;
    PyParamoaDeviceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaMutualInductor_Convert,&p1,
          &PyoaDeviceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaMutualInductor_oaDeviceModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaNetConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaNetConnectDef_FromoaNetConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostModify(oaNetConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaNetConnectDef_FromoaNetConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaNetConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaNetConnectDef_FromoaNetConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreModify(oaNetConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaNetConnectDef_FromoaNetConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaNetConnectDef)\n"
"    Calls: virtual void onPostCreate(oaNetConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaNetConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaNetConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaNetConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaNetConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaNetConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaNetConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaNetConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaNetConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaNetConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaNetConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaNetConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaStdObserver_oaNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaNet_oaNetModTypeEnum_FromoaStdObserver_oaNet_oaNetModTypeEnum(oaStdObserver_oaNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaNet_oaNetModTypeEnum::pyv_oaStdObserver_oaNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaNet_oaNetModTypeEnum::pyv_oaStdObserver_oaNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNet_oaNetModTypeEnum::onPostCreate(oaNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaNet_FromoaNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNet_oaNetModTypeEnum::onPostModify(oaNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaNet_FromoaNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNet_oaNetModTypeEnum::onPreDestroy(oaNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaNet_FromoaNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNet_oaNetModTypeEnum::onPreModify(oaNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaNet_FromoaNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaNet)\n"
"    Calls: virtual void onPostCreate(oaNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)ob;

    PyParamoaNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)ob;

    PyParamoaNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaNet)\n"
"    Calls: virtual void onPreDestroy(oaNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)ob;

    PyParamoaNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaNet_oaNetModTypeEnumObject*)ob;

    PyParamoaNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaNet)\n"
"    Calls: void notifyPostCreateObservers(oaNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaNet)\n"
"    Calls: void notifyPreDestroyObservers(oaNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaNode_oaNodeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self = (PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaNode_oaNodeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaNode_oaNodeModTypeEnum* p=new pyv_oaStdObserver_oaNode_oaNodeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaNode_oaNodeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaNode_oaNodeModTypeEnum* p=new pyv_oaStdObserver_oaNode_oaNodeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaNode_oaNodeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaNode_oaNodeModTypeEnum_tp_dealloc(PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaNode_oaNodeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaStdObserver_oaNode_oaNodeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaNode_oaNodeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum v1;
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaNode_oaNodeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaNode_oaNodeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaNode_oaNodeModTypeEnum*) ((PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaNode_oaNodeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaNode_oaNodeModTypeEnum_FromoaStdObserver_oaNode_oaNodeModTypeEnum(oaStdObserver_oaNode_oaNodeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self = (PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaNode_oaNodeModTypeEnum::pyv_oaStdObserver_oaNode_oaNodeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaNode_oaNodeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaNode_oaNodeModTypeEnum::pyv_oaStdObserver_oaNode_oaNodeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaNode_oaNodeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNode_oaNodeModTypeEnum::onPostCreate(oaNode* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaNode_FromoaNode(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNode_oaNodeModTypeEnum::onPostModify(oaNode* p1,oaNodeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaNode_FromoaNode(p1));
    PyTuple_SetItem(args,1,PyoaNodeModTypeEnum_FromoaNodeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNode_oaNodeModTypeEnum::onPreDestroy(oaNode* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaNode_FromoaNode(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaNode_oaNodeModTypeEnum::onPreModify(oaNode* p1,oaNodeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaNode_FromoaNode(p1));
    PyTuple_SetItem(args,1,PyoaNodeModTypeEnum_FromoaNodeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaNode_oaNodeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaNode)\n"
"    Calls: virtual void onPostCreate(oaNode* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaNode,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNode_oaNodeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaNode,oaNodeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaNode,simple-oaNodeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNode_oaNodeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaNode)\n"
"    Calls: virtual void onPreDestroy(oaNode* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaNode,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNode_oaNodeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaNode,oaNodeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaNode,simple-oaNodeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaNode_oaNodeModTypeEnumObject* self=(PyoaStdObserver_oaNode_oaNodeModTypeEnumObject*)ob;

    PyParamoaNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaNode_oaNodeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaNode_oaNodeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaNode_oaNodeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaNode_oaNodeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaNode_oaNodeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaNode_oaNodeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaNode_oaNodeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaNode_oaNodeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaNode_oaNodeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaNode_oaNodeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaNode_oaNodeModTypeEnum",
    sizeof(PyoaStdObserver_oaNode_oaNodeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaNode_oaNodeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaNode_oaNodeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaNode_oaNodeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaNode_oaNodeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaNode_oaNodeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaNode_oaNodeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaNode_oaNodeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaNode)\n"
"    Calls: void notifyPostCreateObservers(oaNode* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaNode,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNode_oaNodeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaNode,oaNodeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaNode,simple-oaNodeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNode_oaNodeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaNode)\n"
"    Calls: void notifyPreDestroyObservers(oaNode* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaNode,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNode_oaNodeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaNode_oaNodeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaNode,oaNodeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaNode* object,oaNodeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaNode,simple-oaNodeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNode p1;
    PyParamoaNodeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaNodeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaNode_oaNodeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaNode_oaNodeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaNode_oaNodeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaNode_oaNodeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaNode_oaNodeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaNode_oaNodeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaNode_oaNodeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaNode_oaNodeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaNode_oaNodeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccArrayInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[68];
    sprintf(buffer,"<oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccArrayInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_FromoaStdObserver_oaOccArrayInst_oaInstModTypeEnum(oaStdObserver_oaOccArrayInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostCreate(oaOccArrayInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccArrayInst_FromoaOccArrayInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostModify(oaOccArrayInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccArrayInst_FromoaOccArrayInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreDestroy(oaOccArrayInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccArrayInst_FromoaOccArrayInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreModify(oaOccArrayInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccArrayInst_FromoaOccArrayInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccArrayInst)\n"
"    Calls: virtual void onPostCreate(oaOccArrayInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccArrayInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccArrayInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccArrayInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccArrayInst)\n"
"    Calls: virtual void onPreDestroy(oaOccArrayInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccArrayInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccArrayInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccArrayInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccArrayInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccArrayInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccArrayInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccArrayInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccArrayInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccArrayInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccArrayInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccArrayInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccArrayInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccArrayInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccArrayInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccArrayInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccArrayInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccArrayInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccArrayInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccArrayInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccArrayInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccArrayInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccArrayInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccArrayInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccArrayInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccArrayInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[81];
    sprintf(buffer,"<oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_FromoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostCreate(oaOccAssignAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccAssignAssignment_FromoaOccAssignAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostModify(oaOccAssignAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccAssignAssignment_FromoaOccAssignAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy(oaOccAssignAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccAssignAssignment_FromoaOccAssignAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreModify(oaOccAssignAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccAssignAssignment_FromoaOccAssignAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccAssignAssignment)\n"
"    Calls: virtual void onPostCreate(oaOccAssignAssignment* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccAssignAssignment,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccAssignAssignment)\n"
"    Calls: virtual void onPreDestroy(oaOccAssignAssignment* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccAssignAssignment,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccAssignAssignment)\n"
"    Calls: void notifyPostCreateObservers(oaOccAssignAssignment* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccAssignAssignment,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccAssignAssignment)\n"
"    Calls: void notifyPreDestroyObservers(oaOccAssignAssignment* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccAssignAssignment,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccAssignAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccAssignAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccAssignAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccAssignAssignment_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[76];
    sprintf(buffer,"<oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_FromoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostCreate(oaOccAssignValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccAssignValue_FromoaOccAssignValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostModify(oaOccAssignValue* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccAssignValue_FromoaOccAssignValue(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreDestroy(oaOccAssignValue* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccAssignValue_FromoaOccAssignValue(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreModify(oaOccAssignValue* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccAssignValue_FromoaOccAssignValue(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccAssignValue)\n"
"    Calls: virtual void onPostCreate(oaOccAssignValue* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccAssignValue,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccAssignValue)\n"
"    Calls: virtual void onPreDestroy(oaOccAssignValue* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccAssignValue,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccAssignValue)\n"
"    Calls: void notifyPostCreateObservers(oaOccAssignValue* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccAssignValue,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccAssignValue)\n"
"    Calls: void notifyPreDestroyObservers(oaOccAssignValue* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccAssignValue,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccAssignValue,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccAssignValue* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccAssignValue,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignValue p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignValue_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccAssignValue_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum* p=new pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum v1;
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum*) ((PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_FromoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self = (PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostCreate(oaOccAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccAssignment_FromoaOccAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostModify(oaOccAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccAssignment_FromoaOccAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreDestroy(oaOccAssignment* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccAssignment_FromoaOccAssignment(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreModify(oaOccAssignment* p1,oaAssignmentModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccAssignment_FromoaOccAssignment(p1));
    PyTuple_SetItem(args,1,PyoaAssignmentModTypeEnum_FromoaAssignmentModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccAssignment)\n"
"    Calls: virtual void onPostCreate(oaOccAssignment* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccAssignment,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccAssignment)\n"
"    Calls: virtual void onPreDestroy(oaOccAssignment* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccAssignment,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccAssignment,simple-oaAssignmentModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject* self=(PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject*)ob;

    PyParamoaOccAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum",
    sizeof(PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccAssignment)\n"
"    Calls: void notifyPostCreateObservers(oaOccAssignment* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccAssignment,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccAssignment)\n"
"    Calls: void notifyPreDestroyObservers(oaOccAssignment* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccAssignment,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccAssignment,oaAssignmentModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccAssignment* object,oaAssignmentModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccAssignment,simple-oaAssignmentModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccAssignment p1;
    PyParamoaAssignmentModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaAssignmentModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccAssignment_oaAssignmentModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBitInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBitInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaOccBitInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBitInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_FromoaStdObserver_oaOccBitInst_oaInstModTypeEnum(oaStdObserver_oaOccBitInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBitInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBitInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostCreate(oaOccBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBitInst_FromoaOccBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostModify(oaOccBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBitInst_FromoaOccBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreDestroy(oaOccBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBitInst_FromoaOccBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreModify(oaOccBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBitInst_FromoaOccBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBitInst)\n"
"    Calls: virtual void onPostCreate(oaOccBitInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBitInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBitInst)\n"
"    Calls: virtual void onPreDestroy(oaOccBitInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBitInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBitInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBitInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBitInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBitInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBitInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBitInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBitInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBitInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBitInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBitInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBitInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccBitInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBitInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBitInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBitInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBitInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBitInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBitInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBitInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBitInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBitInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBitInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBitNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBitNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBitNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaOccBitNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBitNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_FromoaStdObserver_oaOccBitNet_oaNetModTypeEnum(oaStdObserver_oaOccBitNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBitNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBitNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostCreate(oaOccBitNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBitNet_FromoaOccBitNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostModify(oaOccBitNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBitNet_FromoaOccBitNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreDestroy(oaOccBitNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBitNet_FromoaOccBitNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreModify(oaOccBitNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBitNet_FromoaOccBitNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBitNet)\n"
"    Calls: virtual void onPostCreate(oaOccBitNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBitNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBitNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBitNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBitNet)\n"
"    Calls: virtual void onPreDestroy(oaOccBitNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBitNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBitNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBitNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBitNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBitNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBitNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBitNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBitNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBitNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBitNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBitNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBitNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBitNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBitNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBitNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBitNet)\n"
"    Calls: void notifyPostCreateObservers(oaOccBitNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBitNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBitNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBitNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBitNet)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBitNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBitNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBitNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBitNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBitNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBitNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBitNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBitNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBitNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBitNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBitNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBitNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBitTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBitTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_FromoaStdObserver_oaOccBitTerm_oaTermModTypeEnum(oaStdObserver_oaOccBitTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostCreate(oaOccBitTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBitTerm_FromoaOccBitTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostModify(oaOccBitTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBitTerm_FromoaOccBitTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreDestroy(oaOccBitTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBitTerm_FromoaOccBitTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreModify(oaOccBitTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBitTerm_FromoaOccBitTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBitTerm)\n"
"    Calls: virtual void onPostCreate(oaOccBitTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBitTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBitTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBitTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBitTerm)\n"
"    Calls: virtual void onPreDestroy(oaOccBitTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBitTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBitTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBitTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBitTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBitTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBitTerm)\n"
"    Calls: void notifyPostCreateObservers(oaOccBitTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBitTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBitTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBitTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBitTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBitTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBitTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBitTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBitTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBitTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBitTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBitTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBitTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBitTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBitTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBitTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBitTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBitTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBundleNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBundleNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_FromoaStdObserver_oaOccBundleNet_oaNetModTypeEnum(oaStdObserver_oaOccBundleNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostCreate(oaOccBundleNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBundleNet_FromoaOccBundleNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostModify(oaOccBundleNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBundleNet_FromoaOccBundleNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreDestroy(oaOccBundleNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBundleNet_FromoaOccBundleNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreModify(oaOccBundleNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBundleNet_FromoaOccBundleNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBundleNet)\n"
"    Calls: virtual void onPostCreate(oaOccBundleNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBundleNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBundleNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBundleNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBundleNet)\n"
"    Calls: virtual void onPreDestroy(oaOccBundleNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBundleNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBundleNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBundleNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBundleNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBundleNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBundleNet)\n"
"    Calls: void notifyPostCreateObservers(oaOccBundleNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBundleNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBundleNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBundleNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBundleNet)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBundleNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBundleNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBundleNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBundleNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBundleNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBundleNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBundleNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBundleNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBundleNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_FromoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostCreate(oaOccBundleTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBundleTerm_FromoaOccBundleTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostModify(oaOccBundleTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBundleTerm_FromoaOccBundleTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreDestroy(oaOccBundleTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBundleTerm_FromoaOccBundleTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreModify(oaOccBundleTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBundleTerm_FromoaOccBundleTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBundleTerm)\n"
"    Calls: virtual void onPostCreate(oaOccBundleTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBundleTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBundleTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBundleTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBundleTerm)\n"
"    Calls: virtual void onPreDestroy(oaOccBundleTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBundleTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBundleTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBundleTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBundleTerm)\n"
"    Calls: void notifyPostCreateObservers(oaOccBundleTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBundleTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBundleTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBundleTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBundleTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBundleTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBundleTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBundleTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBundleTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBundleTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBundleTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBundleTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBundleTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBundleTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum*) ((PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_FromoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostCreate(oaOccBusNetBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusNetBit_FromoaOccBusNetBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostModify(oaOccBusNetBit* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusNetBit_FromoaOccBusNetBit(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreDestroy(oaOccBusNetBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusNetBit_FromoaOccBusNetBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreModify(oaOccBusNetBit* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusNetBit_FromoaOccBusNetBit(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBusNetBit)\n"
"    Calls: virtual void onPostCreate(oaOccBusNetBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBusNetBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBusNetBit,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBusNetBit,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBusNetBit)\n"
"    Calls: virtual void onPreDestroy(oaOccBusNetBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBusNetBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBusNetBit,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBusNetBit,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject*)ob;

    PyParamoaOccBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBusNetBit)\n"
"    Calls: void notifyPostCreateObservers(oaOccBusNetBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBusNetBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBusNetBit,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBusNetBit,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBusNetBit)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBusNetBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBusNetBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBusNetBit,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBusNetBit* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBusNetBit,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetBit p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetBit_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBusNetBit_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[73];
    sprintf(buffer,"<oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum*) ((PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_FromoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostCreate(oaOccBusNetDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusNetDef_FromoaOccBusNetDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostModify(oaOccBusNetDef* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusNetDef_FromoaOccBusNetDef(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy(oaOccBusNetDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusNetDef_FromoaOccBusNetDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreModify(oaOccBusNetDef* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusNetDef_FromoaOccBusNetDef(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBusNetDef)\n"
"    Calls: virtual void onPostCreate(oaOccBusNetDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBusNetDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBusNetDef)\n"
"    Calls: virtual void onPreDestroy(oaOccBusNetDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBusNetDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBusNetDef)\n"
"    Calls: void notifyPostCreateObservers(oaOccBusNetDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBusNetDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBusNetDef)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBusNetDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBusNetDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBusNetDef,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBusNetDef* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBusNetDef,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNetDef p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBusNetDef_oaBusNetDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum* p=new pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum*) ((PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_FromoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self = (PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostCreate(oaOccBusNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusNet_FromoaOccBusNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostModify(oaOccBusNet* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusNet_FromoaOccBusNet(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreDestroy(oaOccBusNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusNet_FromoaOccBusNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreModify(oaOccBusNet* p1,oaBusNetDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusNet_FromoaOccBusNet(p1));
    PyTuple_SetItem(args,1,PyoaBusNetDefModTypeEnum_FromoaBusNetDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBusNet)\n"
"    Calls: virtual void onPostCreate(oaOccBusNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBusNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBusNet,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBusNet* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBusNet,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNet p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNet_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBusNet)\n"
"    Calls: virtual void onPreDestroy(oaOccBusNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBusNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBusNet,oaBusNetDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBusNet* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBusNet,simple-oaBusNetDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject*)ob;

    PyParamoaOccBusNet p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNet_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBusNet)\n"
"    Calls: void notifyPostCreateObservers(oaOccBusNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBusNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBusNet,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBusNet* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBusNet,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNet p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNet_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBusNet)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBusNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBusNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBusNet,oaBusNetDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBusNet* object,oaBusNetDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBusNet,simple-oaBusNetDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusNet p1;
    PyParamoaBusNetDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNet_Convert,&p1,
          &PyoaBusNetDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBusNet_oaBusNetDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum*) ((PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_FromoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostCreate(oaOccBusTermBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusTermBit_FromoaOccBusTermBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostModify(oaOccBusTermBit* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusTermBit_FromoaOccBusTermBit(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreDestroy(oaOccBusTermBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusTermBit_FromoaOccBusTermBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreModify(oaOccBusTermBit* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusTermBit_FromoaOccBusTermBit(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBusTermBit)\n"
"    Calls: virtual void onPostCreate(oaOccBusTermBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBusTermBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBusTermBit,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBusTermBit,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBusTermBit)\n"
"    Calls: virtual void onPreDestroy(oaOccBusTermBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBusTermBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBusTermBit,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBusTermBit,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBusTermBit)\n"
"    Calls: void notifyPostCreateObservers(oaOccBusTermBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBusTermBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBusTermBit,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBusTermBit,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBusTermBit)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBusTermBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBusTermBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBusTermBit,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBusTermBit* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBusTermBit,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermBit p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermBit_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBusTermBit_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self = (PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum* p=new pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum* p=new pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum*) ((PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_FromoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self = (PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostCreate(oaOccBusTermDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusTermDef_FromoaOccBusTermDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostModify(oaOccBusTermDef* p1,oaBusTermDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusTermDef_FromoaOccBusTermDef(p1));
    PyTuple_SetItem(args,1,PyoaBusTermDefModTypeEnum_FromoaBusTermDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy(oaOccBusTermDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusTermDef_FromoaOccBusTermDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreModify(oaOccBusTermDef* p1,oaBusTermDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusTermDef_FromoaOccBusTermDef(p1));
    PyTuple_SetItem(args,1,PyoaBusTermDefModTypeEnum_FromoaBusTermDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBusTermDef)\n"
"    Calls: virtual void onPostCreate(oaOccBusTermDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBusTermDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaOccBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBusTermDef)\n"
"    Calls: virtual void onPreDestroy(oaOccBusTermDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBusTermDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject*)ob;

    PyParamoaOccBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBusTermDef)\n"
"    Calls: void notifyPostCreateObservers(oaOccBusTermDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBusTermDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBusTermDef)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBusTermDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBusTermDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBusTermDef,oaBusTermDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBusTermDef* object,oaBusTermDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBusTermDef,simple-oaBusTermDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTermDef p1;
    PyParamoaBusTermDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaBusTermDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBusTermDef_oaBusTermDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccBusTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccBusTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_FromoaStdObserver_oaOccBusTerm_oaTermModTypeEnum(oaStdObserver_oaOccBusTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostCreate(oaOccBusTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusTerm_FromoaOccBusTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostModify(oaOccBusTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusTerm_FromoaOccBusTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreDestroy(oaOccBusTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccBusTerm_FromoaOccBusTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreModify(oaOccBusTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccBusTerm_FromoaOccBusTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccBusTerm)\n"
"    Calls: virtual void onPostCreate(oaOccBusTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccBusTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccBusTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccBusTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccBusTerm)\n"
"    Calls: virtual void onPreDestroy(oaOccBusTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccBusTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccBusTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccBusTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccBusTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccBusTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccBusTerm)\n"
"    Calls: void notifyPostCreateObservers(oaOccBusTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccBusTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccBusTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccBusTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccBusTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaOccBusTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccBusTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccBusTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccBusTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccBusTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccBusTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccBusTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccBusTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccBusTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccBusTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccBusTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaOccConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccConnectDef_FromoaOccConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostModify(oaOccConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccConnectDef_FromoaOccConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaOccConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccConnectDef_FromoaOccConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreModify(oaOccConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccConnectDef_FromoaOccConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccConnectDef)\n"
"    Calls: virtual void onPostCreate(oaOccConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaOccConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaOccConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaOccConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccDesignInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccDesignInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_FromoaStdObserver_oaOccDesignInst_oaInstModTypeEnum(oaStdObserver_oaOccDesignInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostCreate(oaOccDesignInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccDesignInst_FromoaOccDesignInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostModify(oaOccDesignInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccDesignInst_FromoaOccDesignInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreDestroy(oaOccDesignInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccDesignInst_FromoaOccDesignInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreModify(oaOccDesignInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccDesignInst_FromoaOccDesignInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccDesignInst)\n"
"    Calls: virtual void onPostCreate(oaOccDesignInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccDesignInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccDesignInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccDesignInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccDesignInst)\n"
"    Calls: virtual void onPreDestroy(oaOccDesignInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccDesignInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccDesignInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccDesignInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccDesignInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccDesignInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccDesignInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccDesignInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccDesignInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccDesignInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccDesignInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccDesignInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccDesignInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccDesignInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccDesignInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccDesignInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccDesignInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccDesignInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccDesignInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccDesignInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccDesignInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccDesignInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccDesignInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccDesignInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum*) ((PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_FromoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostCreate(oaOccInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccInstHeader_FromoaOccInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostModify(oaOccInstHeader* p1,oaInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccInstHeader_FromoaOccInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaInstHeaderModTypeEnum_FromoaInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreDestroy(oaOccInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccInstHeader_FromoaOccInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreModify(oaOccInstHeader* p1,oaInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccInstHeader_FromoaOccInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaInstHeaderModTypeEnum_FromoaInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccInstHeader)\n"
"    Calls: virtual void onPostCreate(oaOccInstHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccInstHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccInstHeader)\n"
"    Calls: virtual void onPreDestroy(oaOccInstHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccInstHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccInstHeader)\n"
"    Calls: void notifyPostCreateObservers(oaOccInstHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccInstHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccInstHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaOccInstHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccInstHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccInstHeader,oaInstHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccInstHeader* object,oaInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccInstHeader,simple-oaInstHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstHeader p1;
    PyParamoaInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccInstHeader_oaInstHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self = (PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum* p=new pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum* p=new pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[71];
    sprintf(buffer,"<oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum*) ((PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_FromoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self = (PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostCreate(oaOccInstTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccInstTerm_FromoaOccInstTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostModify(oaOccInstTerm* p1,oaInstTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccInstTerm_FromoaOccInstTerm(p1));
    PyTuple_SetItem(args,1,PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreDestroy(oaOccInstTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccInstTerm_FromoaOccInstTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreModify(oaOccInstTerm* p1,oaInstTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccInstTerm_FromoaOccInstTerm(p1));
    PyTuple_SetItem(args,1,PyoaInstTermModTypeEnum_FromoaInstTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccInstTerm)\n"
"    Calls: virtual void onPostCreate(oaOccInstTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccInstTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaOccInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccInstTerm,simple-oaInstTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaOccInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccInstTerm)\n"
"    Calls: virtual void onPreDestroy(oaOccInstTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccInstTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaOccInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccInstTerm,simple-oaInstTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject* self=(PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject*)ob;

    PyParamoaOccInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccInstTerm)\n"
"    Calls: void notifyPostCreateObservers(oaOccInstTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccInstTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccInstTerm,simple-oaInstTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccInstTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaOccInstTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccInstTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccInstTerm,oaInstTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccInstTerm* object,oaInstTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccInstTerm,simple-oaInstTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInstTerm p1;
    PyParamoaInstTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaInstTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccInstTerm_oaInstTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaOccInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccInst_oaInstModTypeEnum_FromoaStdObserver_oaOccInst_oaInstModTypeEnum(oaStdObserver_oaOccInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostCreate(oaOccInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccInst_FromoaOccInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostModify(oaOccInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccInst_FromoaOccInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreDestroy(oaOccInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccInst_FromoaOccInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreModify(oaOccInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccInst_FromoaOccInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccInst)\n"
"    Calls: virtual void onPostCreate(oaOccInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccInst)\n"
"    Calls: virtual void onPreDestroy(oaOccInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_FromoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostCreate(oaOccModuleBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleBitInst_FromoaOccModuleBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostModify(oaOccModuleBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleBitInst_FromoaOccModuleBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreDestroy(oaOccModuleBitInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleBitInst_FromoaOccModuleBitInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreModify(oaOccModuleBitInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleBitInst_FromoaOccModuleBitInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccModuleBitInst)\n"
"    Calls: virtual void onPostCreate(oaOccModuleBitInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccModuleBitInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccModuleBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccModuleBitInst)\n"
"    Calls: virtual void onPreDestroy(oaOccModuleBitInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccModuleBitInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccModuleBitInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccModuleBitInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccModuleBitInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccModuleBitInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccModuleBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccModuleBitInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccModuleBitInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccModuleBitInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleBitInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleBitInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccModuleBitInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccModuleBitInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccModuleBitInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleBitInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleBitInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccModuleBitInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[87];
    sprintf(buffer,"<oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum*) ((PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_FromoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate(oaOccModuleInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleInstHeader_FromoaOccModuleInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify(oaOccModuleInstHeader* p1,oaModuleInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleInstHeader_FromoaOccModuleInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaModuleInstHeaderModTypeEnum_FromoaModuleInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy(oaOccModuleInstHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleInstHeader_FromoaOccModuleInstHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify(oaOccModuleInstHeader* p1,oaModuleInstHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleInstHeader_FromoaOccModuleInstHeader(p1));
    PyTuple_SetItem(args,1,PyoaModuleInstHeaderModTypeEnum_FromoaModuleInstHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccModuleInstHeader)\n"
"    Calls: virtual void onPostCreate(oaOccModuleInstHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccModuleInstHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccModuleInstHeader)\n"
"    Calls: virtual void onPreDestroy(oaOccModuleInstHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccModuleInstHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject*)ob;

    PyParamoaOccModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccModuleInstHeader)\n"
"    Calls: void notifyPostCreateObservers(oaOccModuleInstHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccModuleInstHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccModuleInstHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaOccModuleInstHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccModuleInstHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccModuleInstHeader,oaModuleInstHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccModuleInstHeader* object,oaModuleInstHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccModuleInstHeader,simple-oaModuleInstHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInstHeader p1;
    PyParamoaModuleInstHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaModuleInstHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccModuleInstHeader_oaModuleInstHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccModuleInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccModuleInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_FromoaStdObserver_oaOccModuleInst_oaInstModTypeEnum(oaStdObserver_oaOccModuleInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostCreate(oaOccModuleInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleInst_FromoaOccModuleInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostModify(oaOccModuleInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleInst_FromoaOccModuleInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreDestroy(oaOccModuleInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleInst_FromoaOccModuleInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreModify(oaOccModuleInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleInst_FromoaOccModuleInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccModuleInst)\n"
"    Calls: virtual void onPostCreate(oaOccModuleInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccModuleInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccModuleInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccModuleInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccModuleInst)\n"
"    Calls: virtual void onPreDestroy(oaOccModuleInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccModuleInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccModuleInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccModuleInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccModuleInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccModuleInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccModuleInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccModuleInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccModuleInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccModuleInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccModuleInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccModuleInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccModuleInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccModuleInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccModuleInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccModuleInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccModuleInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccModuleInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccModuleInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccModuleInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccModuleInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_FromoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostCreate(oaOccModuleScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleScalarInst_FromoaOccModuleScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostModify(oaOccModuleScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleScalarInst_FromoaOccModuleScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreDestroy(oaOccModuleScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleScalarInst_FromoaOccModuleScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreModify(oaOccModuleScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleScalarInst_FromoaOccModuleScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccModuleScalarInst)\n"
"    Calls: virtual void onPostCreate(oaOccModuleScalarInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccModuleScalarInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccModuleScalarInst)\n"
"    Calls: virtual void onPreDestroy(oaOccModuleScalarInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccModuleScalarInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccModuleScalarInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccModuleScalarInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccModuleScalarInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccModuleScalarInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccModuleScalarInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccModuleScalarInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccModuleScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccModuleScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccModuleScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccModuleScalarInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_FromoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostCreate(oaOccModuleVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInstBit_FromoaOccModuleVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostModify(oaOccModuleVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInstBit_FromoaOccModuleVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy(oaOccModuleVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInstBit_FromoaOccModuleVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreModify(oaOccModuleVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInstBit_FromoaOccModuleVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccModuleVectorInstBit)\n"
"    Calls: virtual void onPostCreate(oaOccModuleVectorInstBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccModuleVectorInstBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccModuleVectorInstBit)\n"
"    Calls: virtual void onPreDestroy(oaOccModuleVectorInstBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccModuleVectorInstBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccModuleVectorInstBit)\n"
"    Calls: void notifyPostCreateObservers(oaOccModuleVectorInstBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccModuleVectorInstBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccModuleVectorInstBit)\n"
"    Calls: void notifyPreDestroyObservers(oaOccModuleVectorInstBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccModuleVectorInstBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccModuleVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccModuleVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccModuleVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccModuleVectorInstBit_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[75];
    sprintf(buffer,"<oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_FromoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostCreate(oaOccModuleVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInst_FromoaOccModuleVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostModify(oaOccModuleVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInst_FromoaOccModuleVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreDestroy(oaOccModuleVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInst_FromoaOccModuleVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreModify(oaOccModuleVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccModuleVectorInst_FromoaOccModuleVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccModuleVectorInst)\n"
"    Calls: virtual void onPostCreate(oaOccModuleVectorInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccModuleVectorInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccModuleVectorInst)\n"
"    Calls: virtual void onPreDestroy(oaOccModuleVectorInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccModuleVectorInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccModuleVectorInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccModuleVectorInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccModuleVectorInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccModuleVectorInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccModuleVectorInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccModuleVectorInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccModuleVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccModuleVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccModuleVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccModuleVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccModuleVectorInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaOccNetConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccNetConnectDef_FromoaOccNetConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostModify(oaOccNetConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccNetConnectDef_FromoaOccNetConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaOccNetConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccNetConnectDef_FromoaOccNetConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreModify(oaOccNetConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccNetConnectDef_FromoaOccNetConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccNetConnectDef)\n"
"    Calls: virtual void onPostCreate(oaOccNetConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccNetConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccNetConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaOccNetConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccNetConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccNetConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaOccNetConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccNetConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccNetConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaOccNetConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccNetConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNetConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNetConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccNetConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccNetConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccNetConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNetConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNetConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccNetConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaStdObserver_oaOccNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccNet_oaNetModTypeEnum_FromoaStdObserver_oaOccNet_oaNetModTypeEnum(oaStdObserver_oaOccNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostCreate(oaOccNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccNet_FromoaOccNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostModify(oaOccNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccNet_FromoaOccNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreDestroy(oaOccNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccNet_FromoaOccNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreModify(oaOccNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccNet_FromoaOccNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccNet)\n"
"    Calls: virtual void onPostCreate(oaOccNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccNet)\n"
"    Calls: virtual void onPreDestroy(oaOccNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaOccNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccNet)\n"
"    Calls: void notifyPostCreateObservers(oaOccNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccNet)\n"
"    Calls: void notifyPreDestroyObservers(oaOccNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccScalarInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccScalarInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_FromoaStdObserver_oaOccScalarInst_oaInstModTypeEnum(oaStdObserver_oaOccScalarInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostCreate(oaOccScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccScalarInst_FromoaOccScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostModify(oaOccScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccScalarInst_FromoaOccScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreDestroy(oaOccScalarInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccScalarInst_FromoaOccScalarInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreModify(oaOccScalarInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccScalarInst_FromoaOccScalarInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccScalarInst)\n"
"    Calls: virtual void onPostCreate(oaOccScalarInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccScalarInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccScalarInst)\n"
"    Calls: virtual void onPreDestroy(oaOccScalarInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccScalarInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccScalarInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccScalarInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccScalarInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccScalarInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccScalarInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccScalarInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccScalarInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccScalarInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccScalarInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccScalarInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccScalarInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccScalarInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccScalarInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccScalarInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccScalarInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccScalarInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccScalarInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum* p=new pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccScalarNet_oaNetModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[67];
    sprintf(buffer,"<oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum v1;
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccScalarNet_oaNetModTypeEnum*) ((PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_FromoaStdObserver_oaOccScalarNet_oaNetModTypeEnum(oaStdObserver_oaOccScalarNet_oaNetModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self = (PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostCreate(oaOccScalarNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccScalarNet_FromoaOccScalarNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostModify(oaOccScalarNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccScalarNet_FromoaOccScalarNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreDestroy(oaOccScalarNet* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccScalarNet_FromoaOccScalarNet(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreModify(oaOccScalarNet* p1,oaNetModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccScalarNet_FromoaOccScalarNet(p1));
    PyTuple_SetItem(args,1,PyoaNetModTypeEnum_FromoaNetModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccScalarNet)\n"
"    Calls: virtual void onPostCreate(oaOccScalarNet* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccScalarNet,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccScalarNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccScalarNet,simple-oaNetModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccScalarNet)\n"
"    Calls: virtual void onPreDestroy(oaOccScalarNet* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccScalarNet,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccScalarNet,oaNetModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccScalarNet,simple-oaNetModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject*)ob;

    PyParamoaOccScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccScalarNet_oaNetModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccScalarNet_oaNetModTypeEnum",
    sizeof(PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccScalarNet)\n"
"    Calls: void notifyPostCreateObservers(oaOccScalarNet* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccScalarNet,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccScalarNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccScalarNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccScalarNet)\n"
"    Calls: void notifyPreDestroyObservers(oaOccScalarNet* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccScalarNet,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccScalarNet,oaNetModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccScalarNet* object,oaNetModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccScalarNet,simple-oaNetModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarNet p1;
    PyParamoaNetModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarNet_Convert,&p1,
          &PyoaNetModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarNet_oaNetModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccScalarNet_oaNetModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccScalarNet_oaNetModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccScalarNet_oaNetModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccScalarNet_oaNetModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_FromoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostCreate(oaOccScalarTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccScalarTerm_FromoaOccScalarTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostModify(oaOccScalarTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccScalarTerm_FromoaOccScalarTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreDestroy(oaOccScalarTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccScalarTerm_FromoaOccScalarTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreModify(oaOccScalarTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccScalarTerm_FromoaOccScalarTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccScalarTerm)\n"
"    Calls: virtual void onPostCreate(oaOccScalarTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccScalarTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccScalarTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccScalarTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccScalarTerm)\n"
"    Calls: virtual void onPreDestroy(oaOccScalarTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccScalarTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccScalarTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccScalarTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccScalarTerm)\n"
"    Calls: void notifyPostCreateObservers(oaOccScalarTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccScalarTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccScalarTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccScalarTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccScalarTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaOccScalarTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccScalarTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccScalarTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccScalarTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccScalarTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccScalarTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccScalarTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccScalarTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccScalarTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum* p=new pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[79];
    sprintf(buffer,"<oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum*) ((PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_FromoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self = (PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostCreate(oaOccTermConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccTermConnectDef_FromoaOccTermConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostModify(oaOccTermConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccTermConnectDef_FromoaOccTermConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy(oaOccTermConnectDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccTermConnectDef_FromoaOccTermConnectDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreModify(oaOccTermConnectDef* p1,oaConnectDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccTermConnectDef_FromoaOccTermConnectDef(p1));
    PyTuple_SetItem(args,1,PyoaConnectDefModTypeEnum_FromoaConnectDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccTermConnectDef)\n"
"    Calls: virtual void onPostCreate(oaOccTermConnectDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccTermConnectDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccTermConnectDef)\n"
"    Calls: virtual void onPreDestroy(oaOccTermConnectDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccTermConnectDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject* self=(PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject*)ob;

    PyParamoaOccTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccTermConnectDef)\n"
"    Calls: void notifyPostCreateObservers(oaOccTermConnectDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccTermConnectDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccTermConnectDef)\n"
"    Calls: void notifyPreDestroyObservers(oaOccTermConnectDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccTermConnectDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTermConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTermConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccTermConnectDef,oaConnectDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccTermConnectDef* object,oaConnectDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccTermConnectDef,simple-oaConnectDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTermConnectDef p1;
    PyParamoaConnectDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTermConnectDef_Convert,&p1,
          &PyoaConnectDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccTermConnectDef_oaConnectDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccTerm_oaTermModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum* p=new pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccTerm_oaTermModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaStdObserver_oaOccTerm_oaTermModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum v1;
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccTerm_oaTermModTypeEnum*) ((PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccTerm_oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_FromoaStdObserver_oaOccTerm_oaTermModTypeEnum(oaStdObserver_oaOccTerm_oaTermModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self = (PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccTerm_oaTermModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum::pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccTerm_oaTermModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostCreate(oaOccTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccTerm_FromoaOccTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostModify(oaOccTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccTerm_FromoaOccTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreDestroy(oaOccTerm* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccTerm_FromoaOccTerm(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreModify(oaOccTerm* p1,oaTermModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccTerm_FromoaOccTerm(p1));
    PyTuple_SetItem(args,1,PyoaTermModTypeEnum_FromoaTermModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccTerm)\n"
"    Calls: virtual void onPostCreate(oaOccTerm* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccTerm,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccTerm,simple-oaTermModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccTerm)\n"
"    Calls: virtual void onPreDestroy(oaOccTerm* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccTerm,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccTerm,oaTermModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccTerm,simple-oaTermModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject* self=(PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject*)ob;

    PyParamoaOccTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccTerm_oaTermModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccTerm_oaTermModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccTerm_oaTermModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccTerm_oaTermModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccTerm_oaTermModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccTerm_oaTermModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccTerm_oaTermModTypeEnum",
    sizeof(PyoaStdObserver_oaOccTerm_oaTermModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccTerm_oaTermModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccTerm_oaTermModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccTerm_oaTermModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccTerm_oaTermModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccTerm_oaTermModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccTerm)\n"
"    Calls: void notifyPostCreateObservers(oaOccTerm* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccTerm,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTerm_oaTermModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTerm_oaTermModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccTerm)\n"
"    Calls: void notifyPreDestroyObservers(oaOccTerm* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccTerm,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTerm_oaTermModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccTerm_oaTermModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccTerm,oaTermModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccTerm* object,oaTermModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccTerm,simple-oaTermModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccTerm p1;
    PyParamoaTermModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaTermModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccTerm_oaTermModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccTerm_oaTermModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccTerm_oaTermModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccTerm_oaTermModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccTerm_oaTermModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccTerm_oaTermModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccTerm_oaTermModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccTerm_oaTermModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_FromoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostCreate(oaOccVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccVectorInstBit_FromoaOccVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostModify(oaOccVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccVectorInstBit_FromoaOccVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreDestroy(oaOccVectorInstBit* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccVectorInstBit_FromoaOccVectorInstBit(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreModify(oaOccVectorInstBit* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccVectorInstBit_FromoaOccVectorInstBit(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccVectorInstBit)\n"
"    Calls: virtual void onPostCreate(oaOccVectorInstBit* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccVectorInstBit,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccVectorInstBit)\n"
"    Calls: virtual void onPreDestroy(oaOccVectorInstBit* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccVectorInstBit,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccVectorInstBit,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccVectorInstBit)\n"
"    Calls: void notifyPostCreateObservers(oaOccVectorInstBit* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccVectorInstBit,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccVectorInstBit)\n"
"    Calls: void notifyPreDestroyObservers(oaOccVectorInstBit* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccVectorInstBit,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstBit p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstBit_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccVectorInstBit,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccVectorInstBit* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccVectorInstBit,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstBit p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstBit_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccVectorInstBit_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self = (PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum* p=new pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum* p=new pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[81];
    sprintf(buffer,"<oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum v1;
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum*) ((PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_FromoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self = (PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate(oaOccVectorInstDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccVectorInstDef_FromoaOccVectorInstDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify(oaOccVectorInstDef* p1,oaVectorInstDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccVectorInstDef_FromoaOccVectorInstDef(p1));
    PyTuple_SetItem(args,1,PyoaVectorInstDefModTypeEnum_FromoaVectorInstDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy(oaOccVectorInstDef* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccVectorInstDef_FromoaOccVectorInstDef(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify(oaOccVectorInstDef* p1,oaVectorInstDefModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccVectorInstDef_FromoaOccVectorInstDef(p1));
    PyTuple_SetItem(args,1,PyoaVectorInstDefModTypeEnum_FromoaVectorInstDefModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccVectorInstDef)\n"
"    Calls: virtual void onPostCreate(oaOccVectorInstDef* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccVectorInstDef,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaOccVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccVectorInstDef)\n"
"    Calls: virtual void onPreDestroy(oaOccVectorInstDef* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccVectorInstDef,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject*)ob;

    PyParamoaOccVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum",
    sizeof(PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccVectorInstDef)\n"
"    Calls: void notifyPostCreateObservers(oaOccVectorInstDef* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccVectorInstDef,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccVectorInstDef)\n"
"    Calls: void notifyPreDestroyObservers(oaOccVectorInstDef* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccVectorInstDef,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccVectorInstDef,oaVectorInstDefModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccVectorInstDef* object,oaVectorInstDefModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccVectorInstDef,simple-oaVectorInstDefModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInstDef p1;
    PyParamoaVectorInstDefModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaVectorInstDefModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccVectorInstDef_oaVectorInstDefModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum* p=new pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccVectorInst_oaInstModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[69];
    sprintf(buffer,"<oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum v1;
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccVectorInst_oaInstModTypeEnum*) ((PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_FromoaStdObserver_oaOccVectorInst_oaInstModTypeEnum(oaStdObserver_oaOccVectorInst_oaInstModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self = (PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostCreate(oaOccVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccVectorInst_FromoaOccVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostModify(oaOccVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccVectorInst_FromoaOccVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreDestroy(oaOccVectorInst* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccVectorInst_FromoaOccVectorInst(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreModify(oaOccVectorInst* p1,oaInstModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccVectorInst_FromoaOccVectorInst(p1));
    PyTuple_SetItem(args,1,PyoaInstModTypeEnum_FromoaInstModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccVectorInst)\n"
"    Calls: virtual void onPostCreate(oaOccVectorInst* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccVectorInst,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccVectorInst)\n"
"    Calls: virtual void onPreDestroy(oaOccVectorInst* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccVectorInst,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccVectorInst,oaInstModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccVectorInst,simple-oaInstModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject* self=(PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject*)ob;

    PyParamoaOccVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccVectorInst_oaInstModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccVectorInst_oaInstModTypeEnum",
    sizeof(PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccVectorInst)\n"
"    Calls: void notifyPostCreateObservers(oaOccVectorInst* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccVectorInst,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccVectorInst)\n"
"    Calls: void notifyPreDestroyObservers(oaOccVectorInst* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccVectorInst,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccVectorInst,oaInstModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccVectorInst* object,oaInstModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccVectorInst,simple-oaInstModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccVectorInst p1;
    PyParamoaInstModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInst_Convert,&p1,
          &PyoaInstModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccVectorInst_oaInstModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccVectorInst_oaInstModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccVectorInst_oaInstModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccVectorInst_oaInstModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccVectorInst_oaInstModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self = (PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum* p=new pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum* p=new pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_dealloc(PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[72];
    sprintf(buffer,"<oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum v1;
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum*) ((PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_FromoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self = (PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostCreate(oaOccurrence* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccurrence_FromoaOccurrence(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostModify(oaOccurrence* p1,oaOccurrenceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccurrence_FromoaOccurrence(p1));
    PyTuple_SetItem(args,1,PyoaOccurrenceModTypeEnum_FromoaOccurrenceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreDestroy(oaOccurrence* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOccurrence_FromoaOccurrence(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreModify(oaOccurrence* p1,oaOccurrenceModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOccurrence_FromoaOccurrence(p1));
    PyTuple_SetItem(args,1,PyoaOccurrenceModTypeEnum_FromoaOccurrenceModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: virtual void onPostCreate(oaOccurrence* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOccurrence,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self=(PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)ob;

    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOccurrence,oaOccurrenceModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOccurrence* object,oaOccurrenceModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOccurrence,simple-oaOccurrenceModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self=(PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)ob;

    PyParamoaOccurrence p1;
    PyParamoaOccurrenceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaOccurrenceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: virtual void onPreDestroy(oaOccurrence* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOccurrence,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self=(PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)ob;

    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOccurrence,oaOccurrenceModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOccurrence* object,oaOccurrenceModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOccurrence,simple-oaOccurrenceModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject* self=(PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject*)ob;

    PyParamoaOccurrence p1;
    PyParamoaOccurrenceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaOccurrenceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum",
    sizeof(PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: void notifyPostCreateObservers(oaOccurrence* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOccurrence,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOccurrence,oaOccurrenceModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOccurrence* object,oaOccurrenceModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOccurrence,simple-oaOccurrenceModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccurrence p1;
    PyParamoaOccurrenceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaOccurrenceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: void notifyPreDestroyObservers(oaOccurrence* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOccurrence,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOccurrence,oaOccurrenceModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOccurrence* object,oaOccurrenceModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOccurrence,simple-oaOccurrenceModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOccurrence p1;
    PyParamoaOccurrenceModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaOccurrenceModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOccurrence_oaOccurrenceModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self = (PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum* p=new pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum* p=new pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_dealloc(PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[78];
    sprintf(buffer,"<oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum v1;
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum*) ((PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_FromoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self = (PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostCreate(oaOpPointHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOpPointHeader_FromoaOpPointHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostModify(oaOpPointHeader* p1,oaOpPointHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOpPointHeader_FromoaOpPointHeader(p1));
    PyTuple_SetItem(args,1,PyoaOpPointHeaderModTypeEnum_FromoaOpPointHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreDestroy(oaOpPointHeader* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOpPointHeader_FromoaOpPointHeader(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreModify(oaOpPointHeader* p1,oaOpPointHeaderModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOpPointHeader_FromoaOpPointHeader(p1));
    PyTuple_SetItem(args,1,PyoaOpPointHeaderModTypeEnum_FromoaOpPointHeaderModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOpPointHeader)\n"
"    Calls: virtual void onPostCreate(oaOpPointHeader* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOpPointHeader,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)ob;

    PyParamoaOpPointHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPointHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOpPointHeader,oaOpPointHeaderModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOpPointHeader* object,oaOpPointHeaderModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOpPointHeader,simple-oaOpPointHeaderModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)ob;

    PyParamoaOpPointHeader p1;
    PyParamoaOpPointHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaOpPointHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOpPointHeader)\n"
"    Calls: virtual void onPreDestroy(oaOpPointHeader* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOpPointHeader,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)ob;

    PyParamoaOpPointHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPointHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOpPointHeader,oaOpPointHeaderModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOpPointHeader* object,oaOpPointHeaderModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOpPointHeader,simple-oaOpPointHeaderModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject* self=(PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject*)ob;

    PyParamoaOpPointHeader p1;
    PyParamoaOpPointHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaOpPointHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum",
    sizeof(PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOpPointHeader)\n"
"    Calls: void notifyPostCreateObservers(oaOpPointHeader* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOpPointHeader,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPointHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPointHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOpPointHeader,oaOpPointHeaderModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOpPointHeader* object,oaOpPointHeaderModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOpPointHeader,simple-oaOpPointHeaderModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPointHeader p1;
    PyParamoaOpPointHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaOpPointHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOpPointHeader)\n"
"    Calls: void notifyPreDestroyObservers(oaOpPointHeader* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOpPointHeader,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPointHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPointHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOpPointHeader,oaOpPointHeaderModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOpPointHeader* object,oaOpPointHeaderModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOpPointHeader,simple-oaOpPointHeaderModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPointHeader p1;
    PyParamoaOpPointHeaderModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaOpPointHeaderModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOpPointHeader_oaOpPointHeaderModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self = (PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum* p=new pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum* p=new pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_dealloc(PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaOpPoint_oaOpPointModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum value;
    int convert_status=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum v1;
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaOpPoint_oaOpPointModTypeEnum*) ((PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_FromoaStdObserver_oaOpPoint_oaOpPointModTypeEnum(oaStdObserver_oaOpPoint_oaOpPointModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self = (PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostCreate(oaOpPoint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOpPoint_FromoaOpPoint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostModify(oaOpPoint* p1,oaOpPointModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOpPoint_FromoaOpPoint(p1));
    PyTuple_SetItem(args,1,PyoaOpPointModTypeEnum_FromoaOpPointModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreDestroy(oaOpPoint* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaOpPoint_FromoaOpPoint(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreModify(oaOpPoint* p1,oaOpPointModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaOpPoint_FromoaOpPoint(p1));
    PyTuple_SetItem(args,1,PyoaOpPointModTypeEnum_FromoaOpPointModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaOpPoint)\n"
"    Calls: virtual void onPostCreate(oaOpPoint* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaOpPoint,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self=(PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)ob;

    PyParamoaOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaOpPoint,oaOpPointModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaOpPoint* object,oaOpPointModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaOpPoint,simple-oaOpPointModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self=(PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)ob;

    PyParamoaOpPoint p1;
    PyParamoaOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPoint_Convert,&p1,
          &PyoaOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaOpPoint)\n"
"    Calls: virtual void onPreDestroy(oaOpPoint* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaOpPoint,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self=(PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)ob;

    PyParamoaOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaOpPoint,oaOpPointModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaOpPoint* object,oaOpPointModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaOpPoint,simple-oaOpPointModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum data;
    int convert_status=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject* self=(PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject*)ob;

    PyParamoaOpPoint p1;
    PyParamoaOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPoint_Convert,&p1,
          &PyoaOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum data;
  int convert_status=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaOpPoint_oaOpPointModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaOpPoint_oaOpPointModTypeEnum",
    sizeof(PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaOpPoint)\n"
"    Calls: void notifyPostCreateObservers(oaOpPoint* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaOpPoint,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaOpPoint,oaOpPointModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaOpPoint* object,oaOpPointModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaOpPoint,simple-oaOpPointModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPoint p1;
    PyParamoaOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPoint_Convert,&p1,
          &PyoaOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaOpPoint)\n"
"    Calls: void notifyPreDestroyObservers(oaOpPoint* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaOpPoint,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaOpPoint,oaOpPointModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaOpPoint* object,oaOpPointModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaOpPoint,simple-oaOpPointModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaOpPoint p1;
    PyParamoaOpPointModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPoint_Convert,&p1,
          &PyoaOpPointModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaOpPoint_oaOpPointModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaOpPoint_oaOpPointModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaOpPoint_oaOpPointModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaOpPoint_oaOpPointModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaOpPoint_oaOpPointModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum* p=new pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_dealloc(PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum value;
    int convert_status=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[70];
    sprintf(buffer,"<oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum v1;
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum*) ((PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_FromoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self = (PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostCreate(oaPRBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaPRBoundary_FromoaPRBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostModify(oaPRBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaPRBoundary_FromoaPRBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreDestroy(oaPRBoundary* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaPRBoundary_FromoaPRBoundary(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreModify(oaPRBoundary* p1,oaBoundaryModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaPRBoundary_FromoaPRBoundary(p1));
    PyTuple_SetItem(args,1,PyoaBoundaryModTypeEnum_FromoaBoundaryModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaPRBoundary)\n"
"    Calls: virtual void onPostCreate(oaPRBoundary* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaPRBoundary,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaPRBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPRBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaPRBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaPRBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaPRBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaPRBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPRBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaPRBoundary)\n"
"    Calls: virtual void onPreDestroy(oaPRBoundary* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaPRBoundary,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaPRBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPRBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaPRBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaPRBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaPRBoundary,simple-oaBoundaryModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject* self=(PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject*)ob;

    PyParamoaPRBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPRBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum data;
  int convert_status=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum",
    sizeof(PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaPRBoundary)\n"
"    Calls: void notifyPostCreateObservers(oaPRBoundary* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaPRBoundary,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPRBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPRBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaPRBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaPRBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaPRBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPRBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPRBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaPRBoundary)\n"
"    Calls: void notifyPreDestroyObservers(oaPRBoundary* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaPRBoundary,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPRBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPRBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaPRBoundary,oaBoundaryModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaPRBoundary* object,oaBoundaryModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaPRBoundary,simple-oaBoundaryModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPRBoundary p1;
    PyParamoaBoundaryModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPRBoundary_Convert,&p1,
          &PyoaBoundaryModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaPRBoundary_oaBoundaryModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaPathSeg_oaShapeModTypeEnum(p1.Data());
            }
            else {
                pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaStdObserver_oaPathSeg_oaShapeModTypeEnum(p1.Data(),p2.Data());
            }
            else {
                pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum* p=new pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_dealloc(PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self)
{
    if (!self->borrow) {
        delete (oaStdObserver_oaPathSeg_oaShapeModTypeEnum*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_repr(PyObject *ob)
{
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum value;
    int convert_status=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[64];
    sprintf(buffer,"<oaStdObserver_oaPathSeg_oaShapeModTypeEnum::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum v1;
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum v2;
    int convert_status1=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob1,&v1);
    int convert_status2=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(PyObject* ob,PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Check(ob)) {
        result->SetData( (oaStdObserver_oaPathSeg_oaShapeModTypeEnum*) ((PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_FromoaStdObserver_oaPathSeg_oaShapeModTypeEnum(oaStdObserver_oaPathSeg_oaShapeModTypeEnum* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type.tp_alloc(&PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type,0);
        if (bself == NULL) return bself;
        PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self = (PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum::pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum(oaUInt4 p1)
 : pyob(NULL),
   oaStdObserver_oaPathSeg_oaShapeModTypeEnum(p1)
{
}

// ------------------------------------------------------------------
pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum::pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaStdObserver_oaPathSeg_oaShapeModTypeEnum(p1,p2)
{
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostCreate(oaPathSeg* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostCreate");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostCreate was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaPathSeg_FromoaPathSeg(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostCreate had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostModify(oaPathSeg* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPostModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaPathSeg_FromoaPathSeg(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostModify had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreDestroy(oaPathSeg* p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreDestroy");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreDestroy was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaPathSeg_FromoaPathSeg(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreDestroy had an error.");
    }
    Py_DECREF(result);
}

// ------------------------------------------------------------------
void pyv_oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreModify(oaPathSeg* p1,oaShapeModTypeEnum p2)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onPreModify");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreModify was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(2);
    PyTuple_SetItem(args,0,PyoaPathSeg_FromoaPathSeg(p1));
    PyTuple_SetItem(args,1,PyoaShapeModTypeEnum_FromoaShapeModTypeEnum(p2));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreModify had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostCreate_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: onPostCreate\n"
"  Paramegers: (oaPathSeg)\n"
"    Calls: virtual void onPostCreate(oaPathSeg* object)\n"
"    Signature: onPostCreate|void-void|ptr-oaPathSeg,\n"
"    This function is called after an observed object is created. The application's derived observer class should implement this function to receive notification after the object is created.\n"
"    object\n"
"    pointer to the created object\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostCreate(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)ob;

    PyParamoaPathSeg p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPathSeg_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostCreate(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostModify_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: onPostModify\n"
"  Paramegers: (oaPathSeg,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPostModify(oaPathSeg* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPostModify|void-void|ptr-oaPathSeg,simple-oaShapeModTypeEnum,\n"
"    This function is called after an observed object has been modified. The application's derived class should implement this function to receive notification when an observed object has been modified.\n"
"    object\n"
"    A pointer to the modified object\n"
"    modType\n"
"    The type of modification that was made\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)ob;

    PyParamoaPathSeg p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPathSeg_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPostModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreDestroy_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: onPreDestroy\n"
"  Paramegers: (oaPathSeg)\n"
"    Calls: virtual void onPreDestroy(oaPathSeg* object)\n"
"    Signature: onPreDestroy|void-void|ptr-oaPathSeg,\n"
"    This function is called just before an observed object is destroyed. The application's derived observer class should implement this function to receive notification before the object is destroyed.\n"
"    object\n"
"    pointer to the header to be destroyed\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreDestroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)ob;

    PyParamoaPathSeg p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPathSeg_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreDestroy(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreModify_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: onPreModify\n"
"  Paramegers: (oaPathSeg,oaShapeModTypeEnum)\n"
"    Calls: virtual void onPreModify(oaPathSeg* object,oaShapeModTypeEnum modType)\n"
"    Signature: onPreModify|void-void|ptr-oaPathSeg,simple-oaShapeModTypeEnum,\n"
"    This function is called before an observed object is modified. The application's derived class should implement this function to receive notification when the observed object is about to be modified.\n"
"    object\n"
"    A pointer to the object to be modified\n"
"    modType\n"
"    The type of modification to be made\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreModify(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum data;
    int convert_status=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject* self=(PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject*)ob;

    PyParamoaPathSeg p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPathSeg_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->oaStdObserver_oaPathSeg_oaShapeModTypeEnum::onPreModify(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_assign_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum data;
  int convert_status=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaStdObserver_oaPathSeg_oaShapeModTypeEnum p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaStdObserver_oaPathSeg_oaShapeModTypeEnum_methodlist[] = {
    {"onPostCreate",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostCreate,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostCreate_doc},
    {"onPostModify",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostModify,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPostModify_doc},
    {"onPreDestroy",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreDestroy,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreDestroy_doc},
    {"onPreModify",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreModify,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_onPreModify_doc},
    {"assign",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_assign,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum\n"
"  The oaStdObserver<T, D> class is a base template class for standard observers. It supports postCreate, preDestroy, preModify, and postModify event notifications.\n"
"  See oaObserver for information on using OpenAccess observer template classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaStdObserver_oaPathSeg_oaShapeModTypeEnum(oaUInt4 priorityIn)\n"
"    Signature: oaStdObserver_oaPathSeg_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaStdObserver_oaPathSeg_oaShapeModTypeEnum(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaStdObserver_oaPathSeg_oaShapeModTypeEnum||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the constructor for the oaStdObserver<T, D> template class. Observers are ordered by priority from lowest to highest.\n"
"    priorityIn\n"
"    priority of this observer\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaStdObserver_oaPathSeg_oaShapeModTypeEnum",
    sizeof(PyoaStdObserver_oaPathSeg_oaShapeModTypeEnumObject),
    0,
    (destructor)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_compare,	/* tp_compare */
    (reprfunc)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaStdObserver_oaPathSeg_oaShapeModTypeEnum_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaStdObserver_oaPathSeg_oaShapeModTypeEnum_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaStdObserver_oaPathSeg_oaShapeModTypeEnum_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_hasObservers_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: hasObservers\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasObservers()\n"
"    Signature: hasObservers|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if any observers for type 'T' are active.\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_hasObservers(PyObject* ob, PyObject *args)
{
  try {
    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (oaStdObserver_oaPathSeg_oaShapeModTypeEnum::hasObservers());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: notifyPostCreateObservers\n"
"  Paramegers: (oaPathSeg)\n"
"    Calls: void notifyPostCreateObservers(oaPathSeg* object)\n"
"    Signature: notifyPostCreateObservers|void-void|ptr-oaPathSeg,\n"
"    Function notifyPostCreateObservers\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostCreateObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPathSeg p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPathSeg_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPathSeg_oaShapeModTypeEnum::notifyPostCreateObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: notifyPostModifyObservers\n"
"  Paramegers: (oaPathSeg,oaShapeModTypeEnum)\n"
"    Calls: void notifyPostModifyObservers(oaPathSeg* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPostModifyObservers|void-void|ptr-oaPathSeg,simple-oaShapeModTypeEnum,\n"
"    Function notifyPostModifyObservers\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPathSeg p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPathSeg_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPathSeg_oaShapeModTypeEnum::notifyPostModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: notifyPreDestroyObservers\n"
"  Paramegers: (oaPathSeg)\n"
"    Calls: void notifyPreDestroyObservers(oaPathSeg* object)\n"
"    Signature: notifyPreDestroyObservers|void-void|ptr-oaPathSeg,\n"
"    Function notifyPreDestroyObservers\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreDestroyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPathSeg p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPathSeg_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPathSeg_oaShapeModTypeEnum::notifyPreDestroyObservers(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc[] = 
"Class: oaStdObserver_oaPathSeg_oaShapeModTypeEnum, Function: notifyPreModifyObservers\n"
"  Paramegers: (oaPathSeg,oaShapeModTypeEnum)\n"
"    Calls: void notifyPreModifyObservers(oaPathSeg* object,oaShapeModTypeEnum modType)\n"
"    Signature: notifyPreModifyObservers|void-void|ptr-oaPathSeg,simple-oaShapeModTypeEnum,\n"
"    Function notifyPreModifyObservers\n"
;

static PyObject*
oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreModifyObservers(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaPathSeg p1;
    PyParamoaShapeModTypeEnum p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPathSeg_Convert,&p1,
          &PyoaShapeModTypeEnum_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaStdObserver_oaPathSeg_oaShapeModTypeEnum::notifyPreModifyObservers(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaStdObserver_oaPathSeg_oaShapeModTypeEnum_staticmethodlist[] = {
    {"static_hasObservers",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_hasObservers,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_hasObservers_doc},
    {"static_notifyPostCreateObservers",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostCreateObservers,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostCreateObservers_doc},
    {"static_notifyPostModifyObservers",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostModifyObservers,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPostModifyObservers_doc},
    {"static_notifyPreDestroyObservers",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreDestroyObservers,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreDestroyObservers_doc},
    {"static_notifyPreModifyObservers",(PyCFunction)oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreModifyObservers,METH_VARARGS,oaStdObserver_oaPathSeg_oaShapeModTypeEnum_static_notifyPreModifyObservers_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type)<0) {
      printf("** PyType_Ready failed for: oaStdObserver_oaPathSeg_oaShapeModTypeEnum\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaStdObserver_oaPathSeg_oaShapeModTypeEnum",
           (PyObject*)(&PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaStdObserver_oaPathSeg_oaShapeModTypeEnum\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaStdObserver_oaPathSeg_oaShapeModTypeEnum_Type.tp_dict;
    for(method=oaStdObserver_oaPathSeg_oaShapeModTypeEnum_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

