
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCObserverResultEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaVCObserverResultEnum_Convert(PyObject* ob,PyParamoaVCObserverResultEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacVCObserverResultOk")==0) { result->SetData(oacVCObserverResultOk); return 1;}
        if (strcasecmp(str,"oacVCObserverResultAbort")==0) { result->SetData(oacVCObserverResultAbort); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaVCObserverResultEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCObserverResultEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaVCObserverResultEnum_FromoaVCObserverResultEnum(oaVCObserverResultEnum ob)
{
    if (ob==oacVCObserverResultOk) return PyString_FromString("oacVCObserverResultOk");
    if (ob==oacVCObserverResultAbort) return PyString_FromString("oacVCObserverResultAbort");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaVCObserverResultEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaVCObserverResultEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaVCObserverResultEnum_FromoaVCObserverResultEnum(oaVCObserverResultEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaVCObserverResultEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaVCObserverResultEnum_doc[] =
"Type convert function for enum: oaVCObserverResultEnum";
                               
static PyMethodDef PyoaVCObserverResultEnum_method =
  {"oaVCObserverResultEnum",(PyCFunction)PyoaVCObserverResultEnum_TypeFunction,METH_VARARGS,oaVCObserverResultEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaVCObserverResultEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacVCObserverResultOk");
    PyDict_SetItemString(mod_dict,"oacVCObserverResultOk",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCObserverResultAbort");
    PyDict_SetItemString(mod_dict,"oacVCObserverResultAbort",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaVCObserverResultEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaVCObserverResultEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaVCObserverResultEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCOperation
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCOperation_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCOperation_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCOperationObject* self = (PyoaVCOperationObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCOperationEnum)
    {
        PyParamoaVCOperationEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCOperationEnum_Convert,&p1)) {
            self->value =  new oaVCOperation(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaVCOperation(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCOperation)
    {
        PyParamoaVCOperation p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCOperation_Convert,&p1)) {
            self->value= new oaVCOperation(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCOperation, Choices are:\n"
        "    (oaVCOperationEnum)\n"
        "    (oaString)\n"
        "    (oaVCOperation)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCOperation_tp_dealloc(PyoaVCOperationObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCOperation_tp_repr(PyObject *ob)
{
    PyParamoaVCOperation value;
    int convert_status=PyoaVCOperation_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[35];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaVCOperation::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCOperation_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCOperation v1;
    PyParamoaVCOperation v2;
    int convert_status1=PyoaVCOperation_Convert(ob1,&v1);
    int convert_status2=PyoaVCOperation_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCOperation_Convert(PyObject* ob,PyParamoaVCOperation* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCOperation_Check(ob)) {
        result->SetData(  ((PyoaVCOperationObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCOperation Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCOperation_FromoaVCOperation(oaVCOperation* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCOperation_Type.tp_alloc(&PyoaVCOperation_Type,0);
        if (bself == NULL) return bself;
        PyoaVCOperationObject* self = (PyoaVCOperationObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCOperation_getName_doc[] = 
"Class: oaVCOperation, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the oaVCOperationEnum value set on this oaVCOperation wrapper object.\n"
;

static PyObject*
oaVCOperation_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCOperation data;
    int convert_status=PyoaVCOperation_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCOperationObject* self=(PyoaVCOperationObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCOperation_oaVCOperationEnum_doc[] = 
"Class: oaVCOperation, Function: oaVCOperationEnum\n"
"  Paramegers: ()\n"
"    Calls: oaVCOperationEnum oaVCOperationEnum() const\n"
"    Signature: operator oaVCOperationEnum|simple-oaVCOperationEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaVCOperation object into its corresponding oaVCOperationEnum value.\n"
;

static PyObject*
oaVCOperation_oaVCOperationEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCOperation data;
    int convert_status=PyoaVCOperation_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCOperationObject* self=(PyoaVCOperationObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVCOperationEnum result= (data.DataCall()->operator oaVCOperationEnum());
        return PyoaVCOperationEnum_FromoaVCOperationEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCOperation_assign_doc[] = 
"Class: oaVCOperation, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCOperation_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCOperation data;
  int convert_status=PyoaVCOperation_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCOperation p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCOperation_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCOperation_methodlist[] = {
    {"getName",(PyCFunction)oaVCOperation_getName,METH_VARARGS,oaVCOperation_getName_doc},
    {"oaVCOperationEnum",(PyCFunction)oaVCOperation_oaVCOperationEnum,METH_VARARGS,oaVCOperation_oaVCOperationEnum_doc},
    {"assign",(PyCFunction)oaVCOperation_tp_assign,METH_VARARGS,oaVCOperation_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCOperation_doc[] = 
"Class: oaVCOperation\n"
"  oaVCOperationEnum\n"
"  The oaVCOperation class is an enum wrapper class for oaVCOperationEnum values.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"Constructors:\n"
"  Paramegers: (oaVCOperationEnum)\n"
"    Calls: oaVCOperation(oaVCOperationEnum valueIn)\n"
"    Signature: oaVCOperation||simple-oaVCOperationEnum,\n"
"    This oaVCOperation constructor takes an oaVCOperationEnum value.\n"
"    valueIn\n"
"    an oaVCOperationEnum value\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVCOperation(const oaString& name)\n"
"    Signature: oaVCOperation||cref-oaString,\n"
"    This oaVCOperation constructor takes an oaVCOperationEnum name.\n"
"    name\n"
"    the name associated with an oaVCOperationEnum value\n"
"    oacInvalidVCOperationName\n"
"  Paramegers: (oaVCOperation)\n"
"    Calls: (const oaVCOperation&)\n"
"    Signature: oaVCOperation||cref-oaVCOperation,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCOperation_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCOperation",
    sizeof(PyoaVCOperationObject),
    0,
    (destructor)oaVCOperation_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCOperation_tp_compare,	/* tp_compare */
    (reprfunc)oaVCOperation_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCOperation_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCOperation_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCOperation_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCOperation_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCOperation_Type)<0) {
      printf("** PyType_Ready failed for: oaVCOperation\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCOperation",
           (PyObject*)(&PyoaVCOperation_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCOperation\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCOperationEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaVCOperationEnum_Convert(PyObject* ob,PyParamoaVCOperationEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacVCOperationGetStatus")==0) { result->SetData(oacVCOperationGetStatus); return 1;}
        if (strcasecmp(str,"oacVCOperationGetControlledObjects")==0) { result->SetData(oacVCOperationGetControlledObjects); return 1;}
        if (strcasecmp(str,"oacVCOperationGetControlledLibs")==0) { result->SetData(oacVCOperationGetControlledLibs); return 1;}
        if (strcasecmp(str,"oacVCOperationGetVersions")==0) { result->SetData(oacVCOperationGetVersions); return 1;}
        if (strcasecmp(str,"oacVCOperationGetWorkingVersion")==0) { result->SetData(oacVCOperationGetWorkingVersion); return 1;}
        if (strcasecmp(str,"oacVCOperationGetWorkingVersions")==0) { result->SetData(oacVCOperationGetWorkingVersions); return 1;}
        if (strcasecmp(str,"oacVCOperationUpdate")==0) { result->SetData(oacVCOperationUpdate); return 1;}
        if (strcasecmp(str,"oacVCOperationMakeEditable")==0) { result->SetData(oacVCOperationMakeEditable); return 1;}
        if (strcasecmp(str,"oacVCOperationCancelEdit")==0) { result->SetData(oacVCOperationCancelEdit); return 1;}
        if (strcasecmp(str,"oacVCOperationCommitEdits")==0) { result->SetData(oacVCOperationCommitEdits); return 1;}
        if (strcasecmp(str,"oacVCOperationSetControlled")==0) { result->SetData(oacVCOperationSetControlled); return 1;}
        if (strcasecmp(str,"oacVCOperationUnsetControlled")==0) { result->SetData(oacVCOperationUnsetControlled); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaVCOperationEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCOperationEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaVCOperationEnum_FromoaVCOperationEnum(oaVCOperationEnum ob)
{
    if (ob==oacVCOperationGetStatus) return PyString_FromString("oacVCOperationGetStatus");
    if (ob==oacVCOperationGetControlledObjects) return PyString_FromString("oacVCOperationGetControlledObjects");
    if (ob==oacVCOperationGetControlledLibs) return PyString_FromString("oacVCOperationGetControlledLibs");
    if (ob==oacVCOperationGetVersions) return PyString_FromString("oacVCOperationGetVersions");
    if (ob==oacVCOperationGetWorkingVersion) return PyString_FromString("oacVCOperationGetWorkingVersion");
    if (ob==oacVCOperationGetWorkingVersions) return PyString_FromString("oacVCOperationGetWorkingVersions");
    if (ob==oacVCOperationUpdate) return PyString_FromString("oacVCOperationUpdate");
    if (ob==oacVCOperationMakeEditable) return PyString_FromString("oacVCOperationMakeEditable");
    if (ob==oacVCOperationCancelEdit) return PyString_FromString("oacVCOperationCancelEdit");
    if (ob==oacVCOperationCommitEdits) return PyString_FromString("oacVCOperationCommitEdits");
    if (ob==oacVCOperationSetControlled) return PyString_FromString("oacVCOperationSetControlled");
    if (ob==oacVCOperationUnsetControlled) return PyString_FromString("oacVCOperationUnsetControlled");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaVCOperationEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaVCOperationEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaVCOperationEnum_FromoaVCOperationEnum(oaVCOperationEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaVCOperationEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaVCOperationEnum_doc[] =
"Type convert function for enum: oaVCOperationEnum";
                               
static PyMethodDef PyoaVCOperationEnum_method =
  {"oaVCOperationEnum",(PyCFunction)PyoaVCOperationEnum_TypeFunction,METH_VARARGS,oaVCOperationEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaVCOperationEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacVCOperationGetStatus");
    PyDict_SetItemString(mod_dict,"oacVCOperationGetStatus",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationGetControlledObjects");
    PyDict_SetItemString(mod_dict,"oacVCOperationGetControlledObjects",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationGetControlledLibs");
    PyDict_SetItemString(mod_dict,"oacVCOperationGetControlledLibs",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationGetVersions");
    PyDict_SetItemString(mod_dict,"oacVCOperationGetVersions",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationGetWorkingVersion");
    PyDict_SetItemString(mod_dict,"oacVCOperationGetWorkingVersion",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationGetWorkingVersions");
    PyDict_SetItemString(mod_dict,"oacVCOperationGetWorkingVersions",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationUpdate");
    PyDict_SetItemString(mod_dict,"oacVCOperationUpdate",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationMakeEditable");
    PyDict_SetItemString(mod_dict,"oacVCOperationMakeEditable",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationCancelEdit");
    PyDict_SetItemString(mod_dict,"oacVCOperationCancelEdit",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationCommitEdits");
    PyDict_SetItemString(mod_dict,"oacVCOperationCommitEdits",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationSetControlled");
    PyDict_SetItemString(mod_dict,"oacVCOperationSetControlled",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCOperationUnsetControlled");
    PyDict_SetItemString(mod_dict,"oacVCOperationUnsetControlled",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaVCOperationEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaVCOperationEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaVCOperationEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCQueryDepth
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCQueryDepth_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCQueryDepth_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCQueryDepthObject* self = (PyoaVCQueryDepthObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCQueryDepthEnum)
    {
        PyParamoaVCQueryDepthEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCQueryDepthEnum_Convert,&p1)) {
            self->value =  new oaVCQueryDepth(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaVCQueryDepth(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCQueryDepth)
    {
        PyParamoaVCQueryDepth p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCQueryDepth_Convert,&p1)) {
            self->value= new oaVCQueryDepth(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCQueryDepth, Choices are:\n"
        "    (oaVCQueryDepthEnum)\n"
        "    (oaString)\n"
        "    (oaVCQueryDepth)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCQueryDepth_tp_dealloc(PyoaVCQueryDepthObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCQueryDepth_tp_repr(PyObject *ob)
{
    PyParamoaVCQueryDepth value;
    int convert_status=PyoaVCQueryDepth_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[36];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaVCQueryDepth::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCQueryDepth_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCQueryDepth v1;
    PyParamoaVCQueryDepth v2;
    int convert_status1=PyoaVCQueryDepth_Convert(ob1,&v1);
    int convert_status2=PyoaVCQueryDepth_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCQueryDepth_Convert(PyObject* ob,PyParamoaVCQueryDepth* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCQueryDepth_Check(ob)) {
        result->SetData(  ((PyoaVCQueryDepthObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCQueryDepth Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCQueryDepth_FromoaVCQueryDepth(oaVCQueryDepth* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCQueryDepth_Type.tp_alloc(&PyoaVCQueryDepth_Type,0);
        if (bself == NULL) return bself;
        PyoaVCQueryDepthObject* self = (PyoaVCQueryDepthObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCQueryDepth_getName_doc[] = 
"Class: oaVCQueryDepth, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the oaVCQueryDepthEnum value set on this oaVCQueryDepth wrapper object.\n"
;

static PyObject*
oaVCQueryDepth_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCQueryDepth data;
    int convert_status=PyoaVCQueryDepth_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCQueryDepthObject* self=(PyoaVCQueryDepthObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCQueryDepth_oaVCQueryDepthEnum_doc[] = 
"Class: oaVCQueryDepth, Function: oaVCQueryDepthEnum\n"
"  Paramegers: ()\n"
"    Calls: oaVCQueryDepthEnum oaVCQueryDepthEnum() const\n"
"    Signature: operator oaVCQueryDepthEnum|simple-oaVCQueryDepthEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaVCQueryDepth object into its corresponding oaVCQueryDepthEnum value.\n"
;

static PyObject*
oaVCQueryDepth_oaVCQueryDepthEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCQueryDepth data;
    int convert_status=PyoaVCQueryDepth_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCQueryDepthObject* self=(PyoaVCQueryDepthObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVCQueryDepthEnum result= (data.DataCall()->operator oaVCQueryDepthEnum());
        return PyoaVCQueryDepthEnum_FromoaVCQueryDepthEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCQueryDepth_assign_doc[] = 
"Class: oaVCQueryDepth, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCQueryDepth_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCQueryDepth data;
  int convert_status=PyoaVCQueryDepth_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCQueryDepth p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCQueryDepth_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCQueryDepth_methodlist[] = {
    {"getName",(PyCFunction)oaVCQueryDepth_getName,METH_VARARGS,oaVCQueryDepth_getName_doc},
    {"oaVCQueryDepthEnum",(PyCFunction)oaVCQueryDepth_oaVCQueryDepthEnum,METH_VARARGS,oaVCQueryDepth_oaVCQueryDepthEnum_doc},
    {"assign",(PyCFunction)oaVCQueryDepth_tp_assign,METH_VARARGS,oaVCQueryDepth_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCQueryDepth_doc[] = 
"Class: oaVCQueryDepth\n"
"  oaVCQueryDepthEnum\n"
"  The oaVCQueryDepth class is an enum wrapper class for oaVCQueryDepthEnum values, which describe the depth that certain query functions should go down the library hierarchy. The oaVCQueryDepthEnum value meanings are as follows:\n"
"  oacFileVCQueryDepth: query only the immediate children files of this container\n"
"  oacCellVCQueryDepth: stop the query at the Cell level, not including \"cell files\"\n"
"  oacViewVCQueryDepth: stop the query at the View level, not including \"view files\"\n"
"  oacCellViewVCQueryDepth: stop the query at the CellView level, not including \"cellView\" files\n"
"  oacCellViewFileVCQueryDepth: stop the query at the CellView file level. This is currently the lowest level\n"
"Constructors:\n"
"  Paramegers: (oaVCQueryDepthEnum)\n"
"    Calls: oaVCQueryDepth(oaVCQueryDepthEnum valueIn)\n"
"    Signature: oaVCQueryDepth||simple-oaVCQueryDepthEnum,\n"
"    This oaVCQueryDepth constructor takes an oaVCQueryDepthEnum value.\n"
"    valueIn\n"
"    an oaVCQueryDepthEnum value\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVCQueryDepth(const oaString& name)\n"
"    Signature: oaVCQueryDepth||cref-oaString,\n"
"    This oaVCQueryDepth constructor takes an oaVCQueryDepthEnum name.\n"
"    name\n"
"    the name associated with an oaVCQueryDepthEnum value\n"
"    oacInvalidVCQueryDepthName\n"
"  Paramegers: (oaVCQueryDepth)\n"
"    Calls: (const oaVCQueryDepth&)\n"
"    Signature: oaVCQueryDepth||cref-oaVCQueryDepth,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCQueryDepth_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCQueryDepth",
    sizeof(PyoaVCQueryDepthObject),
    0,
    (destructor)oaVCQueryDepth_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCQueryDepth_tp_compare,	/* tp_compare */
    (reprfunc)oaVCQueryDepth_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCQueryDepth_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCQueryDepth_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCQueryDepth_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCQueryDepth_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCQueryDepth_Type)<0) {
      printf("** PyType_Ready failed for: oaVCQueryDepth\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCQueryDepth",
           (PyObject*)(&PyoaVCQueryDepth_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCQueryDepth\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCQueryDepthEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaVCQueryDepthEnum_Convert(PyObject* ob,PyParamoaVCQueryDepthEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacFileVCQueryDepth")==0) { result->SetData(oacFileVCQueryDepth); return 1;}
        if (strcasecmp(str,"oacCellVCQueryDepth")==0) { result->SetData(oacCellVCQueryDepth); return 1;}
        if (strcasecmp(str,"oacViewVCQueryDepth")==0) { result->SetData(oacViewVCQueryDepth); return 1;}
        if (strcasecmp(str,"oacCellViewVCQueryDepth")==0) { result->SetData(oacCellViewVCQueryDepth); return 1;}
        if (strcasecmp(str,"oacCellViewFileVCQueryDepth")==0) { result->SetData(oacCellViewFileVCQueryDepth); return 1;}
        if (strcasecmp(str,"oacMaxQueryDepth")==0) { result->SetData(oacMaxQueryDepth); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaVCQueryDepthEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCQueryDepthEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaVCQueryDepthEnum_FromoaVCQueryDepthEnum(oaVCQueryDepthEnum ob)
{
    if (ob==oacFileVCQueryDepth) return PyString_FromString("oacFileVCQueryDepth");
    if (ob==oacCellVCQueryDepth) return PyString_FromString("oacCellVCQueryDepth");
    if (ob==oacViewVCQueryDepth) return PyString_FromString("oacViewVCQueryDepth");
    if (ob==oacCellViewVCQueryDepth) return PyString_FromString("oacCellViewVCQueryDepth");
    if (ob==oacCellViewFileVCQueryDepth) return PyString_FromString("oacCellViewFileVCQueryDepth");
    if (ob==oacMaxQueryDepth) return PyString_FromString("oacMaxQueryDepth");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaVCQueryDepthEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaVCQueryDepthEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaVCQueryDepthEnum_FromoaVCQueryDepthEnum(oaVCQueryDepthEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaVCQueryDepthEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaVCQueryDepthEnum_doc[] =
"Type convert function for enum: oaVCQueryDepthEnum";
                               
static PyMethodDef PyoaVCQueryDepthEnum_method =
  {"oaVCQueryDepthEnum",(PyCFunction)PyoaVCQueryDepthEnum_TypeFunction,METH_VARARGS,oaVCQueryDepthEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaVCQueryDepthEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacFileVCQueryDepth");
    PyDict_SetItemString(mod_dict,"oacFileVCQueryDepth",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellVCQueryDepth");
    PyDict_SetItemString(mod_dict,"oacCellVCQueryDepth",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViewVCQueryDepth");
    PyDict_SetItemString(mod_dict,"oacViewVCQueryDepth",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellViewVCQueryDepth");
    PyDict_SetItemString(mod_dict,"oacCellViewVCQueryDepth",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellViewFileVCQueryDepth");
    PyDict_SetItemString(mod_dict,"oacCellViewFileVCQueryDepth",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMaxQueryDepth");
    PyDict_SetItemString(mod_dict,"oacMaxQueryDepth",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaVCQueryDepthEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaVCQueryDepthEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaVCQueryDepthEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCSystem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCSystem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCSystem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCSystemObject* self = (PyoaVCSystemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCSystem)
    {
        PyParamoaVCSystem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCSystem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCSystem, Choices are:\n"
        "    (oaVCSystem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCSystem_tp_dealloc(PyoaVCSystemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCSystem_tp_repr(PyObject *ob)
{
    PyParamoaVCSystem value;
    int convert_status=PyoaVCSystem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[32];
    sprintf(buffer,"<oaVCSystem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCSystem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCSystem v1;
    PyParamoaVCSystem v2;
    int convert_status1=PyoaVCSystem_Convert(ob1,&v1);
    int convert_status2=PyoaVCSystem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCSystem_Convert(PyObject* ob,PyParamoaVCSystem* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCSystem_Check(ob)) {
        result->SetData(  ((PyoaVCSystemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCSystem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCSystem_FromoaVCSystem(oaVCSystem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVCSystem* data=*value;
        PyObject* bself = PyoaVCSystem_Type.tp_alloc(&PyoaVCSystem_Type,0);
        if (bself == NULL) return bself;
        PyoaVCSystemObject* self = (PyoaVCSystemObject*)bself;
        self->value = value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVCSystem_FromoaVCSystem(oaVCSystem* data)
{
    if (data) {
       PyObject* bself = PyoaVCSystem_Type.tp_alloc(&PyoaVCSystem_Type,0);
       if (bself == NULL) return bself;
       PyoaVCSystemObject* self = (PyoaVCSystemObject*)bself;
       self->data = data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCSystem_destroy_doc[] = 
"Class: oaVCSystem, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function will destroy this instance of the oaVCSystem object by calling \"delete\" on it. Since the destructor is virtual, the oaVCSystemPvt destructor will be called first, releasing the IVCSystem interface pointer.\n"
;

static PyObject*
oaVCSystem_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCSystem data;
    int convert_status=PyoaVCSystem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCSystemObject* self=(PyoaVCSystemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCSystem_getControlledLibs_doc[] = 
"Class: oaVCSystem, Function: getControlledLibs\n"
"  Paramegers: (oaArray_oaLib)\n"
"    Calls: virtual oaBoolean getControlledLibs(oaArray_oaLib& libs) const\n"
"    Signature: getControlledLibs|simple-oaBoolean|ref-oaArray_oaLib,\n"
"    BrowseData: 1,oaArray_oaLib\n"
"    This function will return an array of libraries that are being controlled by this version control system. Note that this isn't all the controlled libraries in this session; if a library is being controlled by a different version control system than the one represented by this instance of oaVCSystem, it will not appear in this list.\n"
"    libs\n"
"    output parameter - an array of the libraries controlled by this version control system\n"
;

static PyObject*
oaVCSystem_getControlledLibs(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCSystem data;
    int convert_status=PyoaVCSystem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCSystemObject* self=(PyoaVCSystemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaArray_oaLib p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaArray_oaLib_Convert,&p1)) {
        PyErr_SetString(PyExc_TypeError,
            "Call to Pure-Virtual Function class: oaVCSystem, function: getControlledLibs");
            return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCSystem_getName_doc[] = 
"Class: oaVCSystem, Function: getName\n"
"  Paramegers: (oaString)\n"
"    Calls: virtual void getName(oaString& name) const\n"
"    Signature: getName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the name of this oaVCSystem object.\n"
"    name\n"
"    returned name of this oaVCSystem\n"
;

static PyObject*
oaVCSystem_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCSystem data;
    int convert_status=PyoaVCSystem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCSystemObject* self=(PyoaVCSystemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        PyErr_SetString(PyExc_TypeError,
            "Call to Pure-Virtual Function class: oaVCSystem, function: getName");
            return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCSystem_testCapability_doc[] = 
"Class: oaVCSystem, Function: testCapability\n"
"  Paramegers: (oaVCCap)\n"
"    Calls: virtual oaBoolean testCapability(oaVCCap cap) const\n"
"    Signature: testCapability|simple-oaBoolean|simple-oaVCCap,\n"
"    This function is used to determine if a particular capability is supported by the installed version control system.\n"
"    cap\n"
"    an enumerated value for the capability that is being queried from the version control system\n"
;

static PyObject*
oaVCSystem_testCapability(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCSystem data;
    int convert_status=PyoaVCSystem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCSystemObject* self=(PyoaVCSystemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVCCap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVCCap_Convert,&p1)) {
        PyErr_SetString(PyExc_TypeError,
            "Call to Pure-Virtual Function class: oaVCSystem, function: testCapability");
            return NULL;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCSystem_isNull_doc[] =
"Class: oaVCSystem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVCSystem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVCSystem data;
    int convert_status=PyoaVCSystem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVCSystem_assign_doc[] = 
"Class: oaVCSystem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCSystem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCSystem data;
  int convert_status=PyoaVCSystem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCSystem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCSystem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCSystem_methodlist[] = {
    {"destroy",(PyCFunction)oaVCSystem_destroy,METH_VARARGS,oaVCSystem_destroy_doc},
    {"getControlledLibs",(PyCFunction)oaVCSystem_getControlledLibs,METH_VARARGS,oaVCSystem_getControlledLibs_doc},
    {"getName",(PyCFunction)oaVCSystem_getName,METH_VARARGS,oaVCSystem_getName_doc},
    {"testCapability",(PyCFunction)oaVCSystem_testCapability,METH_VARARGS,oaVCSystem_testCapability_doc},
    {"isNull",(PyCFunction)oaVCSystem_tp_isNull,METH_VARARGS,oaVCSystem_isNull_doc},
    {"assign",(PyCFunction)oaVCSystem_tp_assign,METH_VARARGS,oaVCSystem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCSystem_doc[] = 
"Class: oaVCSystem\n"
"  The oaVCSystem class is used to manage and access version control plug-ins through the OA public interface.\n"
"Constructors:\n"
"  Paramegers: (oaVCSystem)\n"
"    Calls: (const oaVCSystem&)\n"
"    Signature: oaVCSystem||cref-oaVCSystem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCSystem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCSystem",
    sizeof(PyoaVCSystemObject),
    0,
    (destructor)oaVCSystem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCSystem_tp_compare,	/* tp_compare */
    (reprfunc)oaVCSystem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCSystem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCSystem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCSystem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCSystem_static_get_doc[] = 
"Class: oaVCSystem, Function: get\n"
"  Paramegers: ([oaChar])\n"
"    Calls: oaVCSystem* get(const oaChar* name)\n"
"    Signature: get|ptr-oaVCSystem|cptr-oaChar,\n"
"    This function will get the correct oaVCSystem object (actually, an oaVCSystemPvt class). If a VC system of that name exists, the corresponding oaVCSystem object will be returned to the caller. If not, NULL will be returned.\n"
"    name\n"
"    input parameter - name of VC system\n"
;

static PyObject*
oaVCSystem_static_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaChar_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Array_Convert,&p1)) {
        oaVCSystemp result= (oaVCSystem::get(p1.Data()));
        return PyoaVCSystem_FromoaVCSystem(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVCSystem_staticmethodlist[] = {
    {"static_get",(PyCFunction)oaVCSystem_static_get,METH_VARARGS,oaVCSystem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCSystem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCSystem_Type)<0) {
      printf("** PyType_Ready failed for: oaVCSystem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCSystem",
           (PyObject*)(&PyoaVCSystem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCSystem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVCSystem_Type.tp_dict;
    for(method=oaVCSystem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCVersion
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCVersion_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCVersion_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCVersionObject* self = (PyoaVCVersionObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaVCVersion();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ([oaChar])
    {
        PyParamoaChar_Array p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaChar_Array_Convert,&p1)) {
            self->value =  new oaVCVersion(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ([oaChar],[oaChar])
    {
        PyParamoaChar_Array p1;
        PyParamoaChar_Array p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaChar_Array_Convert,&p1,
              &PyoaChar_Array_Convert,&p2)) {
            self->value =  new oaVCVersion(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCVersion)
    {
        PyParamoaVCVersion p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCVersion_Convert,&p1)) {
            self->value =  new oaVCVersion(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCVersion, Choices are:\n"
        "    ()\n"
        "    ([oaChar])\n"
        "    ([oaChar],[oaChar])\n"
        "    (oaVCVersion)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCVersion_tp_dealloc(PyoaVCVersionObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCVersion_tp_repr(PyObject *ob)
{
    PyParamoaVCVersion value;
    int convert_status=PyoaVCVersion_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[33];
    sprintf(buffer,"<oaVCVersion::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCVersion_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCVersion v1;
    PyParamoaVCVersion v2;
    int convert_status1=PyoaVCVersion_Convert(ob1,&v1);
    int convert_status2=PyoaVCVersion_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCVersion_Convert(PyObject* ob,PyParamoaVCVersion* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCVersion_Check(ob)) {
        result->SetData(  ((PyoaVCVersionObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCVersion Failed");
    return 0;
}
int
PyoaVCVersion_ConvertAof(PyObject* ob,PyParamoaVCVersion* result)
{
    if (ob == NULL) return 1;
    if (ob==Py_None) {
        result->SetData(NULL);
        return 1;
    }
    if (PyoaVCVersion_Check(ob)) {
        result->SetData(  ((PyoaVCVersionObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCVersion Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCVersion_FromoaVCVersion(oaVCVersion* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCVersion_Type.tp_alloc(&PyoaVCVersion_Type,0);
        if (bself == NULL) return bself;
        PyoaVCVersionObject* self = (PyoaVCVersionObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCVersion_compare_doc[] = 
"Class: oaVCVersion, Function: compare\n"
"  Paramegers: (oaVCVersion)\n"
"    Calls: oaVersionComp compare(const oaVCVersion* other) const\n"
"    Signature: compare|simple-oaVersionComp|cptr-oaVCVersion,\n"
"    This function compares two versions. This is a legal operation even if the version objects were generated from different version control systems. In that case, the most likely return value will be \"oacVersionCompIncompatable\".\n"
"    other\n"
"    a pointer to another version object to compare this one to\n"
;

static PyObject*
oaVCVersion_compare(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCVersion data;
    int convert_status=PyoaVCVersion_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCVersionObject* self=(PyoaVCVersionObject*)ob;

    PyParamoaVCVersion p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVCVersion_ConvertAof,&p1)) {
        oaVersionComp* result= new oaVersionComp(data.DataCall()->compare(p1.DataAof()));
        return PyoaVersionComp_FromoaVersionComp(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCVersion_getDisplayName_doc[] = 
"Class: oaVCVersion, Function: getDisplayName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getDisplayName(oaString& name) const\n"
"    Signature: getDisplayName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the display name of this version object.\n"
"    name\n"
"    returned display name of this version object\n"
;

static PyObject*
oaVCVersion_getDisplayName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCVersion data;
    int convert_status=PyoaVCVersion_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCVersionObject* self=(PyoaVCVersionObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getDisplayName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCVersion_getVCSystemName_doc[] = 
"Class: oaVCVersion, Function: getVCSystemName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getVCSystemName(oaString& sysName) const\n"
"    Signature: getVCSystemName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the version control system name of the version object.\n"
"    sysName\n"
"    returned system name of the version object\n"
;

static PyObject*
oaVCVersion_getVCSystemName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCVersion data;
    int convert_status=PyoaVCVersion_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCVersionObject* self=(PyoaVCVersionObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getVCSystemName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCVersion_setDisplayName_doc[] = 
"Class: oaVCVersion, Function: setDisplayName\n"
"  Paramegers: ([oaChar],[oaChar])\n"
"    Calls: void setDisplayName(const oaChar* sysName,const oaChar* displayName)\n"
"    Signature: setDisplayName|void-void|cptr-oaChar,cptr-oaChar,\n"
"    This function sets the display name of this version object by calling into the VC system and having it create a new version object.\n"
"    sysName\n"
"    system name of this version object\n"
"    displayName\n"
"    display name to set on this version object\n"
;

static PyObject*
oaVCVersion_setDisplayName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCVersion data;
    int convert_status=PyoaVCVersion_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCVersionObject* self=(PyoaVCVersionObject*)ob;

    PyParamoaChar_Array p1;
    PyParamoaChar_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaChar_Array_Convert,&p1,
          &PyoaChar_Array_Convert,&p2)) {
        data.DataCall()->setDisplayName(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCVersion_assign_doc[] = 
"Class: oaVCVersion, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCVersion_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCVersion data;
  int convert_status=PyoaVCVersion_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCVersion p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCVersion_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCVersion_methodlist[] = {
    {"compare",(PyCFunction)oaVCVersion_compare,METH_VARARGS,oaVCVersion_compare_doc},
    {"getDisplayName",(PyCFunction)oaVCVersion_getDisplayName,METH_VARARGS,oaVCVersion_getDisplayName_doc},
    {"getVCSystemName",(PyCFunction)oaVCVersion_getVCSystemName,METH_VARARGS,oaVCVersion_getVCSystemName_doc},
    {"setDisplayName",(PyCFunction)oaVCVersion_setDisplayName,METH_VARARGS,oaVCVersion_setDisplayName_doc},
    {"assign",(PyCFunction)oaVCVersion_tp_assign,METH_VARARGS,oaVCVersion_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCVersion_doc[] = 
"Class: oaVCVersion\n"
"  The oaVCVersion class manages an IVersion interface pointer as an abstraction for the OA public API. The real work is done by a derived oaVCVersionPvt class to prevent dependencies from the OA public API on the plug-in interfaces.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaVCVersion()\n"
"    Signature: oaVCVersion||\n"
"    Constructor oaVCVersion\n"
"  Paramegers: ([oaChar])\n"
"    Calls: oaVCVersion(const oaChar* sysName)\n"
"    Signature: oaVCVersion||cptr-oaChar,cptr-oaChar,\n"
"    This constructor for the oaVCVersion class finds the version control interface (if any) from the sysName passed in and creates an IVersion interface from that, using the display name. If the version control system of the given name doesn't exist, the \"info\" member will be NULL.\n"
"    sysName\n"
"    VC system name\n"
"    displayName\n"
"    optional VC display name\n"
"  Paramegers: ([oaChar],[oaChar])\n"
"    Calls: oaVCVersion(const oaChar* sysName,const oaChar* displayName)\n"
"    Signature: oaVCVersion||cptr-oaChar,cptr-oaChar,\n"
"    This constructor for the oaVCVersion class finds the version control interface (if any) from the sysName passed in and creates an IVersion interface from that, using the display name. If the version control system of the given name doesn't exist, the \"info\" member will be NULL.\n"
"    sysName\n"
"    VC system name\n"
"    displayName\n"
"    optional VC display name\n"
"  Paramegers: (oaVCVersion)\n"
"    Calls: oaVCVersion(const oaVCVersion& ver)\n"
"    Signature: oaVCVersion||cref-oaVCVersion,\n"
"    This is the copy constructor for the oaVCVersion constructor.\n"
"    ver\n"
"    the version object to use to create the copy\n"
"  Paramegers: (oaVCVersion)\n"
"    Calls: (const oaVCVersion&)\n"
"    Signature: oaVCVersion||cref-oaVCVersion,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCVersion_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCVersion",
    sizeof(PyoaVCVersionObject),
    0,
    (destructor)oaVCVersion_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCVersion_tp_compare,	/* tp_compare */
    (reprfunc)oaVCVersion_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCVersion_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCVersion_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCVersion_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCVersion_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCVersion_Type)<0) {
      printf("** PyType_Ready failed for: oaVCVersion\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCVersion",
           (PyObject*)(&PyoaVCVersion_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCVersion\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCVersionIter
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCVersionIter_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCVersionIter_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCVersionIterObject* self = (PyoaVCVersionIterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCVersionIter)
    {
        PyParamoaVCVersionIter p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCVersionIter_Convert,&p1)) {
            self->value =  new oaVCVersionIter(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCVersionIter, Choices are:\n"
        "    (oaVCVersionIter)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCVersionIter_tp_dealloc(PyoaVCVersionIterObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCVersionIter_tp_repr(PyObject *ob)
{
    PyParamoaVCVersionIter value;
    int convert_status=PyoaVCVersionIter_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[37];
    sprintf(buffer,"<oaVCVersionIter::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCVersionIter_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCVersionIter v1;
    PyParamoaVCVersionIter v2;
    int convert_status1=PyoaVCVersionIter_Convert(ob1,&v1);
    int convert_status2=PyoaVCVersionIter_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
static PyObject*
oaVCVersionIter_getiter(PyObject *self)
{
    Py_INCREF(self);
    return self;
}

// ------------------------------------------------------------------
PyObject* oaVCVersionIter_iternext(PyObject *self);

// ------------------------------------------------------------------
int
PyoaVCVersionIter_Convert(PyObject* ob,PyParamoaVCVersionIter* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCVersionIter_Check(ob)) {
        result->SetData(  ((PyoaVCVersionIterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCVersionIter Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCVersionIter_FromoaVCVersionIter(oaVCVersionIter* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCVersionIter_Type.tp_alloc(&PyoaVCVersionIter_Type,0);
        if (bself == NULL) return bself;
        PyoaVCVersionIterObject* self = (PyoaVCVersionIterObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCVersionIter_getNext_doc[] = 
"Class: oaVCVersionIter, Function: getNext\n"
"  Paramegers: ()\n"
"    Calls: oaVCVersion getNext()\n"
"    Signature: getNext|simple-oaVCVersion|\n"
"    BrowseData: 1\n"
"    This function gets the next (oaDMObject*, status) pair. If there is no more data, the returned oaDMObject* will be NULL.\n"
;

extern PyObject* oaVCVersionIter_getNext(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char oaVCVersionIter_next_doc[] = 
"Class: oaVCVersionIter, Function: next\n"
"  Paramegers: ()\n"
"    Calls: oaVCVersion* next()\n"
"    Signature: next|ptr-oaVCVersion|,\n"
"    BrowseData: 1\n"
"    get next value or raise StopIteration\n"
;

extern PyObject* oaVCVersionIter_next(PyObject *self, PyObject *args);

// ------------------------------------------------------------------
static char oaVCVersionIter_reset_doc[] = 
"Class: oaVCVersionIter, Function: reset\n"
"  Paramegers: ()\n"
"    Calls: void reset()\n"
"    Signature: reset|void-void|\n"
"    BrowseData: 0\n"
"    This function resets the iterator such that a subsequent \"getNext\" will get the first entry in the set.\n"
;

static PyObject*
oaVCVersionIter_reset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCVersionIter data;
    int convert_status=PyoaVCVersionIter_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCVersionIterObject* self=(PyoaVCVersionIterObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->reset();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCVersionIter_assign_doc[] = 
"Class: oaVCVersionIter, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCVersionIter_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCVersionIter data;
  int convert_status=PyoaVCVersionIter_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCVersionIter p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCVersionIter_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCVersionIter_methodlist[] = {
    {"getNext",(PyCFunction)oaVCVersionIter_getNext,METH_VARARGS,oaVCVersionIter_getNext_doc},
    {"next",(PyCFunction)oaVCVersionIter_next,METH_VARARGS,oaVCVersionIter_next_doc},
    {"reset",(PyCFunction)oaVCVersionIter_reset,METH_VARARGS,oaVCVersionIter_reset_doc},
    {"assign",(PyCFunction)oaVCVersionIter_tp_assign,METH_VARARGS,oaVCVersionIter_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCVersionIter_doc[] = 
"Class: oaVCVersionIter\n"
"  The oaVCVersionIter is used to iterate a collection of oaVCVersions.\n"
"Constructors:\n"
"  Paramegers: (oaVCVersionIter)\n"
"    Calls: oaVCVersionIter(const oaVCVersionIter& iter)\n"
"    Signature: oaVCVersionIter||cref-oaVCVersionIter,\n"
"    This is the copy constructor for the oaVCVersionIter class.\n"
"    iter\n"
"    oaVCVersionIter to copy\n"
"  Paramegers: (oaVCVersionIter)\n"
"    Calls: (const oaVCVersionIter&)\n"
"    Signature: oaVCVersionIter||cref-oaVCVersionIter,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCVersionIter_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCVersionIter",
    sizeof(PyoaVCVersionIterObject),
    0,
    (destructor)oaVCVersionIter_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCVersionIter_tp_compare,	/* tp_compare */
    (reprfunc)oaVCVersionIter_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCVersionIter_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    (getiterfunc)oaVCVersionIter_getiter,	/* tp_iter */
    (iternextfunc)oaVCVersionIter_iternext,	/* tp_iternext */
    oaVCVersionIter_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCVersionIter_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCVersionIter_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCVersionIter_Type)<0) {
      printf("** PyType_Ready failed for: oaVCVersionIter\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCVersionIter",
           (PyObject*)(&PyoaVCVersionIter_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCVersionIter\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaValueObject* self = (PyoaValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaValue)
    {
        PyParamoaValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaValue, Choices are:\n"
        "    (oaValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaValue_tp_dealloc(PyoaValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaValue_tp_repr(PyObject *ob)
{
    PyParamoaValue value;
    int convert_status=PyoaValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[29];
    sprintf(buffer,"<oaValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaValue v1;
    PyParamoaValue v2;
    int convert_status1=PyoaValue_Convert(ob1,&v1);
    int convert_status2=PyoaValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaValue_Convert(PyObject* ob,PyParamoaValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaValue_Check(ob)) {
        result->SetData( (oaValue**) ((PyoaValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaValue_FromoaValue(oaValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaValue* data=*value;
        if (data->getType()==oacLayerArrayValueType) return PyoaLayerArrayValue_FromoaLayerArrayValue((oaLayerArrayValue**)value,borrow,lock);
        if (data->getType()==oacUInt8RangeValueType) return PyoaUInt8RangeValue_FromoaUInt8RangeValue((oaUInt8RangeValue**)value,borrow,lock);
        if (data->getType()==oacBoxArrayValueType) return PyoaBoxArrayValue_FromoaBoxArrayValue((oaBoxArrayValue**)value,borrow,lock);
        if (data->getType()==oacUInt8ValueType) return PyoaUInt8Value_FromoaUInt8Value((oaUInt8Value**)value,borrow,lock);
        if (data->getType()==oacInt1DTblValueType) return PyoaInt1DTblValue_FromoaInt1DTblValue((oaInt1DTblValue**)value,borrow,lock);
        if (data->getType()==oacViaDef2DTblValueType) return PyoaViaDef2DTblValue_FromoaViaDef2DTblValue((oaViaDef2DTblValue**)value,borrow,lock);
        if (data->getType()==oacAntennaRatioArrayValueType) return PyoaAntennaRatioArrayValue_FromoaAntennaRatioArrayValue((oaAntennaRatioArrayValue**)value,borrow,lock);
        if (data->getType()==oacViaDefArrayValueType) return PyoaViaDefArrayValue_FromoaViaDefArrayValue((oaViaDefArrayValue**)value,borrow,lock);
        if (data->getType()==oacFltIntFltTblValueType) return PyoaFltIntFltTblValue_FromoaFltIntFltTblValue((oaFltIntFltTblValue**)value,borrow,lock);
        if (data->getType()==oacIntFltTblValueType) return PyoaIntFltTblValue_FromoaIntFltTblValue((oaIntFltTblValue**)value,borrow,lock);
        if (data->getType()==oacBooleanValueType) return PyoaBooleanValue_FromoaBooleanValue((oaBooleanValue**)value,borrow,lock);
        if (data->getType()==oacFlt2DTblValueType) return PyoaFlt2DTblValue_FromoaFlt2DTblValue((oaFlt2DTblValue**)value,borrow,lock);
        if (data->getType()==oacFltValueType) return PyoaFltValue_FromoaFltValue((oaFltValue**)value,borrow,lock);
        if (data->getType()==oacValueArrayValueType) return PyoaValueArrayValue_FromoaValueArrayValue((oaValueArrayValue**)value,borrow,lock);
        if (data->getType()==oacLayerValueType) return PyoaLayerValue_FromoaLayerValue((oaLayerValue**)value,borrow,lock);
        if (data->getType()==oacIntDualIntArrayTblValueType) return PyoaIntDualIntArrayTblValue_FromoaIntDualIntArrayTblValue((oaIntDualIntArrayTblValue**)value,borrow,lock);
        if (data->getType()==oacAntennaRatioValueType) return PyoaAntennaRatioValue_FromoaAntennaRatioValue((oaAntennaRatioValue**)value,borrow,lock);
        if (data->getType()==oacIntValueType) return PyoaIntValue_FromoaIntValue((oaIntValue**)value,borrow,lock);
        if (data->getType()==oacFlt1DTblValueType) return PyoaFlt1DTblValue_FromoaFlt1DTblValue((oaFlt1DTblValue**)value,borrow,lock);
        if (data->getType()==oacDualInt1DTblValueType) return PyoaDualInt1DTblValue_FromoaDualInt1DTblValue((oaDualInt1DTblValue**)value,borrow,lock);
        if (data->getType()==oacDualIntValueType) return PyoaDualIntValue_FromoaDualIntValue((oaDualIntValue**)value,borrow,lock);
        if (data->getType()==oacIntRangeValueType) return PyoaIntRangeValue_FromoaIntRangeValue((oaIntRangeValue**)value,borrow,lock);
        if (data->getType()==oacInt2DTblValueType) return PyoaInt2DTblValue_FromoaInt2DTblValue((oaInt2DTblValue**)value,borrow,lock);
        PyObject* bself = PyoaValue_Type.tp_alloc(&PyoaValue_Type,0);
        if (bself == NULL) return bself;
        PyoaValueObject* self = (PyoaValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaValue_FromoaValue(oaValue* data)
{
    if (data) {
        if (data->getType()==oacLayerArrayValueType) return PyoaLayerArrayValue_FromoaLayerArrayValue((oaLayerArrayValue*)data);
        if (data->getType()==oacUInt8RangeValueType) return PyoaUInt8RangeValue_FromoaUInt8RangeValue((oaUInt8RangeValue*)data);
        if (data->getType()==oacBoxArrayValueType) return PyoaBoxArrayValue_FromoaBoxArrayValue((oaBoxArrayValue*)data);
        if (data->getType()==oacUInt8ValueType) return PyoaUInt8Value_FromoaUInt8Value((oaUInt8Value*)data);
        if (data->getType()==oacInt1DTblValueType) return PyoaInt1DTblValue_FromoaInt1DTblValue((oaInt1DTblValue*)data);
        if (data->getType()==oacViaDef2DTblValueType) return PyoaViaDef2DTblValue_FromoaViaDef2DTblValue((oaViaDef2DTblValue*)data);
        if (data->getType()==oacAntennaRatioArrayValueType) return PyoaAntennaRatioArrayValue_FromoaAntennaRatioArrayValue((oaAntennaRatioArrayValue*)data);
        if (data->getType()==oacViaDefArrayValueType) return PyoaViaDefArrayValue_FromoaViaDefArrayValue((oaViaDefArrayValue*)data);
        if (data->getType()==oacFltIntFltTblValueType) return PyoaFltIntFltTblValue_FromoaFltIntFltTblValue((oaFltIntFltTblValue*)data);
        if (data->getType()==oacIntFltTblValueType) return PyoaIntFltTblValue_FromoaIntFltTblValue((oaIntFltTblValue*)data);
        if (data->getType()==oacBooleanValueType) return PyoaBooleanValue_FromoaBooleanValue((oaBooleanValue*)data);
        if (data->getType()==oacFlt2DTblValueType) return PyoaFlt2DTblValue_FromoaFlt2DTblValue((oaFlt2DTblValue*)data);
        if (data->getType()==oacFltValueType) return PyoaFltValue_FromoaFltValue((oaFltValue*)data);
        if (data->getType()==oacValueArrayValueType) return PyoaValueArrayValue_FromoaValueArrayValue((oaValueArrayValue*)data);
        if (data->getType()==oacLayerValueType) return PyoaLayerValue_FromoaLayerValue((oaLayerValue*)data);
        if (data->getType()==oacIntDualIntArrayTblValueType) return PyoaIntDualIntArrayTblValue_FromoaIntDualIntArrayTblValue((oaIntDualIntArrayTblValue*)data);
        if (data->getType()==oacAntennaRatioValueType) return PyoaAntennaRatioValue_FromoaAntennaRatioValue((oaAntennaRatioValue*)data);
        if (data->getType()==oacIntValueType) return PyoaIntValue_FromoaIntValue((oaIntValue*)data);
        if (data->getType()==oacFlt1DTblValueType) return PyoaFlt1DTblValue_FromoaFlt1DTblValue((oaFlt1DTblValue*)data);
        if (data->getType()==oacDualInt1DTblValueType) return PyoaDualInt1DTblValue_FromoaDualInt1DTblValue((oaDualInt1DTblValue*)data);
        if (data->getType()==oacDualIntValueType) return PyoaDualIntValue_FromoaDualIntValue((oaDualIntValue*)data);
        if (data->getType()==oacIntRangeValueType) return PyoaIntRangeValue_FromoaIntRangeValue((oaIntRangeValue*)data);
        if (data->getType()==oacInt2DTblValueType) return PyoaInt2DTblValue_FromoaInt2DTblValue((oaInt2DTblValue*)data);
       PyObject* bself = PyoaValue_Type.tp_alloc(&PyoaValue_Type,0);
       if (bself == NULL) return bself;
       PyoaValueObject* self = (PyoaValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaValue_copy_doc[] = 
"Class: oaValue, Function: copy\n"
"  Paramegers: ()\n"
"    Calls: oaValue* copy() const\n"
"    Signature: copy|ptr-oaValue|\n"
"    BrowseData: 1\n"
"    This function makes a copy of this object within the same database and returns a pointer to the value.\n"
;

static PyObject*
oaValue_copy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue data;
    int convert_status=PyoaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueObject* self=(PyoaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaValuep result= (data.DataCall()->copy());
        return PyoaValue_FromoaValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValue_copyTo_doc[] = 
"Class: oaValue, Function: copyTo\n"
"  Paramegers: (oaObject)\n"
"    Calls: oaValue* copyTo(oaObject* database) const\n"
"    Signature: copyTo|ptr-oaValue|ptr-oaObject,\n"
"    This function copies the value of this object to the specified database and returns a pointer to the new value.\n"
"    database\n"
"    The destination database\n"
;

static PyObject*
oaValue_copyTo(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue data;
    int convert_status=PyoaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueObject* self=(PyoaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaValuep result= (data.DataCall()->copyTo(p1.Data()));
        return PyoaValue_FromoaValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValue_destroy_doc[] = 
"Class: oaValue, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This will attempt to destroy this oaValue object. This call will throw oacCantDestroyOwnedValue if this value has an owning Constraint or ConstraintParam. Such oaValues are destroyed when the owning object is destroyed or when a new setValue() is performed on the owning object.\n"
"    oacCantDestroyOwnedValue\n"
;

static PyObject*
oaValue_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue data;
    int convert_status=PyoaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueObject* self=(PyoaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValue_isEqual_doc[] = 
"Class: oaValue, Function: isEqual\n"
"  Paramegers: (oaValue)\n"
"    Calls: oaBoolean isEqual(oaValue* value) const\n"
"    Signature: isEqual|simple-oaBoolean|ptr-oaValue,\n"
"    This function returns a boolean indicating whether or not the value of this value is the same as the value of the specified value.\n"
"    value\n"
"    The value to compare with\n"
;

static PyObject*
oaValue_isEqual(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue data;
    int convert_status=PyoaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueObject* self=(PyoaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBoolean result= (data.DataCall()->isEqual(p1.Data()));
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValue_isOwned_doc[] = 
"Class: oaValue, Function: isOwned\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isOwned() const\n"
"    Signature: isOwned|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This returns true if this oaValue has an owning oaConstraint or oaConstraintParam . There is no function for traversing from the oaValue to its owner.\n"
;

static PyObject*
oaValue_isOwned(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValue data;
    int convert_status=PyoaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueObject* self=(PyoaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isOwned());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValue_isNull_doc[] =
"Class: oaValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaValue data;
    int convert_status=PyoaValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaValue_assign_doc[] = 
"Class: oaValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaValue data;
  int convert_status=PyoaValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaValue_methodlist[] = {
    {"copy",(PyCFunction)oaValue_copy,METH_VARARGS,oaValue_copy_doc},
    {"copyTo",(PyCFunction)oaValue_copyTo,METH_VARARGS,oaValue_copyTo_doc},
    {"destroy",(PyCFunction)oaValue_destroy,METH_VARARGS,oaValue_destroy_doc},
    {"isEqual",(PyCFunction)oaValue_isEqual,METH_VARARGS,oaValue_isEqual_doc},
    {"isOwned",(PyCFunction)oaValue_isOwned,METH_VARARGS,oaValue_isOwned_doc},
    {"isNull",(PyCFunction)oaValue_tp_isNull,METH_VARARGS,oaValue_isNull_doc},
    {"assign",(PyCFunction)oaValue_tp_assign,METH_VARARGS,oaValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaValue_doc[] = 
"Class: oaValue\n"
"  The oaValue class represents a base class for all value objects.\n"
"  The subclasses of oaValue are used to provide a variety of types of information about constraints. Each oaValue object is created by itself and then assigned to an oaConstraint or an oaConstraintParam which becomes its owning object. It can only be used by a single oaConstraint or oaConstraintParam object (see oaConstraint::setValue and oaConstraintParam::setValue for its usage).\n"
"  oaValues are managed objects that are created separately from the constraint or constraintParam that owns them, but they do not serve any purpose until they are set on their owning object. If a database is saved with an oaValue that does not have an owner, the oaValue will be orphaned. To clean up these oaValues, use the collections oaDesign::getValues and oaTech::getValues .\n"
"  An oaValue is destroyed when its owner is destroyed or when a setValue() is performed that overwrites it.\n"
"  The oaValue class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaValue)\n"
"    Calls: (const oaValue&)\n"
"    Signature: oaValue||cref-oaValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaValue",
    sizeof(PyoaValueObject),
    0,
    (destructor)oaValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaValue_tp_compare,	/* tp_compare */
    (reprfunc)oaValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaValue_Type)<0) {
      printf("** PyType_Ready failed for: oaValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaValue",
           (PyObject*)(&PyoaValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaValue\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaValue
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaValue_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaValue_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaValue_ArrayObject* self = (PyoaValue_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaValue_Array) */
    {
        PyParamoaValue_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaValue_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaValue_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaValue_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaValue_Array_dealloc(PyObject* gself)
{
    PyoaValue_ArrayObject* self = (PyoaValue_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaValue_Array_str(PyObject *ob)
{
    PyParamoaValue_Array value;
    int convert_status=PyoaValue_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaValue_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaValue_Array_repr(PyObject *ob)
{
    PyParamoaValue_Array value;
    int convert_status=PyoaValue_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaValue_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaValue_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaValue_Array p1;
    PyParamoaValue_Array p2;
    int s1=PyoaValue_Array_Convert(ob1,&p1);
    int s2=PyoaValue_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaValue_Array_CreateList(p1);
    PyObject* l2=PyoaValue_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaValue_Array_Convert(PyObject* ob,PyParamoaValue_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaValue_Array_Check(ob)) {
    PyoaValue_ArrayObject* self = (PyoaValue_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaValue data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaValue_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaValue data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaValue_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaValue_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaValue_Array_FromoaValue_Array(const oaValue_Array& value)
{
  PyObject* gself = PyoaValue_Array_Type.tp_alloc(&PyoaValue_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaValue_ArrayObject* self = (PyoaValue_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaValue_Array_FromoaValue_Array(PyTypeoaValue* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaValue_Array_Type.tp_alloc(&PyoaValue_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaValue_ArrayObject* self = (PyoaValue_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaValue_Array_CreateList(PyParamoaValue_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaValue_FromoaValue(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaValue_Array_assign_doc[] = 
"Class: oaValue_Array, Function: assign\n"
"  Paramegers: (oaValue_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaValue_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaValue_ArrayObject* self=(PyoaValue_ArrayObject*)ob;
  try {
    PyParamoaValue_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaValue_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaValue_Array_list_doc[] = 
"Class: oaValue_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaValue_Array_list(PyObject* ob, PyObject *args)
{
  PyoaValue_ArrayObject* self=(PyoaValue_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaValue_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaValue_Array_methodlist[] = {
    {"assign",(PyCFunction)oaValue_Array_assign,METH_VARARGS,oaValue_Array_assign_doc},
    {"list",(PyCFunction)oaValue_Array_list,METH_VARARGS,oaValue_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaValue_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaValue_ArrayObject* self=(PyoaValue_ArrayObject*)ob;
  try {
    PyParamoaValue_Array data;
    int convert_status=PyoaValue_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaValue_FromoaValue(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaValue_Array_index_get_length(PyObject* ob)
{
    PyParamoaValue_Array data;
    int convert_status=PyoaValue_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaValue_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaValue_Array data;
    PyParamoaValue dataitem;
    int convert_status=PyoaValue_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaValue_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaValue_Array_doc[] =
"Class: oaValue_Array\n"
"  The oaValue_Array utility class provides an array of oaValue.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaValue_Array()\n"
"    Signature: oaValue_Array||\n"
"    This is the default constructor for the oaValue_Array class. This constructor creates an empty oaValue_Array.\n"
"  Paramegers: (oaValue_Array)\n"
"    Calls: (const oaValue_Array&)\n"
"    Signature: oaValue_Array||cref-oaValue_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaValue_Array_as_sequence = {
    (Pyoa_inquiry)oaValue_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaValue_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaValue_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaValue_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaValue_Array",
    sizeof(PyoaValue_ArrayObject),
    0,
    oaValue_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaValue_Array_compare,    /* tp_compare */
    oaValue_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaValue_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaValue_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaValue_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaValue_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaValue_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaValue_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaValue_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaValue_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaValue_Array",
           (PyObject*)(&PyoaValue_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaValue_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaValueArray
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaValueArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaValueArray_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaValueArrayObject* self = (PyoaValueArrayObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaArrayBase_oaValue*)  new oaValueArray();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->value = (oaArrayBase_oaValue*)  new oaValueArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaValueArray)
    {
        PyParamoaValueArray p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaValueArray_Convert,&p1)) {
            self->value=(oaArrayBase_oaValue*)  new oaValueArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaValueArray, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaValueArray)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaValueArray_tp_dealloc(PyoaValueArrayObject* self)
{
    if (!self->borrow) {
        delete (oaValueArray*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaValueArray_tp_repr(PyObject *ob)
{
    PyParamoaValueArray value;
    int convert_status=PyoaValueArray_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[34];
    sprintf(buffer,"<oaValueArray::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaValueArray_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaValueArray v1;
    PyParamoaValueArray v2;
    int convert_status1=PyoaValueArray_Convert(ob1,&v1);
    int convert_status2=PyoaValueArray_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaValueArray_Convert(PyObject* ob,PyParamoaValueArray* result)
{
    if (ob == NULL) return 1;
    if (PyoaValueArray_Check(ob)) {
        result->SetData( (oaValueArray*) ((PyoaValueArrayObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaValueArray Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaValueArray_FromoaValueArray(oaValueArray* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaValueArray_Type.tp_alloc(&PyoaValueArray_Type,0);
        if (bself == NULL) return bself;
        PyoaValueArrayObject* self = (PyoaValueArrayObject*)bself;
        self->value = (oaArrayBase_oaValue*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaValueArray_doc[] = 
"Class: oaValueArray\n"
"  The oaValueArray class implements an array of values.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaValueArray()\n"
"    Signature: oaValueArray||simple-oaUInt4,\n"
"    This is the constructor for the oaValueArray class. It allocates storage for this value array with the specified size.\n"
"    sizeIn\n"
"    The size of the array\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaValueArray(oaUInt4 sizeIn)\n"
"    Signature: oaValueArray||simple-oaUInt4,\n"
"    This is the constructor for the oaValueArray class. It allocates storage for this value array with the specified size.\n"
"    sizeIn\n"
"    The size of the array\n"
"  Paramegers: (oaValueArray)\n"
"    Calls: (const oaValueArray&)\n"
"    Signature: oaValueArray||cref-oaValueArray,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaValueArray_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaValueArray",
    sizeof(PyoaValueArrayObject),
    0,
    (destructor)oaValueArray_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaValueArray_tp_compare,	/* tp_compare */
    (reprfunc)oaValueArray_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaValueArray_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    0,					/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaArray_oaValue_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaValueArray_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaValueArray_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaValueArray_Type)<0) {
      printf("** PyType_Ready failed for: oaValueArray\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaValueArray",
           (PyObject*)(&PyoaValueArray_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaValueArray\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaValueArrayValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaValueArrayValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaValueArrayValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaValueArrayValueObject* self = (PyoaValueArrayValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaValueArrayValue)
    {
        PyParamoaValueArrayValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaValueArrayValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaValueArrayValue, Choices are:\n"
        "    (oaValueArrayValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaValueArrayValue_tp_dealloc(PyoaValueArrayValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaValueArrayValue_tp_repr(PyObject *ob)
{
    PyParamoaValueArrayValue value;
    int convert_status=PyoaValueArrayValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[39];
    sprintf(buffer,"<oaValueArrayValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaValueArrayValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaValueArrayValue v1;
    PyParamoaValueArrayValue v2;
    int convert_status1=PyoaValueArrayValue_Convert(ob1,&v1);
    int convert_status2=PyoaValueArrayValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaValueArrayValue_Convert(PyObject* ob,PyParamoaValueArrayValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaValueArrayValue_Check(ob)) {
        result->SetData( (oaValueArrayValue**) ((PyoaValueArrayValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaValueArrayValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaValueArrayValue_FromoaValueArrayValue(oaValueArrayValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaValueArrayValue* data=*value;
        PyObject* bself = PyoaValueArrayValue_Type.tp_alloc(&PyoaValueArrayValue_Type,0);
        if (bself == NULL) return bself;
        PyoaValueArrayValueObject* self = (PyoaValueArrayValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaValueArrayValue_FromoaValueArrayValue(oaValueArrayValue* data)
{
    if (data) {
       PyObject* bself = PyoaValueArrayValue_Type.tp_alloc(&PyoaValueArrayValue_Type,0);
       if (bself == NULL) return bself;
       PyoaValueArrayValueObject* self = (PyoaValueArrayValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaValueArrayValue_get_doc[] = 
"Class: oaValueArrayValue, Function: get\n"
"  Paramegers: (oaValueArray)\n"
"    Calls: void get(oaValueArray& value) const\n"
"    Signature: get|void-void|ref-oaValueArray,\n"
"    BrowseData: 0,oaValueArray\n"
"    This function returns the valueArray for of this value.\n"
"    value\n"
"    The returned value.\n"
;

static PyObject*
oaValueArrayValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValueArrayValue data;
    int convert_status=PyoaValueArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueArrayValueObject* self=(PyoaValueArrayValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValueArray p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValueArray_Convert,&p1)) {
        data.DataCall()->get(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValueArrayValue_set_doc[] = 
"Class: oaValueArrayValue, Function: set\n"
"  Paramegers: (oaValueArray)\n"
"    Calls: void set(const oaValueArray& value)\n"
"    Signature: set|void-void|cref-oaValueArray,\n"
"    This function sets this value to the specified valueArray value.\n"
"    value\n"
"    The valueArray value to set\n"
;

static PyObject*
oaValueArrayValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaValueArrayValue data;
    int convert_status=PyoaValueArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaValueArrayValueObject* self=(PyoaValueArrayValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValueArray p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValueArray_Convert,&p1)) {
        data.DataCall()->set(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaValueArrayValue_isNull_doc[] =
"Class: oaValueArrayValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaValueArrayValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaValueArrayValue data;
    int convert_status=PyoaValueArrayValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaValueArrayValue_assign_doc[] = 
"Class: oaValueArrayValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaValueArrayValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaValueArrayValue data;
  int convert_status=PyoaValueArrayValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaValueArrayValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaValueArrayValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaValueArrayValue_methodlist[] = {
    {"get",(PyCFunction)oaValueArrayValue_get,METH_VARARGS,oaValueArrayValue_get_doc},
    {"set",(PyCFunction)oaValueArrayValue_set,METH_VARARGS,oaValueArrayValue_set_doc},
    {"isNull",(PyCFunction)oaValueArrayValue_tp_isNull,METH_VARARGS,oaValueArrayValue_isNull_doc},
    {"assign",(PyCFunction)oaValueArrayValue_tp_assign,METH_VARARGS,oaValueArrayValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaValueArrayValue_doc[] = 
"Class: oaValueArrayValue\n"
"  The oaValueArrayValue class represents a value that is an array of oaValue objects. All values in the array and this value array must be in the same database.\n"
"  See oaValue for a discussion of the usage of all of the oaValue subclasses.\n"
"Constructors:\n"
"  Paramegers: (oaValueArrayValue)\n"
"    Calls: (const oaValueArrayValue&)\n"
"    Signature: oaValueArrayValue||cref-oaValueArrayValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaValueArrayValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaValueArrayValue",
    sizeof(PyoaValueArrayValueObject),
    0,
    (destructor)oaValueArrayValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaValueArrayValue_tp_compare,	/* tp_compare */
    (reprfunc)oaValueArrayValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaValueArrayValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaValueArrayValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaValue_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaValueArrayValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaValueArrayValue_static_create_doc[] = 
"Class: oaValueArrayValue, Function: create\n"
"  Paramegers: (oaObject,oaValueArray)\n"
"    Calls: oaValueArrayValue* create(oaObject* database,const oaValueArray& value)\n"
"    Signature: create|ptr-oaValueArrayValue|ptr-oaObject,cref-oaValueArray,\n"
"    This function creates a valueArray value in the database specified.\n"
"    database\n"
"    The database in which to create the value\n"
"    value\n"
"    The valueArray value\n"
"    oacInvalidDatabase\n"
;

static PyObject*
oaValueArrayValue_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoaValueArray p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaObject_Convert,&p1,
          &PyoaValueArray_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaValueArrayValuep result= (oaValueArrayValue::create(p1.Data(),p2.Data()));
        return PyoaValueArrayValue_FromoaValueArrayValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaValueArrayValue_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaValueArrayValue_static_create,METH_VARARGS,oaValueArrayValue_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaValueArrayValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaValueArrayValue_Type)<0) {
      printf("** PyType_Ready failed for: oaValueArrayValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaValueArrayValue",
           (PyObject*)(&PyoaValueArrayValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaValueArrayValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaValueArrayValue_Type.tp_dict;
    for(method=oaValueArrayValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaValueModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaValueModTypeEnum_Convert(PyObject* ob,PyParamoaValueModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetValueValueModType")==0) { result->SetData(oacSetValueValueModType); return 1;}
        if (strcasecmp(str,"oacSetSecondValueValueModType")==0) { result->SetData(oacSetSecondValueValueModType); return 1;}
        if (strcasecmp(str,"oacSetSideAntennaRatioValueModType")==0) { result->SetData(oacSetSideAntennaRatioValueModType); return 1;}
        if (strcasecmp(str,"oacSetGateAntennaRatioValueModType")==0) { result->SetData(oacSetGateAntennaRatioValueModType); return 1;}
        if (strcasecmp(str,"oacSetDiodeAntennaRatioValueModType")==0) { result->SetData(oacSetDiodeAntennaRatioValueModType); return 1;}
        if (strcasecmp(str,"oacSetDefaultAntennaRatioValueModType")==0) { result->SetData(oacSetDefaultAntennaRatioValueModType); return 1;}
        if (strcasecmp(str,"oacSetSecondAntennaRatioValueModType")==0) { result->SetData(oacSetSecondAntennaRatioValueModType); return 1;}
        if (strcasecmp(str,"oacSetThirdAntennaRatioValueModType")==0) { result->SetData(oacSetThirdAntennaRatioValueModType); return 1;}
        if (strcasecmp(str,"oacSetFourthAntennaRatioValueModType")==0) { result->SetData(oacSetFourthAntennaRatioValueModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaValueModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaValueModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaValueModTypeEnum_FromoaValueModTypeEnum(oaValueModTypeEnum ob)
{
    if (ob==oacSetValueValueModType) return PyString_FromString("oacSetValueValueModType");
    if (ob==oacSetSecondValueValueModType) return PyString_FromString("oacSetSecondValueValueModType");
    if (ob==oacSetSideAntennaRatioValueModType) return PyString_FromString("oacSetSideAntennaRatioValueModType");
    if (ob==oacSetGateAntennaRatioValueModType) return PyString_FromString("oacSetGateAntennaRatioValueModType");
    if (ob==oacSetDiodeAntennaRatioValueModType) return PyString_FromString("oacSetDiodeAntennaRatioValueModType");
    if (ob==oacSetDefaultAntennaRatioValueModType) return PyString_FromString("oacSetDefaultAntennaRatioValueModType");
    if (ob==oacSetSecondAntennaRatioValueModType) return PyString_FromString("oacSetSecondAntennaRatioValueModType");
    if (ob==oacSetThirdAntennaRatioValueModType) return PyString_FromString("oacSetThirdAntennaRatioValueModType");
    if (ob==oacSetFourthAntennaRatioValueModType) return PyString_FromString("oacSetFourthAntennaRatioValueModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaValueModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaValueModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaValueModTypeEnum_FromoaValueModTypeEnum(oaValueModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaValueModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaValueModTypeEnum_doc[] =
"Type convert function for enum: oaValueModTypeEnum";
                               
static PyMethodDef PyoaValueModTypeEnum_method =
  {"oaValueModTypeEnum",(PyCFunction)PyoaValueModTypeEnum_TypeFunction,METH_VARARGS,oaValueModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaValueModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetValueValueModType");
    PyDict_SetItemString(mod_dict,"oacSetValueValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetSecondValueValueModType");
    PyDict_SetItemString(mod_dict,"oacSetSecondValueValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetSideAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetSideAntennaRatioValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetGateAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetGateAntennaRatioValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetDiodeAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetDiodeAntennaRatioValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetDefaultAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetDefaultAntennaRatioValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetSecondAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetSecondAntennaRatioValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetThirdAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetThirdAntennaRatioValueModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetFourthAntennaRatioValueModType");
    PyDict_SetItemString(mod_dict,"oacSetFourthAntennaRatioValueModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaValueModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaValueModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaValueModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaAnalysisOpPointObject* self = (PyoaVarDataAppDef_oaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaAnalysisOpPoint)
    {
        PyParamoaVarDataAppDef_oaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaAnalysisOpPoint, Choices are:\n"
        "    (oaVarDataAppDef_oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaAnalysisOpPoint_tp_dealloc(PyoaVarDataAppDef_oaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaAnalysisOpPoint value;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaVarDataAppDef_oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaAnalysisOpPoint v1;
    PyParamoaVarDataAppDef_oaAnalysisOpPoint v2;
    int convert_status1=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaAnalysisOpPoint**) ((PyoaVarDataAppDef_oaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(oaVarDataAppDef_oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaVarDataAppDef_oaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaAnalysisOpPointObject* self = (PyoaVarDataAppDef_oaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(oaVarDataAppDef_oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaVarDataAppDef_oaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaAnalysisOpPointObject* self = (PyoaVarDataAppDef_oaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_get_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaAnalysisOpPoint,[oaByte])\n"
"    Calls: void get(const oaAnalysisOpPoint* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaAnalysisOpPoint,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisOpPointObject* self=(PyoaVarDataAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisOpPointObject* self=(PyoaVarDataAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisOpPointObject* self=(PyoaVarDataAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_getSize_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: getSize\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: oaUInt4 getSize(const oaAnalysisOpPoint* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaAnalysisOpPoint,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisOpPointObject* self=(PyoaVarDataAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_set_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaAnalysisOpPoint,[oaByte])\n"
"    Calls: void set(oaAnalysisOpPoint* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaAnalysisOpPoint,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisOpPointObject* self=(PyoaVarDataAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_isNull_doc[] =
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaAnalysisOpPoint_assign_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaAnalysisOpPoint data;
  int convert_status=PyoaVarDataAppDef_oaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaAnalysisOpPoint_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_get,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_getDefault,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_getSize,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_set,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaAnalysisOpPoint)\n"
"    Calls: (const oaVarDataAppDef_oaAnalysisOpPoint&)\n"
"    Signature: oaVarDataAppDef_oaAnalysisOpPoint||cref-oaVarDataAppDef_oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaAnalysisOpPoint",
    sizeof(PyoaVarDataAppDef_oaAnalysisOpPointObject),
    0,
    (destructor)oaVarDataAppDef_oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_static_find_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::find(p1.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAnalysisOpPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisOpPoint_static_get_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisOpPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::get(p1.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisOpPointp result= (oaVarDataAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaAnalysisOpPoint_FromoaVarDataAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAnalysisOpPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_static_find,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaAnalysisOpPoint_static_get,METH_VARARGS,oaVarDataAppDef_oaAnalysisOpPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaAnalysisOpPoint",
           (PyObject*)(&PyoaVarDataAppDef_oaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaAnalysisOpPoint_Type.tp_dict;
    for(method=oaVarDataAppDef_oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaAnalysisPointObject* self = (PyoaVarDataAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaAnalysisPoint)
    {
        PyParamoaVarDataAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaVarDataAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaAnalysisPoint_tp_dealloc(PyoaVarDataAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaAnalysisPoint value;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaVarDataAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaAnalysisPoint v1;
    PyParamoaVarDataAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaAnalysisPoint**) ((PyoaVarDataAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(oaVarDataAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaVarDataAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaAnalysisPointObject* self = (PyoaVarDataAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(oaVarDataAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaVarDataAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaAnalysisPointObject* self = (PyoaVarDataAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint,[oaByte])\n"
"    Calls: void get(const oaAnalysisPoint* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaAnalysisPoint,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisPointObject* self=(PyoaVarDataAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisPointObject* self=(PyoaVarDataAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisPointObject* self=(PyoaVarDataAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_getSize_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: getSize\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaUInt4 getSize(const oaAnalysisPoint* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaAnalysisPoint,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisPointObject* self=(PyoaVarDataAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,[oaByte])\n"
"    Calls: void set(oaAnalysisPoint* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAnalysisPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAnalysisPointObject* self=(PyoaVarDataAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaAnalysisPoint data;
    int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaAnalysisPoint data;
  int convert_status=PyoaVarDataAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_get,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_getDefault,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_getSize,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_set,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaVarDataAppDef_oaAnalysisPoint&)\n"
"    Signature: oaVarDataAppDef_oaAnalysisPoint||cref-oaVarDataAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaAnalysisPoint",
    sizeof(PyoaVarDataAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaVarDataAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaVarDataAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAnalysisPointp result= (oaVarDataAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaAnalysisPoint_FromoaVarDataAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaVarDataAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaVarDataAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaVarDataAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaAppObjectObject* self = (PyoaVarDataAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaAppObject)
    {
        PyParamoaVarDataAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaAppObject, Choices are:\n"
        "    (oaVarDataAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaAppObject_tp_dealloc(PyoaVarDataAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaAppObject value;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaVarDataAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaAppObject v1;
    PyParamoaVarDataAppDef_oaAppObject v2;
    int convert_status1=PyoaVarDataAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaAppObject**) ((PyoaVarDataAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAppObject_FromoaVarDataAppDef_oaAppObject(oaVarDataAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaAppObject_Type.tp_alloc(&PyoaVarDataAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaAppObjectObject* self = (PyoaVarDataAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAppObject_FromoaVarDataAppDef_oaAppObject(oaVarDataAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaAppObject_Type.tp_alloc(&PyoaVarDataAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaAppObjectObject* self = (PyoaVarDataAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_get_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject,[oaByte])\n"
"    Calls: void get(const oaAppObject* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaAppObject,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAppObject data;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAppObjectObject* self=(PyoaVarDataAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAppObject data;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAppObjectObject* self=(PyoaVarDataAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAppObject data;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAppObjectObject* self=(PyoaVarDataAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_getSize_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: getSize\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: oaUInt4 getSize(const oaAppObject* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaAppObject,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAppObject data;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAppObjectObject* self=(PyoaVarDataAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_set_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,[oaByte])\n"
"    Calls: void set(oaAppObject* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaAppObject,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAppObject data;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAppObjectObject* self=(PyoaVarDataAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_isNull_doc[] =
"Class: oaVarDataAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaAppObject data;
    int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaAppObject_assign_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaAppObject data;
  int convert_status=PyoaVarDataAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaAppObject_get,METH_VARARGS,oaVarDataAppDef_oaAppObject_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaAppObject_getDefault,METH_VARARGS,oaVarDataAppDef_oaAppObject_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaAppObject_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaAppObject_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaAppObject_getSize,METH_VARARGS,oaVarDataAppDef_oaAppObject_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaAppObject_set,METH_VARARGS,oaVarDataAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaAppObject_tp_assign,METH_VARARGS,oaVarDataAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_doc[] = 
"Class: oaVarDataAppDef_oaAppObject\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaAppObject)\n"
"    Calls: (const oaVarDataAppDef_oaAppObject&)\n"
"    Signature: oaVarDataAppDef_oaAppObject||cref-oaVarDataAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaAppObject",
    sizeof(PyoaVarDataAppDef_oaAppObjectObject),
    0,
    (destructor)oaVarDataAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_static_find_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaVarDataAppDef_oaAppObjectp result= (oaVarDataAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaVarDataAppDef_oaAppObject_FromoaVarDataAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAppObject_static_get_doc[] = 
"Class: oaVarDataAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAppObjectp result= (oaVarDataAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAppObject_FromoaVarDataAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAppObjectp result= (oaVarDataAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAppObject_FromoaVarDataAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAppObjectp result= (oaVarDataAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaAppObject_FromoaVarDataAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaAppObject_static_find,METH_VARARGS,oaVarDataAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaAppObject_static_get,METH_VARARGS,oaVarDataAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaAppObject",
           (PyObject*)(&PyoaVarDataAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaAppObject_Type.tp_dict;
    for(method=oaVarDataAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaAssignmentObject* self = (PyoaVarDataAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaAssignment)
    {
        PyParamoaVarDataAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaAssignment, Choices are:\n"
        "    (oaVarDataAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaAssignment_tp_dealloc(PyoaVarDataAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaAssignment value;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaVarDataAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaAssignment v1;
    PyParamoaVarDataAppDef_oaAssignment v2;
    int convert_status1=PyoaVarDataAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaAssignment**) ((PyoaVarDataAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(oaVarDataAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaAssignment_Type.tp_alloc(&PyoaVarDataAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaAssignmentObject* self = (PyoaVarDataAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(oaVarDataAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaAssignment_Type.tp_alloc(&PyoaVarDataAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaAssignmentObject* self = (PyoaVarDataAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_get_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment,[oaByte])\n"
"    Calls: void get(const oaAssignment* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaAssignment,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAssignment data;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAssignmentObject* self=(PyoaVarDataAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAssignment data;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAssignmentObject* self=(PyoaVarDataAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAssignment data;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAssignmentObject* self=(PyoaVarDataAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_getSize_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: getSize\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: oaUInt4 getSize(const oaAssignment* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaAssignment,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAssignment data;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAssignmentObject* self=(PyoaVarDataAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_set_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,[oaByte])\n"
"    Calls: void set(oaAssignment* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaAssignment,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaAssignment data;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaAssignmentObject* self=(PyoaVarDataAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_isNull_doc[] =
"Class: oaVarDataAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaAssignment data;
    int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaAssignment_assign_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaAssignment data;
  int convert_status=PyoaVarDataAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaAssignment_get,METH_VARARGS,oaVarDataAppDef_oaAssignment_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaAssignment_getDefault,METH_VARARGS,oaVarDataAppDef_oaAssignment_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaAssignment_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaAssignment_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaAssignment_getSize,METH_VARARGS,oaVarDataAppDef_oaAssignment_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaAssignment_set,METH_VARARGS,oaVarDataAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaAssignment_tp_assign,METH_VARARGS,oaVarDataAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_doc[] = 
"Class: oaVarDataAppDef_oaAssignment\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaAssignment)\n"
"    Calls: (const oaVarDataAppDef_oaAssignment&)\n"
"    Signature: oaVarDataAppDef_oaAssignment||cref-oaVarDataAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaAssignment",
    sizeof(PyoaVarDataAppDef_oaAssignmentObject),
    0,
    (destructor)oaVarDataAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_static_find_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::find(p1.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaAssignment_static_get_doc[] = 
"Class: oaVarDataAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAssignment* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAssignment* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::get(p1.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaAssignmentp result= (oaVarDataAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaAssignment_FromoaVarDataAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaAssignment_static_find,METH_VARARGS,oaVarDataAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaAssignment_static_get,METH_VARARGS,oaVarDataAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaAssignment",
           (PyObject*)(&PyoaVarDataAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaAssignment_Type.tp_dict;
    for(method=oaVarDataAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaBlockObject* self = (PyoaVarDataAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaBlock)
    {
        PyParamoaVarDataAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaBlock, Choices are:\n"
        "    (oaVarDataAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaBlock_tp_dealloc(PyoaVarDataAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaBlock value;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaVarDataAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaBlock v1;
    PyParamoaVarDataAppDef_oaBlock v2;
    int convert_status1=PyoaVarDataAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaBlock_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaBlock**) ((PyoaVarDataAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(oaVarDataAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaBlock_Type.tp_alloc(&PyoaVarDataAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaBlockObject* self = (PyoaVarDataAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(oaVarDataAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaBlock_Type.tp_alloc(&PyoaVarDataAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaBlockObject* self = (PyoaVarDataAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_get_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock,[oaByte])\n"
"    Calls: void get(const oaBlock* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaBlock,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlock data;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockObject* self=(PyoaVarDataAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlock data;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockObject* self=(PyoaVarDataAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlock data;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockObject* self=(PyoaVarDataAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_getSize_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: getSize\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaUInt4 getSize(const oaBlock* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaBlock,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlock data;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockObject* self=(PyoaVarDataAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_set_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,[oaByte])\n"
"    Calls: void set(oaBlock* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaBlock,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlock data;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockObject* self=(PyoaVarDataAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_isNull_doc[] =
"Class: oaVarDataAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaBlock data;
    int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaBlock_assign_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaBlock data;
  int convert_status=PyoaVarDataAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaBlock_get,METH_VARARGS,oaVarDataAppDef_oaBlock_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaBlock_getDefault,METH_VARARGS,oaVarDataAppDef_oaBlock_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaBlock_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaBlock_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaBlock_getSize,METH_VARARGS,oaVarDataAppDef_oaBlock_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaBlock_set,METH_VARARGS,oaVarDataAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaBlock_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaBlock_tp_assign,METH_VARARGS,oaVarDataAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_doc[] = 
"Class: oaVarDataAppDef_oaBlock\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaBlock)\n"
"    Calls: (const oaVarDataAppDef_oaBlock&)\n"
"    Signature: oaVarDataAppDef_oaBlock||cref-oaVarDataAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaBlock",
    sizeof(PyoaVarDataAppDef_oaBlockObject),
    0,
    (destructor)oaVarDataAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_static_find_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::find(p1.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlock_static_get_doc[] = 
"Class: oaVarDataAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlock|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlock* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlock|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlock* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlock|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::get(p1.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockp result= (oaVarDataAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaBlock_FromoaVarDataAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaBlock_static_find,METH_VARARGS,oaVarDataAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaBlock_static_get,METH_VARARGS,oaVarDataAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaBlock",
           (PyObject*)(&PyoaVarDataAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaBlock_Type.tp_dict;
    for(method=oaVarDataAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaBlockageObject* self = (PyoaVarDataAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaBlockage)
    {
        PyParamoaVarDataAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaBlockage, Choices are:\n"
        "    (oaVarDataAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaBlockage_tp_dealloc(PyoaVarDataAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaBlockage value;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaVarDataAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaBlockage v1;
    PyParamoaVarDataAppDef_oaBlockage v2;
    int convert_status1=PyoaVarDataAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaBlockage**) ((PyoaVarDataAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(oaVarDataAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaBlockage_Type.tp_alloc(&PyoaVarDataAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaBlockageObject* self = (PyoaVarDataAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(oaVarDataAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaBlockage_Type.tp_alloc(&PyoaVarDataAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaBlockageObject* self = (PyoaVarDataAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_get_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage,[oaByte])\n"
"    Calls: void get(const oaBlockage* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaBlockage,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlockage data;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockageObject* self=(PyoaVarDataAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlockage data;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockageObject* self=(PyoaVarDataAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlockage data;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockageObject* self=(PyoaVarDataAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_getSize_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: getSize\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: oaUInt4 getSize(const oaBlockage* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaBlockage,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlockage data;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockageObject* self=(PyoaVarDataAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_set_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,[oaByte])\n"
"    Calls: void set(oaBlockage* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaBlockage,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBlockage data;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBlockageObject* self=(PyoaVarDataAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_isNull_doc[] =
"Class: oaVarDataAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaBlockage data;
    int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaBlockage_assign_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaBlockage data;
  int convert_status=PyoaVarDataAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaBlockage_get,METH_VARARGS,oaVarDataAppDef_oaBlockage_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaBlockage_getDefault,METH_VARARGS,oaVarDataAppDef_oaBlockage_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaBlockage_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaBlockage_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaBlockage_getSize,METH_VARARGS,oaVarDataAppDef_oaBlockage_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaBlockage_set,METH_VARARGS,oaVarDataAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaBlockage_tp_assign,METH_VARARGS,oaVarDataAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_doc[] = 
"Class: oaVarDataAppDef_oaBlockage\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaBlockage)\n"
"    Calls: (const oaVarDataAppDef_oaBlockage&)\n"
"    Signature: oaVarDataAppDef_oaBlockage||cref-oaVarDataAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaBlockage",
    sizeof(PyoaVarDataAppDef_oaBlockageObject),
    0,
    (destructor)oaVarDataAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_static_find_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::find(p1.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBlockage_static_get_doc[] = 
"Class: oaVarDataAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlockage* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlockage* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::get(p1.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBlockagep result= (oaVarDataAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaBlockage_FromoaVarDataAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaBlockage_static_find,METH_VARARGS,oaVarDataAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaBlockage_static_get,METH_VARARGS,oaVarDataAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaBlockage",
           (PyObject*)(&PyoaVarDataAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaBlockage_Type.tp_dict;
    for(method=oaVarDataAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaBoundaryObject* self = (PyoaVarDataAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaBoundary)
    {
        PyParamoaVarDataAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaBoundary, Choices are:\n"
        "    (oaVarDataAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaBoundary_tp_dealloc(PyoaVarDataAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaBoundary value;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaVarDataAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaBoundary v1;
    PyParamoaVarDataAppDef_oaBoundary v2;
    int convert_status1=PyoaVarDataAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaBoundary**) ((PyoaVarDataAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(oaVarDataAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaBoundary_Type.tp_alloc(&PyoaVarDataAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaBoundaryObject* self = (PyoaVarDataAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(oaVarDataAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaBoundary_Type.tp_alloc(&PyoaVarDataAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaBoundaryObject* self = (PyoaVarDataAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_get_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary,[oaByte])\n"
"    Calls: void get(const oaBoundary* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaBoundary,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBoundary data;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBoundaryObject* self=(PyoaVarDataAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBoundary data;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBoundaryObject* self=(PyoaVarDataAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBoundary data;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBoundaryObject* self=(PyoaVarDataAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_getSize_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: getSize\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: oaUInt4 getSize(const oaBoundary* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaBoundary,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBoundary data;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBoundaryObject* self=(PyoaVarDataAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_set_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,[oaByte])\n"
"    Calls: void set(oaBoundary* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaBoundary,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBoundary data;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBoundaryObject* self=(PyoaVarDataAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_isNull_doc[] =
"Class: oaVarDataAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaBoundary data;
    int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaBoundary_assign_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaBoundary data;
  int convert_status=PyoaVarDataAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaBoundary_get,METH_VARARGS,oaVarDataAppDef_oaBoundary_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaBoundary_getDefault,METH_VARARGS,oaVarDataAppDef_oaBoundary_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaBoundary_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaBoundary_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaBoundary_getSize,METH_VARARGS,oaVarDataAppDef_oaBoundary_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaBoundary_set,METH_VARARGS,oaVarDataAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaBoundary_tp_assign,METH_VARARGS,oaVarDataAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_doc[] = 
"Class: oaVarDataAppDef_oaBoundary\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaBoundary)\n"
"    Calls: (const oaVarDataAppDef_oaBoundary&)\n"
"    Signature: oaVarDataAppDef_oaBoundary||cref-oaVarDataAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaBoundary",
    sizeof(PyoaVarDataAppDef_oaBoundaryObject),
    0,
    (destructor)oaVarDataAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_static_find_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::find(p1.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBoundary_static_get_doc[] = 
"Class: oaVarDataAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBoundary* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBoundary* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::get(p1.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBoundaryp result= (oaVarDataAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaBoundary_FromoaVarDataAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaBoundary_static_find,METH_VARARGS,oaVarDataAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaBoundary_static_get,METH_VARARGS,oaVarDataAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaBoundary",
           (PyObject*)(&PyoaVarDataAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaBoundary_Type.tp_dict;
    for(method=oaVarDataAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaBusNetDefObject* self = (PyoaVarDataAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaBusNetDef)
    {
        PyParamoaVarDataAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaBusNetDef, Choices are:\n"
        "    (oaVarDataAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaBusNetDef_tp_dealloc(PyoaVarDataAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaBusNetDef value;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaVarDataAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaBusNetDef v1;
    PyParamoaVarDataAppDef_oaBusNetDef v2;
    int convert_status1=PyoaVarDataAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaBusNetDef**) ((PyoaVarDataAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(oaVarDataAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaBusNetDef_Type.tp_alloc(&PyoaVarDataAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaBusNetDefObject* self = (PyoaVarDataAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(oaVarDataAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaBusNetDef_Type.tp_alloc(&PyoaVarDataAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaBusNetDefObject* self = (PyoaVarDataAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_get_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef,[oaByte])\n"
"    Calls: void get(const oaBusNetDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaBusNetDef,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusNetDef data;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusNetDefObject* self=(PyoaVarDataAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusNetDef data;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusNetDefObject* self=(PyoaVarDataAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusNetDef data;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusNetDefObject* self=(PyoaVarDataAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_getSize_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: getSize\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: oaUInt4 getSize(const oaBusNetDef* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaBusNetDef,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusNetDef data;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusNetDefObject* self=(PyoaVarDataAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_set_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,[oaByte])\n"
"    Calls: void set(oaBusNetDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusNetDef data;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusNetDefObject* self=(PyoaVarDataAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaVarDataAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaBusNetDef data;
    int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaBusNetDef data;
  int convert_status=PyoaVarDataAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaBusNetDef_get,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaBusNetDef_getDefault,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaBusNetDef_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaBusNetDef_getSize,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaBusNetDef_set,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaBusNetDef)\n"
"    Calls: (const oaVarDataAppDef_oaBusNetDef&)\n"
"    Signature: oaVarDataAppDef_oaBusNetDef||cref-oaVarDataAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaBusNetDef",
    sizeof(PyoaVarDataAppDef_oaBusNetDefObject),
    0,
    (destructor)oaVarDataAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaVarDataAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusNetDefp result= (oaVarDataAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaBusNetDef_FromoaVarDataAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaBusNetDef_static_find,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaBusNetDef_static_get,METH_VARARGS,oaVarDataAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaBusNetDef",
           (PyObject*)(&PyoaVarDataAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaVarDataAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaBusTermDefObject* self = (PyoaVarDataAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaBusTermDef)
    {
        PyParamoaVarDataAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaBusTermDef, Choices are:\n"
        "    (oaVarDataAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaBusTermDef_tp_dealloc(PyoaVarDataAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaBusTermDef value;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaVarDataAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaBusTermDef v1;
    PyParamoaVarDataAppDef_oaBusTermDef v2;
    int convert_status1=PyoaVarDataAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaBusTermDef**) ((PyoaVarDataAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(oaVarDataAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaBusTermDef_Type.tp_alloc(&PyoaVarDataAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaBusTermDefObject* self = (PyoaVarDataAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(oaVarDataAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaBusTermDef_Type.tp_alloc(&PyoaVarDataAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaBusTermDefObject* self = (PyoaVarDataAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_get_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef,[oaByte])\n"
"    Calls: void get(const oaBusTermDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaBusTermDef,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusTermDef data;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusTermDefObject* self=(PyoaVarDataAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusTermDef data;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusTermDefObject* self=(PyoaVarDataAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusTermDef data;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusTermDefObject* self=(PyoaVarDataAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_getSize_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: getSize\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: oaUInt4 getSize(const oaBusTermDef* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaBusTermDef,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusTermDef data;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusTermDefObject* self=(PyoaVarDataAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_set_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,[oaByte])\n"
"    Calls: void set(oaBusTermDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaBusTermDef data;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaBusTermDefObject* self=(PyoaVarDataAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaVarDataAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaBusTermDef data;
    int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaBusTermDef data;
  int convert_status=PyoaVarDataAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaBusTermDef_get,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaBusTermDef_getDefault,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaBusTermDef_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaBusTermDef_getSize,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaBusTermDef_set,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaBusTermDef)\n"
"    Calls: (const oaVarDataAppDef_oaBusTermDef&)\n"
"    Signature: oaVarDataAppDef_oaBusTermDef||cref-oaVarDataAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaBusTermDef",
    sizeof(PyoaVarDataAppDef_oaBusTermDefObject),
    0,
    (destructor)oaVarDataAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaVarDataAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaBusTermDefp result= (oaVarDataAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaBusTermDef_FromoaVarDataAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaBusTermDef_static_find,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaBusTermDef_static_get,METH_VARARGS,oaVarDataAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaBusTermDef",
           (PyObject*)(&PyoaVarDataAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaVarDataAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaCMapObject* self = (PyoaVarDataAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaCMap)
    {
        PyParamoaVarDataAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaCMap, Choices are:\n"
        "    (oaVarDataAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaCMap_tp_dealloc(PyoaVarDataAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaCMap value;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaVarDataAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaCMap v1;
    PyParamoaVarDataAppDef_oaCMap v2;
    int convert_status1=PyoaVarDataAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaCMap_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaCMap**) ((PyoaVarDataAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(oaVarDataAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaCMap_Type.tp_alloc(&PyoaVarDataAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaCMapObject* self = (PyoaVarDataAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(oaVarDataAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaCMap_Type.tp_alloc(&PyoaVarDataAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaCMapObject* self = (PyoaVarDataAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_get_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap,[oaByte])\n"
"    Calls: void get(const oaCMap* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaCMap,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCMap data;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCMapObject* self=(PyoaVarDataAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCMap data;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCMapObject* self=(PyoaVarDataAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCMap data;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCMapObject* self=(PyoaVarDataAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_getSize_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: getSize\n"
"  Paramegers: (oaCMap)\n"
"    Calls: oaUInt4 getSize(const oaCMap* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaCMap,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCMap data;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCMapObject* self=(PyoaVarDataAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_set_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,[oaByte])\n"
"    Calls: void set(oaCMap* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaCMap,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCMap data;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCMapObject* self=(PyoaVarDataAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_isNull_doc[] =
"Class: oaVarDataAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaCMap data;
    int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaCMap_assign_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaCMap data;
  int convert_status=PyoaVarDataAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaCMap_get,METH_VARARGS,oaVarDataAppDef_oaCMap_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaCMap_getDefault,METH_VARARGS,oaVarDataAppDef_oaCMap_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaCMap_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaCMap_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaCMap_getSize,METH_VARARGS,oaVarDataAppDef_oaCMap_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaCMap_set,METH_VARARGS,oaVarDataAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaCMap_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaCMap_tp_assign,METH_VARARGS,oaVarDataAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_doc[] = 
"Class: oaVarDataAppDef_oaCMap\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaCMap)\n"
"    Calls: (const oaVarDataAppDef_oaCMap&)\n"
"    Signature: oaVarDataAppDef_oaCMap||cref-oaVarDataAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaCMap",
    sizeof(PyoaVarDataAppDef_oaCMapObject),
    0,
    (destructor)oaVarDataAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_static_find_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::find(p1.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCMap_static_get_doc[] = 
"Class: oaVarDataAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCMap|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCMap* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCMap|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCMap* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCMap|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::get(p1.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCMapp result= (oaVarDataAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaCMap_FromoaVarDataAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaCMap_static_find,METH_VARARGS,oaVarDataAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaCMap_static_get,METH_VARARGS,oaVarDataAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaCMap",
           (PyObject*)(&PyoaVarDataAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaCMap_Type.tp_dict;
    for(method=oaVarDataAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaCellObject* self = (PyoaVarDataAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaCell)
    {
        PyParamoaVarDataAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaCell, Choices are:\n"
        "    (oaVarDataAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaCell_tp_dealloc(PyoaVarDataAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaCell value;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaVarDataAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaCell v1;
    PyParamoaVarDataAppDef_oaCell v2;
    int convert_status1=PyoaVarDataAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaCell_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaCell_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaCell**) ((PyoaVarDataAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(oaVarDataAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaCell* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaCell_Type.tp_alloc(&PyoaVarDataAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaCellObject* self = (PyoaVarDataAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(oaVarDataAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaCell_Type.tp_alloc(&PyoaVarDataAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaCellObject* self = (PyoaVarDataAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_get_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell,[oaByte])\n"
"    Calls: void get(const oaCell* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaCell,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCell data;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellObject* self=(PyoaVarDataAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaCell_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCell data;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellObject* self=(PyoaVarDataAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaCell_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCell data;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellObject* self=(PyoaVarDataAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_getSize_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: getSize\n"
"  Paramegers: (oaCell)\n"
"    Calls: oaUInt4 getSize(const oaCell* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaCell,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCell_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCell data;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellObject* self=(PyoaVarDataAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_set_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,[oaByte])\n"
"    Calls: void set(oaCell* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaCell,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCell data;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellObject* self=(PyoaVarDataAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_isNull_doc[] =
"Class: oaVarDataAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaCell data;
    int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaCell_assign_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaCell data;
  int convert_status=PyoaVarDataAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaCell_get,METH_VARARGS,oaVarDataAppDef_oaCell_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaCell_getDefault,METH_VARARGS,oaVarDataAppDef_oaCell_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaCell_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaCell_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaCell_getSize,METH_VARARGS,oaVarDataAppDef_oaCell_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaCell_set,METH_VARARGS,oaVarDataAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaCell_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaCell_tp_assign,METH_VARARGS,oaVarDataAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_doc[] = 
"Class: oaVarDataAppDef_oaCell\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaCell)\n"
"    Calls: (const oaVarDataAppDef_oaCell&)\n"
"    Signature: oaVarDataAppDef_oaCell||cref-oaVarDataAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaCell",
    sizeof(PyoaVarDataAppDef_oaCellObject),
    0,
    (destructor)oaVarDataAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_static_find_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::find(p1.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCell_static_get_doc[] = 
"Class: oaVarDataAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCell|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCell* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCell|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCell* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCell|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::get(p1.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellp result= (oaVarDataAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaCell_FromoaVarDataAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaCell_static_find,METH_VARARGS,oaVarDataAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaCell_static_get,METH_VARARGS,oaVarDataAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaCell",
           (PyObject*)(&PyoaVarDataAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaCell_Type.tp_dict;
    for(method=oaVarDataAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaCellViewObject* self = (PyoaVarDataAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaCellView)
    {
        PyParamoaVarDataAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaCellView, Choices are:\n"
        "    (oaVarDataAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaCellView_tp_dealloc(PyoaVarDataAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaCellView value;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaVarDataAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaCellView v1;
    PyParamoaVarDataAppDef_oaCellView v2;
    int convert_status1=PyoaVarDataAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaCellView_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaCellView**) ((PyoaVarDataAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(oaVarDataAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaCellView_Type.tp_alloc(&PyoaVarDataAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaCellViewObject* self = (PyoaVarDataAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(oaVarDataAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaCellView_Type.tp_alloc(&PyoaVarDataAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaCellViewObject* self = (PyoaVarDataAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_get_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView,[oaByte])\n"
"    Calls: void get(const oaCellView* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaCellView,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCellView data;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellViewObject* self=(PyoaVarDataAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCellView data;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellViewObject* self=(PyoaVarDataAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCellView data;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellViewObject* self=(PyoaVarDataAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_getSize_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: getSize\n"
"  Paramegers: (oaCellView)\n"
"    Calls: oaUInt4 getSize(const oaCellView* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaCellView,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCellView data;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellViewObject* self=(PyoaVarDataAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_set_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,[oaByte])\n"
"    Calls: void set(oaCellView* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaCellView,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCellView data;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaCellViewObject* self=(PyoaVarDataAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_isNull_doc[] =
"Class: oaVarDataAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaCellView data;
    int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaCellView_assign_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaCellView data;
  int convert_status=PyoaVarDataAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaCellView_get,METH_VARARGS,oaVarDataAppDef_oaCellView_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaCellView_getDefault,METH_VARARGS,oaVarDataAppDef_oaCellView_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaCellView_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaCellView_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaCellView_getSize,METH_VARARGS,oaVarDataAppDef_oaCellView_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaCellView_set,METH_VARARGS,oaVarDataAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaCellView_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaCellView_tp_assign,METH_VARARGS,oaVarDataAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_doc[] = 
"Class: oaVarDataAppDef_oaCellView\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaCellView)\n"
"    Calls: (const oaVarDataAppDef_oaCellView&)\n"
"    Signature: oaVarDataAppDef_oaCellView||cref-oaVarDataAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaCellView",
    sizeof(PyoaVarDataAppDef_oaCellViewObject),
    0,
    (destructor)oaVarDataAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_static_find_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::find(p1.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCellView_static_get_doc[] = 
"Class: oaVarDataAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCellView|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCellView* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCellView|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCellView* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCellView|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::get(p1.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaCellViewp result= (oaVarDataAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaCellView_FromoaVarDataAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaCellView_static_find,METH_VARARGS,oaVarDataAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaCellView_static_get,METH_VARARGS,oaVarDataAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaCellView",
           (PyObject*)(&PyoaVarDataAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaCellView_Type.tp_dict;
    for(method=oaVarDataAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaClusterObject* self = (PyoaVarDataAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaCluster)
    {
        PyParamoaVarDataAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaCluster, Choices are:\n"
        "    (oaVarDataAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaCluster_tp_dealloc(PyoaVarDataAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaCluster value;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaVarDataAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaCluster v1;
    PyParamoaVarDataAppDef_oaCluster v2;
    int convert_status1=PyoaVarDataAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaCluster_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaCluster**) ((PyoaVarDataAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(oaVarDataAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaCluster_Type.tp_alloc(&PyoaVarDataAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaClusterObject* self = (PyoaVarDataAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(oaVarDataAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaCluster_Type.tp_alloc(&PyoaVarDataAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaClusterObject* self = (PyoaVarDataAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_get_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster,[oaByte])\n"
"    Calls: void get(const oaCluster* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaCluster,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCluster data;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaClusterObject* self=(PyoaVarDataAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCluster data;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaClusterObject* self=(PyoaVarDataAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCluster data;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaClusterObject* self=(PyoaVarDataAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_getSize_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: getSize\n"
"  Paramegers: (oaCluster)\n"
"    Calls: oaUInt4 getSize(const oaCluster* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaCluster,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCluster data;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaClusterObject* self=(PyoaVarDataAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_set_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,[oaByte])\n"
"    Calls: void set(oaCluster* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaCluster,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaCluster data;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaClusterObject* self=(PyoaVarDataAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_isNull_doc[] =
"Class: oaVarDataAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaCluster data;
    int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaCluster_assign_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaCluster data;
  int convert_status=PyoaVarDataAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaCluster_get,METH_VARARGS,oaVarDataAppDef_oaCluster_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaCluster_getDefault,METH_VARARGS,oaVarDataAppDef_oaCluster_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaCluster_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaCluster_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaCluster_getSize,METH_VARARGS,oaVarDataAppDef_oaCluster_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaCluster_set,METH_VARARGS,oaVarDataAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaCluster_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaCluster_tp_assign,METH_VARARGS,oaVarDataAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_doc[] = 
"Class: oaVarDataAppDef_oaCluster\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaCluster)\n"
"    Calls: (const oaVarDataAppDef_oaCluster&)\n"
"    Signature: oaVarDataAppDef_oaCluster||cref-oaVarDataAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaCluster",
    sizeof(PyoaVarDataAppDef_oaClusterObject),
    0,
    (destructor)oaVarDataAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_static_find_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::find(p1.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaCluster_static_get_doc[] = 
"Class: oaVarDataAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCluster|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCluster* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCluster|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCluster* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCluster|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::get(p1.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaClusterp result= (oaVarDataAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaCluster_FromoaVarDataAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaCluster_static_find,METH_VARARGS,oaVarDataAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaCluster_static_get,METH_VARARGS,oaVarDataAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaCluster",
           (PyObject*)(&PyoaVarDataAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaCluster_Type.tp_dict;
    for(method=oaVarDataAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConnectDefObject* self = (PyoaVarDataAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConnectDef)
    {
        PyParamoaVarDataAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConnectDef, Choices are:\n"
        "    (oaVarDataAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConnectDef_tp_dealloc(PyoaVarDataAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConnectDef value;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaVarDataAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConnectDef v1;
    PyParamoaVarDataAppDef_oaConnectDef v2;
    int convert_status1=PyoaVarDataAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConnectDef**) ((PyoaVarDataAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(oaVarDataAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConnectDef_Type.tp_alloc(&PyoaVarDataAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConnectDefObject* self = (PyoaVarDataAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(oaVarDataAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConnectDef_Type.tp_alloc(&PyoaVarDataAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConnectDefObject* self = (PyoaVarDataAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_get_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef,[oaByte])\n"
"    Calls: void get(const oaConnectDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConnectDef,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConnectDef data;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConnectDefObject* self=(PyoaVarDataAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConnectDef data;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConnectDefObject* self=(PyoaVarDataAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConnectDef data;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConnectDefObject* self=(PyoaVarDataAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: getSize\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: oaUInt4 getSize(const oaConnectDef* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConnectDef,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConnectDef data;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConnectDefObject* self=(PyoaVarDataAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_set_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,[oaByte])\n"
"    Calls: void set(oaConnectDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConnectDef,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConnectDef data;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConnectDefObject* self=(PyoaVarDataAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_isNull_doc[] =
"Class: oaVarDataAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConnectDef data;
    int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConnectDef_assign_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConnectDef data;
  int convert_status=PyoaVarDataAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConnectDef_get,METH_VARARGS,oaVarDataAppDef_oaConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConnectDef_getDefault,METH_VARARGS,oaVarDataAppDef_oaConnectDef_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConnectDef_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConnectDef_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConnectDef_getSize,METH_VARARGS,oaVarDataAppDef_oaConnectDef_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConnectDef_set,METH_VARARGS,oaVarDataAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConnectDef)\n"
"    Calls: (const oaVarDataAppDef_oaConnectDef&)\n"
"    Signature: oaVarDataAppDef_oaConnectDef||cref-oaVarDataAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConnectDef",
    sizeof(PyoaVarDataAppDef_oaConnectDefObject),
    0,
    (destructor)oaVarDataAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::find(p1.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::get(p1.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConnectDefp result= (oaVarDataAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConnectDef_FromoaVarDataAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConnectDef_static_find,METH_VARARGS,oaVarDataAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConnectDef_static_get,METH_VARARGS,oaVarDataAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConnectDef",
           (PyObject*)(&PyoaVarDataAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintObject* self = (PyoaVarDataAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraint)
    {
        PyParamoaVarDataAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraint, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraint_tp_dealloc(PyoaVarDataAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraint value;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraint v1;
    PyParamoaVarDataAppDef_oaConstraint v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraint**) ((PyoaVarDataAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(oaVarDataAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraint_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintObject* self = (PyoaVarDataAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(oaVarDataAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraint_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintObject* self = (PyoaVarDataAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint,[oaByte])\n"
"    Calls: void get(const oaConstraint* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraint,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraint data;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintObject* self=(PyoaVarDataAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraint data;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintObject* self=(PyoaVarDataAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraint data;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintObject* self=(PyoaVarDataAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: getSize\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: oaUInt4 getSize(const oaConstraint* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraint,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraint data;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintObject* self=(PyoaVarDataAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,[oaByte])\n"
"    Calls: void set(oaConstraint* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraint,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraint data;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintObject* self=(PyoaVarDataAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraint data;
    int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraint_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraint data;
  int convert_status=PyoaVarDataAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraint_get,METH_VARARGS,oaVarDataAppDef_oaConstraint_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraint_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraint_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraint_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraint_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraint_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraint_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraint_set,METH_VARARGS,oaVarDataAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraint_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_doc[] = 
"Class: oaVarDataAppDef_oaConstraint\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraint)\n"
"    Calls: (const oaVarDataAppDef_oaConstraint&)\n"
"    Signature: oaVarDataAppDef_oaConstraint||cref-oaVarDataAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraint",
    sizeof(PyoaVarDataAppDef_oaConstraintObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraint_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraint* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraint* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintp result= (oaVarDataAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraint_FromoaVarDataAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraint_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraint_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraint",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraint_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintDefObject* self = (PyoaVarDataAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraintDef)
    {
        PyParamoaVarDataAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraintDef, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraintDef_tp_dealloc(PyoaVarDataAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraintDef value;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraintDef v1;
    PyParamoaVarDataAppDef_oaConstraintDef v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraintDef**) ((PyoaVarDataAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(oaVarDataAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraintDef_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintDefObject* self = (PyoaVarDataAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(oaVarDataAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraintDef_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintDefObject* self = (PyoaVarDataAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef,[oaByte])\n"
"    Calls: void get(const oaConstraintDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraintDef,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintDefObject* self=(PyoaVarDataAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintDefObject* self=(PyoaVarDataAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintDefObject* self=(PyoaVarDataAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: getSize\n"
"  Paramegers: (oaConstraintDef)\n"
"    Calls: oaUInt4 getSize(const oaConstraintDef* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraintDef,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintDefObject* self=(PyoaVarDataAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,[oaByte])\n"
"    Calls: void set(oaConstraintDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintDefObject* self=(PyoaVarDataAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraintDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraintDef data;
  int convert_status=PyoaVarDataAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraintDef_get,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraintDef_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraintDef_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraintDef_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraintDef_set,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraintDef)\n"
"    Calls: (const oaVarDataAppDef_oaConstraintDef&)\n"
"    Signature: oaVarDataAppDef_oaConstraintDef||cref-oaVarDataAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraintDef",
    sizeof(PyoaVarDataAppDef_oaConstraintDefObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintDefp result= (oaVarDataAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraintDef_FromoaVarDataAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraintDef_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraintDef_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraintDef",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintGroupObject* self = (PyoaVarDataAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraintGroup)
    {
        PyParamoaVarDataAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraintGroup_tp_dealloc(PyoaVarDataAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraintGroup value;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraintGroup v1;
    PyParamoaVarDataAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraintGroup**) ((PyoaVarDataAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(oaVarDataAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintGroupObject* self = (PyoaVarDataAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(oaVarDataAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintGroupObject* self = (PyoaVarDataAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup,[oaByte])\n"
"    Calls: void get(const oaConstraintGroup* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraintGroup,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroup data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupObject* self=(PyoaVarDataAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroup data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupObject* self=(PyoaVarDataAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroup data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupObject* self=(PyoaVarDataAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: getSize\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: oaUInt4 getSize(const oaConstraintGroup* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraintGroup,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroup data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupObject* self=(PyoaVarDataAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,[oaByte])\n"
"    Calls: void set(oaConstraintGroup* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroup data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupObject* self=(PyoaVarDataAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraintGroup data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraintGroup data;
  int convert_status=PyoaVarDataAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_get,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_set,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraintGroup)\n"
"    Calls: (const oaVarDataAppDef_oaConstraintGroup&)\n"
"    Signature: oaVarDataAppDef_oaConstraintGroup||cref-oaVarDataAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraintGroup",
    sizeof(PyoaVarDataAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupp result= (oaVarDataAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraintGroup_FromoaVarDataAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self = (PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraintGroupHeader)
    {
        PyParamoaVarDataAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraintGroupHeader v1;
    PyParamoaVarDataAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraintGroupHeader**) ((PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(oaVarDataAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self = (PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(oaVarDataAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self = (PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader,[oaByte])\n"
"    Calls: void get(const oaConstraintGroupHeader* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraintGroupHeader,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self=(PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self=(PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self=(PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: getSize\n"
"  Paramegers: (oaConstraintGroupHeader)\n"
"    Calls: oaUInt4 getSize(const oaConstraintGroupHeader* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraintGroupHeader,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self=(PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,[oaByte])\n"
"    Calls: void set(oaConstraintGroupHeader* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupHeaderObject* self=(PyoaVarDataAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaVarDataAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaVarDataAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaVarDataAppDef_oaConstraintGroupHeader||cref-oaVarDataAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraintGroupHeader",
    sizeof(PyoaVarDataAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupHeaderp result= (oaVarDataAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupHeader_FromoaVarDataAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintGroupMemObject* self = (PyoaVarDataAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraintGroupMem)
    {
        PyParamoaVarDataAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraintGroupMem_tp_dealloc(PyoaVarDataAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraintGroupMem v1;
    PyParamoaVarDataAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraintGroupMem**) ((PyoaVarDataAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(oaVarDataAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintGroupMemObject* self = (PyoaVarDataAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(oaVarDataAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintGroupMemObject* self = (PyoaVarDataAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem,[oaByte])\n"
"    Calls: void get(const oaConstraintGroupMem* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraintGroupMem,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupMemObject* self=(PyoaVarDataAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupMemObject* self=(PyoaVarDataAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupMemObject* self=(PyoaVarDataAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: getSize\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: oaUInt4 getSize(const oaConstraintGroupMem* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraintGroupMem,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupMemObject* self=(PyoaVarDataAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,[oaByte])\n"
"    Calls: void set(oaConstraintGroupMem* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintGroupMemObject* self=(PyoaVarDataAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaVarDataAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaVarDataAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaVarDataAppDef_oaConstraintGroupMem||cref-oaVarDataAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraintGroupMem",
    sizeof(PyoaVarDataAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintGroupMemp result= (oaVarDataAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraintGroupMem_FromoaVarDataAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintParamObject* self = (PyoaVarDataAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraintParam)
    {
        PyParamoaVarDataAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraintParam, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraintParam_tp_dealloc(PyoaVarDataAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraintParam value;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraintParam v1;
    PyParamoaVarDataAppDef_oaConstraintParam v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraintParam**) ((PyoaVarDataAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(oaVarDataAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraintParam_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintParamObject* self = (PyoaVarDataAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(oaVarDataAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraintParam_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintParamObject* self = (PyoaVarDataAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam,[oaByte])\n"
"    Calls: void get(const oaConstraintParam* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraintParam,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParam data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamObject* self=(PyoaVarDataAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParam data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamObject* self=(PyoaVarDataAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParam data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamObject* self=(PyoaVarDataAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: getSize\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: oaUInt4 getSize(const oaConstraintParam* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraintParam,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParam data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamObject* self=(PyoaVarDataAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,[oaByte])\n"
"    Calls: void set(oaConstraintParam* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParam data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamObject* self=(PyoaVarDataAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraintParam data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraintParam data;
  int convert_status=PyoaVarDataAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraintParam_get,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraintParam_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraintParam_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraintParam_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraintParam_set,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraintParam)\n"
"    Calls: (const oaVarDataAppDef_oaConstraintParam&)\n"
"    Signature: oaVarDataAppDef_oaConstraintParam||cref-oaVarDataAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraintParam",
    sizeof(PyoaVarDataAppDef_oaConstraintParamObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamp result= (oaVarDataAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraintParam_FromoaVarDataAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraintParam_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraintParam_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraintParam",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaConstraintParamDefObject* self = (PyoaVarDataAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaConstraintParamDef)
    {
        PyParamoaVarDataAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaVarDataAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaConstraintParamDef_tp_dealloc(PyoaVarDataAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaConstraintParamDef value;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaVarDataAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaConstraintParamDef v1;
    PyParamoaVarDataAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaConstraintParamDef**) ((PyoaVarDataAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(oaVarDataAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaConstraintParamDefObject* self = (PyoaVarDataAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(oaVarDataAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaVarDataAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaConstraintParamDefObject* self = (PyoaVarDataAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef,[oaByte])\n"
"    Calls: void get(const oaConstraintParamDef* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaConstraintParamDef,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParamDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamDefObject* self=(PyoaVarDataAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParamDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamDefObject* self=(PyoaVarDataAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParamDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamDefObject* self=(PyoaVarDataAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_getSize_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: getSize\n"
"  Paramegers: (oaConstraintParamDef)\n"
"    Calls: oaUInt4 getSize(const oaConstraintParamDef* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaConstraintParamDef,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParamDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamDefObject* self=(PyoaVarDataAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParamDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,[oaByte])\n"
"    Calls: void set(oaConstraintParamDef* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaConstraintParamDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaConstraintParamDefObject* self=(PyoaVarDataAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaConstraintParamDef data;
    int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaConstraintParamDef data;
  int convert_status=PyoaVarDataAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_get,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_getDefault,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_getSize,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_set,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaVarDataAppDef_oaConstraintParamDef&)\n"
"    Signature: oaVarDataAppDef_oaConstraintParamDef||cref-oaVarDataAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaConstraintParamDef",
    sizeof(PyoaVarDataAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaVarDataAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaVarDataAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaConstraintParamDefp result= (oaVarDataAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaConstraintParamDef_FromoaVarDataAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaVarDataAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaVarDataAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaVarDataAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaDMDataObject* self = (PyoaVarDataAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaDMData)
    {
        PyParamoaVarDataAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaDMData, Choices are:\n"
        "    (oaVarDataAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaDMData_tp_dealloc(PyoaVarDataAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaDMData value;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaVarDataAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaDMData v1;
    PyParamoaVarDataAppDef_oaDMData v2;
    int convert_status1=PyoaVarDataAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaDMData_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaDMData**) ((PyoaVarDataAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(oaVarDataAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaDMData_Type.tp_alloc(&PyoaVarDataAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaDMDataObject* self = (PyoaVarDataAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(oaVarDataAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaDMData_Type.tp_alloc(&PyoaVarDataAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaDMDataObject* self = (PyoaVarDataAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_get_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData,[oaByte])\n"
"    Calls: void get(const oaDMData* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaDMData,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMData data;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMDataObject* self=(PyoaVarDataAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMData data;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMDataObject* self=(PyoaVarDataAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMData data;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMDataObject* self=(PyoaVarDataAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_getSize_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: getSize\n"
"  Paramegers: (oaDMData)\n"
"    Calls: oaUInt4 getSize(const oaDMData* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaDMData,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMData data;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMDataObject* self=(PyoaVarDataAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMData_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_set_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,[oaByte])\n"
"    Calls: void set(oaDMData* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaDMData,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMData data;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMDataObject* self=(PyoaVarDataAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_isNull_doc[] =
"Class: oaVarDataAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaDMData data;
    int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaDMData_assign_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaDMData data;
  int convert_status=PyoaVarDataAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaDMData_get,METH_VARARGS,oaVarDataAppDef_oaDMData_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaDMData_getDefault,METH_VARARGS,oaVarDataAppDef_oaDMData_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaDMData_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaDMData_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaDMData_getSize,METH_VARARGS,oaVarDataAppDef_oaDMData_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaDMData_set,METH_VARARGS,oaVarDataAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaDMData_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaDMData_tp_assign,METH_VARARGS,oaVarDataAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_doc[] = 
"Class: oaVarDataAppDef_oaDMData\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaDMData)\n"
"    Calls: (const oaVarDataAppDef_oaDMData&)\n"
"    Signature: oaVarDataAppDef_oaDMData||cref-oaVarDataAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaDMData",
    sizeof(PyoaVarDataAppDef_oaDMDataObject),
    0,
    (destructor)oaVarDataAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_static_find_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::find(p1.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMData_static_get_doc[] = 
"Class: oaVarDataAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMData|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMData* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMData|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMData* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMData|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::get(p1.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMDatap result= (oaVarDataAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaDMData_FromoaVarDataAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaDMData_static_find,METH_VARARGS,oaVarDataAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaDMData_static_get,METH_VARARGS,oaVarDataAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaDMData",
           (PyObject*)(&PyoaVarDataAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaDMData_Type.tp_dict;
    for(method=oaVarDataAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaDMFileObject* self = (PyoaVarDataAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaDMFile)
    {
        PyParamoaVarDataAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaDMFile, Choices are:\n"
        "    (oaVarDataAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaDMFile_tp_dealloc(PyoaVarDataAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaDMFile value;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaVarDataAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaDMFile v1;
    PyParamoaVarDataAppDef_oaDMFile v2;
    int convert_status1=PyoaVarDataAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaDMFile**) ((PyoaVarDataAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(oaVarDataAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaDMFile_Type.tp_alloc(&PyoaVarDataAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaDMFileObject* self = (PyoaVarDataAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(oaVarDataAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaDMFile_Type.tp_alloc(&PyoaVarDataAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaDMFileObject* self = (PyoaVarDataAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_get_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile,[oaByte])\n"
"    Calls: void get(const oaDMFile* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaDMFile,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMFile data;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMFileObject* self=(PyoaVarDataAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMFile data;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMFileObject* self=(PyoaVarDataAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMFile data;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMFileObject* self=(PyoaVarDataAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_getSize_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: getSize\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: oaUInt4 getSize(const oaDMFile* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaDMFile,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMFile data;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMFileObject* self=(PyoaVarDataAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_set_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,[oaByte])\n"
"    Calls: void set(oaDMFile* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaDMFile,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDMFile data;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDMFileObject* self=(PyoaVarDataAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_isNull_doc[] =
"Class: oaVarDataAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaDMFile data;
    int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaDMFile_assign_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaDMFile data;
  int convert_status=PyoaVarDataAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaDMFile_get,METH_VARARGS,oaVarDataAppDef_oaDMFile_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaDMFile_getDefault,METH_VARARGS,oaVarDataAppDef_oaDMFile_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaDMFile_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaDMFile_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaDMFile_getSize,METH_VARARGS,oaVarDataAppDef_oaDMFile_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaDMFile_set,METH_VARARGS,oaVarDataAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaDMFile_tp_assign,METH_VARARGS,oaVarDataAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_doc[] = 
"Class: oaVarDataAppDef_oaDMFile\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaDMFile)\n"
"    Calls: (const oaVarDataAppDef_oaDMFile&)\n"
"    Signature: oaVarDataAppDef_oaDMFile||cref-oaVarDataAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaDMFile",
    sizeof(PyoaVarDataAppDef_oaDMFileObject),
    0,
    (destructor)oaVarDataAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_static_find_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::find(p1.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDMFile_static_get_doc[] = 
"Class: oaVarDataAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMFile* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMFile* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::get(p1.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDMFilep result= (oaVarDataAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaDMFile_FromoaVarDataAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaDMFile_static_find,METH_VARARGS,oaVarDataAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaDMFile_static_get,METH_VARARGS,oaVarDataAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaDMFile",
           (PyObject*)(&PyoaVarDataAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaDMFile_Type.tp_dict;
    for(method=oaVarDataAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaDerivedLayerParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaDerivedLayerParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaDerivedLayerParamObject* self = (PyoaVarDataAppDef_oaDerivedLayerParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaDerivedLayerParam)
    {
        PyParamoaVarDataAppDef_oaDerivedLayerParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaDerivedLayerParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaDerivedLayerParam, Choices are:\n"
        "    (oaVarDataAppDef_oaDerivedLayerParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaDerivedLayerParam_tp_dealloc(PyoaVarDataAppDef_oaDerivedLayerParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaDerivedLayerParam value;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaVarDataAppDef_oaDerivedLayerParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaDerivedLayerParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaDerivedLayerParam v1;
    PyParamoaVarDataAppDef_oaDerivedLayerParam v2;
    int convert_status1=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaDerivedLayerParam_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaDerivedLayerParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaDerivedLayerParam_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaDerivedLayerParam**) ((PyoaVarDataAppDef_oaDerivedLayerParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaDerivedLayerParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(oaVarDataAppDef_oaDerivedLayerParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaDerivedLayerParam* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaVarDataAppDef_oaDerivedLayerParam_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaDerivedLayerParamObject* self = (PyoaVarDataAppDef_oaDerivedLayerParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(oaVarDataAppDef_oaDerivedLayerParam* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaVarDataAppDef_oaDerivedLayerParam_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaDerivedLayerParamObject* self = (PyoaVarDataAppDef_oaDerivedLayerParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_get_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaDerivedLayerParam,[oaByte])\n"
"    Calls: void get(const oaDerivedLayerParam* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaDerivedLayerParam,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDerivedLayerParamObject* self=(PyoaVarDataAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDerivedLayerParamObject* self=(PyoaVarDataAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDerivedLayerParamObject* self=(PyoaVarDataAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_getSize_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: getSize\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: oaUInt4 getSize(const oaDerivedLayerParam* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaDerivedLayerParam,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDerivedLayerParamObject* self=(PyoaVarDataAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_set_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDerivedLayerParam,[oaByte])\n"
"    Calls: void set(oaDerivedLayerParam* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaDerivedLayerParam,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDerivedLayerParamObject* self=(PyoaVarDataAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_isNull_doc[] =
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaDerivedLayerParam_assign_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaDerivedLayerParam data;
  int convert_status=PyoaVarDataAppDef_oaDerivedLayerParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaDerivedLayerParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaDerivedLayerParam_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_get,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_getDefault,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_getSize,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_set,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_tp_assign,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaDerivedLayerParam)\n"
"    Calls: (const oaVarDataAppDef_oaDerivedLayerParam&)\n"
"    Signature: oaVarDataAppDef_oaDerivedLayerParam||cref-oaVarDataAppDef_oaDerivedLayerParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaDerivedLayerParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaDerivedLayerParam",
    sizeof(PyoaVarDataAppDef_oaDerivedLayerParamObject),
    0,
    (destructor)oaVarDataAppDef_oaDerivedLayerParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaDerivedLayerParam_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaDerivedLayerParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaDerivedLayerParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaDerivedLayerParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaDerivedLayerParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_static_find_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::find(p1.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDerivedLayerParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDerivedLayerParam_static_get_doc[] = 
"Class: oaVarDataAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaDerivedLayerParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::get(p1.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDerivedLayerParamp result= (oaVarDataAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaDerivedLayerParam_FromoaVarDataAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDerivedLayerParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaDerivedLayerParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_static_find,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaDerivedLayerParam_static_get,METH_VARARGS,oaVarDataAppDef_oaDerivedLayerParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaDerivedLayerParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaDerivedLayerParam_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaDerivedLayerParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaDerivedLayerParam",
           (PyObject*)(&PyoaVarDataAppDef_oaDerivedLayerParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaDerivedLayerParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaDerivedLayerParam_Type.tp_dict;
    for(method=oaVarDataAppDef_oaDerivedLayerParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaDesign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDesign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaDesign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaDesignObject* self = (PyoaVarDataAppDef_oaDesignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaDesign)
    {
        PyParamoaVarDataAppDef_oaDesign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaDesign_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaDesign, Choices are:\n"
        "    (oaVarDataAppDef_oaDesign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaDesign_tp_dealloc(PyoaVarDataAppDef_oaDesignObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDesign_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaDesign value;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaVarDataAppDef_oaDesign::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaDesign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaDesign v1;
    PyParamoaVarDataAppDef_oaDesign v2;
    int convert_status1=PyoaVarDataAppDef_oaDesign_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaDesign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaDesign_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaDesign* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaDesign_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaDesign**) ((PyoaVarDataAppDef_oaDesignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaDesign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(oaVarDataAppDef_oaDesign** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaDesign* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaDesign_Type.tp_alloc(&PyoaVarDataAppDef_oaDesign_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaDesignObject* self = (PyoaVarDataAppDef_oaDesignObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(oaVarDataAppDef_oaDesign* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaDesign_Type.tp_alloc(&PyoaVarDataAppDef_oaDesign_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaDesignObject* self = (PyoaVarDataAppDef_oaDesignObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_get_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaDesign,[oaByte])\n"
"    Calls: void get(const oaDesign* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaDesign,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesign data;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignObject* self=(PyoaVarDataAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesign data;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignObject* self=(PyoaVarDataAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesign data;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignObject* self=(PyoaVarDataAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_getSize_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: getSize\n"
"  Paramegers: (oaDesign)\n"
"    Calls: oaUInt4 getSize(const oaDesign* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaDesign,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesign data;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignObject* self=(PyoaVarDataAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_set_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDesign,[oaByte])\n"
"    Calls: void set(oaDesign* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaDesign,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesign data;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignObject* self=(PyoaVarDataAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_isNull_doc[] =
"Class: oaVarDataAppDef_oaDesign, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaDesign data;
    int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaDesign_assign_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaDesign data;
  int convert_status=PyoaVarDataAppDef_oaDesign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaDesign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaDesign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaDesign_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaDesign_get,METH_VARARGS,oaVarDataAppDef_oaDesign_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaDesign_getDefault,METH_VARARGS,oaVarDataAppDef_oaDesign_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaDesign_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaDesign_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaDesign_getSize,METH_VARARGS,oaVarDataAppDef_oaDesign_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaDesign_set,METH_VARARGS,oaVarDataAppDef_oaDesign_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaDesign_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaDesign_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaDesign_tp_assign,METH_VARARGS,oaVarDataAppDef_oaDesign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_doc[] = 
"Class: oaVarDataAppDef_oaDesign\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaDesign)\n"
"    Calls: (const oaVarDataAppDef_oaDesign&)\n"
"    Signature: oaVarDataAppDef_oaDesign||cref-oaVarDataAppDef_oaDesign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaDesign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaDesign",
    sizeof(PyoaVarDataAppDef_oaDesignObject),
    0,
    (destructor)oaVarDataAppDef_oaDesign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaDesign_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaDesign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaDesign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaDesign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaDesign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_static_find_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDesign* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDesign|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDesign* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::find(p1.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDesign, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesign_static_get_doc[] = 
"Class: oaVarDataAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDesign* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesign|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesign* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesign|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesign* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesign|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaDesign_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::get(p1.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignp result= (oaVarDataAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaDesign_FromoaVarDataAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDesign, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaDesign_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaDesign_static_find,METH_VARARGS,oaVarDataAppDef_oaDesign_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaDesign_static_get,METH_VARARGS,oaVarDataAppDef_oaDesign_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaDesign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaDesign_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaDesign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaDesign",
           (PyObject*)(&PyoaVarDataAppDef_oaDesign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaDesign\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaDesign_Type.tp_dict;
    for(method=oaVarDataAppDef_oaDesign_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaDesignInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDesignInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaDesignInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaDesignInstObject* self = (PyoaVarDataAppDef_oaDesignInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaDesignInst)
    {
        PyParamoaVarDataAppDef_oaDesignInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaDesignInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaDesignInst, Choices are:\n"
        "    (oaVarDataAppDef_oaDesignInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaDesignInst_tp_dealloc(PyoaVarDataAppDef_oaDesignInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDesignInst_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaDesignInst value;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaVarDataAppDef_oaDesignInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaDesignInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaDesignInst v1;
    PyParamoaVarDataAppDef_oaDesignInst v2;
    int convert_status1=PyoaVarDataAppDef_oaDesignInst_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaDesignInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaDesignInst_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaDesignInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaDesignInst_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaDesignInst**) ((PyoaVarDataAppDef_oaDesignInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaDesignInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(oaVarDataAppDef_oaDesignInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaDesignInst* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaDesignInst_Type.tp_alloc(&PyoaVarDataAppDef_oaDesignInst_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaDesignInstObject* self = (PyoaVarDataAppDef_oaDesignInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(oaVarDataAppDef_oaDesignInst* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaDesignInst_Type.tp_alloc(&PyoaVarDataAppDef_oaDesignInst_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaDesignInstObject* self = (PyoaVarDataAppDef_oaDesignInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_get_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaDesignInst,[oaByte])\n"
"    Calls: void get(const oaDesignInst* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaDesignInst,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesignInst data;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignInstObject* self=(PyoaVarDataAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesignInst data;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignInstObject* self=(PyoaVarDataAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesignInst data;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignInstObject* self=(PyoaVarDataAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_getSize_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: getSize\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: oaUInt4 getSize(const oaDesignInst* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaDesignInst,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesignInst data;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignInstObject* self=(PyoaVarDataAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_set_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDesignInst,[oaByte])\n"
"    Calls: void set(oaDesignInst* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaDesignInst,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDesignInst data;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDesignInstObject* self=(PyoaVarDataAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_isNull_doc[] =
"Class: oaVarDataAppDef_oaDesignInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaDesignInst data;
    int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaDesignInst_assign_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaDesignInst data;
  int convert_status=PyoaVarDataAppDef_oaDesignInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaDesignInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaDesignInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaDesignInst_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaDesignInst_get,METH_VARARGS,oaVarDataAppDef_oaDesignInst_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaDesignInst_getDefault,METH_VARARGS,oaVarDataAppDef_oaDesignInst_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaDesignInst_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaDesignInst_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaDesignInst_getSize,METH_VARARGS,oaVarDataAppDef_oaDesignInst_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaDesignInst_set,METH_VARARGS,oaVarDataAppDef_oaDesignInst_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaDesignInst_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaDesignInst_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaDesignInst_tp_assign,METH_VARARGS,oaVarDataAppDef_oaDesignInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaDesignInst)\n"
"    Calls: (const oaVarDataAppDef_oaDesignInst&)\n"
"    Signature: oaVarDataAppDef_oaDesignInst||cref-oaVarDataAppDef_oaDesignInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaDesignInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaDesignInst",
    sizeof(PyoaVarDataAppDef_oaDesignInstObject),
    0,
    (destructor)oaVarDataAppDef_oaDesignInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaDesignInst_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaDesignInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaDesignInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaDesignInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaDesignInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_static_find_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::find(p1.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDesignInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDesignInst_static_get_doc[] = 
"Class: oaVarDataAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaDesignInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::get(p1.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDesignInstp result= (oaVarDataAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaDesignInst_FromoaVarDataAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDesignInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaDesignInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaDesignInst_static_find,METH_VARARGS,oaVarDataAppDef_oaDesignInst_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaDesignInst_static_get,METH_VARARGS,oaVarDataAppDef_oaDesignInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaDesignInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaDesignInst_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaDesignInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaDesignInst",
           (PyObject*)(&PyoaVarDataAppDef_oaDesignInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaDesignInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaDesignInst_Type.tp_dict;
    for(method=oaVarDataAppDef_oaDesignInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaDeviceObject* self = (PyoaVarDataAppDef_oaDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaDevice)
    {
        PyParamoaVarDataAppDef_oaDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaDevice, Choices are:\n"
        "    (oaVarDataAppDef_oaDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaDevice_tp_dealloc(PyoaVarDataAppDef_oaDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaDevice_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaDevice value;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaVarDataAppDef_oaDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaDevice v1;
    PyParamoaVarDataAppDef_oaDevice v2;
    int convert_status1=PyoaVarDataAppDef_oaDevice_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaDevice_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaDevice_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaDevice**) ((PyoaVarDataAppDef_oaDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(oaVarDataAppDef_oaDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaDevice* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaDevice_Type.tp_alloc(&PyoaVarDataAppDef_oaDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaDeviceObject* self = (PyoaVarDataAppDef_oaDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(oaVarDataAppDef_oaDevice* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaDevice_Type.tp_alloc(&PyoaVarDataAppDef_oaDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaDeviceObject* self = (PyoaVarDataAppDef_oaDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_get_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaDevice,[oaByte])\n"
"    Calls: void get(const oaDevice* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaDevice,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDevice data;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDeviceObject* self=(PyoaVarDataAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDevice data;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDeviceObject* self=(PyoaVarDataAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDevice data;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDeviceObject* self=(PyoaVarDataAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_getSize_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: getSize\n"
"  Paramegers: (oaDevice)\n"
"    Calls: oaUInt4 getSize(const oaDevice* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaDevice,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDevice data;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDeviceObject* self=(PyoaVarDataAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_set_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDevice,[oaByte])\n"
"    Calls: void set(oaDevice* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaDevice,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaDevice data;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaDeviceObject* self=(PyoaVarDataAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_isNull_doc[] =
"Class: oaVarDataAppDef_oaDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaDevice data;
    int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaDevice_assign_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaDevice data;
  int convert_status=PyoaVarDataAppDef_oaDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaDevice_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaDevice_get,METH_VARARGS,oaVarDataAppDef_oaDevice_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaDevice_getDefault,METH_VARARGS,oaVarDataAppDef_oaDevice_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaDevice_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaDevice_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaDevice_getSize,METH_VARARGS,oaVarDataAppDef_oaDevice_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaDevice_set,METH_VARARGS,oaVarDataAppDef_oaDevice_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaDevice_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaDevice_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaDevice_tp_assign,METH_VARARGS,oaVarDataAppDef_oaDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_doc[] = 
"Class: oaVarDataAppDef_oaDevice\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaDevice)\n"
"    Calls: (const oaVarDataAppDef_oaDevice&)\n"
"    Signature: oaVarDataAppDef_oaDevice||cref-oaVarDataAppDef_oaDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaDevice",
    sizeof(PyoaVarDataAppDef_oaDeviceObject),
    0,
    (destructor)oaVarDataAppDef_oaDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_static_find_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDevice* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDevice|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDevice* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::find(p1.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDevice, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaDevice_static_get_doc[] = 
"Class: oaVarDataAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaDevice* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDevice|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDevice* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDevice|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDevice* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDevice|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaDevice_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::get(p1.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaDevicep result= (oaVarDataAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaDevice_FromoaVarDataAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaDevice, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaDevice_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaDevice_static_find,METH_VARARGS,oaVarDataAppDef_oaDevice_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaDevice_static_get,METH_VARARGS,oaVarDataAppDef_oaDevice_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaDevice",
           (PyObject*)(&PyoaVarDataAppDef_oaDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaDevice\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaDevice_Type.tp_dict;
    for(method=oaVarDataAppDef_oaDevice_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaElmore
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaElmore_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaElmore_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaElmoreObject* self = (PyoaVarDataAppDef_oaElmoreObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaElmore)
    {
        PyParamoaVarDataAppDef_oaElmore p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaElmore_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaElmore, Choices are:\n"
        "    (oaVarDataAppDef_oaElmore)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaElmore_tp_dealloc(PyoaVarDataAppDef_oaElmoreObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaElmore_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaElmore value;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaVarDataAppDef_oaElmore::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaElmore_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaElmore v1;
    PyParamoaVarDataAppDef_oaElmore v2;
    int convert_status1=PyoaVarDataAppDef_oaElmore_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaElmore_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaElmore_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaElmore* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaElmore_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaElmore**) ((PyoaVarDataAppDef_oaElmoreObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaElmore Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(oaVarDataAppDef_oaElmore** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaElmore* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaElmore_Type.tp_alloc(&PyoaVarDataAppDef_oaElmore_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaElmoreObject* self = (PyoaVarDataAppDef_oaElmoreObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(oaVarDataAppDef_oaElmore* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaElmore_Type.tp_alloc(&PyoaVarDataAppDef_oaElmore_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaElmoreObject* self = (PyoaVarDataAppDef_oaElmoreObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_get_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaElmore,[oaByte])\n"
"    Calls: void get(const oaElmore* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaElmore,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaElmore data;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaElmoreObject* self=(PyoaVarDataAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaElmore data;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaElmoreObject* self=(PyoaVarDataAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaElmore data;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaElmoreObject* self=(PyoaVarDataAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_getSize_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: getSize\n"
"  Paramegers: (oaElmore)\n"
"    Calls: oaUInt4 getSize(const oaElmore* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaElmore,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaElmore data;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaElmoreObject* self=(PyoaVarDataAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_set_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaElmore,[oaByte])\n"
"    Calls: void set(oaElmore* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaElmore,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaElmore data;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaElmoreObject* self=(PyoaVarDataAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_isNull_doc[] =
"Class: oaVarDataAppDef_oaElmore, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaElmore data;
    int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaElmore_assign_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaElmore data;
  int convert_status=PyoaVarDataAppDef_oaElmore_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaElmore p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaElmore_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaElmore_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaElmore_get,METH_VARARGS,oaVarDataAppDef_oaElmore_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaElmore_getDefault,METH_VARARGS,oaVarDataAppDef_oaElmore_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaElmore_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaElmore_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaElmore_getSize,METH_VARARGS,oaVarDataAppDef_oaElmore_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaElmore_set,METH_VARARGS,oaVarDataAppDef_oaElmore_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaElmore_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaElmore_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaElmore_tp_assign,METH_VARARGS,oaVarDataAppDef_oaElmore_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_doc[] = 
"Class: oaVarDataAppDef_oaElmore\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaElmore)\n"
"    Calls: (const oaVarDataAppDef_oaElmore&)\n"
"    Signature: oaVarDataAppDef_oaElmore||cref-oaVarDataAppDef_oaElmore,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaElmore_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaElmore",
    sizeof(PyoaVarDataAppDef_oaElmoreObject),
    0,
    (destructor)oaVarDataAppDef_oaElmore_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaElmore_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaElmore_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaElmore_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaElmore_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaElmore_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_static_find_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaElmore* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaElmore|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaElmore* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::find(p1.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaElmore, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaElmore_static_get_doc[] = 
"Class: oaVarDataAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaElmore* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaElmore|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaElmore* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaElmore|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaElmore* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaElmore|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaElmore_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::get(p1.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaElmorep result= (oaVarDataAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaElmore_FromoaVarDataAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaElmore, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaElmore_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaElmore_static_find,METH_VARARGS,oaVarDataAppDef_oaElmore_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaElmore_static_get,METH_VARARGS,oaVarDataAppDef_oaElmore_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaElmore_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaElmore_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaElmore\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaElmore",
           (PyObject*)(&PyoaVarDataAppDef_oaElmore_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaElmore\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaElmore_Type.tp_dict;
    for(method=oaVarDataAppDef_oaElmore_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaFigGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFigGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaFigGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaFigGroupObject* self = (PyoaVarDataAppDef_oaFigGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaFigGroup)
    {
        PyParamoaVarDataAppDef_oaFigGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaFigGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaFigGroup, Choices are:\n"
        "    (oaVarDataAppDef_oaFigGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaFigGroup_tp_dealloc(PyoaVarDataAppDef_oaFigGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFigGroup_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaFigGroup value;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaVarDataAppDef_oaFigGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaFigGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaFigGroup v1;
    PyParamoaVarDataAppDef_oaFigGroup v2;
    int convert_status1=PyoaVarDataAppDef_oaFigGroup_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaFigGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaFigGroup_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaFigGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaFigGroup_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaFigGroup**) ((PyoaVarDataAppDef_oaFigGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaFigGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(oaVarDataAppDef_oaFigGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaFigGroup* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaFigGroup_Type.tp_alloc(&PyoaVarDataAppDef_oaFigGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaFigGroupObject* self = (PyoaVarDataAppDef_oaFigGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(oaVarDataAppDef_oaFigGroup* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaFigGroup_Type.tp_alloc(&PyoaVarDataAppDef_oaFigGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaFigGroupObject* self = (PyoaVarDataAppDef_oaFigGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_get_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaFigGroup,[oaByte])\n"
"    Calls: void get(const oaFigGroup* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaFigGroup,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroup data;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupObject* self=(PyoaVarDataAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroup data;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupObject* self=(PyoaVarDataAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroup data;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupObject* self=(PyoaVarDataAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_getSize_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: getSize\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: oaUInt4 getSize(const oaFigGroup* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaFigGroup,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroup data;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupObject* self=(PyoaVarDataAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_set_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaFigGroup,[oaByte])\n"
"    Calls: void set(oaFigGroup* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaFigGroup,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroup data;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupObject* self=(PyoaVarDataAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_isNull_doc[] =
"Class: oaVarDataAppDef_oaFigGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaFigGroup data;
    int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaFigGroup_assign_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaFigGroup data;
  int convert_status=PyoaVarDataAppDef_oaFigGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaFigGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaFigGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaFigGroup_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaFigGroup_get,METH_VARARGS,oaVarDataAppDef_oaFigGroup_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaFigGroup_getDefault,METH_VARARGS,oaVarDataAppDef_oaFigGroup_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaFigGroup_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaFigGroup_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaFigGroup_getSize,METH_VARARGS,oaVarDataAppDef_oaFigGroup_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaFigGroup_set,METH_VARARGS,oaVarDataAppDef_oaFigGroup_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaFigGroup_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaFigGroup_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaFigGroup_tp_assign,METH_VARARGS,oaVarDataAppDef_oaFigGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaFigGroup)\n"
"    Calls: (const oaVarDataAppDef_oaFigGroup&)\n"
"    Signature: oaVarDataAppDef_oaFigGroup||cref-oaVarDataAppDef_oaFigGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaFigGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaFigGroup",
    sizeof(PyoaVarDataAppDef_oaFigGroupObject),
    0,
    (destructor)oaVarDataAppDef_oaFigGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaFigGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaFigGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaFigGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaFigGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaFigGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_static_find_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::find(p1.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFigGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroup_static_get_doc[] = 
"Class: oaVarDataAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::get(p1.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupp result= (oaVarDataAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaFigGroup_FromoaVarDataAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFigGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaFigGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaFigGroup_static_find,METH_VARARGS,oaVarDataAppDef_oaFigGroup_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaFigGroup_static_get,METH_VARARGS,oaVarDataAppDef_oaFigGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaFigGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaFigGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaFigGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaFigGroup",
           (PyObject*)(&PyoaVarDataAppDef_oaFigGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaFigGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaFigGroup_Type.tp_dict;
    for(method=oaVarDataAppDef_oaFigGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaFigGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFigGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaFigGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaFigGroupMemObject* self = (PyoaVarDataAppDef_oaFigGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaFigGroupMem)
    {
        PyParamoaVarDataAppDef_oaFigGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaFigGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaFigGroupMem, Choices are:\n"
        "    (oaVarDataAppDef_oaFigGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaFigGroupMem_tp_dealloc(PyoaVarDataAppDef_oaFigGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFigGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaFigGroupMem value;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaVarDataAppDef_oaFigGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaFigGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaFigGroupMem v1;
    PyParamoaVarDataAppDef_oaFigGroupMem v2;
    int convert_status1=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaFigGroupMem_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaFigGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaFigGroupMem_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaFigGroupMem**) ((PyoaVarDataAppDef_oaFigGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaFigGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(oaVarDataAppDef_oaFigGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaFigGroupMem* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaVarDataAppDef_oaFigGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaFigGroupMemObject* self = (PyoaVarDataAppDef_oaFigGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(oaVarDataAppDef_oaFigGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaFigGroupMem_Type.tp_alloc(&PyoaVarDataAppDef_oaFigGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaFigGroupMemObject* self = (PyoaVarDataAppDef_oaFigGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_get_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaFigGroupMem,[oaByte])\n"
"    Calls: void get(const oaFigGroupMem* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaFigGroupMem,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupMemObject* self=(PyoaVarDataAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupMemObject* self=(PyoaVarDataAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupMemObject* self=(PyoaVarDataAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_getSize_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: getSize\n"
"  Paramegers: (oaFigGroupMem)\n"
"    Calls: oaUInt4 getSize(const oaFigGroupMem* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaFigGroupMem,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupMemObject* self=(PyoaVarDataAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_set_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaFigGroupMem,[oaByte])\n"
"    Calls: void set(oaFigGroupMem* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaFigGroupMem,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFigGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFigGroupMemObject* self=(PyoaVarDataAppDef_oaFigGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroupMem p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroupMem_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_isNull_doc[] =
"Class: oaVarDataAppDef_oaFigGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaFigGroupMem data;
    int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaFigGroupMem_assign_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaFigGroupMem data;
  int convert_status=PyoaVarDataAppDef_oaFigGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaFigGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaFigGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaFigGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_get,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_getDefault,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_getSize,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_set,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_tp_assign,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaFigGroupMem)\n"
"    Calls: (const oaVarDataAppDef_oaFigGroupMem&)\n"
"    Signature: oaVarDataAppDef_oaFigGroupMem||cref-oaVarDataAppDef_oaFigGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaFigGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaFigGroupMem",
    sizeof(PyoaVarDataAppDef_oaFigGroupMemObject),
    0,
    (destructor)oaVarDataAppDef_oaFigGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaFigGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaFigGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaFigGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaFigGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaFigGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_static_find_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::find(p1.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFigGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFigGroupMem_static_get_doc[] = 
"Class: oaVarDataAppDef_oaFigGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFigGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFigGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaFigGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::get(p1.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFigGroupMemp result= (oaVarDataAppDef_oaFigGroupMem::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaFigGroupMem_FromoaVarDataAppDef_oaFigGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFigGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaFigGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_static_find,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaFigGroupMem_static_get,METH_VARARGS,oaVarDataAppDef_oaFigGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaFigGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaFigGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaFigGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaFigGroupMem",
           (PyObject*)(&PyoaVarDataAppDef_oaFigGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaFigGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaFigGroupMem_Type.tp_dict;
    for(method=oaVarDataAppDef_oaFigGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaFrame
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFrame_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaFrame_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaFrameObject* self = (PyoaVarDataAppDef_oaFrameObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaFrame)
    {
        PyParamoaVarDataAppDef_oaFrame p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaFrame_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaFrame, Choices are:\n"
        "    (oaVarDataAppDef_oaFrame)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaFrame_tp_dealloc(PyoaVarDataAppDef_oaFrameObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFrame_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaFrame value;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaVarDataAppDef_oaFrame::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaFrame_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaFrame v1;
    PyParamoaVarDataAppDef_oaFrame v2;
    int convert_status1=PyoaVarDataAppDef_oaFrame_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaFrame_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaFrame_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaFrame* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaFrame_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaFrame**) ((PyoaVarDataAppDef_oaFrameObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaFrame Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(oaVarDataAppDef_oaFrame** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaFrame* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaFrame_Type.tp_alloc(&PyoaVarDataAppDef_oaFrame_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaFrameObject* self = (PyoaVarDataAppDef_oaFrameObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(oaVarDataAppDef_oaFrame* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaFrame_Type.tp_alloc(&PyoaVarDataAppDef_oaFrame_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaFrameObject* self = (PyoaVarDataAppDef_oaFrameObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_get_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaFrame,[oaByte])\n"
"    Calls: void get(const oaFrame* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaFrame,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrame data;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameObject* self=(PyoaVarDataAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrame data;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameObject* self=(PyoaVarDataAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrame data;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameObject* self=(PyoaVarDataAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_getSize_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: getSize\n"
"  Paramegers: (oaFrame)\n"
"    Calls: oaUInt4 getSize(const oaFrame* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaFrame,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrame data;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameObject* self=(PyoaVarDataAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrame_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_set_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaFrame,[oaByte])\n"
"    Calls: void set(oaFrame* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaFrame,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrame data;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameObject* self=(PyoaVarDataAppDef_oaFrameObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrame p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrame_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_isNull_doc[] =
"Class: oaVarDataAppDef_oaFrame, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaFrame data;
    int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaFrame_assign_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaFrame data;
  int convert_status=PyoaVarDataAppDef_oaFrame_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaFrame p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaFrame_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaFrame_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaFrame_get,METH_VARARGS,oaVarDataAppDef_oaFrame_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaFrame_getDefault,METH_VARARGS,oaVarDataAppDef_oaFrame_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaFrame_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaFrame_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaFrame_getSize,METH_VARARGS,oaVarDataAppDef_oaFrame_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaFrame_set,METH_VARARGS,oaVarDataAppDef_oaFrame_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaFrame_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaFrame_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaFrame_tp_assign,METH_VARARGS,oaVarDataAppDef_oaFrame_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_doc[] = 
"Class: oaVarDataAppDef_oaFrame\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaFrame)\n"
"    Calls: (const oaVarDataAppDef_oaFrame&)\n"
"    Signature: oaVarDataAppDef_oaFrame||cref-oaVarDataAppDef_oaFrame,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaFrame_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaFrame",
    sizeof(PyoaVarDataAppDef_oaFrameObject),
    0,
    (destructor)oaVarDataAppDef_oaFrame_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaFrame_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaFrame_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaFrame_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaFrame_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaFrame_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_static_find_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFrame* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFrame|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFrame* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::find(p1.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFrame, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrame_static_get_doc[] = 
"Class: oaVarDataAppDef_oaFrame, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFrame* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrame|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrame* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrame|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrame* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrame|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrame* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrame|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaFrame_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::get(p1.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFramep result= (oaVarDataAppDef_oaFrame::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaFrame_FromoaVarDataAppDef_oaFrame(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFrame, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaFrame_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaFrame_static_find,METH_VARARGS,oaVarDataAppDef_oaFrame_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaFrame_static_get,METH_VARARGS,oaVarDataAppDef_oaFrame_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaFrame_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaFrame_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaFrame\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaFrame",
           (PyObject*)(&PyoaVarDataAppDef_oaFrame_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaFrame\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaFrame_Type.tp_dict;
    for(method=oaVarDataAppDef_oaFrame_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaFrameInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFrameInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaFrameInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaFrameInstObject* self = (PyoaVarDataAppDef_oaFrameInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaFrameInst)
    {
        PyParamoaVarDataAppDef_oaFrameInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaFrameInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaFrameInst, Choices are:\n"
        "    (oaVarDataAppDef_oaFrameInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaFrameInst_tp_dealloc(PyoaVarDataAppDef_oaFrameInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaFrameInst_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaFrameInst value;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaVarDataAppDef_oaFrameInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaFrameInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaFrameInst v1;
    PyParamoaVarDataAppDef_oaFrameInst v2;
    int convert_status1=PyoaVarDataAppDef_oaFrameInst_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaFrameInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaFrameInst_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaFrameInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaFrameInst_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaFrameInst**) ((PyoaVarDataAppDef_oaFrameInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaFrameInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(oaVarDataAppDef_oaFrameInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaFrameInst* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaFrameInst_Type.tp_alloc(&PyoaVarDataAppDef_oaFrameInst_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaFrameInstObject* self = (PyoaVarDataAppDef_oaFrameInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(oaVarDataAppDef_oaFrameInst* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaFrameInst_Type.tp_alloc(&PyoaVarDataAppDef_oaFrameInst_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaFrameInstObject* self = (PyoaVarDataAppDef_oaFrameInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_get_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaFrameInst,[oaByte])\n"
"    Calls: void get(const oaFrameInst* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaFrameInst,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrameInst data;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameInstObject* self=(PyoaVarDataAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrameInst data;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameInstObject* self=(PyoaVarDataAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrameInst data;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameInstObject* self=(PyoaVarDataAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_getSize_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: getSize\n"
"  Paramegers: (oaFrameInst)\n"
"    Calls: oaUInt4 getSize(const oaFrameInst* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaFrameInst,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrameInst data;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameInstObject* self=(PyoaVarDataAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFrameInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_set_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaFrameInst,[oaByte])\n"
"    Calls: void set(oaFrameInst* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaFrameInst,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaFrameInst data;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaFrameInstObject* self=(PyoaVarDataAppDef_oaFrameInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFrameInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFrameInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_isNull_doc[] =
"Class: oaVarDataAppDef_oaFrameInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaFrameInst data;
    int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaFrameInst_assign_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaFrameInst data;
  int convert_status=PyoaVarDataAppDef_oaFrameInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaFrameInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaFrameInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaFrameInst_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaFrameInst_get,METH_VARARGS,oaVarDataAppDef_oaFrameInst_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaFrameInst_getDefault,METH_VARARGS,oaVarDataAppDef_oaFrameInst_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaFrameInst_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaFrameInst_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaFrameInst_getSize,METH_VARARGS,oaVarDataAppDef_oaFrameInst_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaFrameInst_set,METH_VARARGS,oaVarDataAppDef_oaFrameInst_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaFrameInst_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaFrameInst_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaFrameInst_tp_assign,METH_VARARGS,oaVarDataAppDef_oaFrameInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaFrameInst)\n"
"    Calls: (const oaVarDataAppDef_oaFrameInst&)\n"
"    Signature: oaVarDataAppDef_oaFrameInst||cref-oaVarDataAppDef_oaFrameInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaFrameInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaFrameInst",
    sizeof(PyoaVarDataAppDef_oaFrameInstObject),
    0,
    (destructor)oaVarDataAppDef_oaFrameInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaFrameInst_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaFrameInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaFrameInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaFrameInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaFrameInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_static_find_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::find(p1.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFrameInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaFrameInst_static_get_doc[] = 
"Class: oaVarDataAppDef_oaFrameInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaFrameInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaFrameInst|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaFrameInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::get(p1.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaFrameInstp result= (oaVarDataAppDef_oaFrameInst::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaFrameInst_FromoaVarDataAppDef_oaFrameInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaFrameInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaFrameInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaFrameInst_static_find,METH_VARARGS,oaVarDataAppDef_oaFrameInst_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaFrameInst_static_get,METH_VARARGS,oaVarDataAppDef_oaFrameInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaFrameInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaFrameInst_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaFrameInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaFrameInst",
           (PyObject*)(&PyoaVarDataAppDef_oaFrameInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaFrameInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaFrameInst_Type.tp_dict;
    for(method=oaVarDataAppDef_oaFrameInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaGCellPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGCellPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaGCellPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaGCellPatternObject* self = (PyoaVarDataAppDef_oaGCellPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaGCellPattern)
    {
        PyParamoaVarDataAppDef_oaGCellPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaGCellPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaGCellPattern, Choices are:\n"
        "    (oaVarDataAppDef_oaGCellPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaGCellPattern_tp_dealloc(PyoaVarDataAppDef_oaGCellPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGCellPattern_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaGCellPattern value;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaVarDataAppDef_oaGCellPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaGCellPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaGCellPattern v1;
    PyParamoaVarDataAppDef_oaGCellPattern v2;
    int convert_status1=PyoaVarDataAppDef_oaGCellPattern_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaGCellPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaGCellPattern_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaGCellPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaGCellPattern_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaGCellPattern**) ((PyoaVarDataAppDef_oaGCellPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaGCellPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(oaVarDataAppDef_oaGCellPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaGCellPattern* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaGCellPattern_Type.tp_alloc(&PyoaVarDataAppDef_oaGCellPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaGCellPatternObject* self = (PyoaVarDataAppDef_oaGCellPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(oaVarDataAppDef_oaGCellPattern* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaGCellPattern_Type.tp_alloc(&PyoaVarDataAppDef_oaGCellPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaGCellPatternObject* self = (PyoaVarDataAppDef_oaGCellPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_get_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaGCellPattern,[oaByte])\n"
"    Calls: void get(const oaGCellPattern* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaGCellPattern,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGCellPattern data;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGCellPatternObject* self=(PyoaVarDataAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGCellPattern data;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGCellPatternObject* self=(PyoaVarDataAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGCellPattern data;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGCellPatternObject* self=(PyoaVarDataAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_getSize_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: getSize\n"
"  Paramegers: (oaGCellPattern)\n"
"    Calls: oaUInt4 getSize(const oaGCellPattern* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaGCellPattern,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGCellPattern data;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGCellPatternObject* self=(PyoaVarDataAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGCellPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_set_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaGCellPattern,[oaByte])\n"
"    Calls: void set(oaGCellPattern* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaGCellPattern,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGCellPattern data;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGCellPatternObject* self=(PyoaVarDataAppDef_oaGCellPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGCellPattern p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGCellPattern_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_isNull_doc[] =
"Class: oaVarDataAppDef_oaGCellPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaGCellPattern data;
    int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaGCellPattern_assign_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaGCellPattern data;
  int convert_status=PyoaVarDataAppDef_oaGCellPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaGCellPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaGCellPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaGCellPattern_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaGCellPattern_get,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaGCellPattern_getDefault,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaGCellPattern_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaGCellPattern_getSize,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaGCellPattern_set,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaGCellPattern_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaGCellPattern_tp_assign,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaGCellPattern)\n"
"    Calls: (const oaVarDataAppDef_oaGCellPattern&)\n"
"    Signature: oaVarDataAppDef_oaGCellPattern||cref-oaVarDataAppDef_oaGCellPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaGCellPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaGCellPattern",
    sizeof(PyoaVarDataAppDef_oaGCellPatternObject),
    0,
    (destructor)oaVarDataAppDef_oaGCellPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaGCellPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaGCellPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaGCellPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaGCellPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaGCellPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_static_find_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::find(p1.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGCellPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGCellPattern_static_get_doc[] = 
"Class: oaVarDataAppDef_oaGCellPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGCellPattern* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGCellPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaGCellPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::get(p1.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGCellPatternp result= (oaVarDataAppDef_oaGCellPattern::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaGCellPattern_FromoaVarDataAppDef_oaGCellPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGCellPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaGCellPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaGCellPattern_static_find,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaGCellPattern_static_get,METH_VARARGS,oaVarDataAppDef_oaGCellPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaGCellPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaGCellPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaGCellPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaGCellPattern",
           (PyObject*)(&PyoaVarDataAppDef_oaGCellPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaGCellPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaGCellPattern_Type.tp_dict;
    for(method=oaVarDataAppDef_oaGCellPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaGroupObject* self = (PyoaVarDataAppDef_oaGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaGroup)
    {
        PyParamoaVarDataAppDef_oaGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaGroup, Choices are:\n"
        "    (oaVarDataAppDef_oaGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaGroup_tp_dealloc(PyoaVarDataAppDef_oaGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGroup_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaGroup value;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaVarDataAppDef_oaGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaGroup v1;
    PyParamoaVarDataAppDef_oaGroup v2;
    int convert_status1=PyoaVarDataAppDef_oaGroup_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaGroup_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaGroup_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaGroup**) ((PyoaVarDataAppDef_oaGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(oaVarDataAppDef_oaGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaGroup* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaGroup_Type.tp_alloc(&PyoaVarDataAppDef_oaGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaGroupObject* self = (PyoaVarDataAppDef_oaGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(oaVarDataAppDef_oaGroup* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaGroup_Type.tp_alloc(&PyoaVarDataAppDef_oaGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaGroupObject* self = (PyoaVarDataAppDef_oaGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_get_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaGroup,[oaByte])\n"
"    Calls: void get(const oaGroup* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaGroup,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroup data;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupObject* self=(PyoaVarDataAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroup data;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupObject* self=(PyoaVarDataAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroup data;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupObject* self=(PyoaVarDataAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_getSize_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: getSize\n"
"  Paramegers: (oaGroup)\n"
"    Calls: oaUInt4 getSize(const oaGroup* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaGroup,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroup data;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupObject* self=(PyoaVarDataAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_set_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaGroup,[oaByte])\n"
"    Calls: void set(oaGroup* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaGroup,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroup data;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupObject* self=(PyoaVarDataAppDef_oaGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroup p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroup_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_isNull_doc[] =
"Class: oaVarDataAppDef_oaGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaGroup data;
    int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaGroup_assign_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaGroup data;
  int convert_status=PyoaVarDataAppDef_oaGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaGroup_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaGroup_get,METH_VARARGS,oaVarDataAppDef_oaGroup_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaGroup_getDefault,METH_VARARGS,oaVarDataAppDef_oaGroup_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaGroup_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaGroup_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaGroup_getSize,METH_VARARGS,oaVarDataAppDef_oaGroup_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaGroup_set,METH_VARARGS,oaVarDataAppDef_oaGroup_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaGroup_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaGroup_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaGroup_tp_assign,METH_VARARGS,oaVarDataAppDef_oaGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_doc[] = 
"Class: oaVarDataAppDef_oaGroup\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaGroup)\n"
"    Calls: (const oaVarDataAppDef_oaGroup&)\n"
"    Signature: oaVarDataAppDef_oaGroup||cref-oaVarDataAppDef_oaGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaGroup",
    sizeof(PyoaVarDataAppDef_oaGroupObject),
    0,
    (destructor)oaVarDataAppDef_oaGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_static_find_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGroup|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::find(p1.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroup_static_get_doc[] = 
"Class: oaVarDataAppDef_oaGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroup* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroup* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroup|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroup* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::get(p1.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupp result= (oaVarDataAppDef_oaGroup::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaGroup_FromoaVarDataAppDef_oaGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaGroup_static_find,METH_VARARGS,oaVarDataAppDef_oaGroup_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaGroup_static_get,METH_VARARGS,oaVarDataAppDef_oaGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaGroup",
           (PyObject*)(&PyoaVarDataAppDef_oaGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaGroup_Type.tp_dict;
    for(method=oaVarDataAppDef_oaGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaGroupMember
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGroupMember_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaGroupMember_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaGroupMemberObject* self = (PyoaVarDataAppDef_oaGroupMemberObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaGroupMember)
    {
        PyParamoaVarDataAppDef_oaGroupMember p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaGroupMember_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaGroupMember, Choices are:\n"
        "    (oaVarDataAppDef_oaGroupMember)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaGroupMember_tp_dealloc(PyoaVarDataAppDef_oaGroupMemberObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGroupMember_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaGroupMember value;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaVarDataAppDef_oaGroupMember::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaGroupMember_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaGroupMember v1;
    PyParamoaVarDataAppDef_oaGroupMember v2;
    int convert_status1=PyoaVarDataAppDef_oaGroupMember_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaGroupMember_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaGroupMember_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaGroupMember* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaGroupMember_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaGroupMember**) ((PyoaVarDataAppDef_oaGroupMemberObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaGroupMember Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(oaVarDataAppDef_oaGroupMember** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaGroupMember* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaGroupMember_Type.tp_alloc(&PyoaVarDataAppDef_oaGroupMember_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaGroupMemberObject* self = (PyoaVarDataAppDef_oaGroupMemberObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(oaVarDataAppDef_oaGroupMember* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaGroupMember_Type.tp_alloc(&PyoaVarDataAppDef_oaGroupMember_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaGroupMemberObject* self = (PyoaVarDataAppDef_oaGroupMemberObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_get_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaGroupMember,[oaByte])\n"
"    Calls: void get(const oaGroupMember* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaGroupMember,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroupMember data;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupMemberObject* self=(PyoaVarDataAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroupMember data;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupMemberObject* self=(PyoaVarDataAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroupMember data;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupMemberObject* self=(PyoaVarDataAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_getSize_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: getSize\n"
"  Paramegers: (oaGroupMember)\n"
"    Calls: oaUInt4 getSize(const oaGroupMember* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaGroupMember,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroupMember data;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupMemberObject* self=(PyoaVarDataAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGroupMember_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_set_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaGroupMember,[oaByte])\n"
"    Calls: void set(oaGroupMember* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaGroupMember,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGroupMember data;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGroupMemberObject* self=(PyoaVarDataAppDef_oaGroupMemberObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGroupMember p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGroupMember_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_isNull_doc[] =
"Class: oaVarDataAppDef_oaGroupMember, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaGroupMember data;
    int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaGroupMember_assign_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaGroupMember data;
  int convert_status=PyoaVarDataAppDef_oaGroupMember_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaGroupMember p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaGroupMember_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaGroupMember_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaGroupMember_get,METH_VARARGS,oaVarDataAppDef_oaGroupMember_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaGroupMember_getDefault,METH_VARARGS,oaVarDataAppDef_oaGroupMember_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaGroupMember_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaGroupMember_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaGroupMember_getSize,METH_VARARGS,oaVarDataAppDef_oaGroupMember_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaGroupMember_set,METH_VARARGS,oaVarDataAppDef_oaGroupMember_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaGroupMember_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaGroupMember_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaGroupMember_tp_assign,METH_VARARGS,oaVarDataAppDef_oaGroupMember_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaGroupMember)\n"
"    Calls: (const oaVarDataAppDef_oaGroupMember&)\n"
"    Signature: oaVarDataAppDef_oaGroupMember||cref-oaVarDataAppDef_oaGroupMember,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaGroupMember_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaGroupMember",
    sizeof(PyoaVarDataAppDef_oaGroupMemberObject),
    0,
    (destructor)oaVarDataAppDef_oaGroupMember_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaGroupMember_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaGroupMember_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaGroupMember_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaGroupMember_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaGroupMember_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_static_find_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::find(p1.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGroupMember, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGroupMember_static_get_doc[] = 
"Class: oaVarDataAppDef_oaGroupMember, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGroupMember* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGroupMember|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaGroupMember_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::get(p1.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGroupMemberp result= (oaVarDataAppDef_oaGroupMember::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaGroupMember_FromoaVarDataAppDef_oaGroupMember(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGroupMember, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaGroupMember_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaGroupMember_static_find,METH_VARARGS,oaVarDataAppDef_oaGroupMember_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaGroupMember_static_get,METH_VARARGS,oaVarDataAppDef_oaGroupMember_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaGroupMember_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaGroupMember_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaGroupMember\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaGroupMember",
           (PyObject*)(&PyoaVarDataAppDef_oaGroupMember_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaGroupMember\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaGroupMember_Type.tp_dict;
    for(method=oaVarDataAppDef_oaGroupMember_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaGuide
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGuide_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaGuide_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaGuideObject* self = (PyoaVarDataAppDef_oaGuideObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaGuide)
    {
        PyParamoaVarDataAppDef_oaGuide p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaGuide_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaGuide, Choices are:\n"
        "    (oaVarDataAppDef_oaGuide)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaGuide_tp_dealloc(PyoaVarDataAppDef_oaGuideObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaGuide_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaGuide value;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaVarDataAppDef_oaGuide::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaGuide_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaGuide v1;
    PyParamoaVarDataAppDef_oaGuide v2;
    int convert_status1=PyoaVarDataAppDef_oaGuide_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaGuide_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaGuide_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaGuide* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaGuide_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaGuide**) ((PyoaVarDataAppDef_oaGuideObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaGuide Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(oaVarDataAppDef_oaGuide** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaGuide* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaGuide_Type.tp_alloc(&PyoaVarDataAppDef_oaGuide_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaGuideObject* self = (PyoaVarDataAppDef_oaGuideObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(oaVarDataAppDef_oaGuide* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaGuide_Type.tp_alloc(&PyoaVarDataAppDef_oaGuide_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaGuideObject* self = (PyoaVarDataAppDef_oaGuideObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_get_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaGuide,[oaByte])\n"
"    Calls: void get(const oaGuide* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaGuide,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGuide data;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGuideObject* self=(PyoaVarDataAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGuide data;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGuideObject* self=(PyoaVarDataAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGuide data;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGuideObject* self=(PyoaVarDataAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_getSize_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: getSize\n"
"  Paramegers: (oaGuide)\n"
"    Calls: oaUInt4 getSize(const oaGuide* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaGuide,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGuide data;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGuideObject* self=(PyoaVarDataAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaGuide_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_set_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaGuide,[oaByte])\n"
"    Calls: void set(oaGuide* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaGuide,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaGuide data;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaGuideObject* self=(PyoaVarDataAppDef_oaGuideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaGuide p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaGuide_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_isNull_doc[] =
"Class: oaVarDataAppDef_oaGuide, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaGuide data;
    int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaGuide_assign_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaGuide data;
  int convert_status=PyoaVarDataAppDef_oaGuide_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaGuide p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaGuide_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaGuide_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaGuide_get,METH_VARARGS,oaVarDataAppDef_oaGuide_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaGuide_getDefault,METH_VARARGS,oaVarDataAppDef_oaGuide_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaGuide_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaGuide_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaGuide_getSize,METH_VARARGS,oaVarDataAppDef_oaGuide_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaGuide_set,METH_VARARGS,oaVarDataAppDef_oaGuide_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaGuide_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaGuide_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaGuide_tp_assign,METH_VARARGS,oaVarDataAppDef_oaGuide_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_doc[] = 
"Class: oaVarDataAppDef_oaGuide\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaGuide)\n"
"    Calls: (const oaVarDataAppDef_oaGuide&)\n"
"    Signature: oaVarDataAppDef_oaGuide||cref-oaVarDataAppDef_oaGuide,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaGuide_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaGuide",
    sizeof(PyoaVarDataAppDef_oaGuideObject),
    0,
    (destructor)oaVarDataAppDef_oaGuide_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaGuide_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaGuide_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaGuide_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaGuide_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaGuide_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_static_find_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGuide* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGuide|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGuide* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::find(p1.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGuide, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaGuide_static_get_doc[] = 
"Class: oaVarDataAppDef_oaGuide, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaGuide* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGuide|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGuide* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGuide|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGuide* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGuide|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaGuide* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaGuide|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaGuide_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::get(p1.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaGuidep result= (oaVarDataAppDef_oaGuide::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaGuide_FromoaVarDataAppDef_oaGuide(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaGuide, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaGuide_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaGuide_static_find,METH_VARARGS,oaVarDataAppDef_oaGuide_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaGuide_static_get,METH_VARARGS,oaVarDataAppDef_oaGuide_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaGuide_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaGuide_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaGuide\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaGuide",
           (PyObject*)(&PyoaVarDataAppDef_oaGuide_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaGuide\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaGuide_Type.tp_dict;
    for(method=oaVarDataAppDef_oaGuide_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaImage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaImage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaImage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaImageObject* self = (PyoaVarDataAppDef_oaImageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaImage)
    {
        PyParamoaVarDataAppDef_oaImage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaImage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaImage, Choices are:\n"
        "    (oaVarDataAppDef_oaImage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaImage_tp_dealloc(PyoaVarDataAppDef_oaImageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaImage_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaImage value;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaVarDataAppDef_oaImage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaImage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaImage v1;
    PyParamoaVarDataAppDef_oaImage v2;
    int convert_status1=PyoaVarDataAppDef_oaImage_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaImage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaImage_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaImage* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaImage_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaImage**) ((PyoaVarDataAppDef_oaImageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaImage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(oaVarDataAppDef_oaImage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaImage* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaImage_Type.tp_alloc(&PyoaVarDataAppDef_oaImage_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaImageObject* self = (PyoaVarDataAppDef_oaImageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(oaVarDataAppDef_oaImage* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaImage_Type.tp_alloc(&PyoaVarDataAppDef_oaImage_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaImageObject* self = (PyoaVarDataAppDef_oaImageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_get_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: get\n"
"  Paramegers: (oaImage,[oaByte])\n"
"    Calls: void get(const oaImage* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaImage,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaImage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaImage data;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaImageObject* self=(PyoaVarDataAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaImage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaImage data;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaImageObject* self=(PyoaVarDataAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaImage_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaImage data;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaImageObject* self=(PyoaVarDataAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_getSize_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: getSize\n"
"  Paramegers: (oaImage)\n"
"    Calls: oaUInt4 getSize(const oaImage* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaImage,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaImage_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaImage data;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaImageObject* self=(PyoaVarDataAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaImage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_set_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: set\n"
"  Paramegers: (oaImage,[oaByte])\n"
"    Calls: void set(oaImage* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaImage,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaImage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaImage data;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaImageObject* self=(PyoaVarDataAppDef_oaImageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaImage p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaImage_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_isNull_doc[] =
"Class: oaVarDataAppDef_oaImage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaImage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaImage data;
    int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaImage_assign_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaImage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaImage data;
  int convert_status=PyoaVarDataAppDef_oaImage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaImage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaImage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaImage_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaImage_get,METH_VARARGS,oaVarDataAppDef_oaImage_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaImage_getDefault,METH_VARARGS,oaVarDataAppDef_oaImage_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaImage_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaImage_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaImage_getSize,METH_VARARGS,oaVarDataAppDef_oaImage_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaImage_set,METH_VARARGS,oaVarDataAppDef_oaImage_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaImage_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaImage_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaImage_tp_assign,METH_VARARGS,oaVarDataAppDef_oaImage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_doc[] = 
"Class: oaVarDataAppDef_oaImage\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaImage)\n"
"    Calls: (const oaVarDataAppDef_oaImage&)\n"
"    Signature: oaVarDataAppDef_oaImage||cref-oaVarDataAppDef_oaImage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaImage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaImage",
    sizeof(PyoaVarDataAppDef_oaImageObject),
    0,
    (destructor)oaVarDataAppDef_oaImage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaImage_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaImage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaImage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaImage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaImage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_static_find_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaImage* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaImage|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaImage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaImage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::find(p1.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaImage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaImage_static_get_doc[] = 
"Class: oaVarDataAppDef_oaImage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaImage* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaImage|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaImage* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaImage|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaImage* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaImage|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaImage* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaImage|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaImage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::get(p1.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaImagep result= (oaVarDataAppDef_oaImage::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaImage_FromoaVarDataAppDef_oaImage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaImage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaImage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaImage_static_find,METH_VARARGS,oaVarDataAppDef_oaImage_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaImage_static_get,METH_VARARGS,oaVarDataAppDef_oaImage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaImage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaImage_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaImage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaImage",
           (PyObject*)(&PyoaVarDataAppDef_oaImage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaImage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaImage_Type.tp_dict;
    for(method=oaVarDataAppDef_oaImage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVarDataAppDef_oaInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVarDataAppDef_oaInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVarDataAppDef_oaInstObject* self = (PyoaVarDataAppDef_oaInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVarDataAppDef_oaInst)
    {
        PyParamoaVarDataAppDef_oaInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVarDataAppDef_oaInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVarDataAppDef_oaInst, Choices are:\n"
        "    (oaVarDataAppDef_oaInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVarDataAppDef_oaInst_tp_dealloc(PyoaVarDataAppDef_oaInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVarDataAppDef_oaInst_tp_repr(PyObject *ob)
{
    PyParamoaVarDataAppDef_oaInst value;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaVarDataAppDef_oaInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVarDataAppDef_oaInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVarDataAppDef_oaInst v1;
    PyParamoaVarDataAppDef_oaInst v2;
    int convert_status1=PyoaVarDataAppDef_oaInst_Convert(ob1,&v1);
    int convert_status2=PyoaVarDataAppDef_oaInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVarDataAppDef_oaInst_Convert(PyObject* ob,PyParamoaVarDataAppDef_oaInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaVarDataAppDef_oaInst_Check(ob)) {
        result->SetData( (oaVarDataAppDef_oaInst**) ((PyoaVarDataAppDef_oaInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVarDataAppDef_oaInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(oaVarDataAppDef_oaInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaVarDataAppDef_oaInst* data=*value;
        PyObject* bself = PyoaVarDataAppDef_oaInst_Type.tp_alloc(&PyoaVarDataAppDef_oaInst_Type,0);
        if (bself == NULL) return bself;
        PyoaVarDataAppDef_oaInstObject* self = (PyoaVarDataAppDef_oaInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(oaVarDataAppDef_oaInst* data)
{
    if (data) {
       PyObject* bself = PyoaVarDataAppDef_oaInst_Type.tp_alloc(&PyoaVarDataAppDef_oaInst_Type,0);
       if (bself == NULL) return bself;
       PyoaVarDataAppDef_oaInstObject* self = (PyoaVarDataAppDef_oaInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_get_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: get\n"
"  Paramegers: (oaInst,[oaByte])\n"
"    Calls: void get(const oaInst* object,oaByte* value)\n"
"    Signature: get|void-void|cptr-oaInst,ptr-oaByte,\n"
"    This function returns the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaInst data;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaInstObject* self=(PyoaVarDataAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!(data.Data()->getSize(p1.Data())==p2.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match object data");
            return NULL;
        }
        data.DataCall()->get(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_getDefault_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: getDefault\n"
"  Paramegers: ([oaByte])\n"
"    Calls: void getDefault(oaByte* value) const\n"
"    Signature: getDefault|void-void|ptr-oaByte,\n"
"    This function fills out the given byte array with the default value for this extension. The byte array should be allocated before calling this function.\n"
"    value\n"
"    The byte array to be filled out with the default value\n"
;

static PyObject*
oaVarDataAppDef_oaInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaInst data;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaInstObject* self=(PyoaVarDataAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaByte_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaByte_Array_Convert,&p1)) {
        if (!(data.Data()->getDefaultSize()==p1.Len())) {
            PyErr_SetString(PyExc_TypeError,
                "number bytes does not match default size");
            return NULL;
        }
        data.DataCall()->getDefault(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_getDefaultSize_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: getDefaultSize\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getDefaultSize() const\n"
"    Signature: getDefaultSize|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the default size for this extension in bytes.\n"
;

static PyObject*
oaVarDataAppDef_oaInst_getDefaultSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaInst data;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaInstObject* self=(PyoaVarDataAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getDefaultSize());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_getSize_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: getSize\n"
"  Paramegers: (oaInst)\n"
"    Calls: oaUInt4 getSize(const oaInst* object)\n"
"    Signature: getSize|simple-oaUInt4|cptr-oaInst,\n"
"    This function returns the size of the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaInst_getSize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaInst data;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaInstObject* self=(PyoaVarDataAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (data.DataCall()->getSize(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_set_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: set\n"
"  Paramegers: (oaInst,[oaByte])\n"
"    Calls: void set(oaInst* object,const oaByte* value)\n"
"    Signature: set|void-void|ptr-oaInst,simple-oaUInt4,cptr-oaByte,\n"
"    This function sets the value of this data extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaVarDataAppDef_oaInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVarDataAppDef_oaInst data;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVarDataAppDef_oaInstObject* self=(PyoaVarDataAppDef_oaInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaInst p1;
    PyParamoaByte_Array p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaInst_Convert,&p1,
          &PyoaByte_Array_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Len(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_isNull_doc[] =
"Class: oaVarDataAppDef_oaInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaVarDataAppDef_oaInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaVarDataAppDef_oaInst data;
    int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaVarDataAppDef_oaInst_assign_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVarDataAppDef_oaInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVarDataAppDef_oaInst data;
  int convert_status=PyoaVarDataAppDef_oaInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVarDataAppDef_oaInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVarDataAppDef_oaInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVarDataAppDef_oaInst_methodlist[] = {
    {"get",(PyCFunction)oaVarDataAppDef_oaInst_get,METH_VARARGS,oaVarDataAppDef_oaInst_get_doc},
    {"getDefault",(PyCFunction)oaVarDataAppDef_oaInst_getDefault,METH_VARARGS,oaVarDataAppDef_oaInst_getDefault_doc},
    {"getDefaultSize",(PyCFunction)oaVarDataAppDef_oaInst_getDefaultSize,METH_VARARGS,oaVarDataAppDef_oaInst_getDefaultSize_doc},
    {"getSize",(PyCFunction)oaVarDataAppDef_oaInst_getSize,METH_VARARGS,oaVarDataAppDef_oaInst_getSize_doc},
    {"set",(PyCFunction)oaVarDataAppDef_oaInst_set,METH_VARARGS,oaVarDataAppDef_oaInst_set_doc},
    {"isNull",(PyCFunction)oaVarDataAppDef_oaInst_tp_isNull,METH_VARARGS,oaVarDataAppDef_oaInst_isNull_doc},
    {"assign",(PyCFunction)oaVarDataAppDef_oaInst_tp_assign,METH_VARARGS,oaVarDataAppDef_oaInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_doc[] = 
"Class: oaVarDataAppDef_oaInst\n"
"  The oaVarDataAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  When the objects are created, a data field is added to each object of the specified dataType. Applications can use the new data field for whatever purpose is necessary.\n"
"  This type of extension is useful because it allows variable-sized data for each object being extended. This is similar to the oaDataAppDef class, but more general because the data size can differ for each object. (There is a minor speed and size penalty for this additional flexibility.) The default value for this extension is zero bytes.\n"
"  Note: Because the type of data is unknown to OpenAccess, it is unmanaged. This means the contents are not byte-swapped.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaVarDataAppDef_oaInst)\n"
"    Calls: (const oaVarDataAppDef_oaInst&)\n"
"    Signature: oaVarDataAppDef_oaInst||cref-oaVarDataAppDef_oaInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVarDataAppDef_oaInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVarDataAppDef_oaInst",
    sizeof(PyoaVarDataAppDef_oaInstObject),
    0,
    (destructor)oaVarDataAppDef_oaInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVarDataAppDef_oaInst_tp_compare,	/* tp_compare */
    (reprfunc)oaVarDataAppDef_oaInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVarDataAppDef_oaInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVarDataAppDef_oaInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVarDataAppDef_oaInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_static_find_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaInst|cref-oaString,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaVarDataAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaVarDataAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaVarDataAppDef_oaInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::find(p1.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::find(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVarDataAppDef_oaInst_static_get_doc[] = 
"Class: oaVarDataAppDef_oaInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVarDataAppDef_oaInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaInst* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaInst* get(const oaString& name,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaInst|cref-oaString,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name .\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaVarDataAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
"    Calls: oaVarDataAppDef_oaInst* get(const oaString& name,const oaAppObjectDef* objDef,const oaByte* defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaVarDataAppDef_oaInst|cref-oaString,cptr-oaAppObjectDef,simple-oaUInt4,cptr-oaByte,simple-oaBoolean,\n"
"    This function constructs an oaVarDataAppDef class variable data extension with the specified name for the specified type of object.\n"
"    name\n"
"    The name given to the oaVarDataAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaVarDataAppDef data in the database\n"
"    defSize\n"
"    The default size of the data for this extension\n"
"    defValue\n"
"    The default value for the data for this extension\n"
"    oacAppDefExists\n"
;

static PyObject*
oaVarDataAppDef_oaInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::get(p1.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaByte_Array p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaByte_Array_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::get(p1.Data(),p2.Len(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::get(p1.Data(),p2.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,[oaByte],oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaByte_Array p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaByte_Array_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaVarDataAppDef_oaInstp result= (oaVarDataAppDef_oaInst::get(p1.Data(),p2.Data(),p3.Len(),p3.Data(),p4.Data()));
            return PyoaVarDataAppDef_oaInst_FromoaVarDataAppDef_oaInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaVarDataAppDef_oaInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,[oaByte],oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
        "    (oaString,oaAppObjectDef,[oaByte],oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVarDataAppDef_oaInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaVarDataAppDef_oaInst_static_find,METH_VARARGS,oaVarDataAppDef_oaInst_static_find_doc},
    {"static_get",(PyCFunction)oaVarDataAppDef_oaInst_static_get,METH_VARARGS,oaVarDataAppDef_oaInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVarDataAppDef_oaInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVarDataAppDef_oaInst_Type)<0) {
      printf("** PyType_Ready failed for: oaVarDataAppDef_oaInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVarDataAppDef_oaInst",
           (PyObject*)(&PyoaVarDataAppDef_oaInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVarDataAppDef_oaInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVarDataAppDef_oaInst_Type.tp_dict;
    for(method=oaVarDataAppDef_oaInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

