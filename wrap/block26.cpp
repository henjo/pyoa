
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaRow
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaRow_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaRow_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaRowObject* self = (PyoaInterPointerAppDef_oaRowObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaRow)
    {
        PyParamoaInterPointerAppDef_oaRow p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaRow_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaRow, Choices are:\n"
        "    (oaInterPointerAppDef_oaRow)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaRow_tp_dealloc(PyoaInterPointerAppDef_oaRowObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaRow_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaRow value;
    int convert_status=PyoaInterPointerAppDef_oaRow_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaInterPointerAppDef_oaRow::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaRow_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaRow v1;
    PyParamoaInterPointerAppDef_oaRow v2;
    int convert_status1=PyoaInterPointerAppDef_oaRow_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaRow_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaRow_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaRow* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaRow_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaRow**) ((PyoaInterPointerAppDef_oaRowObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaRow Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(oaInterPointerAppDef_oaRow** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaRow* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaRow_Type.tp_alloc(&PyoaInterPointerAppDef_oaRow_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaRowObject* self = (PyoaInterPointerAppDef_oaRowObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(oaInterPointerAppDef_oaRow* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaRow_Type.tp_alloc(&PyoaInterPointerAppDef_oaRow_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaRowObject* self = (PyoaInterPointerAppDef_oaRowObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRow_get_doc[] = 
"Class: oaInterPointerAppDef_oaRow, Function: get\n"
"  Paramegers: (oaRow)\n"
"    Calls: oaObject* get(const oaRow* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaRow,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaRow_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaRow data;
    int convert_status=PyoaInterPointerAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaRowObject* self=(PyoaInterPointerAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRow_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRow_set_doc[] = 
"Class: oaInterPointerAppDef_oaRow, Function: set\n"
"  Paramegers: (oaRow,oaObject)\n"
"    Calls: void set(oaRow* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaRow,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaRow_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaRow data;
    int convert_status=PyoaInterPointerAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaRowObject* self=(PyoaInterPointerAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRow_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRow_isNull_doc[] =
"Class: oaInterPointerAppDef_oaRow, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaRow_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaRow data;
    int convert_status=PyoaInterPointerAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaRow_assign_doc[] = 
"Class: oaInterPointerAppDef_oaRow, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaRow_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaRow data;
  int convert_status=PyoaInterPointerAppDef_oaRow_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaRow p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaRow_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaRow_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaRow_get,METH_VARARGS,oaInterPointerAppDef_oaRow_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaRow_set,METH_VARARGS,oaInterPointerAppDef_oaRow_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaRow_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaRow_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaRow_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaRow_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRow_doc[] = 
"Class: oaInterPointerAppDef_oaRow\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaRow)\n"
"    Calls: (const oaInterPointerAppDef_oaRow&)\n"
"    Signature: oaInterPointerAppDef_oaRow||cref-oaInterPointerAppDef_oaRow,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaRow_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaRow",
    sizeof(PyoaInterPointerAppDef_oaRowObject),
    0,
    (destructor)oaInterPointerAppDef_oaRow_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaRow_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaRow_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaRow_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaRow_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaRow_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRow_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaRow, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaRow* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaRow|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaRow* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaRow_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaRowp result= (oaInterPointerAppDef_oaRow::find(p1.Data()));
            return PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaRowp result= (oaInterPointerAppDef_oaRow::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaRow, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRow_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaRow, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaRow* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRow|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaRow* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRow|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaRow_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaRowp result= (oaInterPointerAppDef_oaRow::get(p1.Data()));
            return PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaRowp result= (oaInterPointerAppDef_oaRow::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaRowp result= (oaInterPointerAppDef_oaRow::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaRowp result= (oaInterPointerAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaRow_FromoaInterPointerAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaRow, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaRow_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaRow_static_find,METH_VARARGS,oaInterPointerAppDef_oaRow_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaRow_static_get,METH_VARARGS,oaInterPointerAppDef_oaRow_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaRow_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaRow_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaRow\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaRow",
           (PyObject*)(&PyoaInterPointerAppDef_oaRow_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaRow\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaRow_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaRow_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaRowHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaRowHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaRowHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaRowHeaderObject* self = (PyoaInterPointerAppDef_oaRowHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaRowHeader)
    {
        PyParamoaInterPointerAppDef_oaRowHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaRowHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaRowHeader, Choices are:\n"
        "    (oaInterPointerAppDef_oaRowHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaRowHeader_tp_dealloc(PyoaInterPointerAppDef_oaRowHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaRowHeader_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaRowHeader value;
    int convert_status=PyoaInterPointerAppDef_oaRowHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaInterPointerAppDef_oaRowHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaRowHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaRowHeader v1;
    PyParamoaInterPointerAppDef_oaRowHeader v2;
    int convert_status1=PyoaInterPointerAppDef_oaRowHeader_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaRowHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaRowHeader_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaRowHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaRowHeader_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaRowHeader**) ((PyoaInterPointerAppDef_oaRowHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaRowHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(oaInterPointerAppDef_oaRowHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaRowHeader* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaRowHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaRowHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaRowHeaderObject* self = (PyoaInterPointerAppDef_oaRowHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(oaInterPointerAppDef_oaRowHeader* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaRowHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaRowHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaRowHeaderObject* self = (PyoaInterPointerAppDef_oaRowHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRowHeader_get_doc[] = 
"Class: oaInterPointerAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaRowHeader)\n"
"    Calls: oaObject* get(const oaRowHeader* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaRowHeader,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaRowHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaRowHeader data;
    int convert_status=PyoaInterPointerAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaRowHeaderObject* self=(PyoaInterPointerAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRowHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRowHeader_set_doc[] = 
"Class: oaInterPointerAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaRowHeader,oaObject)\n"
"    Calls: void set(oaRowHeader* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaRowHeader,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaRowHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaRowHeader data;
    int convert_status=PyoaInterPointerAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaRowHeaderObject* self=(PyoaInterPointerAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRowHeader_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRowHeader_isNull_doc[] =
"Class: oaInterPointerAppDef_oaRowHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaRowHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaRowHeader data;
    int convert_status=PyoaInterPointerAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaRowHeader_assign_doc[] = 
"Class: oaInterPointerAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaRowHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaRowHeader data;
  int convert_status=PyoaInterPointerAppDef_oaRowHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaRowHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaRowHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaRowHeader_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaRowHeader_get,METH_VARARGS,oaInterPointerAppDef_oaRowHeader_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaRowHeader_set,METH_VARARGS,oaInterPointerAppDef_oaRowHeader_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaRowHeader_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaRowHeader_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaRowHeader_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaRowHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRowHeader_doc[] = 
"Class: oaInterPointerAppDef_oaRowHeader\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaRowHeader)\n"
"    Calls: (const oaInterPointerAppDef_oaRowHeader&)\n"
"    Signature: oaInterPointerAppDef_oaRowHeader||cref-oaInterPointerAppDef_oaRowHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaRowHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaRowHeader",
    sizeof(PyoaInterPointerAppDef_oaRowHeaderObject),
    0,
    (destructor)oaInterPointerAppDef_oaRowHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaRowHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaRowHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaRowHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaRowHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaRowHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRowHeader_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaRowHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaRowHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaRowHeader|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaRowHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaRowHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaRowHeaderp result= (oaInterPointerAppDef_oaRowHeader::find(p1.Data()));
            return PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaRowHeaderp result= (oaInterPointerAppDef_oaRowHeader::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaRowHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaRowHeader_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaRowHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRowHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaRowHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRowHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaRowHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaRowHeaderp result= (oaInterPointerAppDef_oaRowHeader::get(p1.Data()));
            return PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaRowHeaderp result= (oaInterPointerAppDef_oaRowHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaRowHeaderp result= (oaInterPointerAppDef_oaRowHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaRowHeaderp result= (oaInterPointerAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaRowHeader_FromoaInterPointerAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaRowHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaRowHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaRowHeader_static_find,METH_VARARGS,oaInterPointerAppDef_oaRowHeader_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaRowHeader_static_get,METH_VARARGS,oaInterPointerAppDef_oaRowHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaRowHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaRowHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaRowHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaRowHeader",
           (PyObject*)(&PyoaInterPointerAppDef_oaRowHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaRowHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaRowHeader_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaRowHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaScanChain
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaScanChain_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaScanChain_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaScanChainObject* self = (PyoaInterPointerAppDef_oaScanChainObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaScanChain)
    {
        PyParamoaInterPointerAppDef_oaScanChain p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaScanChain_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaScanChain, Choices are:\n"
        "    (oaInterPointerAppDef_oaScanChain)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaScanChain_tp_dealloc(PyoaInterPointerAppDef_oaScanChainObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaScanChain_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaScanChain value;
    int convert_status=PyoaInterPointerAppDef_oaScanChain_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaInterPointerAppDef_oaScanChain::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaScanChain_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaScanChain v1;
    PyParamoaInterPointerAppDef_oaScanChain v2;
    int convert_status1=PyoaInterPointerAppDef_oaScanChain_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaScanChain_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaScanChain_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaScanChain* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaScanChain_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaScanChain**) ((PyoaInterPointerAppDef_oaScanChainObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaScanChain Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(oaInterPointerAppDef_oaScanChain** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaScanChain* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaScanChain_Type.tp_alloc(&PyoaInterPointerAppDef_oaScanChain_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaScanChainObject* self = (PyoaInterPointerAppDef_oaScanChainObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(oaInterPointerAppDef_oaScanChain* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaScanChain_Type.tp_alloc(&PyoaInterPointerAppDef_oaScanChain_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaScanChainObject* self = (PyoaInterPointerAppDef_oaScanChainObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChain_get_doc[] = 
"Class: oaInterPointerAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaScanChain)\n"
"    Calls: oaObject* get(const oaScanChain* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaScanChain,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChain_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaScanChain data;
    int convert_status=PyoaInterPointerAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaScanChainObject* self=(PyoaInterPointerAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChain_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChain_set_doc[] = 
"Class: oaInterPointerAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaScanChain,oaObject)\n"
"    Calls: void set(oaScanChain* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaScanChain,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChain_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaScanChain data;
    int convert_status=PyoaInterPointerAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaScanChainObject* self=(PyoaInterPointerAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChain_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChain_isNull_doc[] =
"Class: oaInterPointerAppDef_oaScanChain, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChain_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaScanChain data;
    int convert_status=PyoaInterPointerAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaScanChain_assign_doc[] = 
"Class: oaInterPointerAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChain_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaScanChain data;
  int convert_status=PyoaInterPointerAppDef_oaScanChain_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaScanChain p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaScanChain_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaScanChain_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaScanChain_get,METH_VARARGS,oaInterPointerAppDef_oaScanChain_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaScanChain_set,METH_VARARGS,oaInterPointerAppDef_oaScanChain_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaScanChain_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaScanChain_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaScanChain_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaScanChain_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChain_doc[] = 
"Class: oaInterPointerAppDef_oaScanChain\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaScanChain)\n"
"    Calls: (const oaInterPointerAppDef_oaScanChain&)\n"
"    Signature: oaInterPointerAppDef_oaScanChain||cref-oaInterPointerAppDef_oaScanChain,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaScanChain_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaScanChain",
    sizeof(PyoaInterPointerAppDef_oaScanChainObject),
    0,
    (destructor)oaInterPointerAppDef_oaScanChain_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaScanChain_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaScanChain_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaScanChain_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaScanChain_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaScanChain_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChain_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaScanChain, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaScanChain* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaScanChain|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaScanChain* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChain_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaScanChainp result= (oaInterPointerAppDef_oaScanChain::find(p1.Data()));
            return PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainp result= (oaInterPointerAppDef_oaScanChain::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaScanChain, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChain_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaScanChain* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChain|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaScanChain* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChain|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChain_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaScanChainp result= (oaInterPointerAppDef_oaScanChain::get(p1.Data()));
            return PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaScanChainp result= (oaInterPointerAppDef_oaScanChain::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainp result= (oaInterPointerAppDef_oaScanChain::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainp result= (oaInterPointerAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaScanChain_FromoaInterPointerAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaScanChain, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaScanChain_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaScanChain_static_find,METH_VARARGS,oaInterPointerAppDef_oaScanChain_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaScanChain_static_get,METH_VARARGS,oaInterPointerAppDef_oaScanChain_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaScanChain_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaScanChain_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaScanChain\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaScanChain",
           (PyObject*)(&PyoaInterPointerAppDef_oaScanChain_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaScanChain\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaScanChain_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaScanChain_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaScanChainInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaScanChainInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaScanChainInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaScanChainInstObject* self = (PyoaInterPointerAppDef_oaScanChainInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaScanChainInst)
    {
        PyParamoaInterPointerAppDef_oaScanChainInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaScanChainInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaScanChainInst, Choices are:\n"
        "    (oaInterPointerAppDef_oaScanChainInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaScanChainInst_tp_dealloc(PyoaInterPointerAppDef_oaScanChainInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaScanChainInst_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaScanChainInst value;
    int convert_status=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaInterPointerAppDef_oaScanChainInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaScanChainInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaScanChainInst v1;
    PyParamoaInterPointerAppDef_oaScanChainInst v2;
    int convert_status1=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaScanChainInst_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaScanChainInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaScanChainInst_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaScanChainInst**) ((PyoaInterPointerAppDef_oaScanChainInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaScanChainInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(oaInterPointerAppDef_oaScanChainInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaScanChainInst* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaScanChainInst_Type.tp_alloc(&PyoaInterPointerAppDef_oaScanChainInst_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaScanChainInstObject* self = (PyoaInterPointerAppDef_oaScanChainInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(oaInterPointerAppDef_oaScanChainInst* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaScanChainInst_Type.tp_alloc(&PyoaInterPointerAppDef_oaScanChainInst_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaScanChainInstObject* self = (PyoaInterPointerAppDef_oaScanChainInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainInst_get_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaScanChainInst)\n"
"    Calls: oaObject* get(const oaScanChainInst* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaScanChainInst,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaScanChainInst data;
    int convert_status=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaScanChainInstObject* self=(PyoaInterPointerAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChainInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainInst_set_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaScanChainInst,oaObject)\n"
"    Calls: void set(oaScanChainInst* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaScanChainInst,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaScanChainInst data;
    int convert_status=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaScanChainInstObject* self=(PyoaInterPointerAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainInst_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainInst_isNull_doc[] =
"Class: oaInterPointerAppDef_oaScanChainInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaScanChainInst data;
    int convert_status=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaScanChainInst_assign_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaScanChainInst data;
  int convert_status=PyoaInterPointerAppDef_oaScanChainInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaScanChainInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaScanChainInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaScanChainInst_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaScanChainInst_get,METH_VARARGS,oaInterPointerAppDef_oaScanChainInst_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaScanChainInst_set,METH_VARARGS,oaInterPointerAppDef_oaScanChainInst_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaScanChainInst_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaScanChainInst_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaScanChainInst_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaScanChainInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainInst_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainInst\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaScanChainInst)\n"
"    Calls: (const oaInterPointerAppDef_oaScanChainInst&)\n"
"    Signature: oaInterPointerAppDef_oaScanChainInst||cref-oaInterPointerAppDef_oaScanChainInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaScanChainInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaScanChainInst",
    sizeof(PyoaInterPointerAppDef_oaScanChainInstObject),
    0,
    (destructor)oaInterPointerAppDef_oaScanChainInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaScanChainInst_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaScanChainInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaScanChainInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaScanChainInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaScanChainInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainInst_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaScanChainInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaScanChainInst|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaScanChainInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaScanChainInstp result= (oaInterPointerAppDef_oaScanChainInst::find(p1.Data()));
            return PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainInstp result= (oaInterPointerAppDef_oaScanChainInst::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaScanChainInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainInst_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaScanChainInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaScanChainInst* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainInst|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaScanChainInstp result= (oaInterPointerAppDef_oaScanChainInst::get(p1.Data()));
            return PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaScanChainInstp result= (oaInterPointerAppDef_oaScanChainInst::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainInstp result= (oaInterPointerAppDef_oaScanChainInst::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainInstp result= (oaInterPointerAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaScanChainInst_FromoaInterPointerAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaScanChainInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaScanChainInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaScanChainInst_static_find,METH_VARARGS,oaInterPointerAppDef_oaScanChainInst_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaScanChainInst_static_get,METH_VARARGS,oaInterPointerAppDef_oaScanChainInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaScanChainInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaScanChainInst_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaScanChainInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaScanChainInst",
           (PyObject*)(&PyoaInterPointerAppDef_oaScanChainInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaScanChainInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaScanChainInst_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaScanChainInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaScanChainSet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaScanChainSet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaScanChainSet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaScanChainSetObject* self = (PyoaInterPointerAppDef_oaScanChainSetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaScanChainSet)
    {
        PyParamoaInterPointerAppDef_oaScanChainSet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaScanChainSet_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaScanChainSet, Choices are:\n"
        "    (oaInterPointerAppDef_oaScanChainSet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaScanChainSet_tp_dealloc(PyoaInterPointerAppDef_oaScanChainSetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaScanChainSet_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaScanChainSet value;
    int convert_status=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaInterPointerAppDef_oaScanChainSet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaScanChainSet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaScanChainSet v1;
    PyParamoaInterPointerAppDef_oaScanChainSet v2;
    int convert_status1=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaScanChainSet_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaScanChainSet* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaScanChainSet_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaScanChainSet**) ((PyoaInterPointerAppDef_oaScanChainSetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaScanChainSet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(oaInterPointerAppDef_oaScanChainSet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaScanChainSet* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaScanChainSet_Type.tp_alloc(&PyoaInterPointerAppDef_oaScanChainSet_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaScanChainSetObject* self = (PyoaInterPointerAppDef_oaScanChainSetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(oaInterPointerAppDef_oaScanChainSet* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaScanChainSet_Type.tp_alloc(&PyoaInterPointerAppDef_oaScanChainSet_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaScanChainSetObject* self = (PyoaInterPointerAppDef_oaScanChainSetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainSet_get_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaScanChainSet)\n"
"    Calls: oaObject* get(const oaScanChainSet* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaScanChainSet,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainSet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaScanChainSet data;
    int convert_status=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaScanChainSetObject* self=(PyoaInterPointerAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChainSet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainSet_set_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaScanChainSet,oaObject)\n"
"    Calls: void set(oaScanChainSet* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaScanChainSet,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainSet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaScanChainSet data;
    int convert_status=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaScanChainSetObject* self=(PyoaInterPointerAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainSet_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainSet_isNull_doc[] =
"Class: oaInterPointerAppDef_oaScanChainSet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainSet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaScanChainSet data;
    int convert_status=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaScanChainSet_assign_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainSet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaScanChainSet data;
  int convert_status=PyoaInterPointerAppDef_oaScanChainSet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaScanChainSet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaScanChainSet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaScanChainSet_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaScanChainSet_get,METH_VARARGS,oaInterPointerAppDef_oaScanChainSet_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaScanChainSet_set,METH_VARARGS,oaInterPointerAppDef_oaScanChainSet_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaScanChainSet_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaScanChainSet_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaScanChainSet_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaScanChainSet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainSet_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainSet\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaScanChainSet)\n"
"    Calls: (const oaInterPointerAppDef_oaScanChainSet&)\n"
"    Signature: oaInterPointerAppDef_oaScanChainSet||cref-oaInterPointerAppDef_oaScanChainSet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaScanChainSet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaScanChainSet",
    sizeof(PyoaInterPointerAppDef_oaScanChainSetObject),
    0,
    (destructor)oaInterPointerAppDef_oaScanChainSet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaScanChainSet_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaScanChainSet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaScanChainSet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaScanChainSet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaScanChainSet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainSet_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainSet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaScanChainSet* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaScanChainSet|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaScanChainSet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainSet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaScanChainSetp result= (oaInterPointerAppDef_oaScanChainSet::find(p1.Data()));
            return PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainSetp result= (oaInterPointerAppDef_oaScanChainSet::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaScanChainSet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaScanChainSet_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaScanChainSet* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainSet|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaScanChainSet* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainSet|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaScanChainSet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaScanChainSetp result= (oaInterPointerAppDef_oaScanChainSet::get(p1.Data()));
            return PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaScanChainSetp result= (oaInterPointerAppDef_oaScanChainSet::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainSetp result= (oaInterPointerAppDef_oaScanChainSet::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaScanChainSetp result= (oaInterPointerAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaScanChainSet_FromoaInterPointerAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaScanChainSet, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaScanChainSet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaScanChainSet_static_find,METH_VARARGS,oaInterPointerAppDef_oaScanChainSet_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaScanChainSet_static_get,METH_VARARGS,oaInterPointerAppDef_oaScanChainSet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaScanChainSet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaScanChainSet_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaScanChainSet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaScanChainSet",
           (PyObject*)(&PyoaInterPointerAppDef_oaScanChainSet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaScanChainSet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaScanChainSet_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaScanChainSet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaShape
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaShape_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaShape_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaShapeObject* self = (PyoaInterPointerAppDef_oaShapeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaShape)
    {
        PyParamoaInterPointerAppDef_oaShape p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaShape_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaShape, Choices are:\n"
        "    (oaInterPointerAppDef_oaShape)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaShape_tp_dealloc(PyoaInterPointerAppDef_oaShapeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaShape_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaShape value;
    int convert_status=PyoaInterPointerAppDef_oaShape_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaInterPointerAppDef_oaShape::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaShape_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaShape v1;
    PyParamoaInterPointerAppDef_oaShape v2;
    int convert_status1=PyoaInterPointerAppDef_oaShape_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaShape_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaShape_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaShape* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaShape_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaShape**) ((PyoaInterPointerAppDef_oaShapeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaShape Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(oaInterPointerAppDef_oaShape** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaShape* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaShape_Type.tp_alloc(&PyoaInterPointerAppDef_oaShape_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaShapeObject* self = (PyoaInterPointerAppDef_oaShapeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(oaInterPointerAppDef_oaShape* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaShape_Type.tp_alloc(&PyoaInterPointerAppDef_oaShape_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaShapeObject* self = (PyoaInterPointerAppDef_oaShapeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaShape_get_doc[] = 
"Class: oaInterPointerAppDef_oaShape, Function: get\n"
"  Paramegers: (oaShape)\n"
"    Calls: oaObject* get(const oaShape* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaShape,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaShape_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaShape data;
    int convert_status=PyoaInterPointerAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaShapeObject* self=(PyoaInterPointerAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaShape_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaShape_set_doc[] = 
"Class: oaInterPointerAppDef_oaShape, Function: set\n"
"  Paramegers: (oaShape,oaObject)\n"
"    Calls: void set(oaShape* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaShape,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaShape_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaShape data;
    int convert_status=PyoaInterPointerAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaShapeObject* self=(PyoaInterPointerAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaShape_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaShape_isNull_doc[] =
"Class: oaInterPointerAppDef_oaShape, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaShape_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaShape data;
    int convert_status=PyoaInterPointerAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaShape_assign_doc[] = 
"Class: oaInterPointerAppDef_oaShape, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaShape_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaShape data;
  int convert_status=PyoaInterPointerAppDef_oaShape_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaShape p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaShape_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaShape_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaShape_get,METH_VARARGS,oaInterPointerAppDef_oaShape_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaShape_set,METH_VARARGS,oaInterPointerAppDef_oaShape_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaShape_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaShape_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaShape_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaShape_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaShape_doc[] = 
"Class: oaInterPointerAppDef_oaShape\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaShape)\n"
"    Calls: (const oaInterPointerAppDef_oaShape&)\n"
"    Signature: oaInterPointerAppDef_oaShape||cref-oaInterPointerAppDef_oaShape,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaShape_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaShape",
    sizeof(PyoaInterPointerAppDef_oaShapeObject),
    0,
    (destructor)oaInterPointerAppDef_oaShape_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaShape_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaShape_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaShape_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaShape_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaShape_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaShape_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaShape, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaShape* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaShape|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaShape* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaShape_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaShapep result= (oaInterPointerAppDef_oaShape::find(p1.Data()));
            return PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaShapep result= (oaInterPointerAppDef_oaShape::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaShape, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaShape_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaShape, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaShape* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaShape|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaShape* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaShape|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaShape_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaShapep result= (oaInterPointerAppDef_oaShape::get(p1.Data()));
            return PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaShapep result= (oaInterPointerAppDef_oaShape::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaShapep result= (oaInterPointerAppDef_oaShape::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaShapep result= (oaInterPointerAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaShape_FromoaInterPointerAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaShape, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaShape_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaShape_static_find,METH_VARARGS,oaInterPointerAppDef_oaShape_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaShape_static_get,METH_VARARGS,oaInterPointerAppDef_oaShape_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaShape_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaShape_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaShape\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaShape",
           (PyObject*)(&PyoaInterPointerAppDef_oaShape_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaShape\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaShape_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaShape_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaSiteDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaSiteDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaSiteDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaSiteDefObject* self = (PyoaInterPointerAppDef_oaSiteDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaSiteDef)
    {
        PyParamoaInterPointerAppDef_oaSiteDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaSiteDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaSiteDef, Choices are:\n"
        "    (oaInterPointerAppDef_oaSiteDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaSiteDef_tp_dealloc(PyoaInterPointerAppDef_oaSiteDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaSiteDef_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaSiteDef value;
    int convert_status=PyoaInterPointerAppDef_oaSiteDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaInterPointerAppDef_oaSiteDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaSiteDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaSiteDef v1;
    PyParamoaInterPointerAppDef_oaSiteDef v2;
    int convert_status1=PyoaInterPointerAppDef_oaSiteDef_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaSiteDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaSiteDef_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaSiteDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaSiteDef_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaSiteDef**) ((PyoaInterPointerAppDef_oaSiteDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaSiteDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(oaInterPointerAppDef_oaSiteDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaSiteDef* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaSiteDef_Type.tp_alloc(&PyoaInterPointerAppDef_oaSiteDef_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaSiteDefObject* self = (PyoaInterPointerAppDef_oaSiteDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(oaInterPointerAppDef_oaSiteDef* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaSiteDef_Type.tp_alloc(&PyoaInterPointerAppDef_oaSiteDef_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaSiteDefObject* self = (PyoaInterPointerAppDef_oaSiteDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSiteDef_get_doc[] = 
"Class: oaInterPointerAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaSiteDef)\n"
"    Calls: oaObject* get(const oaSiteDef* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaSiteDef,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaSiteDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaSiteDef data;
    int convert_status=PyoaInterPointerAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaSiteDefObject* self=(PyoaInterPointerAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSiteDef_set_doc[] = 
"Class: oaInterPointerAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaSiteDef,oaObject)\n"
"    Calls: void set(oaSiteDef* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaSiteDef,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaSiteDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaSiteDef data;
    int convert_status=PyoaInterPointerAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaSiteDefObject* self=(PyoaInterPointerAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSiteDef_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSiteDef_isNull_doc[] =
"Class: oaInterPointerAppDef_oaSiteDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaSiteDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaSiteDef data;
    int convert_status=PyoaInterPointerAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaSiteDef_assign_doc[] = 
"Class: oaInterPointerAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaSiteDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaSiteDef data;
  int convert_status=PyoaInterPointerAppDef_oaSiteDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaSiteDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaSiteDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaSiteDef_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaSiteDef_get,METH_VARARGS,oaInterPointerAppDef_oaSiteDef_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaSiteDef_set,METH_VARARGS,oaInterPointerAppDef_oaSiteDef_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaSiteDef_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaSiteDef_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaSiteDef_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaSiteDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSiteDef_doc[] = 
"Class: oaInterPointerAppDef_oaSiteDef\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaSiteDef)\n"
"    Calls: (const oaInterPointerAppDef_oaSiteDef&)\n"
"    Signature: oaInterPointerAppDef_oaSiteDef||cref-oaInterPointerAppDef_oaSiteDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaSiteDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaSiteDef",
    sizeof(PyoaInterPointerAppDef_oaSiteDefObject),
    0,
    (destructor)oaInterPointerAppDef_oaSiteDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaSiteDef_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaSiteDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaSiteDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaSiteDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaSiteDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSiteDef_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaSiteDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaSiteDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaSiteDef|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaSiteDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaSiteDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaSiteDefp result= (oaInterPointerAppDef_oaSiteDef::find(p1.Data()));
            return PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaSiteDefp result= (oaInterPointerAppDef_oaSiteDef::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaSiteDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSiteDef_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaSiteDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSiteDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaSiteDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSiteDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaSiteDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaSiteDefp result= (oaInterPointerAppDef_oaSiteDef::get(p1.Data()));
            return PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaSiteDefp result= (oaInterPointerAppDef_oaSiteDef::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaSiteDefp result= (oaInterPointerAppDef_oaSiteDef::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaSiteDefp result= (oaInterPointerAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaSiteDef_FromoaInterPointerAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaSiteDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaSiteDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaSiteDef_static_find,METH_VARARGS,oaInterPointerAppDef_oaSiteDef_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaSiteDef_static_get,METH_VARARGS,oaInterPointerAppDef_oaSiteDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaSiteDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaSiteDef_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaSiteDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaSiteDef",
           (PyObject*)(&PyoaInterPointerAppDef_oaSiteDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaSiteDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaSiteDef_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaSiteDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaSteiner
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaSteiner_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaSteiner_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaSteinerObject* self = (PyoaInterPointerAppDef_oaSteinerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaSteiner)
    {
        PyParamoaInterPointerAppDef_oaSteiner p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaSteiner_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaSteiner, Choices are:\n"
        "    (oaInterPointerAppDef_oaSteiner)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaSteiner_tp_dealloc(PyoaInterPointerAppDef_oaSteinerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaSteiner_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaSteiner value;
    int convert_status=PyoaInterPointerAppDef_oaSteiner_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaInterPointerAppDef_oaSteiner::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaSteiner_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaSteiner v1;
    PyParamoaInterPointerAppDef_oaSteiner v2;
    int convert_status1=PyoaInterPointerAppDef_oaSteiner_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaSteiner_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaSteiner_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaSteiner* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaSteiner_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaSteiner**) ((PyoaInterPointerAppDef_oaSteinerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaSteiner Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(oaInterPointerAppDef_oaSteiner** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaSteiner* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaSteiner_Type.tp_alloc(&PyoaInterPointerAppDef_oaSteiner_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaSteinerObject* self = (PyoaInterPointerAppDef_oaSteinerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(oaInterPointerAppDef_oaSteiner* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaSteiner_Type.tp_alloc(&PyoaInterPointerAppDef_oaSteiner_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaSteinerObject* self = (PyoaInterPointerAppDef_oaSteinerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSteiner_get_doc[] = 
"Class: oaInterPointerAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaSteiner)\n"
"    Calls: oaObject* get(const oaSteiner* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaSteiner,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaSteiner_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaSteiner data;
    int convert_status=PyoaInterPointerAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaSteinerObject* self=(PyoaInterPointerAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSteiner_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSteiner_set_doc[] = 
"Class: oaInterPointerAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaSteiner,oaObject)\n"
"    Calls: void set(oaSteiner* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaSteiner,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaSteiner_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaSteiner data;
    int convert_status=PyoaInterPointerAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaSteinerObject* self=(PyoaInterPointerAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSteiner_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSteiner_isNull_doc[] =
"Class: oaInterPointerAppDef_oaSteiner, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaSteiner_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaSteiner data;
    int convert_status=PyoaInterPointerAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaSteiner_assign_doc[] = 
"Class: oaInterPointerAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaSteiner_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaSteiner data;
  int convert_status=PyoaInterPointerAppDef_oaSteiner_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaSteiner p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaSteiner_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaSteiner_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaSteiner_get,METH_VARARGS,oaInterPointerAppDef_oaSteiner_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaSteiner_set,METH_VARARGS,oaInterPointerAppDef_oaSteiner_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaSteiner_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaSteiner_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaSteiner_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaSteiner_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSteiner_doc[] = 
"Class: oaInterPointerAppDef_oaSteiner\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaSteiner)\n"
"    Calls: (const oaInterPointerAppDef_oaSteiner&)\n"
"    Signature: oaInterPointerAppDef_oaSteiner||cref-oaInterPointerAppDef_oaSteiner,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaSteiner_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaSteiner",
    sizeof(PyoaInterPointerAppDef_oaSteinerObject),
    0,
    (destructor)oaInterPointerAppDef_oaSteiner_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaSteiner_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaSteiner_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaSteiner_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaSteiner_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaSteiner_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSteiner_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaSteiner, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaSteiner* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaSteiner|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaSteiner* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaSteiner_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaSteinerp result= (oaInterPointerAppDef_oaSteiner::find(p1.Data()));
            return PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaSteinerp result= (oaInterPointerAppDef_oaSteiner::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaSteiner, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaSteiner_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaSteiner* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSteiner|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaSteiner* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSteiner|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaSteiner_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaSteinerp result= (oaInterPointerAppDef_oaSteiner::get(p1.Data()));
            return PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaSteinerp result= (oaInterPointerAppDef_oaSteiner::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaSteinerp result= (oaInterPointerAppDef_oaSteiner::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaSteinerp result= (oaInterPointerAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaSteiner_FromoaInterPointerAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaSteiner, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaSteiner_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaSteiner_static_find,METH_VARARGS,oaInterPointerAppDef_oaSteiner_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaSteiner_static_get,METH_VARARGS,oaInterPointerAppDef_oaSteiner_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaSteiner_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaSteiner_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaSteiner\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaSteiner",
           (PyObject*)(&PyoaInterPointerAppDef_oaSteiner_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaSteiner\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaSteiner_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaSteiner_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaStepperMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaStepperMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaStepperMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaStepperMapObject* self = (PyoaInterPointerAppDef_oaStepperMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaStepperMap)
    {
        PyParamoaInterPointerAppDef_oaStepperMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaStepperMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaStepperMap, Choices are:\n"
        "    (oaInterPointerAppDef_oaStepperMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaStepperMap_tp_dealloc(PyoaInterPointerAppDef_oaStepperMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaStepperMap_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaStepperMap value;
    int convert_status=PyoaInterPointerAppDef_oaStepperMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaInterPointerAppDef_oaStepperMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaStepperMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaStepperMap v1;
    PyParamoaInterPointerAppDef_oaStepperMap v2;
    int convert_status1=PyoaInterPointerAppDef_oaStepperMap_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaStepperMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaStepperMap_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaStepperMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaStepperMap_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaStepperMap**) ((PyoaInterPointerAppDef_oaStepperMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaStepperMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(oaInterPointerAppDef_oaStepperMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaStepperMap* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaStepperMap_Type.tp_alloc(&PyoaInterPointerAppDef_oaStepperMap_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaStepperMapObject* self = (PyoaInterPointerAppDef_oaStepperMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(oaInterPointerAppDef_oaStepperMap* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaStepperMap_Type.tp_alloc(&PyoaInterPointerAppDef_oaStepperMap_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaStepperMapObject* self = (PyoaInterPointerAppDef_oaStepperMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaStepperMap_get_doc[] = 
"Class: oaInterPointerAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaStepperMap)\n"
"    Calls: oaObject* get(const oaStepperMap* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaStepperMap,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaStepperMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaStepperMap data;
    int convert_status=PyoaInterPointerAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaStepperMapObject* self=(PyoaInterPointerAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaStepperMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaStepperMap_set_doc[] = 
"Class: oaInterPointerAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaStepperMap,oaObject)\n"
"    Calls: void set(oaStepperMap* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaStepperMap,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaStepperMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaStepperMap data;
    int convert_status=PyoaInterPointerAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaStepperMapObject* self=(PyoaInterPointerAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaStepperMap_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaStepperMap_isNull_doc[] =
"Class: oaInterPointerAppDef_oaStepperMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaStepperMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaStepperMap data;
    int convert_status=PyoaInterPointerAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaStepperMap_assign_doc[] = 
"Class: oaInterPointerAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaStepperMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaStepperMap data;
  int convert_status=PyoaInterPointerAppDef_oaStepperMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaStepperMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaStepperMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaStepperMap_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaStepperMap_get,METH_VARARGS,oaInterPointerAppDef_oaStepperMap_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaStepperMap_set,METH_VARARGS,oaInterPointerAppDef_oaStepperMap_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaStepperMap_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaStepperMap_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaStepperMap_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaStepperMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaStepperMap_doc[] = 
"Class: oaInterPointerAppDef_oaStepperMap\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaStepperMap)\n"
"    Calls: (const oaInterPointerAppDef_oaStepperMap&)\n"
"    Signature: oaInterPointerAppDef_oaStepperMap||cref-oaInterPointerAppDef_oaStepperMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaStepperMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaStepperMap",
    sizeof(PyoaInterPointerAppDef_oaStepperMapObject),
    0,
    (destructor)oaInterPointerAppDef_oaStepperMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaStepperMap_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaStepperMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaStepperMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaStepperMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaStepperMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaStepperMap_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaStepperMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaStepperMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaStepperMap|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaStepperMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaStepperMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaStepperMapp result= (oaInterPointerAppDef_oaStepperMap::find(p1.Data()));
            return PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaStepperMapp result= (oaInterPointerAppDef_oaStepperMap::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaStepperMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaStepperMap_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaStepperMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaStepperMap|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaStepperMap* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaStepperMap|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaStepperMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaStepperMapp result= (oaInterPointerAppDef_oaStepperMap::get(p1.Data()));
            return PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaStepperMapp result= (oaInterPointerAppDef_oaStepperMap::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaStepperMapp result= (oaInterPointerAppDef_oaStepperMap::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaStepperMapp result= (oaInterPointerAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaStepperMap_FromoaInterPointerAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaStepperMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaStepperMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaStepperMap_static_find,METH_VARARGS,oaInterPointerAppDef_oaStepperMap_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaStepperMap_static_get,METH_VARARGS,oaInterPointerAppDef_oaStepperMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaStepperMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaStepperMap_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaStepperMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaStepperMap",
           (PyObject*)(&PyoaInterPointerAppDef_oaStepperMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaStepperMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaStepperMap_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaStepperMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaTech
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTech_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaTech_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaTechObject* self = (PyoaInterPointerAppDef_oaTechObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaTech)
    {
        PyParamoaInterPointerAppDef_oaTech p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaTech_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaTech, Choices are:\n"
        "    (oaInterPointerAppDef_oaTech)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaTech_tp_dealloc(PyoaInterPointerAppDef_oaTechObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTech_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaTech value;
    int convert_status=PyoaInterPointerAppDef_oaTech_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaInterPointerAppDef_oaTech::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaTech_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaTech v1;
    PyParamoaInterPointerAppDef_oaTech v2;
    int convert_status1=PyoaInterPointerAppDef_oaTech_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaTech_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaTech_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaTech* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaTech_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaTech**) ((PyoaInterPointerAppDef_oaTechObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaTech Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(oaInterPointerAppDef_oaTech** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaTech* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaTech_Type.tp_alloc(&PyoaInterPointerAppDef_oaTech_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaTechObject* self = (PyoaInterPointerAppDef_oaTechObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(oaInterPointerAppDef_oaTech* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaTech_Type.tp_alloc(&PyoaInterPointerAppDef_oaTech_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaTechObject* self = (PyoaInterPointerAppDef_oaTechObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTech_get_doc[] = 
"Class: oaInterPointerAppDef_oaTech, Function: get\n"
"  Paramegers: (oaTech)\n"
"    Calls: oaObject* get(const oaTech* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaTech,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTech_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTech data;
    int convert_status=PyoaInterPointerAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechObject* self=(PyoaInterPointerAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTech_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTech_set_doc[] = 
"Class: oaInterPointerAppDef_oaTech, Function: set\n"
"  Paramegers: (oaTech,oaObject)\n"
"    Calls: void set(oaTech* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaTech,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTech_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTech data;
    int convert_status=PyoaInterPointerAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechObject* self=(PyoaInterPointerAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTech_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTech_isNull_doc[] =
"Class: oaInterPointerAppDef_oaTech, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaTech_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaTech data;
    int convert_status=PyoaInterPointerAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaTech_assign_doc[] = 
"Class: oaInterPointerAppDef_oaTech, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaTech_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaTech data;
  int convert_status=PyoaInterPointerAppDef_oaTech_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaTech p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaTech_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaTech_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaTech_get,METH_VARARGS,oaInterPointerAppDef_oaTech_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaTech_set,METH_VARARGS,oaInterPointerAppDef_oaTech_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaTech_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaTech_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaTech_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaTech_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTech_doc[] = 
"Class: oaInterPointerAppDef_oaTech\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaTech)\n"
"    Calls: (const oaInterPointerAppDef_oaTech&)\n"
"    Signature: oaInterPointerAppDef_oaTech||cref-oaInterPointerAppDef_oaTech,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaTech_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaTech",
    sizeof(PyoaInterPointerAppDef_oaTechObject),
    0,
    (destructor)oaInterPointerAppDef_oaTech_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaTech_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaTech_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaTech_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaTech_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaTech_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTech_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaTech, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTech* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTech|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTech* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaTech_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechp result= (oaInterPointerAppDef_oaTech::find(p1.Data()));
            return PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechp result= (oaInterPointerAppDef_oaTech::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTech, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTech_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaTech, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTech* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTech|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTech* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTech|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaTech_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechp result= (oaInterPointerAppDef_oaTech::get(p1.Data()));
            return PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaTechp result= (oaInterPointerAppDef_oaTech::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechp result= (oaInterPointerAppDef_oaTech::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechp result= (oaInterPointerAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaTech_FromoaInterPointerAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTech, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaTech_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaTech_static_find,METH_VARARGS,oaInterPointerAppDef_oaTech_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaTech_static_get,METH_VARARGS,oaInterPointerAppDef_oaTech_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaTech_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaTech_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaTech\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaTech",
           (PyObject*)(&PyoaInterPointerAppDef_oaTech_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaTech\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaTech_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaTech_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaTechHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTechHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaTechHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaTechHeaderObject* self = (PyoaInterPointerAppDef_oaTechHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaTechHeader)
    {
        PyParamoaInterPointerAppDef_oaTechHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaTechHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaTechHeader, Choices are:\n"
        "    (oaInterPointerAppDef_oaTechHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaTechHeader_tp_dealloc(PyoaInterPointerAppDef_oaTechHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTechHeader_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaTechHeader value;
    int convert_status=PyoaInterPointerAppDef_oaTechHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaInterPointerAppDef_oaTechHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaTechHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaTechHeader v1;
    PyParamoaInterPointerAppDef_oaTechHeader v2;
    int convert_status1=PyoaInterPointerAppDef_oaTechHeader_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaTechHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaTechHeader_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaTechHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaTechHeader_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaTechHeader**) ((PyoaInterPointerAppDef_oaTechHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaTechHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(oaInterPointerAppDef_oaTechHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaTechHeader* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaTechHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaTechHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaTechHeaderObject* self = (PyoaInterPointerAppDef_oaTechHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(oaInterPointerAppDef_oaTechHeader* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaTechHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaTechHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaTechHeaderObject* self = (PyoaInterPointerAppDef_oaTechHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechHeader_get_doc[] = 
"Class: oaInterPointerAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaTechHeader)\n"
"    Calls: oaObject* get(const oaTechHeader* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaTechHeader,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTechHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTechHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechHeaderObject* self=(PyoaInterPointerAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechHeader_set_doc[] = 
"Class: oaInterPointerAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaTechHeader,oaObject)\n"
"    Calls: void set(oaTechHeader* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaTechHeader,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTechHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTechHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechHeaderObject* self=(PyoaInterPointerAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechHeader_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechHeader_isNull_doc[] =
"Class: oaInterPointerAppDef_oaTechHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaTechHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaTechHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaTechHeader_assign_doc[] = 
"Class: oaInterPointerAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaTechHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaTechHeader data;
  int convert_status=PyoaInterPointerAppDef_oaTechHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaTechHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaTechHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaTechHeader_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaTechHeader_get,METH_VARARGS,oaInterPointerAppDef_oaTechHeader_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaTechHeader_set,METH_VARARGS,oaInterPointerAppDef_oaTechHeader_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaTechHeader_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaTechHeader_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaTechHeader_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaTechHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechHeader_doc[] = 
"Class: oaInterPointerAppDef_oaTechHeader\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaTechHeader)\n"
"    Calls: (const oaInterPointerAppDef_oaTechHeader&)\n"
"    Signature: oaInterPointerAppDef_oaTechHeader||cref-oaInterPointerAppDef_oaTechHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaTechHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaTechHeader",
    sizeof(PyoaInterPointerAppDef_oaTechHeaderObject),
    0,
    (destructor)oaInterPointerAppDef_oaTechHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaTechHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaTechHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaTechHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaTechHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaTechHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechHeader_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaTechHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTechHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTechHeader|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTechHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaTechHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechHeaderp result= (oaInterPointerAppDef_oaTechHeader::find(p1.Data()));
            return PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechHeaderp result= (oaInterPointerAppDef_oaTechHeader::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTechHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechHeader_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTechHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTechHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaTechHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechHeaderp result= (oaInterPointerAppDef_oaTechHeader::get(p1.Data()));
            return PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaTechHeaderp result= (oaInterPointerAppDef_oaTechHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechHeaderp result= (oaInterPointerAppDef_oaTechHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechHeaderp result= (oaInterPointerAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaTechHeader_FromoaInterPointerAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTechHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaTechHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaTechHeader_static_find,METH_VARARGS,oaInterPointerAppDef_oaTechHeader_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaTechHeader_static_get,METH_VARARGS,oaInterPointerAppDef_oaTechHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaTechHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaTechHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaTechHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaTechHeader",
           (PyObject*)(&PyoaInterPointerAppDef_oaTechHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaTechHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaTechHeader_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaTechHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaTechLayerHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaTechLayerHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaTechLayerHeaderObject* self = (PyoaInterPointerAppDef_oaTechLayerHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaTechLayerHeader)
    {
        PyParamoaInterPointerAppDef_oaTechLayerHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaTechLayerHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaTechLayerHeader, Choices are:\n"
        "    (oaInterPointerAppDef_oaTechLayerHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaTechLayerHeader_tp_dealloc(PyoaInterPointerAppDef_oaTechLayerHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaTechLayerHeader value;
    int convert_status=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaInterPointerAppDef_oaTechLayerHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaTechLayerHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaTechLayerHeader v1;
    PyParamoaInterPointerAppDef_oaTechLayerHeader v2;
    int convert_status1=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaTechLayerHeader_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaTechLayerHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaTechLayerHeader_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaTechLayerHeader**) ((PyoaInterPointerAppDef_oaTechLayerHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaTechLayerHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(oaInterPointerAppDef_oaTechLayerHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaTechLayerHeader* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaTechLayerHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaTechLayerHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaTechLayerHeaderObject* self = (PyoaInterPointerAppDef_oaTechLayerHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(oaInterPointerAppDef_oaTechLayerHeader* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaTechLayerHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaTechLayerHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaTechLayerHeaderObject* self = (PyoaInterPointerAppDef_oaTechLayerHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechLayerHeader_get_doc[] = 
"Class: oaInterPointerAppDef_oaTechLayerHeader, Function: get\n"
"  Paramegers: (oaTechLayerHeader)\n"
"    Calls: oaObject* get(const oaTechLayerHeader* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaTechLayerHeader,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTechLayerHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechLayerHeaderObject* self=(PyoaInterPointerAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechLayerHeader_set_doc[] = 
"Class: oaInterPointerAppDef_oaTechLayerHeader, Function: set\n"
"  Paramegers: (oaTechLayerHeader,oaObject)\n"
"    Calls: void set(oaTechLayerHeader* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaTechLayerHeader,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTechLayerHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechLayerHeaderObject* self=(PyoaInterPointerAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechLayerHeader p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechLayerHeader_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechLayerHeader_isNull_doc[] =
"Class: oaInterPointerAppDef_oaTechLayerHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaTechLayerHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaTechLayerHeader_assign_doc[] = 
"Class: oaInterPointerAppDef_oaTechLayerHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaTechLayerHeader data;
  int convert_status=PyoaInterPointerAppDef_oaTechLayerHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaTechLayerHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaTechLayerHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaTechLayerHeader_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaTechLayerHeader_get,METH_VARARGS,oaInterPointerAppDef_oaTechLayerHeader_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaTechLayerHeader_set,METH_VARARGS,oaInterPointerAppDef_oaTechLayerHeader_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaTechLayerHeader_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaTechLayerHeader_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaTechLayerHeader_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaTechLayerHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechLayerHeader_doc[] = 
"Class: oaInterPointerAppDef_oaTechLayerHeader\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaTechLayerHeader)\n"
"    Calls: (const oaInterPointerAppDef_oaTechLayerHeader&)\n"
"    Signature: oaInterPointerAppDef_oaTechLayerHeader||cref-oaInterPointerAppDef_oaTechLayerHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaTechLayerHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaTechLayerHeader",
    sizeof(PyoaInterPointerAppDef_oaTechLayerHeaderObject),
    0,
    (destructor)oaInterPointerAppDef_oaTechLayerHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaTechLayerHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaTechLayerHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaTechLayerHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaTechLayerHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaTechLayerHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechLayerHeader_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaTechLayerHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTechLayerHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTechLayerHeader|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTechLayerHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechLayerHeaderp result= (oaInterPointerAppDef_oaTechLayerHeader::find(p1.Data()));
            return PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechLayerHeaderp result= (oaInterPointerAppDef_oaTechLayerHeader::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTechLayerHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechLayerHeader_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaTechLayerHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTechLayerHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechLayerHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTechLayerHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechLayerHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaTechLayerHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechLayerHeaderp result= (oaInterPointerAppDef_oaTechLayerHeader::get(p1.Data()));
            return PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaTechLayerHeaderp result= (oaInterPointerAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechLayerHeaderp result= (oaInterPointerAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechLayerHeaderp result= (oaInterPointerAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaTechLayerHeader_FromoaInterPointerAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTechLayerHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaTechLayerHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaTechLayerHeader_static_find,METH_VARARGS,oaInterPointerAppDef_oaTechLayerHeader_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaTechLayerHeader_static_get,METH_VARARGS,oaInterPointerAppDef_oaTechLayerHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaTechLayerHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaTechLayerHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaTechLayerHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaTechLayerHeader",
           (PyObject*)(&PyoaInterPointerAppDef_oaTechLayerHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaTechLayerHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaTechLayerHeader_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaTechLayerHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaTechViaDefHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaTechViaDefHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaTechViaDefHeaderObject* self = (PyoaInterPointerAppDef_oaTechViaDefHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaTechViaDefHeader)
    {
        PyParamoaInterPointerAppDef_oaTechViaDefHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaTechViaDefHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaTechViaDefHeader, Choices are:\n"
        "    (oaInterPointerAppDef_oaTechViaDefHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaTechViaDefHeader_tp_dealloc(PyoaInterPointerAppDef_oaTechViaDefHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaTechViaDefHeader value;
    int convert_status=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[61];
    sprintf(buffer,"<oaInterPointerAppDef_oaTechViaDefHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaTechViaDefHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaTechViaDefHeader v1;
    PyParamoaInterPointerAppDef_oaTechViaDefHeader v2;
    int convert_status1=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaTechViaDefHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaTechViaDefHeader_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaTechViaDefHeader**) ((PyoaInterPointerAppDef_oaTechViaDefHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaTechViaDefHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(oaInterPointerAppDef_oaTechViaDefHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaTechViaDefHeader* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaTechViaDefHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaTechViaDefHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaTechViaDefHeaderObject* self = (PyoaInterPointerAppDef_oaTechViaDefHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(oaInterPointerAppDef_oaTechViaDefHeader* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaTechViaDefHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaTechViaDefHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaTechViaDefHeaderObject* self = (PyoaInterPointerAppDef_oaTechViaDefHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechViaDefHeader_get_doc[] = 
"Class: oaInterPointerAppDef_oaTechViaDefHeader, Function: get\n"
"  Paramegers: (oaTechViaDefHeader)\n"
"    Calls: oaObject* get(const oaTechViaDefHeader* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaTechViaDefHeader,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechViaDefHeaderObject* self=(PyoaInterPointerAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechViaDefHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechViaDefHeader_set_doc[] = 
"Class: oaInterPointerAppDef_oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaTechViaDefHeader,oaObject)\n"
"    Calls: void set(oaTechViaDefHeader* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaTechViaDefHeader,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTechViaDefHeaderObject* self=(PyoaInterPointerAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechViaDefHeader p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechViaDefHeader_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechViaDefHeader_isNull_doc[] =
"Class: oaInterPointerAppDef_oaTechViaDefHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaTechViaDefHeader_assign_doc[] = 
"Class: oaInterPointerAppDef_oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaTechViaDefHeader data;
  int convert_status=PyoaInterPointerAppDef_oaTechViaDefHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaTechViaDefHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaTechViaDefHeader_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaTechViaDefHeader_get,METH_VARARGS,oaInterPointerAppDef_oaTechViaDefHeader_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaTechViaDefHeader_set,METH_VARARGS,oaInterPointerAppDef_oaTechViaDefHeader_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaTechViaDefHeader_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaTechViaDefHeader_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaTechViaDefHeader_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaTechViaDefHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechViaDefHeader_doc[] = 
"Class: oaInterPointerAppDef_oaTechViaDefHeader\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaTechViaDefHeader)\n"
"    Calls: (const oaInterPointerAppDef_oaTechViaDefHeader&)\n"
"    Signature: oaInterPointerAppDef_oaTechViaDefHeader||cref-oaInterPointerAppDef_oaTechViaDefHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaTechViaDefHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaTechViaDefHeader",
    sizeof(PyoaInterPointerAppDef_oaTechViaDefHeaderObject),
    0,
    (destructor)oaInterPointerAppDef_oaTechViaDefHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaTechViaDefHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaTechViaDefHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaTechViaDefHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaTechViaDefHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaTechViaDefHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechViaDefHeader_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaTechViaDefHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTechViaDefHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTechViaDefHeader|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTechViaDefHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechViaDefHeaderp result= (oaInterPointerAppDef_oaTechViaDefHeader::find(p1.Data()));
            return PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechViaDefHeaderp result= (oaInterPointerAppDef_oaTechViaDefHeader::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTechViaDefHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTechViaDefHeader_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaTechViaDefHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTechViaDefHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechViaDefHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTechViaDefHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechViaDefHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaTechViaDefHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTechViaDefHeaderp result= (oaInterPointerAppDef_oaTechViaDefHeader::get(p1.Data()));
            return PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaTechViaDefHeaderp result= (oaInterPointerAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechViaDefHeaderp result= (oaInterPointerAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTechViaDefHeaderp result= (oaInterPointerAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaTechViaDefHeader_FromoaInterPointerAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTechViaDefHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaTechViaDefHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaTechViaDefHeader_static_find,METH_VARARGS,oaInterPointerAppDef_oaTechViaDefHeader_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaTechViaDefHeader_static_get,METH_VARARGS,oaInterPointerAppDef_oaTechViaDefHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaTechViaDefHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaTechViaDefHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaTechViaDefHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaTechViaDefHeader",
           (PyObject*)(&PyoaInterPointerAppDef_oaTechViaDefHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaTechViaDefHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaTechViaDefHeader_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaTechViaDefHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaTermObject* self = (PyoaInterPointerAppDef_oaTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaTerm)
    {
        PyParamoaInterPointerAppDef_oaTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaTerm, Choices are:\n"
        "    (oaInterPointerAppDef_oaTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaTerm_tp_dealloc(PyoaInterPointerAppDef_oaTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTerm_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaTerm value;
    int convert_status=PyoaInterPointerAppDef_oaTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaInterPointerAppDef_oaTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaTerm v1;
    PyParamoaInterPointerAppDef_oaTerm v2;
    int convert_status1=PyoaInterPointerAppDef_oaTerm_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaTerm_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaTerm_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaTerm**) ((PyoaInterPointerAppDef_oaTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(oaInterPointerAppDef_oaTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaTerm* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaTerm_Type.tp_alloc(&PyoaInterPointerAppDef_oaTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaTermObject* self = (PyoaInterPointerAppDef_oaTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(oaInterPointerAppDef_oaTerm* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaTerm_Type.tp_alloc(&PyoaInterPointerAppDef_oaTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaTermObject* self = (PyoaInterPointerAppDef_oaTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTerm_get_doc[] = 
"Class: oaInterPointerAppDef_oaTerm, Function: get\n"
"  Paramegers: (oaTerm)\n"
"    Calls: oaObject* get(const oaTerm* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaTerm,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTerm data;
    int convert_status=PyoaInterPointerAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTermObject* self=(PyoaInterPointerAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTerm_set_doc[] = 
"Class: oaInterPointerAppDef_oaTerm, Function: set\n"
"  Paramegers: (oaTerm,oaObject)\n"
"    Calls: void set(oaTerm* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaTerm,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTerm data;
    int convert_status=PyoaInterPointerAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTermObject* self=(PyoaInterPointerAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTerm p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTerm_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTerm_isNull_doc[] =
"Class: oaInterPointerAppDef_oaTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaTerm data;
    int convert_status=PyoaInterPointerAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaTerm_assign_doc[] = 
"Class: oaInterPointerAppDef_oaTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaTerm data;
  int convert_status=PyoaInterPointerAppDef_oaTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaTerm_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaTerm_get,METH_VARARGS,oaInterPointerAppDef_oaTerm_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaTerm_set,METH_VARARGS,oaInterPointerAppDef_oaTerm_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaTerm_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaTerm_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaTerm_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTerm_doc[] = 
"Class: oaInterPointerAppDef_oaTerm\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaTerm)\n"
"    Calls: (const oaInterPointerAppDef_oaTerm&)\n"
"    Signature: oaInterPointerAppDef_oaTerm||cref-oaInterPointerAppDef_oaTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaTerm",
    sizeof(PyoaInterPointerAppDef_oaTermObject),
    0,
    (destructor)oaInterPointerAppDef_oaTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTerm_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTerm|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTermp result= (oaInterPointerAppDef_oaTerm::find(p1.Data()));
            return PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTermp result= (oaInterPointerAppDef_oaTerm::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTerm_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTerm|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTerm* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTerm|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTermp result= (oaInterPointerAppDef_oaTerm::get(p1.Data()));
            return PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaTermp result= (oaInterPointerAppDef_oaTerm::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTermp result= (oaInterPointerAppDef_oaTerm::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTermp result= (oaInterPointerAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaTerm_FromoaInterPointerAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaTerm_static_find,METH_VARARGS,oaInterPointerAppDef_oaTerm_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaTerm_static_get,METH_VARARGS,oaInterPointerAppDef_oaTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaTerm",
           (PyObject*)(&PyoaInterPointerAppDef_oaTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaTerm_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaTrackPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTrackPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaTrackPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaTrackPatternObject* self = (PyoaInterPointerAppDef_oaTrackPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaTrackPattern)
    {
        PyParamoaInterPointerAppDef_oaTrackPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaTrackPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaTrackPattern, Choices are:\n"
        "    (oaInterPointerAppDef_oaTrackPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaTrackPattern_tp_dealloc(PyoaInterPointerAppDef_oaTrackPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaTrackPattern_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaTrackPattern value;
    int convert_status=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaInterPointerAppDef_oaTrackPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaTrackPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaTrackPattern v1;
    PyParamoaInterPointerAppDef_oaTrackPattern v2;
    int convert_status1=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaTrackPattern_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaTrackPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaTrackPattern_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaTrackPattern**) ((PyoaInterPointerAppDef_oaTrackPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaTrackPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(oaInterPointerAppDef_oaTrackPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaTrackPattern* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaTrackPattern_Type.tp_alloc(&PyoaInterPointerAppDef_oaTrackPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaTrackPatternObject* self = (PyoaInterPointerAppDef_oaTrackPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(oaInterPointerAppDef_oaTrackPattern* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaTrackPattern_Type.tp_alloc(&PyoaInterPointerAppDef_oaTrackPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaTrackPatternObject* self = (PyoaInterPointerAppDef_oaTrackPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTrackPattern_get_doc[] = 
"Class: oaInterPointerAppDef_oaTrackPattern, Function: get\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: oaObject* get(const oaTrackPattern* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaTrackPattern,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTrackPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTrackPattern data;
    int convert_status=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTrackPatternObject* self=(PyoaInterPointerAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTrackPattern_set_doc[] = 
"Class: oaInterPointerAppDef_oaTrackPattern, Function: set\n"
"  Paramegers: (oaTrackPattern,oaObject)\n"
"    Calls: void set(oaTrackPattern* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaTrackPattern,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaTrackPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaTrackPattern data;
    int convert_status=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaTrackPatternObject* self=(PyoaInterPointerAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTrackPattern p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTrackPattern_isNull_doc[] =
"Class: oaInterPointerAppDef_oaTrackPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaTrackPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaTrackPattern data;
    int convert_status=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaTrackPattern_assign_doc[] = 
"Class: oaInterPointerAppDef_oaTrackPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaTrackPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaTrackPattern data;
  int convert_status=PyoaInterPointerAppDef_oaTrackPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaTrackPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaTrackPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaTrackPattern_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaTrackPattern_get,METH_VARARGS,oaInterPointerAppDef_oaTrackPattern_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaTrackPattern_set,METH_VARARGS,oaInterPointerAppDef_oaTrackPattern_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaTrackPattern_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaTrackPattern_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaTrackPattern_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaTrackPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTrackPattern_doc[] = 
"Class: oaInterPointerAppDef_oaTrackPattern\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaTrackPattern)\n"
"    Calls: (const oaInterPointerAppDef_oaTrackPattern&)\n"
"    Signature: oaInterPointerAppDef_oaTrackPattern||cref-oaInterPointerAppDef_oaTrackPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaTrackPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaTrackPattern",
    sizeof(PyoaInterPointerAppDef_oaTrackPatternObject),
    0,
    (destructor)oaInterPointerAppDef_oaTrackPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaTrackPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaTrackPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaTrackPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaTrackPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaTrackPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTrackPattern_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaTrackPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTrackPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTrackPattern|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTrackPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaTrackPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTrackPatternp result= (oaInterPointerAppDef_oaTrackPattern::find(p1.Data()));
            return PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTrackPatternp result= (oaInterPointerAppDef_oaTrackPattern::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTrackPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaTrackPattern_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaTrackPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaTrackPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTrackPattern|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTrackPattern* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTrackPattern|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaTrackPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaTrackPatternp result= (oaInterPointerAppDef_oaTrackPattern::get(p1.Data()));
            return PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaTrackPatternp result= (oaInterPointerAppDef_oaTrackPattern::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTrackPatternp result= (oaInterPointerAppDef_oaTrackPattern::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaTrackPatternp result= (oaInterPointerAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaTrackPattern_FromoaInterPointerAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaTrackPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaTrackPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaTrackPattern_static_find,METH_VARARGS,oaInterPointerAppDef_oaTrackPattern_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaTrackPattern_static_get,METH_VARARGS,oaInterPointerAppDef_oaTrackPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaTrackPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaTrackPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaTrackPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaTrackPattern",
           (PyObject*)(&PyoaInterPointerAppDef_oaTrackPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaTrackPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaTrackPattern_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaTrackPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaValueObject* self = (PyoaInterPointerAppDef_oaValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaValue)
    {
        PyParamoaInterPointerAppDef_oaValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaValue, Choices are:\n"
        "    (oaInterPointerAppDef_oaValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaValue_tp_dealloc(PyoaInterPointerAppDef_oaValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaValue_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaValue value;
    int convert_status=PyoaInterPointerAppDef_oaValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaInterPointerAppDef_oaValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaValue v1;
    PyParamoaInterPointerAppDef_oaValue v2;
    int convert_status1=PyoaInterPointerAppDef_oaValue_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaValue_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaValue_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaValue**) ((PyoaInterPointerAppDef_oaValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(oaInterPointerAppDef_oaValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaValue* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaValue_Type.tp_alloc(&PyoaInterPointerAppDef_oaValue_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaValueObject* self = (PyoaInterPointerAppDef_oaValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(oaInterPointerAppDef_oaValue* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaValue_Type.tp_alloc(&PyoaInterPointerAppDef_oaValue_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaValueObject* self = (PyoaInterPointerAppDef_oaValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaValue_get_doc[] = 
"Class: oaInterPointerAppDef_oaValue, Function: get\n"
"  Paramegers: (oaValue)\n"
"    Calls: oaObject* get(const oaValue* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaValue,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaValue data;
    int convert_status=PyoaInterPointerAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaValueObject* self=(PyoaInterPointerAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaValue_set_doc[] = 
"Class: oaInterPointerAppDef_oaValue, Function: set\n"
"  Paramegers: (oaValue,oaObject)\n"
"    Calls: void set(oaValue* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaValue,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaValue data;
    int convert_status=PyoaInterPointerAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaValueObject* self=(PyoaInterPointerAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaValue_isNull_doc[] =
"Class: oaInterPointerAppDef_oaValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaValue data;
    int convert_status=PyoaInterPointerAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaValue_assign_doc[] = 
"Class: oaInterPointerAppDef_oaValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaValue data;
  int convert_status=PyoaInterPointerAppDef_oaValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaValue_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaValue_get,METH_VARARGS,oaInterPointerAppDef_oaValue_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaValue_set,METH_VARARGS,oaInterPointerAppDef_oaValue_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaValue_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaValue_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaValue_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaValue_doc[] = 
"Class: oaInterPointerAppDef_oaValue\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaValue)\n"
"    Calls: (const oaInterPointerAppDef_oaValue&)\n"
"    Signature: oaInterPointerAppDef_oaValue||cref-oaInterPointerAppDef_oaValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaValue",
    sizeof(PyoaInterPointerAppDef_oaValueObject),
    0,
    (destructor)oaInterPointerAppDef_oaValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaValue_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaValue_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaValue, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaValue* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaValue|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaValue* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaValue_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaValuep result= (oaInterPointerAppDef_oaValue::find(p1.Data()));
            return PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaValuep result= (oaInterPointerAppDef_oaValue::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaValue, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaValue_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaValue, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaValue* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaValue|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaValue* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaValue|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaValue_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaValuep result= (oaInterPointerAppDef_oaValue::get(p1.Data()));
            return PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaValuep result= (oaInterPointerAppDef_oaValue::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaValuep result= (oaInterPointerAppDef_oaValue::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaValuep result= (oaInterPointerAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaValue_FromoaInterPointerAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaValue, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaValue_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaValue_static_find,METH_VARARGS,oaInterPointerAppDef_oaValue_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaValue_static_get,METH_VARARGS,oaInterPointerAppDef_oaValue_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaValue_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaValue",
           (PyObject*)(&PyoaInterPointerAppDef_oaValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaValue_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaVectorInstDefObject* self = (PyoaInterPointerAppDef_oaVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaVectorInstDef)
    {
        PyParamoaInterPointerAppDef_oaVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaVectorInstDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaVectorInstDef, Choices are:\n"
        "    (oaInterPointerAppDef_oaVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaVectorInstDef_tp_dealloc(PyoaInterPointerAppDef_oaVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaVectorInstDef value;
    int convert_status=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaInterPointerAppDef_oaVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaVectorInstDef v1;
    PyParamoaInterPointerAppDef_oaVectorInstDef v2;
    int convert_status1=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaVectorInstDef_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaVectorInstDef_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaVectorInstDef**) ((PyoaInterPointerAppDef_oaVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(oaInterPointerAppDef_oaVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaVectorInstDef* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaVectorInstDef_Type.tp_alloc(&PyoaInterPointerAppDef_oaVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaVectorInstDefObject* self = (PyoaInterPointerAppDef_oaVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(oaInterPointerAppDef_oaVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaVectorInstDef_Type.tp_alloc(&PyoaInterPointerAppDef_oaVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaVectorInstDefObject* self = (PyoaInterPointerAppDef_oaVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVectorInstDef_get_doc[] = 
"Class: oaInterPointerAppDef_oaVectorInstDef, Function: get\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: oaObject* get(const oaVectorInstDef* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaVectorInstDef,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaVectorInstDef data;
    int convert_status=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaVectorInstDefObject* self=(PyoaInterPointerAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVectorInstDef_set_doc[] = 
"Class: oaInterPointerAppDef_oaVectorInstDef, Function: set\n"
"  Paramegers: (oaVectorInstDef,oaObject)\n"
"    Calls: void set(oaVectorInstDef* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaVectorInstDef,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaVectorInstDef data;
    int convert_status=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaVectorInstDefObject* self=(PyoaInterPointerAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVectorInstDef p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVectorInstDef_isNull_doc[] =
"Class: oaInterPointerAppDef_oaVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaVectorInstDef data;
    int convert_status=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaVectorInstDef_assign_doc[] = 
"Class: oaInterPointerAppDef_oaVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaVectorInstDef data;
  int convert_status=PyoaInterPointerAppDef_oaVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaVectorInstDef_get,METH_VARARGS,oaInterPointerAppDef_oaVectorInstDef_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaVectorInstDef_set,METH_VARARGS,oaInterPointerAppDef_oaVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaVectorInstDef_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaVectorInstDef_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVectorInstDef_doc[] = 
"Class: oaInterPointerAppDef_oaVectorInstDef\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaVectorInstDef)\n"
"    Calls: (const oaInterPointerAppDef_oaVectorInstDef&)\n"
"    Signature: oaInterPointerAppDef_oaVectorInstDef||cref-oaInterPointerAppDef_oaVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaVectorInstDef",
    sizeof(PyoaInterPointerAppDef_oaVectorInstDefObject),
    0,
    (destructor)oaInterPointerAppDef_oaVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVectorInstDef_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaVectorInstDef|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaVectorInstDefp result= (oaInterPointerAppDef_oaVectorInstDef::find(p1.Data()));
            return PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaVectorInstDefp result= (oaInterPointerAppDef_oaVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVectorInstDef_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaVectorInstDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaVectorInstDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVectorInstDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaVectorInstDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVectorInstDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaVectorInstDefp result= (oaInterPointerAppDef_oaVectorInstDef::get(p1.Data()));
            return PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaVectorInstDefp result= (oaInterPointerAppDef_oaVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaVectorInstDefp result= (oaInterPointerAppDef_oaVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaVectorInstDefp result= (oaInterPointerAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaVectorInstDef_FromoaInterPointerAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaVectorInstDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaVectorInstDef_static_find,METH_VARARGS,oaInterPointerAppDef_oaVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaVectorInstDef_static_get,METH_VARARGS,oaInterPointerAppDef_oaVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaVectorInstDef",
           (PyObject*)(&PyoaInterPointerAppDef_oaVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaVectorInstDef_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaVia
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaVia_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaVia_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaViaObject* self = (PyoaInterPointerAppDef_oaViaObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaVia)
    {
        PyParamoaInterPointerAppDef_oaVia p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaVia_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaVia, Choices are:\n"
        "    (oaInterPointerAppDef_oaVia)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaVia_tp_dealloc(PyoaInterPointerAppDef_oaViaObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaVia_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaVia value;
    int convert_status=PyoaInterPointerAppDef_oaVia_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaInterPointerAppDef_oaVia::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaVia_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaVia v1;
    PyParamoaInterPointerAppDef_oaVia v2;
    int convert_status1=PyoaInterPointerAppDef_oaVia_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaVia_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaVia_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaVia* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaVia_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaVia**) ((PyoaInterPointerAppDef_oaViaObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaVia Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(oaInterPointerAppDef_oaVia** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaVia* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaVia_Type.tp_alloc(&PyoaInterPointerAppDef_oaVia_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaViaObject* self = (PyoaInterPointerAppDef_oaViaObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(oaInterPointerAppDef_oaVia* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaVia_Type.tp_alloc(&PyoaInterPointerAppDef_oaVia_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaViaObject* self = (PyoaInterPointerAppDef_oaViaObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVia_get_doc[] = 
"Class: oaInterPointerAppDef_oaVia, Function: get\n"
"  Paramegers: (oaVia)\n"
"    Calls: oaObject* get(const oaVia* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaVia,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaVia_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaVia data;
    int convert_status=PyoaInterPointerAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaObject* self=(PyoaInterPointerAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVia_set_doc[] = 
"Class: oaInterPointerAppDef_oaVia, Function: set\n"
"  Paramegers: (oaVia,oaObject)\n"
"    Calls: void set(oaVia* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaVia,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaVia_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaVia data;
    int convert_status=PyoaInterPointerAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaObject* self=(PyoaInterPointerAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVia p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVia_isNull_doc[] =
"Class: oaInterPointerAppDef_oaVia, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaVia_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaVia data;
    int convert_status=PyoaInterPointerAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaVia_assign_doc[] = 
"Class: oaInterPointerAppDef_oaVia, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaVia_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaVia data;
  int convert_status=PyoaInterPointerAppDef_oaVia_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaVia p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaVia_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaVia_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaVia_get,METH_VARARGS,oaInterPointerAppDef_oaVia_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaVia_set,METH_VARARGS,oaInterPointerAppDef_oaVia_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaVia_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaVia_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaVia_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaVia_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVia_doc[] = 
"Class: oaInterPointerAppDef_oaVia\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaVia)\n"
"    Calls: (const oaInterPointerAppDef_oaVia&)\n"
"    Signature: oaInterPointerAppDef_oaVia||cref-oaInterPointerAppDef_oaVia,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaVia_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaVia",
    sizeof(PyoaInterPointerAppDef_oaViaObject),
    0,
    (destructor)oaInterPointerAppDef_oaVia_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaVia_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaVia_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaVia_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaVia_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaVia_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVia_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaVia, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaVia* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaVia|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaVia* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaVia_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViap result= (oaInterPointerAppDef_oaVia::find(p1.Data()));
            return PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViap result= (oaInterPointerAppDef_oaVia::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaVia, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaVia_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaVia, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaVia* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVia|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaVia* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVia|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaVia_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViap result= (oaInterPointerAppDef_oaVia::get(p1.Data()));
            return PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaViap result= (oaInterPointerAppDef_oaVia::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViap result= (oaInterPointerAppDef_oaVia::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViap result= (oaInterPointerAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaVia_FromoaInterPointerAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaVia, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaVia_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaVia_static_find,METH_VARARGS,oaInterPointerAppDef_oaVia_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaVia_static_get,METH_VARARGS,oaInterPointerAppDef_oaVia_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaVia_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaVia_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaVia\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaVia",
           (PyObject*)(&PyoaInterPointerAppDef_oaVia_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaVia\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaVia_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaVia_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaViaDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaViaDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaViaDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaViaDefObject* self = (PyoaInterPointerAppDef_oaViaDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaViaDef)
    {
        PyParamoaInterPointerAppDef_oaViaDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaViaDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaViaDef, Choices are:\n"
        "    (oaInterPointerAppDef_oaViaDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaViaDef_tp_dealloc(PyoaInterPointerAppDef_oaViaDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaViaDef_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaViaDef value;
    int convert_status=PyoaInterPointerAppDef_oaViaDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaInterPointerAppDef_oaViaDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaViaDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaViaDef v1;
    PyParamoaInterPointerAppDef_oaViaDef v2;
    int convert_status1=PyoaInterPointerAppDef_oaViaDef_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaViaDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaViaDef_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaViaDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaViaDef_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaViaDef**) ((PyoaInterPointerAppDef_oaViaDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaViaDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(oaInterPointerAppDef_oaViaDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaViaDef* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaViaDef_Type.tp_alloc(&PyoaInterPointerAppDef_oaViaDef_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaViaDefObject* self = (PyoaInterPointerAppDef_oaViaDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(oaInterPointerAppDef_oaViaDef* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaViaDef_Type.tp_alloc(&PyoaInterPointerAppDef_oaViaDef_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaViaDefObject* self = (PyoaInterPointerAppDef_oaViaDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaDef_get_doc[] = 
"Class: oaInterPointerAppDef_oaViaDef, Function: get\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: oaObject* get(const oaViaDef* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaViaDef,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaViaDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaViaDef data;
    int convert_status=PyoaInterPointerAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaDefObject* self=(PyoaInterPointerAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaDef_set_doc[] = 
"Class: oaInterPointerAppDef_oaViaDef, Function: set\n"
"  Paramegers: (oaViaDef,oaObject)\n"
"    Calls: void set(oaViaDef* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaViaDef,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaViaDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaViaDef data;
    int convert_status=PyoaInterPointerAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaDefObject* self=(PyoaInterPointerAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaDef p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaDef_isNull_doc[] =
"Class: oaInterPointerAppDef_oaViaDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaViaDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaViaDef data;
    int convert_status=PyoaInterPointerAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaViaDef_assign_doc[] = 
"Class: oaInterPointerAppDef_oaViaDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaViaDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaViaDef data;
  int convert_status=PyoaInterPointerAppDef_oaViaDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaViaDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaViaDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaViaDef_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaViaDef_get,METH_VARARGS,oaInterPointerAppDef_oaViaDef_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaViaDef_set,METH_VARARGS,oaInterPointerAppDef_oaViaDef_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaViaDef_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaViaDef_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaViaDef_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaViaDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaDef_doc[] = 
"Class: oaInterPointerAppDef_oaViaDef\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaViaDef)\n"
"    Calls: (const oaInterPointerAppDef_oaViaDef&)\n"
"    Signature: oaInterPointerAppDef_oaViaDef||cref-oaInterPointerAppDef_oaViaDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaViaDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaViaDef",
    sizeof(PyoaInterPointerAppDef_oaViaDefObject),
    0,
    (destructor)oaInterPointerAppDef_oaViaDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaViaDef_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaViaDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaViaDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaViaDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaViaDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaDef_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaViaDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaViaDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaViaDef|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaViaDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaViaDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViaDefp result= (oaInterPointerAppDef_oaViaDef::find(p1.Data()));
            return PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaDefp result= (oaInterPointerAppDef_oaViaDef::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaViaDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaDef_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaViaDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaViaDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaViaDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaViaDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViaDefp result= (oaInterPointerAppDef_oaViaDef::get(p1.Data()));
            return PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaViaDefp result= (oaInterPointerAppDef_oaViaDef::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaDefp result= (oaInterPointerAppDef_oaViaDef::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaDefp result= (oaInterPointerAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaViaDef_FromoaInterPointerAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaViaDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaViaDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaViaDef_static_find,METH_VARARGS,oaInterPointerAppDef_oaViaDef_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaViaDef_static_get,METH_VARARGS,oaInterPointerAppDef_oaViaDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaViaDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaViaDef_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaViaDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaViaDef",
           (PyObject*)(&PyoaInterPointerAppDef_oaViaDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaViaDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaViaDef_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaViaDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaViaHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaViaHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaViaHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaViaHeaderObject* self = (PyoaInterPointerAppDef_oaViaHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaViaHeader)
    {
        PyParamoaInterPointerAppDef_oaViaHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaViaHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaViaHeader, Choices are:\n"
        "    (oaInterPointerAppDef_oaViaHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaViaHeader_tp_dealloc(PyoaInterPointerAppDef_oaViaHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaViaHeader_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaViaHeader value;
    int convert_status=PyoaInterPointerAppDef_oaViaHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaInterPointerAppDef_oaViaHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaViaHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaViaHeader v1;
    PyParamoaInterPointerAppDef_oaViaHeader v2;
    int convert_status1=PyoaInterPointerAppDef_oaViaHeader_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaViaHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaViaHeader_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaViaHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaViaHeader_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaViaHeader**) ((PyoaInterPointerAppDef_oaViaHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaViaHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(oaInterPointerAppDef_oaViaHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaViaHeader* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaViaHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaViaHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaViaHeaderObject* self = (PyoaInterPointerAppDef_oaViaHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(oaInterPointerAppDef_oaViaHeader* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaViaHeader_Type.tp_alloc(&PyoaInterPointerAppDef_oaViaHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaViaHeaderObject* self = (PyoaInterPointerAppDef_oaViaHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaHeader_get_doc[] = 
"Class: oaInterPointerAppDef_oaViaHeader, Function: get\n"
"  Paramegers: (oaViaHeader)\n"
"    Calls: oaObject* get(const oaViaHeader* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaViaHeader,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaViaHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaViaHeader data;
    int convert_status=PyoaInterPointerAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaHeaderObject* self=(PyoaInterPointerAppDef_oaViaHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaHeader_set_doc[] = 
"Class: oaInterPointerAppDef_oaViaHeader, Function: set\n"
"  Paramegers: (oaViaHeader,oaObject)\n"
"    Calls: void set(oaViaHeader* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaViaHeader,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaViaHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaViaHeader data;
    int convert_status=PyoaInterPointerAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaHeaderObject* self=(PyoaInterPointerAppDef_oaViaHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaHeader p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaHeader_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaHeader_isNull_doc[] =
"Class: oaInterPointerAppDef_oaViaHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaViaHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaViaHeader data;
    int convert_status=PyoaInterPointerAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaViaHeader_assign_doc[] = 
"Class: oaInterPointerAppDef_oaViaHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaViaHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaViaHeader data;
  int convert_status=PyoaInterPointerAppDef_oaViaHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaViaHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaViaHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaViaHeader_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaViaHeader_get,METH_VARARGS,oaInterPointerAppDef_oaViaHeader_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaViaHeader_set,METH_VARARGS,oaInterPointerAppDef_oaViaHeader_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaViaHeader_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaViaHeader_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaViaHeader_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaViaHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaHeader_doc[] = 
"Class: oaInterPointerAppDef_oaViaHeader\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaViaHeader)\n"
"    Calls: (const oaInterPointerAppDef_oaViaHeader&)\n"
"    Signature: oaInterPointerAppDef_oaViaHeader||cref-oaInterPointerAppDef_oaViaHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaViaHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaViaHeader",
    sizeof(PyoaInterPointerAppDef_oaViaHeaderObject),
    0,
    (destructor)oaInterPointerAppDef_oaViaHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaViaHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaViaHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaViaHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaViaHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaViaHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaHeader_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaViaHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaViaHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaViaHeader|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaViaHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaViaHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViaHeaderp result= (oaInterPointerAppDef_oaViaHeader::find(p1.Data()));
            return PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaHeaderp result= (oaInterPointerAppDef_oaViaHeader::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaViaHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaHeader_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaViaHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaViaHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaViaHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaViaHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaViaHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaViaHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViaHeaderp result= (oaInterPointerAppDef_oaViaHeader::get(p1.Data()));
            return PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaViaHeaderp result= (oaInterPointerAppDef_oaViaHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaHeaderp result= (oaInterPointerAppDef_oaViaHeader::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaHeaderp result= (oaInterPointerAppDef_oaViaHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaViaHeader_FromoaInterPointerAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaViaHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaViaHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaViaHeader_static_find,METH_VARARGS,oaInterPointerAppDef_oaViaHeader_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaViaHeader_static_get,METH_VARARGS,oaInterPointerAppDef_oaViaHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaViaHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaViaHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaViaHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaViaHeader",
           (PyObject*)(&PyoaInterPointerAppDef_oaViaHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaViaHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaViaHeader_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaViaHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaViaSpec
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaViaSpec_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaViaSpec_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaViaSpecObject* self = (PyoaInterPointerAppDef_oaViaSpecObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaViaSpec)
    {
        PyParamoaInterPointerAppDef_oaViaSpec p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaViaSpec_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaViaSpec, Choices are:\n"
        "    (oaInterPointerAppDef_oaViaSpec)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaViaSpec_tp_dealloc(PyoaInterPointerAppDef_oaViaSpecObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaViaSpec_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaViaSpec value;
    int convert_status=PyoaInterPointerAppDef_oaViaSpec_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaInterPointerAppDef_oaViaSpec::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaViaSpec_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaViaSpec v1;
    PyParamoaInterPointerAppDef_oaViaSpec v2;
    int convert_status1=PyoaInterPointerAppDef_oaViaSpec_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaViaSpec_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaViaSpec_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaViaSpec* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaViaSpec_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaViaSpec**) ((PyoaInterPointerAppDef_oaViaSpecObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaViaSpec Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(oaInterPointerAppDef_oaViaSpec** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaViaSpec* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaViaSpec_Type.tp_alloc(&PyoaInterPointerAppDef_oaViaSpec_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaViaSpecObject* self = (PyoaInterPointerAppDef_oaViaSpecObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(oaInterPointerAppDef_oaViaSpec* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaViaSpec_Type.tp_alloc(&PyoaInterPointerAppDef_oaViaSpec_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaViaSpecObject* self = (PyoaInterPointerAppDef_oaViaSpecObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaSpec_get_doc[] = 
"Class: oaInterPointerAppDef_oaViaSpec, Function: get\n"
"  Paramegers: (oaViaSpec)\n"
"    Calls: oaObject* get(const oaViaSpec* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaViaSpec,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaViaSpec_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaViaSpec data;
    int convert_status=PyoaInterPointerAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaSpecObject* self=(PyoaInterPointerAppDef_oaViaSpecObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaSpec p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaSpec_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaSpec_set_doc[] = 
"Class: oaInterPointerAppDef_oaViaSpec, Function: set\n"
"  Paramegers: (oaViaSpec,oaObject)\n"
"    Calls: void set(oaViaSpec* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaViaSpec,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaViaSpec_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaViaSpec data;
    int convert_status=PyoaInterPointerAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViaSpecObject* self=(PyoaInterPointerAppDef_oaViaSpecObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaSpec p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaSpec_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaSpec_isNull_doc[] =
"Class: oaInterPointerAppDef_oaViaSpec, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaViaSpec_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaViaSpec data;
    int convert_status=PyoaInterPointerAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaViaSpec_assign_doc[] = 
"Class: oaInterPointerAppDef_oaViaSpec, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaViaSpec_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaViaSpec data;
  int convert_status=PyoaInterPointerAppDef_oaViaSpec_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaViaSpec p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaViaSpec_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaViaSpec_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaViaSpec_get,METH_VARARGS,oaInterPointerAppDef_oaViaSpec_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaViaSpec_set,METH_VARARGS,oaInterPointerAppDef_oaViaSpec_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaViaSpec_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaViaSpec_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaViaSpec_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaViaSpec_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaSpec_doc[] = 
"Class: oaInterPointerAppDef_oaViaSpec\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaViaSpec)\n"
"    Calls: (const oaInterPointerAppDef_oaViaSpec&)\n"
"    Signature: oaInterPointerAppDef_oaViaSpec||cref-oaInterPointerAppDef_oaViaSpec,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaViaSpec_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaViaSpec",
    sizeof(PyoaInterPointerAppDef_oaViaSpecObject),
    0,
    (destructor)oaInterPointerAppDef_oaViaSpec_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaViaSpec_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaViaSpec_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaViaSpec_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaViaSpec_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaViaSpec_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaSpec_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaViaSpec, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaViaSpec* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaViaSpec|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaViaSpec* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaViaSpec_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViaSpecp result= (oaInterPointerAppDef_oaViaSpec::find(p1.Data()));
            return PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaSpecp result= (oaInterPointerAppDef_oaViaSpec::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaViaSpec, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaViaSpec_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaViaSpec, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaViaSpec* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaSpec|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaViaSpec* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaSpec|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaViaSpec* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaViaSpec* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaViaSpec_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViaSpecp result= (oaInterPointerAppDef_oaViaSpec::get(p1.Data()));
            return PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaViaSpecp result= (oaInterPointerAppDef_oaViaSpec::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaSpecp result= (oaInterPointerAppDef_oaViaSpec::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViaSpecp result= (oaInterPointerAppDef_oaViaSpec::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaViaSpec_FromoaInterPointerAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaViaSpec, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaViaSpec_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaViaSpec_static_find,METH_VARARGS,oaInterPointerAppDef_oaViaSpec_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaViaSpec_static_get,METH_VARARGS,oaInterPointerAppDef_oaViaSpec_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaViaSpec_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaViaSpec_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaViaSpec\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaViaSpec",
           (PyObject*)(&PyoaInterPointerAppDef_oaViaSpec_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaViaSpec\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaViaSpec_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaViaSpec_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaViewObject* self = (PyoaInterPointerAppDef_oaViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaView)
    {
        PyParamoaInterPointerAppDef_oaView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaView, Choices are:\n"
        "    (oaInterPointerAppDef_oaView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaView_tp_dealloc(PyoaInterPointerAppDef_oaViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaView_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaView value;
    int convert_status=PyoaInterPointerAppDef_oaView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaInterPointerAppDef_oaView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaView v1;
    PyParamoaInterPointerAppDef_oaView v2;
    int convert_status1=PyoaInterPointerAppDef_oaView_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaView_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaView* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaView_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaView**) ((PyoaInterPointerAppDef_oaViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(oaInterPointerAppDef_oaView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaView* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaView_Type.tp_alloc(&PyoaInterPointerAppDef_oaView_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaViewObject* self = (PyoaInterPointerAppDef_oaViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(oaInterPointerAppDef_oaView* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaView_Type.tp_alloc(&PyoaInterPointerAppDef_oaView_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaViewObject* self = (PyoaInterPointerAppDef_oaViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaView_get_doc[] = 
"Class: oaInterPointerAppDef_oaView, Function: get\n"
"  Paramegers: (oaView)\n"
"    Calls: oaObject* get(const oaView* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaView,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaView data;
    int convert_status=PyoaInterPointerAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViewObject* self=(PyoaInterPointerAppDef_oaViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaView_set_doc[] = 
"Class: oaInterPointerAppDef_oaView, Function: set\n"
"  Paramegers: (oaView,oaObject)\n"
"    Calls: void set(oaView* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaView,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaView data;
    int convert_status=PyoaInterPointerAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaViewObject* self=(PyoaInterPointerAppDef_oaViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaView p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaView_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaView_isNull_doc[] =
"Class: oaInterPointerAppDef_oaView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaView data;
    int convert_status=PyoaInterPointerAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaView_assign_doc[] = 
"Class: oaInterPointerAppDef_oaView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaView data;
  int convert_status=PyoaInterPointerAppDef_oaView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaView_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaView_get,METH_VARARGS,oaInterPointerAppDef_oaView_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaView_set,METH_VARARGS,oaInterPointerAppDef_oaView_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaView_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaView_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaView_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaView_doc[] = 
"Class: oaInterPointerAppDef_oaView\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaView)\n"
"    Calls: (const oaInterPointerAppDef_oaView&)\n"
"    Signature: oaInterPointerAppDef_oaView||cref-oaInterPointerAppDef_oaView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaView",
    sizeof(PyoaInterPointerAppDef_oaViewObject),
    0,
    (destructor)oaInterPointerAppDef_oaView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaView_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaView_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaView* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaView|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViewp result= (oaInterPointerAppDef_oaView::find(p1.Data()));
            return PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViewp result= (oaInterPointerAppDef_oaView::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaView_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaView* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaView|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaView* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaView|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaView* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaViewp result= (oaInterPointerAppDef_oaView::get(p1.Data()));
            return PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaViewp result= (oaInterPointerAppDef_oaView::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViewp result= (oaInterPointerAppDef_oaView::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaViewp result= (oaInterPointerAppDef_oaView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaView_FromoaInterPointerAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaView_static_find,METH_VARARGS,oaInterPointerAppDef_oaView_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaView_static_get,METH_VARARGS,oaInterPointerAppDef_oaView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaView_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaView",
           (PyObject*)(&PyoaInterPointerAppDef_oaView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaView_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaWafer
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaWafer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaWafer_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaWaferObject* self = (PyoaInterPointerAppDef_oaWaferObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaWafer)
    {
        PyParamoaInterPointerAppDef_oaWafer p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaWafer_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaWafer, Choices are:\n"
        "    (oaInterPointerAppDef_oaWafer)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaWafer_tp_dealloc(PyoaInterPointerAppDef_oaWaferObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaWafer_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaWafer value;
    int convert_status=PyoaInterPointerAppDef_oaWafer_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaInterPointerAppDef_oaWafer::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaWafer_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaWafer v1;
    PyParamoaInterPointerAppDef_oaWafer v2;
    int convert_status1=PyoaInterPointerAppDef_oaWafer_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaWafer_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaWafer_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaWafer* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaWafer_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaWafer**) ((PyoaInterPointerAppDef_oaWaferObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaWafer Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(oaInterPointerAppDef_oaWafer** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaWafer* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaWafer_Type.tp_alloc(&PyoaInterPointerAppDef_oaWafer_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaWaferObject* self = (PyoaInterPointerAppDef_oaWaferObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(oaInterPointerAppDef_oaWafer* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaWafer_Type.tp_alloc(&PyoaInterPointerAppDef_oaWafer_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaWaferObject* self = (PyoaInterPointerAppDef_oaWaferObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWafer_get_doc[] = 
"Class: oaInterPointerAppDef_oaWafer, Function: get\n"
"  Paramegers: (oaWafer)\n"
"    Calls: oaObject* get(const oaWafer* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaWafer,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaWafer_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaWafer data;
    int convert_status=PyoaInterPointerAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaWaferObject* self=(PyoaInterPointerAppDef_oaWaferObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWafer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWafer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWafer_set_doc[] = 
"Class: oaInterPointerAppDef_oaWafer, Function: set\n"
"  Paramegers: (oaWafer,oaObject)\n"
"    Calls: void set(oaWafer* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaWafer,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaWafer_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaWafer data;
    int convert_status=PyoaInterPointerAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaWaferObject* self=(PyoaInterPointerAppDef_oaWaferObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWafer p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWafer_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWafer_isNull_doc[] =
"Class: oaInterPointerAppDef_oaWafer, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaWafer_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaWafer data;
    int convert_status=PyoaInterPointerAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaWafer_assign_doc[] = 
"Class: oaInterPointerAppDef_oaWafer, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaWafer_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaWafer data;
  int convert_status=PyoaInterPointerAppDef_oaWafer_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaWafer p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaWafer_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaWafer_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaWafer_get,METH_VARARGS,oaInterPointerAppDef_oaWafer_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaWafer_set,METH_VARARGS,oaInterPointerAppDef_oaWafer_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaWafer_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaWafer_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaWafer_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaWafer_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWafer_doc[] = 
"Class: oaInterPointerAppDef_oaWafer\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaWafer)\n"
"    Calls: (const oaInterPointerAppDef_oaWafer&)\n"
"    Signature: oaInterPointerAppDef_oaWafer||cref-oaInterPointerAppDef_oaWafer,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaWafer_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaWafer",
    sizeof(PyoaInterPointerAppDef_oaWaferObject),
    0,
    (destructor)oaInterPointerAppDef_oaWafer_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaWafer_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaWafer_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaWafer_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaWafer_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaWafer_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWafer_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaWafer, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaWafer* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaWafer|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaWafer* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaWafer_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaWaferp result= (oaInterPointerAppDef_oaWafer::find(p1.Data()));
            return PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferp result= (oaInterPointerAppDef_oaWafer::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaWafer, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWafer_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaWafer, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaWafer* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWafer|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaWafer* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWafer|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaWafer* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaWafer* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaWafer_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaWaferp result= (oaInterPointerAppDef_oaWafer::get(p1.Data()));
            return PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaWaferp result= (oaInterPointerAppDef_oaWafer::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferp result= (oaInterPointerAppDef_oaWafer::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferp result= (oaInterPointerAppDef_oaWafer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaWafer_FromoaInterPointerAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaWafer, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaWafer_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaWafer_static_find,METH_VARARGS,oaInterPointerAppDef_oaWafer_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaWafer_static_get,METH_VARARGS,oaInterPointerAppDef_oaWafer_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaWafer_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaWafer_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaWafer\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaWafer",
           (PyObject*)(&PyoaInterPointerAppDef_oaWafer_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaWafer\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaWafer_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaWafer_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaWaferDesc
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaWaferDesc_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaWaferDesc_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaWaferDescObject* self = (PyoaInterPointerAppDef_oaWaferDescObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaWaferDesc)
    {
        PyParamoaInterPointerAppDef_oaWaferDesc p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaWaferDesc_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaWaferDesc, Choices are:\n"
        "    (oaInterPointerAppDef_oaWaferDesc)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaWaferDesc_tp_dealloc(PyoaInterPointerAppDef_oaWaferDescObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaWaferDesc_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaWaferDesc value;
    int convert_status=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaInterPointerAppDef_oaWaferDesc::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaWaferDesc_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaWaferDesc v1;
    PyParamoaInterPointerAppDef_oaWaferDesc v2;
    int convert_status1=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaWaferDesc_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaWaferDesc* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaWaferDesc_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaWaferDesc**) ((PyoaInterPointerAppDef_oaWaferDescObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaWaferDesc Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(oaInterPointerAppDef_oaWaferDesc** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaWaferDesc* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaWaferDesc_Type.tp_alloc(&PyoaInterPointerAppDef_oaWaferDesc_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaWaferDescObject* self = (PyoaInterPointerAppDef_oaWaferDescObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(oaInterPointerAppDef_oaWaferDesc* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaWaferDesc_Type.tp_alloc(&PyoaInterPointerAppDef_oaWaferDesc_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaWaferDescObject* self = (PyoaInterPointerAppDef_oaWaferDescObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferDesc_get_doc[] = 
"Class: oaInterPointerAppDef_oaWaferDesc, Function: get\n"
"  Paramegers: (oaWaferDesc)\n"
"    Calls: oaObject* get(const oaWaferDesc* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaWaferDesc,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferDesc_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaWaferDesc data;
    int convert_status=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaWaferDescObject* self=(PyoaInterPointerAppDef_oaWaferDescObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferDesc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferDesc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferDesc_set_doc[] = 
"Class: oaInterPointerAppDef_oaWaferDesc, Function: set\n"
"  Paramegers: (oaWaferDesc,oaObject)\n"
"    Calls: void set(oaWaferDesc* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaWaferDesc,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferDesc_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaWaferDesc data;
    int convert_status=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaWaferDescObject* self=(PyoaInterPointerAppDef_oaWaferDescObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferDesc p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferDesc_isNull_doc[] =
"Class: oaInterPointerAppDef_oaWaferDesc, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferDesc_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaWaferDesc data;
    int convert_status=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaWaferDesc_assign_doc[] = 
"Class: oaInterPointerAppDef_oaWaferDesc, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferDesc_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaWaferDesc data;
  int convert_status=PyoaInterPointerAppDef_oaWaferDesc_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaWaferDesc p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaWaferDesc_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaWaferDesc_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaWaferDesc_get,METH_VARARGS,oaInterPointerAppDef_oaWaferDesc_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaWaferDesc_set,METH_VARARGS,oaInterPointerAppDef_oaWaferDesc_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaWaferDesc_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaWaferDesc_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaWaferDesc_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaWaferDesc_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferDesc_doc[] = 
"Class: oaInterPointerAppDef_oaWaferDesc\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaWaferDesc)\n"
"    Calls: (const oaInterPointerAppDef_oaWaferDesc&)\n"
"    Signature: oaInterPointerAppDef_oaWaferDesc||cref-oaInterPointerAppDef_oaWaferDesc,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaWaferDesc_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaWaferDesc",
    sizeof(PyoaInterPointerAppDef_oaWaferDescObject),
    0,
    (destructor)oaInterPointerAppDef_oaWaferDesc_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaWaferDesc_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaWaferDesc_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaWaferDesc_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaWaferDesc_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaWaferDesc_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferDesc_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaWaferDesc, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaWaferDesc* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaWaferDesc|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaWaferDesc* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferDesc_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaWaferDescp result= (oaInterPointerAppDef_oaWaferDesc::find(p1.Data()));
            return PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferDescp result= (oaInterPointerAppDef_oaWaferDesc::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaWaferDesc, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferDesc_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaWaferDesc, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaWaferDesc* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferDesc|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaWaferDesc* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferDesc|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaWaferDesc* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaWaferDesc* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferDesc_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaWaferDescp result= (oaInterPointerAppDef_oaWaferDesc::get(p1.Data()));
            return PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaWaferDescp result= (oaInterPointerAppDef_oaWaferDesc::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferDescp result= (oaInterPointerAppDef_oaWaferDesc::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferDescp result= (oaInterPointerAppDef_oaWaferDesc::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaWaferDesc_FromoaInterPointerAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaWaferDesc, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaWaferDesc_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaWaferDesc_static_find,METH_VARARGS,oaInterPointerAppDef_oaWaferDesc_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaWaferDesc_static_get,METH_VARARGS,oaInterPointerAppDef_oaWaferDesc_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaWaferDesc_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaWaferDesc_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaWaferDesc\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaWaferDesc",
           (PyObject*)(&PyoaInterPointerAppDef_oaWaferDesc_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaWaferDesc\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaWaferDesc_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaWaferDesc_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterPointerAppDef_oaWaferFeature
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaWaferFeature_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterPointerAppDef_oaWaferFeature_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterPointerAppDef_oaWaferFeatureObject* self = (PyoaInterPointerAppDef_oaWaferFeatureObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterPointerAppDef_oaWaferFeature)
    {
        PyParamoaInterPointerAppDef_oaWaferFeature p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterPointerAppDef_oaWaferFeature_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterPointerAppDef_oaWaferFeature, Choices are:\n"
        "    (oaInterPointerAppDef_oaWaferFeature)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterPointerAppDef_oaWaferFeature_tp_dealloc(PyoaInterPointerAppDef_oaWaferFeatureObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterPointerAppDef_oaWaferFeature_tp_repr(PyObject *ob)
{
    PyParamoaInterPointerAppDef_oaWaferFeature value;
    int convert_status=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaInterPointerAppDef_oaWaferFeature::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterPointerAppDef_oaWaferFeature_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterPointerAppDef_oaWaferFeature v1;
    PyParamoaInterPointerAppDef_oaWaferFeature v2;
    int convert_status1=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob1,&v1);
    int convert_status2=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterPointerAppDef_oaWaferFeature_Convert(PyObject* ob,PyParamoaInterPointerAppDef_oaWaferFeature* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterPointerAppDef_oaWaferFeature_Check(ob)) {
        result->SetData( (oaInterPointerAppDef_oaWaferFeature**) ((PyoaInterPointerAppDef_oaWaferFeatureObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterPointerAppDef_oaWaferFeature Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(oaInterPointerAppDef_oaWaferFeature** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaInterPointerAppDef_oaWaferFeature* data=*value;
        PyObject* bself = PyoaInterPointerAppDef_oaWaferFeature_Type.tp_alloc(&PyoaInterPointerAppDef_oaWaferFeature_Type,0);
        if (bself == NULL) return bself;
        PyoaInterPointerAppDef_oaWaferFeatureObject* self = (PyoaInterPointerAppDef_oaWaferFeatureObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(oaInterPointerAppDef_oaWaferFeature* data)
{
    if (data) {
       PyObject* bself = PyoaInterPointerAppDef_oaWaferFeature_Type.tp_alloc(&PyoaInterPointerAppDef_oaWaferFeature_Type,0);
       if (bself == NULL) return bself;
       PyoaInterPointerAppDef_oaWaferFeatureObject* self = (PyoaInterPointerAppDef_oaWaferFeatureObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferFeature_get_doc[] = 
"Class: oaInterPointerAppDef_oaWaferFeature, Function: get\n"
"  Paramegers: (oaWaferFeature)\n"
"    Calls: oaObject* get(const oaWaferFeature* object)\n"
"    Signature: get|ptr-oaObject|cptr-oaWaferFeature,\n"
"    This function returns the value associated with this extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferFeature_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaWaferFeature data;
    int convert_status=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaWaferFeatureObject* self=(PyoaInterPointerAppDef_oaWaferFeatureObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferFeature p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferFeature_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaObject_FromoaObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferFeature_set_doc[] = 
"Class: oaInterPointerAppDef_oaWaferFeature, Function: set\n"
"  Paramegers: (oaWaferFeature,oaObject)\n"
"    Calls: void set(oaWaferFeature* object,const oaObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaWaferFeature,cptr-oaObject,\n"
"    This function sets the value associated with this extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The value to assign to the specified object\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferFeature_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterPointerAppDef_oaWaferFeature data;
    int convert_status=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterPointerAppDef_oaWaferFeatureObject* self=(PyoaInterPointerAppDef_oaWaferFeatureObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferFeature p1;
    PyParamoaObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferFeature_Convert,&p1,
          &PyoaObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferFeature_isNull_doc[] =
"Class: oaInterPointerAppDef_oaWaferFeature, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferFeature_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaInterPointerAppDef_oaWaferFeature data;
    int convert_status=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaInterPointerAppDef_oaWaferFeature_assign_doc[] = 
"Class: oaInterPointerAppDef_oaWaferFeature, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferFeature_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterPointerAppDef_oaWaferFeature data;
  int convert_status=PyoaInterPointerAppDef_oaWaferFeature_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterPointerAppDef_oaWaferFeature p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterPointerAppDef_oaWaferFeature_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterPointerAppDef_oaWaferFeature_methodlist[] = {
    {"get",(PyCFunction)oaInterPointerAppDef_oaWaferFeature_get,METH_VARARGS,oaInterPointerAppDef_oaWaferFeature_get_doc},
    {"set",(PyCFunction)oaInterPointerAppDef_oaWaferFeature_set,METH_VARARGS,oaInterPointerAppDef_oaWaferFeature_set_doc},
    {"isNull",(PyCFunction)oaInterPointerAppDef_oaWaferFeature_tp_isNull,METH_VARARGS,oaInterPointerAppDef_oaWaferFeature_isNull_doc},
    {"assign",(PyCFunction)oaInterPointerAppDef_oaWaferFeature_tp_assign,METH_VARARGS,oaInterPointerAppDef_oaWaferFeature_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferFeature_doc[] = 
"Class: oaInterPointerAppDef_oaWaferFeature\n"
"  The oaInterPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a database object pointer field is added to each object of the specified dataType. The default value for the object pointer is NULL. Applications can use the new field for whatever purpose is necessary.\n"
"  Note: The pointer must be NULL or must point to a persistent object in the same database. The pointer must not point at objects in another database, objects not in a database, the database itself ( oaDesign or oaTech ), or utility objects.\n"
"  This extension is similar to the oaIntraPointerAppDef , except that oaInterPointerAppDef supports pointers to other types of objects within the same database. If only pointers to objects of the same type are created, use oaIntraPointerAppDef , since it requires slightly less memory and is slightly faster.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaInterPointerAppDef_oaWaferFeature)\n"
"    Calls: (const oaInterPointerAppDef_oaWaferFeature&)\n"
"    Signature: oaInterPointerAppDef_oaWaferFeature||cref-oaInterPointerAppDef_oaWaferFeature,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterPointerAppDef_oaWaferFeature_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterPointerAppDef_oaWaferFeature",
    sizeof(PyoaInterPointerAppDef_oaWaferFeatureObject),
    0,
    (destructor)oaInterPointerAppDef_oaWaferFeature_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterPointerAppDef_oaWaferFeature_tp_compare,	/* tp_compare */
    (reprfunc)oaInterPointerAppDef_oaWaferFeature_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterPointerAppDef_oaWaferFeature_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterPointerAppDef_oaWaferFeature_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterPointerAppDef_oaWaferFeature_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferFeature_static_find_doc[] = 
"Class: oaInterPointerAppDef_oaWaferFeature, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaWaferFeature* find(const oaString& name)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaWaferFeature|cref-oaString,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaWaferFeature* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaInterPointerAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaInterPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferFeature_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaWaferFeaturep result= (oaInterPointerAppDef_oaWaferFeature::find(p1.Data()));
            return PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferFeaturep result= (oaInterPointerAppDef_oaWaferFeature::find(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaWaferFeature, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterPointerAppDef_oaWaferFeature_static_get_doc[] = 
"Class: oaInterPointerAppDef_oaWaferFeature, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterPointerAppDef_oaWaferFeature* get(const oaString& name)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferFeature|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaWaferFeature* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferFeature|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaInterPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaInterPointerAppDef_oaWaferFeature* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaInterPointerAppDef_oaWaferFeature* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaInterPointerAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaInterPointerAppDef with the specified name and associates it with the specified oaAppObjectDef class. The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaInterPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaInterPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaInterPointerAppDef_oaWaferFeature_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaInterPointerAppDef_oaWaferFeaturep result= (oaInterPointerAppDef_oaWaferFeature::get(p1.Data()));
            return PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaInterPointerAppDef_oaWaferFeaturep result= (oaInterPointerAppDef_oaWaferFeature::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferFeaturep result= (oaInterPointerAppDef_oaWaferFeature::get(p1.Data(),p2.Data()));
            return PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaInterPointerAppDef_oaWaferFeaturep result= (oaInterPointerAppDef_oaWaferFeature::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaInterPointerAppDef_oaWaferFeature_FromoaInterPointerAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaInterPointerAppDef_oaWaferFeature, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaInterPointerAppDef_oaWaferFeature_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaInterPointerAppDef_oaWaferFeature_static_find,METH_VARARGS,oaInterPointerAppDef_oaWaferFeature_static_find_doc},
    {"static_get",(PyCFunction)oaInterPointerAppDef_oaWaferFeature_static_get,METH_VARARGS,oaInterPointerAppDef_oaWaferFeature_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterPointerAppDef_oaWaferFeature_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterPointerAppDef_oaWaferFeature_Type)<0) {
      printf("** PyType_Ready failed for: oaInterPointerAppDef_oaWaferFeature\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterPointerAppDef_oaWaferFeature",
           (PyObject*)(&PyoaInterPointerAppDef_oaWaferFeature_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterPointerAppDef_oaWaferFeature\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaInterPointerAppDef_oaWaferFeature_Type.tp_dict;
    for(method=oaInterPointerAppDef_oaWaferFeature_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterpolateType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaInterpolateType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaInterpolateType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaInterpolateTypeObject* self = (PyoaInterpolateTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaInterpolateTypeEnum)
    {
        PyParamoaInterpolateTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaInterpolateTypeEnum_Convert,&p1)) {
            self->value =  new oaInterpolateType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaInterpolateType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaInterpolateType)
    {
        PyParamoaInterpolateType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaInterpolateType_Convert,&p1)) {
            self->value= new oaInterpolateType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaInterpolateType, Choices are:\n"
        "    (oaInterpolateTypeEnum)\n"
        "    (oaString)\n"
        "    (oaInterpolateType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaInterpolateType_tp_dealloc(PyoaInterpolateTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaInterpolateType_tp_repr(PyObject *ob)
{
    PyParamoaInterpolateType value;
    int convert_status=PyoaInterpolateType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[39];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaInterpolateType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaInterpolateType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaInterpolateType v1;
    PyParamoaInterpolateType v2;
    int convert_status1=PyoaInterpolateType_Convert(ob1,&v1);
    int convert_status2=PyoaInterpolateType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaInterpolateType_Convert(PyObject* ob,PyParamoaInterpolateType* result)
{
    if (ob == NULL) return 1;
    if (PyoaInterpolateType_Check(ob)) {
        result->SetData(  ((PyoaInterpolateTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterpolateType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaInterpolateType_FromoaInterpolateType(oaInterpolateType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaInterpolateType_Type.tp_alloc(&PyoaInterpolateType_Type,0);
        if (bself == NULL) return bself;
        PyoaInterpolateTypeObject* self = (PyoaInterpolateTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterpolateType_getName_doc[] = 
"Class: oaInterpolateType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaInterpolateTypeEnum object.\n"
;

static PyObject*
oaInterpolateType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterpolateType data;
    int convert_status=PyoaInterpolateType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterpolateTypeObject* self=(PyoaInterpolateTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaInterpolateType_oaInterpolateTypeEnum_doc[] = 
"Class: oaInterpolateType, Function: oaInterpolateTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaInterpolateTypeEnum oaInterpolateTypeEnum() const\n"
"    Signature: operator oaInterpolateTypeEnum|simple-oaInterpolateTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaInterpolateType object into the corresponding #oaInterpolateTypeEnum value.\n"
;

static PyObject*
oaInterpolateType_oaInterpolateTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaInterpolateType data;
    int convert_status=PyoaInterpolateType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaInterpolateTypeObject* self=(PyoaInterpolateTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaInterpolateTypeEnum result= (data.DataCall()->operator oaInterpolateTypeEnum());
        return PyoaInterpolateTypeEnum_FromoaInterpolateTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaInterpolateType_assign_doc[] = 
"Class: oaInterpolateType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaInterpolateType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaInterpolateType data;
  int convert_status=PyoaInterpolateType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaInterpolateType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaInterpolateType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaInterpolateType_methodlist[] = {
    {"getName",(PyCFunction)oaInterpolateType_getName,METH_VARARGS,oaInterpolateType_getName_doc},
    {"oaInterpolateTypeEnum",(PyCFunction)oaInterpolateType_oaInterpolateTypeEnum,METH_VARARGS,oaInterpolateType_oaInterpolateTypeEnum_doc},
    {"assign",(PyCFunction)oaInterpolateType_tp_assign,METH_VARARGS,oaInterpolateType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaInterpolateType_doc[] = 
"Class: oaInterpolateType\n"
"  The oaInterpolateType class is an enum wrapper that describes how keys in a lookup table should be interpolated if they lie between a pair of the header values for that table. See oa1DLookupTbl and oa2DLookupTbl for its usage. See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"  oaInterpolateTypeEnum\n"
"Constructors:\n"
"  Paramegers: (oaInterpolateTypeEnum)\n"
"    Calls: oaInterpolateType(oaInterpolateTypeEnum valueIn)\n"
"    Signature: oaInterpolateType||simple-oaInterpolateTypeEnum,\n"
"    This function constructs an instance of an oaInterpolateType class using the specified #oaInterpolateTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaInterpolateType(const oaString& nameIn)\n"
"    Signature: oaInterpolateType||cref-oaString,\n"
"    This function constructs an instance of an oaInterpolateType class using the #oaInterpolateTypeEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaInterpolateTypeEnum.\n"
"    oacInvalidInterpolateTypeName\n"
"    This exception is thrown if no matching name is found\n"
"  Paramegers: (oaInterpolateType)\n"
"    Calls: (const oaInterpolateType&)\n"
"    Signature: oaInterpolateType||cref-oaInterpolateType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaInterpolateType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaInterpolateType",
    sizeof(PyoaInterpolateTypeObject),
    0,
    (destructor)oaInterpolateType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaInterpolateType_tp_compare,	/* tp_compare */
    (reprfunc)oaInterpolateType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaInterpolateType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaInterpolateType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaInterpolateType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaInterpolateType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaInterpolateType_Type)<0) {
      printf("** PyType_Ready failed for: oaInterpolateType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaInterpolateType",
           (PyObject*)(&PyoaInterpolateType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaInterpolateType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaInterpolateTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaInterpolateTypeEnum_Convert(PyObject* ob,PyParamoaInterpolateTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSnapDownInterpolateType")==0) { result->SetData(oacSnapDownInterpolateType); return 1;}
        if (strcasecmp(str,"oacSnapUpInterpolateType")==0) { result->SetData(oacSnapUpInterpolateType); return 1;}
        if (strcasecmp(str,"oacLinearInterpolateType")==0) { result->SetData(oacLinearInterpolateType); return 1;}
        if (strcasecmp(str,"oacInclusiveSnapDownInterpolateType")==0) { result->SetData(oacInclusiveSnapDownInterpolateType); return 1;}
        if (strcasecmp(str,"oacInclusiveSnapUpInterpolateType")==0) { result->SetData(oacInclusiveSnapUpInterpolateType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaInterpolateTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaInterpolateTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaInterpolateTypeEnum_FromoaInterpolateTypeEnum(oaInterpolateTypeEnum ob)
{
    if (ob==oacSnapDownInterpolateType) return PyString_FromString("oacSnapDownInterpolateType");
    if (ob==oacSnapUpInterpolateType) return PyString_FromString("oacSnapUpInterpolateType");
    if (ob==oacLinearInterpolateType) return PyString_FromString("oacLinearInterpolateType");
    if (ob==oacInclusiveSnapDownInterpolateType) return PyString_FromString("oacInclusiveSnapDownInterpolateType");
    if (ob==oacInclusiveSnapUpInterpolateType) return PyString_FromString("oacInclusiveSnapUpInterpolateType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaInterpolateTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaInterpolateTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaInterpolateTypeEnum_FromoaInterpolateTypeEnum(oaInterpolateTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaInterpolateTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaInterpolateTypeEnum_doc[] =
"Type convert function for enum: oaInterpolateTypeEnum";
                               
static PyMethodDef PyoaInterpolateTypeEnum_method =
  {"oaInterpolateTypeEnum",(PyCFunction)PyoaInterpolateTypeEnum_TypeFunction,METH_VARARGS,oaInterpolateTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaInterpolateTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSnapDownInterpolateType");
    PyDict_SetItemString(mod_dict,"oacSnapDownInterpolateType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSnapUpInterpolateType");
    PyDict_SetItemString(mod_dict,"oacSnapUpInterpolateType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLinearInterpolateType");
    PyDict_SetItemString(mod_dict,"oacLinearInterpolateType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInclusiveSnapDownInterpolateType");
    PyDict_SetItemString(mod_dict,"oacInclusiveSnapDownInterpolateType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInclusiveSnapUpInterpolateType");
    PyDict_SetItemString(mod_dict,"oacInclusiveSnapUpInterpolateType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaInterpolateTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaInterpolateTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaInterpolateTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaAnalysisOpPointObject* self = (PyoaIntraPointerAppDef_oaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaAnalysisOpPoint)
    {
        PyParamoaIntraPointerAppDef_oaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaAnalysisOpPoint, Choices are:\n"
        "    (oaIntraPointerAppDef_oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaAnalysisOpPoint_tp_dealloc(PyoaIntraPointerAppDef_oaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint value;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaIntraPointerAppDef_oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint v1;
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint v2;
    int convert_status1=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaAnalysisOpPoint**) ((PyoaIntraPointerAppDef_oaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(oaIntraPointerAppDef_oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaAnalysisOpPointObject* self = (PyoaIntraPointerAppDef_oaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(oaIntraPointerAppDef_oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaAnalysisOpPointObject* self = (PyoaIntraPointerAppDef_oaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisOpPoint_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: oaAnalysisOpPoint* get(const oaAnalysisOpPoint* object)\n"
"    Signature: get|ptr-oaAnalysisOpPoint|cptr-oaAnalysisOpPoint,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAnalysisOpPointObject* self=(PyoaIntraPointerAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaAnalysisOpPointp result= (data.DataCall()->get(p1.Data()));
        return PyoaAnalysisOpPoint_FromoaAnalysisOpPoint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisOpPoint_set_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaAnalysisOpPoint,oaAnalysisOpPoint)\n"
"    Calls: void set(oaAnalysisOpPoint* object,const oaAnalysisOpPoint* otherObject)\n"
"    Signature: set|void-void|ptr-oaAnalysisOpPoint,cptr-oaAnalysisOpPoint,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAnalysisOpPointObject* self=(PyoaIntraPointerAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaAnalysisOpPoint p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaAnalysisOpPoint_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisOpPoint_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaAnalysisOpPoint_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaAnalysisOpPoint data;
  int convert_status=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaAnalysisOpPoint_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaAnalysisOpPoint_get,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisOpPoint_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaAnalysisOpPoint_set,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisOpPoint_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisOpPoint_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaAnalysisOpPoint)\n"
"    Calls: (const oaIntraPointerAppDef_oaAnalysisOpPoint&)\n"
"    Signature: oaIntraPointerAppDef_oaAnalysisOpPoint||cref-oaIntraPointerAppDef_oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaAnalysisOpPoint",
    sizeof(PyoaIntraPointerAppDef_oaAnalysisOpPointObject),
    0,
    (destructor)oaIntraPointerAppDef_oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisOpPoint_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisOpPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAnalysisOpPoint|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisOpPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaAnalysisOpPointp result= (oaIntraPointerAppDef_oaAnalysisOpPoint::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAnalysisOpPointp result= (oaIntraPointerAppDef_oaAnalysisOpPoint::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAnalysisOpPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisOpPoint_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisOpPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisOpPoint* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisOpPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaAnalysisOpPointp result= (oaIntraPointerAppDef_oaAnalysisOpPoint::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaAnalysisOpPointp result= (oaIntraPointerAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAnalysisOpPointp result= (oaIntraPointerAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAnalysisOpPointp result= (oaIntraPointerAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisOpPoint_FromoaIntraPointerAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAnalysisOpPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaAnalysisOpPoint_static_find,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisOpPoint_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaAnalysisOpPoint_static_get,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisOpPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaAnalysisOpPoint",
           (PyObject*)(&PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaAnalysisOpPoint_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaAnalysisPointObject* self = (PyoaIntraPointerAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaAnalysisPoint)
    {
        PyParamoaIntraPointerAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaIntraPointerAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaAnalysisPoint_tp_dealloc(PyoaIntraPointerAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaAnalysisPoint value;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaIntraPointerAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaAnalysisPoint v1;
    PyParamoaIntraPointerAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaAnalysisPoint**) ((PyoaIntraPointerAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(oaIntraPointerAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaAnalysisPointObject* self = (PyoaIntraPointerAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(oaIntraPointerAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaAnalysisPointObject* self = (PyoaIntraPointerAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaAnalysisPoint* get(const oaAnalysisPoint* object)\n"
"    Signature: get|ptr-oaAnalysisPoint|cptr-oaAnalysisPoint,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAnalysisPointObject* self=(PyoaIntraPointerAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaAnalysisPointp result= (data.DataCall()->get(p1.Data()));
        return PyoaAnalysisPoint_FromoaAnalysisPoint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,oaAnalysisPoint)\n"
"    Calls: void set(oaAnalysisPoint* object,const oaAnalysisPoint* otherObject)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,cptr-oaAnalysisPoint,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAnalysisPointObject* self=(PyoaIntraPointerAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaAnalysisPoint p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaAnalysisPoint_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaAnalysisPoint data;
    int convert_status=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaAnalysisPoint data;
  int convert_status=PyoaIntraPointerAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaAnalysisPoint_get,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisPoint_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaAnalysisPoint_set,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisPoint_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisPoint\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaIntraPointerAppDef_oaAnalysisPoint&)\n"
"    Signature: oaIntraPointerAppDef_oaAnalysisPoint||cref-oaIntraPointerAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaAnalysisPoint",
    sizeof(PyoaIntraPointerAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaIntraPointerAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaAnalysisPointp result= (oaIntraPointerAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAnalysisPointp result= (oaIntraPointerAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisPoint* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisPoint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaAnalysisPointp result= (oaIntraPointerAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaAnalysisPointp result= (oaIntraPointerAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAnalysisPointp result= (oaIntraPointerAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAnalysisPointp result= (oaIntraPointerAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaAnalysisPoint_FromoaIntraPointerAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaIntraPointerAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaIntraPointerAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaAppObjectObject* self = (PyoaIntraPointerAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaAppObject)
    {
        PyParamoaIntraPointerAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaAppObject, Choices are:\n"
        "    (oaIntraPointerAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaAppObject_tp_dealloc(PyoaIntraPointerAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaAppObject value;
    int convert_status=PyoaIntraPointerAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaIntraPointerAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaAppObject v1;
    PyParamoaIntraPointerAppDef_oaAppObject v2;
    int convert_status1=PyoaIntraPointerAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaAppObject**) ((PyoaIntraPointerAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAppObject_FromoaIntraPointerAppDef_oaAppObject(oaIntraPointerAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaAppObject_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaAppObjectObject* self = (PyoaIntraPointerAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAppObject_FromoaIntraPointerAppDef_oaAppObject(oaIntraPointerAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaAppObject_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaAppObjectObject* self = (PyoaIntraPointerAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAppObject_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: oaAppObject* get(const oaAppObject* object)\n"
"    Signature: get|ptr-oaAppObject|cptr-oaAppObject,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAppObject data;
    int convert_status=PyoaIntraPointerAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAppObjectObject* self=(PyoaIntraPointerAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaAppObjectp result= (data.DataCall()->get(p1.Data()));
        return PyoaAppObject_FromoaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAppObject_set_doc[] = 
"Class: oaIntraPointerAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,oaAppObject)\n"
"    Calls: void set(oaAppObject* object,const oaAppObject* otherObject)\n"
"    Signature: set|void-void|ptr-oaAppObject,cptr-oaAppObject,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAppObject data;
    int convert_status=PyoaIntraPointerAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAppObjectObject* self=(PyoaIntraPointerAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaAppObject p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaAppObject_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAppObject_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaAppObject data;
    int convert_status=PyoaIntraPointerAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaAppObject_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaAppObject data;
  int convert_status=PyoaIntraPointerAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaAppObject_get,METH_VARARGS,oaIntraPointerAppDef_oaAppObject_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaAppObject_set,METH_VARARGS,oaIntraPointerAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaAppObject_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAppObject_doc[] = 
"Class: oaIntraPointerAppDef_oaAppObject\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaAppObject)\n"
"    Calls: (const oaIntraPointerAppDef_oaAppObject&)\n"
"    Signature: oaIntraPointerAppDef_oaAppObject||cref-oaIntraPointerAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaAppObject",
    sizeof(PyoaIntraPointerAppDef_oaAppObjectObject),
    0,
    (destructor)oaIntraPointerAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAppObject_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaIntraPointerAppDef_oaAppObjectp result= (oaIntraPointerAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaIntraPointerAppDef_oaAppObject_FromoaIntraPointerAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAppObject_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAppObjectp result= (oaIntraPointerAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAppObject_FromoaIntraPointerAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAppObjectp result= (oaIntraPointerAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaAppObject_FromoaIntraPointerAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaAppObject_static_find,METH_VARARGS,oaIntraPointerAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaAppObject_static_get,METH_VARARGS,oaIntraPointerAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaAppObject",
           (PyObject*)(&PyoaIntraPointerAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaAppObject_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaAssignmentObject* self = (PyoaIntraPointerAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaAssignment)
    {
        PyParamoaIntraPointerAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaAssignment, Choices are:\n"
        "    (oaIntraPointerAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaAssignment_tp_dealloc(PyoaIntraPointerAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaAssignment value;
    int convert_status=PyoaIntraPointerAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaIntraPointerAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaAssignment v1;
    PyParamoaIntraPointerAppDef_oaAssignment v2;
    int convert_status1=PyoaIntraPointerAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaAssignment**) ((PyoaIntraPointerAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(oaIntraPointerAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaAssignment_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaAssignmentObject* self = (PyoaIntraPointerAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(oaIntraPointerAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaAssignment_Type.tp_alloc(&PyoaIntraPointerAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaAssignmentObject* self = (PyoaIntraPointerAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAssignment_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: oaAssignment* get(const oaAssignment* object)\n"
"    Signature: get|ptr-oaAssignment|cptr-oaAssignment,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAssignment data;
    int convert_status=PyoaIntraPointerAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAssignmentObject* self=(PyoaIntraPointerAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaAssignmentp result= (data.DataCall()->get(p1.Data()));
        return PyoaAssignment_FromoaAssignment(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAssignment_set_doc[] = 
"Class: oaIntraPointerAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,oaAssignment)\n"
"    Calls: void set(oaAssignment* object,const oaAssignment* otherObject)\n"
"    Signature: set|void-void|ptr-oaAssignment,cptr-oaAssignment,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaAssignment data;
    int convert_status=PyoaIntraPointerAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaAssignmentObject* self=(PyoaIntraPointerAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaAssignment p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaAssignment_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAssignment_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaAssignment data;
    int convert_status=PyoaIntraPointerAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaAssignment_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaAssignment data;
  int convert_status=PyoaIntraPointerAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaAssignment_get,METH_VARARGS,oaIntraPointerAppDef_oaAssignment_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaAssignment_set,METH_VARARGS,oaIntraPointerAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaAssignment_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAssignment_doc[] = 
"Class: oaIntraPointerAppDef_oaAssignment\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaAssignment)\n"
"    Calls: (const oaIntraPointerAppDef_oaAssignment&)\n"
"    Signature: oaIntraPointerAppDef_oaAssignment||cref-oaIntraPointerAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaAssignment",
    sizeof(PyoaIntraPointerAppDef_oaAssignmentObject),
    0,
    (destructor)oaIntraPointerAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAssignment_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaAssignmentp result= (oaIntraPointerAppDef_oaAssignment::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAssignmentp result= (oaIntraPointerAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaAssignment_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAssignment|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAssignment* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAssignment|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaAssignmentp result= (oaIntraPointerAppDef_oaAssignment::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaAssignmentp result= (oaIntraPointerAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAssignmentp result= (oaIntraPointerAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaAssignmentp result= (oaIntraPointerAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaAssignment_FromoaIntraPointerAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaAssignment_static_find,METH_VARARGS,oaIntraPointerAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaAssignment_static_get,METH_VARARGS,oaIntraPointerAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaAssignment",
           (PyObject*)(&PyoaIntraPointerAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaAssignment_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaBlockObject* self = (PyoaIntraPointerAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaBlock)
    {
        PyParamoaIntraPointerAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaBlock, Choices are:\n"
        "    (oaIntraPointerAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaBlock_tp_dealloc(PyoaIntraPointerAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaBlock value;
    int convert_status=PyoaIntraPointerAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaIntraPointerAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaBlock v1;
    PyParamoaIntraPointerAppDef_oaBlock v2;
    int convert_status1=PyoaIntraPointerAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaBlock_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaBlock**) ((PyoaIntraPointerAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(oaIntraPointerAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaBlock_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaBlockObject* self = (PyoaIntraPointerAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(oaIntraPointerAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaBlock_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaBlockObject* self = (PyoaIntraPointerAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlock_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaBlock* get(const oaBlock* object)\n"
"    Signature: get|ptr-oaBlock|cptr-oaBlock,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBlock data;
    int convert_status=PyoaIntraPointerAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBlockObject* self=(PyoaIntraPointerAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBlockp result= (data.DataCall()->get(p1.Data()));
        return PyoaBlock_FromoaBlock(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlock_set_doc[] = 
"Class: oaIntraPointerAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,oaBlock)\n"
"    Calls: void set(oaBlock* object,const oaBlock* otherObject)\n"
"    Signature: set|void-void|ptr-oaBlock,cptr-oaBlock,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBlock data;
    int convert_status=PyoaIntraPointerAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBlockObject* self=(PyoaIntraPointerAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaBlock p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaBlock_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlock_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaBlock data;
    int convert_status=PyoaIntraPointerAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaBlock_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaBlock data;
  int convert_status=PyoaIntraPointerAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaBlock_get,METH_VARARGS,oaIntraPointerAppDef_oaBlock_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaBlock_set,METH_VARARGS,oaIntraPointerAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaBlock_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaBlock_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlock_doc[] = 
"Class: oaIntraPointerAppDef_oaBlock\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaBlock)\n"
"    Calls: (const oaIntraPointerAppDef_oaBlock&)\n"
"    Signature: oaIntraPointerAppDef_oaBlock||cref-oaIntraPointerAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaBlock",
    sizeof(PyoaIntraPointerAppDef_oaBlockObject),
    0,
    (destructor)oaIntraPointerAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlock_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBlockp result= (oaIntraPointerAppDef_oaBlock::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBlockp result= (oaIntraPointerAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlock_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlock|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBlock* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlock|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBlockp result= (oaIntraPointerAppDef_oaBlock::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaBlockp result= (oaIntraPointerAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBlockp result= (oaIntraPointerAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBlockp result= (oaIntraPointerAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaBlock_FromoaIntraPointerAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaBlock_static_find,METH_VARARGS,oaIntraPointerAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaBlock_static_get,METH_VARARGS,oaIntraPointerAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaBlock",
           (PyObject*)(&PyoaIntraPointerAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaBlock_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaBlockageObject* self = (PyoaIntraPointerAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaBlockage)
    {
        PyParamoaIntraPointerAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaBlockage, Choices are:\n"
        "    (oaIntraPointerAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaBlockage_tp_dealloc(PyoaIntraPointerAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaBlockage value;
    int convert_status=PyoaIntraPointerAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaIntraPointerAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaBlockage v1;
    PyParamoaIntraPointerAppDef_oaBlockage v2;
    int convert_status1=PyoaIntraPointerAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaBlockage**) ((PyoaIntraPointerAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(oaIntraPointerAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaBlockage_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaBlockageObject* self = (PyoaIntraPointerAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(oaIntraPointerAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaBlockage_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaBlockageObject* self = (PyoaIntraPointerAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlockage_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: oaBlockage* get(const oaBlockage* object)\n"
"    Signature: get|ptr-oaBlockage|cptr-oaBlockage,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBlockage data;
    int convert_status=PyoaIntraPointerAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBlockageObject* self=(PyoaIntraPointerAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBlockagep result= (data.DataCall()->get(p1.Data()));
        return PyoaBlockage_FromoaBlockage(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlockage_set_doc[] = 
"Class: oaIntraPointerAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,oaBlockage)\n"
"    Calls: void set(oaBlockage* object,const oaBlockage* otherObject)\n"
"    Signature: set|void-void|ptr-oaBlockage,cptr-oaBlockage,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBlockage data;
    int convert_status=PyoaIntraPointerAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBlockageObject* self=(PyoaIntraPointerAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaBlockage p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaBlockage_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlockage_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaBlockage data;
    int convert_status=PyoaIntraPointerAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaBlockage_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaBlockage data;
  int convert_status=PyoaIntraPointerAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaBlockage_get,METH_VARARGS,oaIntraPointerAppDef_oaBlockage_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaBlockage_set,METH_VARARGS,oaIntraPointerAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaBlockage_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlockage_doc[] = 
"Class: oaIntraPointerAppDef_oaBlockage\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaBlockage)\n"
"    Calls: (const oaIntraPointerAppDef_oaBlockage&)\n"
"    Signature: oaIntraPointerAppDef_oaBlockage||cref-oaIntraPointerAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaBlockage",
    sizeof(PyoaIntraPointerAppDef_oaBlockageObject),
    0,
    (destructor)oaIntraPointerAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlockage_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBlockagep result= (oaIntraPointerAppDef_oaBlockage::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBlockagep result= (oaIntraPointerAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBlockage_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlockage|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBlockage* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlockage|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBlockagep result= (oaIntraPointerAppDef_oaBlockage::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaBlockagep result= (oaIntraPointerAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBlockagep result= (oaIntraPointerAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBlockagep result= (oaIntraPointerAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaBlockage_FromoaIntraPointerAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaBlockage_static_find,METH_VARARGS,oaIntraPointerAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaBlockage_static_get,METH_VARARGS,oaIntraPointerAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaBlockage",
           (PyObject*)(&PyoaIntraPointerAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaBlockage_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaBoundaryObject* self = (PyoaIntraPointerAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaBoundary)
    {
        PyParamoaIntraPointerAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaBoundary, Choices are:\n"
        "    (oaIntraPointerAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaBoundary_tp_dealloc(PyoaIntraPointerAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaBoundary value;
    int convert_status=PyoaIntraPointerAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaIntraPointerAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaBoundary v1;
    PyParamoaIntraPointerAppDef_oaBoundary v2;
    int convert_status1=PyoaIntraPointerAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaBoundary**) ((PyoaIntraPointerAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(oaIntraPointerAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaBoundary_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaBoundaryObject* self = (PyoaIntraPointerAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(oaIntraPointerAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaBoundary_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaBoundaryObject* self = (PyoaIntraPointerAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBoundary_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: oaBoundary* get(const oaBoundary* object)\n"
"    Signature: get|ptr-oaBoundary|cptr-oaBoundary,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBoundary data;
    int convert_status=PyoaIntraPointerAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBoundaryObject* self=(PyoaIntraPointerAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBoundaryp result= (data.DataCall()->get(p1.Data()));
        return PyoaBoundary_FromoaBoundary(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBoundary_set_doc[] = 
"Class: oaIntraPointerAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,oaBoundary)\n"
"    Calls: void set(oaBoundary* object,const oaBoundary* otherObject)\n"
"    Signature: set|void-void|ptr-oaBoundary,cptr-oaBoundary,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBoundary data;
    int convert_status=PyoaIntraPointerAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBoundaryObject* self=(PyoaIntraPointerAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaBoundary p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaBoundary_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBoundary_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaBoundary data;
    int convert_status=PyoaIntraPointerAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaBoundary_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaBoundary data;
  int convert_status=PyoaIntraPointerAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaBoundary_get,METH_VARARGS,oaIntraPointerAppDef_oaBoundary_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaBoundary_set,METH_VARARGS,oaIntraPointerAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaBoundary_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBoundary_doc[] = 
"Class: oaIntraPointerAppDef_oaBoundary\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaBoundary)\n"
"    Calls: (const oaIntraPointerAppDef_oaBoundary&)\n"
"    Signature: oaIntraPointerAppDef_oaBoundary||cref-oaIntraPointerAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaBoundary",
    sizeof(PyoaIntraPointerAppDef_oaBoundaryObject),
    0,
    (destructor)oaIntraPointerAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBoundary_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBoundaryp result= (oaIntraPointerAppDef_oaBoundary::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBoundaryp result= (oaIntraPointerAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBoundary_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBoundary|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBoundary* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBoundary|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBoundaryp result= (oaIntraPointerAppDef_oaBoundary::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaBoundaryp result= (oaIntraPointerAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBoundaryp result= (oaIntraPointerAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBoundaryp result= (oaIntraPointerAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaBoundary_FromoaIntraPointerAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaBoundary_static_find,METH_VARARGS,oaIntraPointerAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaBoundary_static_get,METH_VARARGS,oaIntraPointerAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaBoundary",
           (PyObject*)(&PyoaIntraPointerAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaBoundary_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaBusNetDefObject* self = (PyoaIntraPointerAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaBusNetDef)
    {
        PyParamoaIntraPointerAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaBusNetDef, Choices are:\n"
        "    (oaIntraPointerAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaBusNetDef_tp_dealloc(PyoaIntraPointerAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaBusNetDef value;
    int convert_status=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaIntraPointerAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaBusNetDef v1;
    PyParamoaIntraPointerAppDef_oaBusNetDef v2;
    int convert_status1=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaBusNetDef**) ((PyoaIntraPointerAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(oaIntraPointerAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaBusNetDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaBusNetDefObject* self = (PyoaIntraPointerAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(oaIntraPointerAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaBusNetDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaBusNetDefObject* self = (PyoaIntraPointerAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusNetDef_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: oaBusNetDef* get(const oaBusNetDef* object)\n"
"    Signature: get|ptr-oaBusNetDef|cptr-oaBusNetDef,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBusNetDef data;
    int convert_status=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBusNetDefObject* self=(PyoaIntraPointerAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBusNetDefp result= (data.DataCall()->get(p1.Data()));
        return PyoaBusNetDef_FromoaBusNetDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusNetDef_set_doc[] = 
"Class: oaIntraPointerAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,oaBusNetDef)\n"
"    Calls: void set(oaBusNetDef* object,const oaBusNetDef* otherObject)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,cptr-oaBusNetDef,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBusNetDef data;
    int convert_status=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBusNetDefObject* self=(PyoaIntraPointerAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaBusNetDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaBusNetDef_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaBusNetDef data;
    int convert_status=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaBusNetDef data;
  int convert_status=PyoaIntraPointerAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaBusNetDef_get,METH_VARARGS,oaIntraPointerAppDef_oaBusNetDef_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaBusNetDef_set,METH_VARARGS,oaIntraPointerAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusNetDef_doc[] = 
"Class: oaIntraPointerAppDef_oaBusNetDef\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaBusNetDef)\n"
"    Calls: (const oaIntraPointerAppDef_oaBusNetDef&)\n"
"    Signature: oaIntraPointerAppDef_oaBusNetDef||cref-oaIntraPointerAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaBusNetDef",
    sizeof(PyoaIntraPointerAppDef_oaBusNetDefObject),
    0,
    (destructor)oaIntraPointerAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBusNetDefp result= (oaIntraPointerAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBusNetDefp result= (oaIntraPointerAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusNetDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBusNetDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusNetDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBusNetDefp result= (oaIntraPointerAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaBusNetDefp result= (oaIntraPointerAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBusNetDefp result= (oaIntraPointerAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBusNetDefp result= (oaIntraPointerAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaBusNetDef_FromoaIntraPointerAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaBusNetDef_static_find,METH_VARARGS,oaIntraPointerAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaBusNetDef_static_get,METH_VARARGS,oaIntraPointerAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaBusNetDef",
           (PyObject*)(&PyoaIntraPointerAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaBusTermDefObject* self = (PyoaIntraPointerAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaBusTermDef)
    {
        PyParamoaIntraPointerAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaBusTermDef, Choices are:\n"
        "    (oaIntraPointerAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaBusTermDef_tp_dealloc(PyoaIntraPointerAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaBusTermDef value;
    int convert_status=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaIntraPointerAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaBusTermDef v1;
    PyParamoaIntraPointerAppDef_oaBusTermDef v2;
    int convert_status1=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaBusTermDef**) ((PyoaIntraPointerAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(oaIntraPointerAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaBusTermDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaBusTermDefObject* self = (PyoaIntraPointerAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(oaIntraPointerAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaBusTermDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaBusTermDefObject* self = (PyoaIntraPointerAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusTermDef_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: oaBusTermDef* get(const oaBusTermDef* object)\n"
"    Signature: get|ptr-oaBusTermDef|cptr-oaBusTermDef,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBusTermDef data;
    int convert_status=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBusTermDefObject* self=(PyoaIntraPointerAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBusTermDefp result= (data.DataCall()->get(p1.Data()));
        return PyoaBusTermDef_FromoaBusTermDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusTermDef_set_doc[] = 
"Class: oaIntraPointerAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,oaBusTermDef)\n"
"    Calls: void set(oaBusTermDef* object,const oaBusTermDef* otherObject)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,cptr-oaBusTermDef,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaBusTermDef data;
    int convert_status=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaBusTermDefObject* self=(PyoaIntraPointerAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaBusTermDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaBusTermDef_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaBusTermDef data;
    int convert_status=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaBusTermDef data;
  int convert_status=PyoaIntraPointerAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaBusTermDef_get,METH_VARARGS,oaIntraPointerAppDef_oaBusTermDef_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaBusTermDef_set,METH_VARARGS,oaIntraPointerAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusTermDef_doc[] = 
"Class: oaIntraPointerAppDef_oaBusTermDef\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaBusTermDef)\n"
"    Calls: (const oaIntraPointerAppDef_oaBusTermDef&)\n"
"    Signature: oaIntraPointerAppDef_oaBusTermDef||cref-oaIntraPointerAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaBusTermDef",
    sizeof(PyoaIntraPointerAppDef_oaBusTermDefObject),
    0,
    (destructor)oaIntraPointerAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBusTermDefp result= (oaIntraPointerAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBusTermDefp result= (oaIntraPointerAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusTermDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBusTermDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusTermDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaBusTermDefp result= (oaIntraPointerAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaBusTermDefp result= (oaIntraPointerAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBusTermDefp result= (oaIntraPointerAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaBusTermDefp result= (oaIntraPointerAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaBusTermDef_FromoaIntraPointerAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaBusTermDef_static_find,METH_VARARGS,oaIntraPointerAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaBusTermDef_static_get,METH_VARARGS,oaIntraPointerAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaBusTermDef",
           (PyObject*)(&PyoaIntraPointerAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaCMapObject* self = (PyoaIntraPointerAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaCMap)
    {
        PyParamoaIntraPointerAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaCMap, Choices are:\n"
        "    (oaIntraPointerAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaCMap_tp_dealloc(PyoaIntraPointerAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaCMap value;
    int convert_status=PyoaIntraPointerAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaIntraPointerAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaCMap v1;
    PyParamoaIntraPointerAppDef_oaCMap v2;
    int convert_status1=PyoaIntraPointerAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaCMap_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaCMap**) ((PyoaIntraPointerAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(oaIntraPointerAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaCMap_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaCMapObject* self = (PyoaIntraPointerAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(oaIntraPointerAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaCMap_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaCMapObject* self = (PyoaIntraPointerAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCMap_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap)\n"
"    Calls: oaCMap* get(const oaCMap* object)\n"
"    Signature: get|ptr-oaCMap|cptr-oaCMap,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCMap data;
    int convert_status=PyoaIntraPointerAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaCMapObject* self=(PyoaIntraPointerAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaCMapp result= (data.DataCall()->get(p1.Data()));
        return PyoaCMap_FromoaCMap(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCMap_set_doc[] = 
"Class: oaIntraPointerAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,oaCMap)\n"
"    Calls: void set(oaCMap* object,const oaCMap* otherObject)\n"
"    Signature: set|void-void|ptr-oaCMap,cptr-oaCMap,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCMap data;
    int convert_status=PyoaIntraPointerAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaCMapObject* self=(PyoaIntraPointerAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaCMap p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaCMap_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCMap_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaCMap data;
    int convert_status=PyoaIntraPointerAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaCMap_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaCMap data;
  int convert_status=PyoaIntraPointerAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaCMap_get,METH_VARARGS,oaIntraPointerAppDef_oaCMap_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaCMap_set,METH_VARARGS,oaIntraPointerAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaCMap_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaCMap_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCMap_doc[] = 
"Class: oaIntraPointerAppDef_oaCMap\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaCMap)\n"
"    Calls: (const oaIntraPointerAppDef_oaCMap&)\n"
"    Signature: oaIntraPointerAppDef_oaCMap||cref-oaIntraPointerAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaCMap",
    sizeof(PyoaIntraPointerAppDef_oaCMapObject),
    0,
    (destructor)oaIntraPointerAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCMap_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaCMapp result= (oaIntraPointerAppDef_oaCMap::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCMapp result= (oaIntraPointerAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCMap_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCMap|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCMap* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCMap|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaCMapp result= (oaIntraPointerAppDef_oaCMap::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaCMapp result= (oaIntraPointerAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCMapp result= (oaIntraPointerAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCMapp result= (oaIntraPointerAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaCMap_FromoaIntraPointerAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaCMap_static_find,METH_VARARGS,oaIntraPointerAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaCMap_static_get,METH_VARARGS,oaIntraPointerAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaCMap",
           (PyObject*)(&PyoaIntraPointerAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaCMap_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaCellObject* self = (PyoaIntraPointerAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaCell)
    {
        PyParamoaIntraPointerAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaCell, Choices are:\n"
        "    (oaIntraPointerAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaCell_tp_dealloc(PyoaIntraPointerAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaCell value;
    int convert_status=PyoaIntraPointerAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaIntraPointerAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaCell v1;
    PyParamoaIntraPointerAppDef_oaCell v2;
    int convert_status1=PyoaIntraPointerAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaCell_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaCell_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaCell**) ((PyoaIntraPointerAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(oaIntraPointerAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaCell* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaCell_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaCellObject* self = (PyoaIntraPointerAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(oaIntraPointerAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaCell_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaCellObject* self = (PyoaIntraPointerAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCell_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell)\n"
"    Calls: oaCell* get(const oaCell* object)\n"
"    Signature: get|ptr-oaCell|cptr-oaCell,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCell data;
    int convert_status=PyoaIntraPointerAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaCellObject* self=(PyoaIntraPointerAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaCellp result= (data.DataCall()->get(p1.Data()));
        return PyoaCell_FromoaCell(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCell_set_doc[] = 
"Class: oaIntraPointerAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,oaCell)\n"
"    Calls: void set(oaCell* object,const oaCell* otherObject)\n"
"    Signature: set|void-void|ptr-oaCell,cptr-oaCell,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCell data;
    int convert_status=PyoaIntraPointerAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaCellObject* self=(PyoaIntraPointerAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaCell p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaCell_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCell_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaCell data;
    int convert_status=PyoaIntraPointerAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaCell_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaCell data;
  int convert_status=PyoaIntraPointerAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaCell_get,METH_VARARGS,oaIntraPointerAppDef_oaCell_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaCell_set,METH_VARARGS,oaIntraPointerAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaCell_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaCell_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCell_doc[] = 
"Class: oaIntraPointerAppDef_oaCell\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaCell)\n"
"    Calls: (const oaIntraPointerAppDef_oaCell&)\n"
"    Signature: oaIntraPointerAppDef_oaCell||cref-oaIntraPointerAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaCell",
    sizeof(PyoaIntraPointerAppDef_oaCellObject),
    0,
    (destructor)oaIntraPointerAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCell_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaCellp result= (oaIntraPointerAppDef_oaCell::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCellp result= (oaIntraPointerAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCell_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCell|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCell* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCell|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaCellp result= (oaIntraPointerAppDef_oaCell::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaCellp result= (oaIntraPointerAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCellp result= (oaIntraPointerAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCellp result= (oaIntraPointerAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaCell_FromoaIntraPointerAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaCell_static_find,METH_VARARGS,oaIntraPointerAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaCell_static_get,METH_VARARGS,oaIntraPointerAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaCell",
           (PyObject*)(&PyoaIntraPointerAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaCell_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaCellViewObject* self = (PyoaIntraPointerAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaCellView)
    {
        PyParamoaIntraPointerAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaCellView, Choices are:\n"
        "    (oaIntraPointerAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaCellView_tp_dealloc(PyoaIntraPointerAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaCellView value;
    int convert_status=PyoaIntraPointerAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaIntraPointerAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaCellView v1;
    PyParamoaIntraPointerAppDef_oaCellView v2;
    int convert_status1=PyoaIntraPointerAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaCellView_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaCellView**) ((PyoaIntraPointerAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(oaIntraPointerAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaCellView_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaCellViewObject* self = (PyoaIntraPointerAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(oaIntraPointerAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaCellView_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaCellViewObject* self = (PyoaIntraPointerAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCellView_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView)\n"
"    Calls: oaCellView* get(const oaCellView* object)\n"
"    Signature: get|ptr-oaCellView|cptr-oaCellView,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCellView data;
    int convert_status=PyoaIntraPointerAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaCellViewObject* self=(PyoaIntraPointerAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaCellViewp result= (data.DataCall()->get(p1.Data()));
        return PyoaCellView_FromoaCellView(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCellView_set_doc[] = 
"Class: oaIntraPointerAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,oaCellView)\n"
"    Calls: void set(oaCellView* object,const oaCellView* otherObject)\n"
"    Signature: set|void-void|ptr-oaCellView,cptr-oaCellView,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCellView data;
    int convert_status=PyoaIntraPointerAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaCellViewObject* self=(PyoaIntraPointerAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaCellView p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaCellView_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCellView_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaCellView data;
    int convert_status=PyoaIntraPointerAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaCellView_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaCellView data;
  int convert_status=PyoaIntraPointerAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaCellView_get,METH_VARARGS,oaIntraPointerAppDef_oaCellView_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaCellView_set,METH_VARARGS,oaIntraPointerAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaCellView_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaCellView_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCellView_doc[] = 
"Class: oaIntraPointerAppDef_oaCellView\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaCellView)\n"
"    Calls: (const oaIntraPointerAppDef_oaCellView&)\n"
"    Signature: oaIntraPointerAppDef_oaCellView||cref-oaIntraPointerAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaCellView",
    sizeof(PyoaIntraPointerAppDef_oaCellViewObject),
    0,
    (destructor)oaIntraPointerAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCellView_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaCellViewp result= (oaIntraPointerAppDef_oaCellView::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCellViewp result= (oaIntraPointerAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCellView_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCellView|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCellView* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCellView|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaCellViewp result= (oaIntraPointerAppDef_oaCellView::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaCellViewp result= (oaIntraPointerAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCellViewp result= (oaIntraPointerAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaCellViewp result= (oaIntraPointerAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaCellView_FromoaIntraPointerAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaCellView_static_find,METH_VARARGS,oaIntraPointerAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaCellView_static_get,METH_VARARGS,oaIntraPointerAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaCellView",
           (PyObject*)(&PyoaIntraPointerAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaCellView_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaClusterObject* self = (PyoaIntraPointerAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaCluster)
    {
        PyParamoaIntraPointerAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaCluster, Choices are:\n"
        "    (oaIntraPointerAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaCluster_tp_dealloc(PyoaIntraPointerAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaCluster value;
    int convert_status=PyoaIntraPointerAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaIntraPointerAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaCluster v1;
    PyParamoaIntraPointerAppDef_oaCluster v2;
    int convert_status1=PyoaIntraPointerAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaCluster_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaCluster**) ((PyoaIntraPointerAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(oaIntraPointerAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaCluster_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaClusterObject* self = (PyoaIntraPointerAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(oaIntraPointerAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaCluster_Type.tp_alloc(&PyoaIntraPointerAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaClusterObject* self = (PyoaIntraPointerAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCluster_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster)\n"
"    Calls: oaCluster* get(const oaCluster* object)\n"
"    Signature: get|ptr-oaCluster|cptr-oaCluster,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCluster data;
    int convert_status=PyoaIntraPointerAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaClusterObject* self=(PyoaIntraPointerAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaClusterp result= (data.DataCall()->get(p1.Data()));
        return PyoaCluster_FromoaCluster(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCluster_set_doc[] = 
"Class: oaIntraPointerAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,oaCluster)\n"
"    Calls: void set(oaCluster* object,const oaCluster* otherObject)\n"
"    Signature: set|void-void|ptr-oaCluster,cptr-oaCluster,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaCluster data;
    int convert_status=PyoaIntraPointerAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaClusterObject* self=(PyoaIntraPointerAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaCluster p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaCluster_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCluster_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaCluster data;
    int convert_status=PyoaIntraPointerAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaCluster_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaCluster data;
  int convert_status=PyoaIntraPointerAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaCluster_get,METH_VARARGS,oaIntraPointerAppDef_oaCluster_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaCluster_set,METH_VARARGS,oaIntraPointerAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaCluster_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaCluster_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCluster_doc[] = 
"Class: oaIntraPointerAppDef_oaCluster\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaCluster)\n"
"    Calls: (const oaIntraPointerAppDef_oaCluster&)\n"
"    Signature: oaIntraPointerAppDef_oaCluster||cref-oaIntraPointerAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaCluster",
    sizeof(PyoaIntraPointerAppDef_oaClusterObject),
    0,
    (destructor)oaIntraPointerAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCluster_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaClusterp result= (oaIntraPointerAppDef_oaCluster::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaClusterp result= (oaIntraPointerAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaCluster_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCluster|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCluster* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCluster|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaClusterp result= (oaIntraPointerAppDef_oaCluster::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaClusterp result= (oaIntraPointerAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaClusterp result= (oaIntraPointerAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaClusterp result= (oaIntraPointerAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaCluster_FromoaIntraPointerAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaCluster_static_find,METH_VARARGS,oaIntraPointerAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaCluster_static_get,METH_VARARGS,oaIntraPointerAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaCluster",
           (PyObject*)(&PyoaIntraPointerAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaCluster_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConnectDefObject* self = (PyoaIntraPointerAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConnectDef)
    {
        PyParamoaIntraPointerAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConnectDef, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConnectDef_tp_dealloc(PyoaIntraPointerAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConnectDef value;
    int convert_status=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConnectDef v1;
    PyParamoaIntraPointerAppDef_oaConnectDef v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConnectDef**) ((PyoaIntraPointerAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(oaIntraPointerAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConnectDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConnectDefObject* self = (PyoaIntraPointerAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(oaIntraPointerAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConnectDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConnectDefObject* self = (PyoaIntraPointerAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConnectDef_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: oaConnectDef* get(const oaConnectDef* object)\n"
"    Signature: get|ptr-oaConnectDef|cptr-oaConnectDef,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConnectDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConnectDefObject* self=(PyoaIntraPointerAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConnectDefp result= (data.DataCall()->get(p1.Data()));
        return PyoaConnectDef_FromoaConnectDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConnectDef_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,oaConnectDef)\n"
"    Calls: void set(oaConnectDef* object,const oaConnectDef* otherObject)\n"
"    Signature: set|void-void|ptr-oaConnectDef,cptr-oaConnectDef,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConnectDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConnectDefObject* self=(PyoaIntraPointerAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaConnectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaConnectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConnectDef_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConnectDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConnectDef_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConnectDef data;
  int convert_status=PyoaIntraPointerAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConnectDef_get,METH_VARARGS,oaIntraPointerAppDef_oaConnectDef_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConnectDef_set,METH_VARARGS,oaIntraPointerAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConnectDef_doc[] = 
"Class: oaIntraPointerAppDef_oaConnectDef\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConnectDef)\n"
"    Calls: (const oaIntraPointerAppDef_oaConnectDef&)\n"
"    Signature: oaIntraPointerAppDef_oaConnectDef||cref-oaIntraPointerAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConnectDef",
    sizeof(PyoaIntraPointerAppDef_oaConnectDefObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConnectDefp result= (oaIntraPointerAppDef_oaConnectDef::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConnectDefp result= (oaIntraPointerAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConnectDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConnectDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConnectDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConnectDefp result= (oaIntraPointerAppDef_oaConnectDef::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConnectDefp result= (oaIntraPointerAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConnectDefp result= (oaIntraPointerAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConnectDefp result= (oaIntraPointerAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConnectDef_FromoaIntraPointerAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConnectDef_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConnectDef_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConnectDef",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintObject* self = (PyoaIntraPointerAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraint)
    {
        PyParamoaIntraPointerAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraint, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraint_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraint value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraint v1;
    PyParamoaIntraPointerAppDef_oaConstraint v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraint**) ((PyoaIntraPointerAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(oaIntraPointerAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraint_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintObject* self = (PyoaIntraPointerAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(oaIntraPointerAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraint_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintObject* self = (PyoaIntraPointerAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraint_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: oaConstraint* get(const oaConstraint* object)\n"
"    Signature: get|ptr-oaConstraint|cptr-oaConstraint,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraint data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintObject* self=(PyoaIntraPointerAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraint_FromoaConstraint(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraint_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,oaConstraint)\n"
"    Calls: void set(oaConstraint* object,const oaConstraint* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraint,cptr-oaConstraint,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraint data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintObject* self=(PyoaIntraPointerAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaConstraint p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaConstraint_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraint_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraint data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraint_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraint data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraint_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraint_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraint_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraint_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraint_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraint\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraint)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraint&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraint||cref-oaIntraPointerAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraint",
    sizeof(PyoaIntraPointerAppDef_oaConstraintObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraint_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintp result= (oaIntraPointerAppDef_oaConstraint::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintp result= (oaIntraPointerAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraint_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraint* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraint|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintp result= (oaIntraPointerAppDef_oaConstraint::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintp result= (oaIntraPointerAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintp result= (oaIntraPointerAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintp result= (oaIntraPointerAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraint_FromoaIntraPointerAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraint_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraint_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraint",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraint_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintDefObject* self = (PyoaIntraPointerAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraintDef)
    {
        PyParamoaIntraPointerAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraintDef, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraintDef_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraintDef value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraintDef v1;
    PyParamoaIntraPointerAppDef_oaConstraintDef v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraintDef**) ((PyoaIntraPointerAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(oaIntraPointerAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraintDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintDefObject* self = (PyoaIntraPointerAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(oaIntraPointerAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraintDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintDefObject* self = (PyoaIntraPointerAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintDef_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef)\n"
"    Calls: oaConstraintDef* get(const oaConstraintDef* object)\n"
"    Signature: get|ptr-oaConstraintDef|cptr-oaConstraintDef,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintDefObject* self=(PyoaIntraPointerAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintDefp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraintDef_FromoaConstraintDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintDef_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,oaConstraintDef)\n"
"    Calls: void set(oaConstraintDef* object,const oaConstraintDef* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,cptr-oaConstraintDef,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintDefObject* self=(PyoaIntraPointerAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaConstraintDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaConstraintDef_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraintDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraintDef data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraintDef_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintDef_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraintDef_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintDef_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintDef\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraintDef)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraintDef&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraintDef||cref-oaIntraPointerAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraintDef",
    sizeof(PyoaIntraPointerAppDef_oaConstraintDefObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintDefp result= (oaIntraPointerAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintDefp result= (oaIntraPointerAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintDefp result= (oaIntraPointerAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintDefp result= (oaIntraPointerAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintDefp result= (oaIntraPointerAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintDefp result= (oaIntraPointerAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraintDef_FromoaIntraPointerAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraintDef_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraintDef_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraintDef",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintGroupObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraintGroup)
    {
        PyParamoaIntraPointerAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraintGroup_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroup value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroup v1;
    PyParamoaIntraPointerAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraintGroup**) ((PyoaIntraPointerAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(oaIntraPointerAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintGroupObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(oaIntraPointerAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintGroupObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: oaConstraintGroup* get(const oaConstraintGroup* object)\n"
"    Signature: get|ptr-oaConstraintGroup|cptr-oaConstraintGroup,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintGroupObject* self=(PyoaIntraPointerAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintGroupp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraintGroup_FromoaConstraintGroup(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,oaConstraintGroup)\n"
"    Calls: void set(oaConstraintGroup* object,const oaConstraintGroup* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,cptr-oaConstraintGroup,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintGroupObject* self=(PyoaIntraPointerAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaConstraintGroup p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaConstraintGroup_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroup data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraintGroup data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroup_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroup_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroup_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroup_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroup\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraintGroup)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraintGroup&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraintGroup||cref-oaIntraPointerAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraintGroup",
    sizeof(PyoaIntraPointerAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintGroupp result= (oaIntraPointerAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupp result= (oaIntraPointerAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroup* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroup|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintGroupp result= (oaIntraPointerAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintGroupp result= (oaIntraPointerAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupp result= (oaIntraPointerAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupp result= (oaIntraPointerAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroup_FromoaIntraPointerAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraintGroupHeader)
    {
        PyParamoaIntraPointerAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[66];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader v1;
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraintGroupHeader**) ((PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(oaIntraPointerAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(oaIntraPointerAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader)\n"
"    Calls: oaConstraintGroupHeader* get(const oaConstraintGroupHeader* object)\n"
"    Signature: get|ptr-oaConstraintGroupHeader|cptr-oaConstraintGroupHeader,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject* self=(PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintGroupHeaderp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraintGroupHeader_FromoaConstraintGroupHeader(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,oaConstraintGroupHeader)\n"
"    Calls: void set(oaConstraintGroupHeader* object,const oaConstraintGroupHeader* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,cptr-oaConstraintGroupHeader,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject* self=(PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaConstraintGroupHeader p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaConstraintGroupHeader_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupHeader_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraintGroupHeader||cref-oaIntraPointerAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraintGroupHeader",
    sizeof(PyoaIntraPointerAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintGroupHeaderp result= (oaIntraPointerAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupHeaderp result= (oaIntraPointerAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupHeader* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintGroupHeaderp result= (oaIntraPointerAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintGroupHeaderp result= (oaIntraPointerAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupHeaderp result= (oaIntraPointerAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupHeaderp result= (oaIntraPointerAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupHeader_FromoaIntraPointerAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintGroupMemObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraintGroupMem)
    {
        PyParamoaIntraPointerAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraintGroupMem_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem v1;
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraintGroupMem**) ((PyoaIntraPointerAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(oaIntraPointerAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintGroupMemObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(oaIntraPointerAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintGroupMemObject* self = (PyoaIntraPointerAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: oaConstraintGroupMem* get(const oaConstraintGroupMem* object)\n"
"    Signature: get|ptr-oaConstraintGroupMem|cptr-oaConstraintGroupMem,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintGroupMemObject* self=(PyoaIntraPointerAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintGroupMemp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraintGroupMem_FromoaConstraintGroupMem(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,oaConstraintGroupMem)\n"
"    Calls: void set(oaConstraintGroupMem* object,const oaConstraintGroupMem* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,cptr-oaConstraintGroupMem,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintGroupMemObject* self=(PyoaIntraPointerAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaConstraintGroupMem p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaConstraintGroupMem_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupMem_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupMem\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraintGroupMem||cref-oaIntraPointerAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraintGroupMem",
    sizeof(PyoaIntraPointerAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintGroupMemp result= (oaIntraPointerAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupMemp result= (oaIntraPointerAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupMem|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupMem* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupMem|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintGroupMemp result= (oaIntraPointerAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintGroupMemp result= (oaIntraPointerAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupMemp result= (oaIntraPointerAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintGroupMemp result= (oaIntraPointerAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraintGroupMem_FromoaIntraPointerAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintParamObject* self = (PyoaIntraPointerAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraintParam)
    {
        PyParamoaIntraPointerAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraintParam, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraintParam_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraintParam value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[60];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraintParam v1;
    PyParamoaIntraPointerAppDef_oaConstraintParam v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraintParam**) ((PyoaIntraPointerAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(oaIntraPointerAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraintParam_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintParamObject* self = (PyoaIntraPointerAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(oaIntraPointerAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraintParam_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintParamObject* self = (PyoaIntraPointerAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParam_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: oaConstraintParam* get(const oaConstraintParam* object)\n"
"    Signature: get|ptr-oaConstraintParam|cptr-oaConstraintParam,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintParam data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintParamObject* self=(PyoaIntraPointerAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintParamp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraintParam_FromoaConstraintParam(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParam_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,oaConstraintParam)\n"
"    Calls: void set(oaConstraintParam* object,const oaConstraintParam* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,cptr-oaConstraintParam,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintParam data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintParamObject* self=(PyoaIntraPointerAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaConstraintParam p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaConstraintParam_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraintParam data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraintParam data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraintParam_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParam_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraintParam_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParam_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParam\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraintParam)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraintParam&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraintParam||cref-oaIntraPointerAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraintParam",
    sizeof(PyoaIntraPointerAppDef_oaConstraintParamObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintParamp result= (oaIntraPointerAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintParamp result= (oaIntraPointerAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParam|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParam* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParam|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintParamp result= (oaIntraPointerAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintParamp result= (oaIntraPointerAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintParamp result= (oaIntraPointerAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintParamp result= (oaIntraPointerAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParam_FromoaIntraPointerAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraintParam_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraintParam_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraintParam",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaConstraintParamDefObject* self = (PyoaIntraPointerAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaConstraintParamDef)
    {
        PyParamoaIntraPointerAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaIntraPointerAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaConstraintParamDef_tp_dealloc(PyoaIntraPointerAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaConstraintParamDef value;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[63];
    sprintf(buffer,"<oaIntraPointerAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaConstraintParamDef v1;
    PyParamoaIntraPointerAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaConstraintParamDef**) ((PyoaIntraPointerAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(oaIntraPointerAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaConstraintParamDefObject* self = (PyoaIntraPointerAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(oaIntraPointerAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaIntraPointerAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaConstraintParamDefObject* self = (PyoaIntraPointerAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef)\n"
"    Calls: oaConstraintParamDef* get(const oaConstraintParamDef* object)\n"
"    Signature: get|ptr-oaConstraintParamDef|cptr-oaConstraintParamDef,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintParamDefObject* self=(PyoaIntraPointerAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParamDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaConstraintParamDefp result= (data.DataCall()->get(p1.Data()));
        return PyoaConstraintParamDef_FromoaConstraintParamDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,oaConstraintParamDef)\n"
"    Calls: void set(oaConstraintParamDef* object,const oaConstraintParamDef* otherObject)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,cptr-oaConstraintParamDef,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaConstraintParamDefObject* self=(PyoaIntraPointerAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaConstraintParamDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaConstraintParamDef_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaConstraintParamDef data;
    int convert_status=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaConstraintParamDef data;
  int convert_status=PyoaIntraPointerAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaConstraintParamDef_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParamDef_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaConstraintParamDef_set,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParamDef_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParamDef\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaIntraPointerAppDef_oaConstraintParamDef&)\n"
"    Signature: oaIntraPointerAppDef_oaConstraintParamDef||cref-oaIntraPointerAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaConstraintParamDef",
    sizeof(PyoaIntraPointerAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaIntraPointerAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintParamDefp result= (oaIntraPointerAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintParamDefp result= (oaIntraPointerAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParamDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParamDef* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParamDef|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaConstraintParamDefp result= (oaIntraPointerAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaConstraintParamDefp result= (oaIntraPointerAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintParamDefp result= (oaIntraPointerAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaConstraintParamDefp result= (oaIntraPointerAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaConstraintParamDef_FromoaIntraPointerAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaIntraPointerAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaIntraPointerAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaDMDataObject* self = (PyoaIntraPointerAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaDMData)
    {
        PyParamoaIntraPointerAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaDMData, Choices are:\n"
        "    (oaIntraPointerAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaDMData_tp_dealloc(PyoaIntraPointerAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaDMData value;
    int convert_status=PyoaIntraPointerAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaIntraPointerAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaDMData v1;
    PyParamoaIntraPointerAppDef_oaDMData v2;
    int convert_status1=PyoaIntraPointerAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaDMData_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaDMData**) ((PyoaIntraPointerAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(oaIntraPointerAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaDMData_Type.tp_alloc(&PyoaIntraPointerAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaDMDataObject* self = (PyoaIntraPointerAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(oaIntraPointerAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaDMData_Type.tp_alloc(&PyoaIntraPointerAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaDMDataObject* self = (PyoaIntraPointerAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMData_get_doc[] = 
"Class: oaIntraPointerAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData)\n"
"    Calls: oaDMData* get(const oaDMData* object)\n"
"    Signature: get|ptr-oaDMData|cptr-oaDMData,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaDMData data;
    int convert_status=PyoaIntraPointerAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaDMDataObject* self=(PyoaIntraPointerAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMData_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDMDatap result= (data.DataCall()->get(p1.Data()));
        return PyoaDMData_FromoaDMData(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMData_set_doc[] = 
"Class: oaIntraPointerAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,oaDMData)\n"
"    Calls: void set(oaDMData* object,const oaDMData* otherObject)\n"
"    Signature: set|void-void|ptr-oaDMData,cptr-oaDMData,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaDMData data;
    int convert_status=PyoaIntraPointerAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaDMDataObject* self=(PyoaIntraPointerAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaDMData p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaDMData_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMData_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaDMData data;
    int convert_status=PyoaIntraPointerAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaDMData_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaDMData data;
  int convert_status=PyoaIntraPointerAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaDMData_get,METH_VARARGS,oaIntraPointerAppDef_oaDMData_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaDMData_set,METH_VARARGS,oaIntraPointerAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaDMData_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaDMData_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMData_doc[] = 
"Class: oaIntraPointerAppDef_oaDMData\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaDMData)\n"
"    Calls: (const oaIntraPointerAppDef_oaDMData&)\n"
"    Signature: oaIntraPointerAppDef_oaDMData||cref-oaIntraPointerAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaDMData",
    sizeof(PyoaIntraPointerAppDef_oaDMDataObject),
    0,
    (destructor)oaIntraPointerAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMData_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaDMDatap result= (oaIntraPointerAppDef_oaDMData::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaDMDatap result= (oaIntraPointerAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMData_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMData|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaDMData* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMData|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaDMDatap result= (oaIntraPointerAppDef_oaDMData::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaDMDatap result= (oaIntraPointerAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaDMDatap result= (oaIntraPointerAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaDMDatap result= (oaIntraPointerAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaDMData_FromoaIntraPointerAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaDMData_static_find,METH_VARARGS,oaIntraPointerAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaDMData_static_get,METH_VARARGS,oaIntraPointerAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaDMData",
           (PyObject*)(&PyoaIntraPointerAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaDMData_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaIntraPointerAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaIntraPointerAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaIntraPointerAppDef_oaDMFileObject* self = (PyoaIntraPointerAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaIntraPointerAppDef_oaDMFile)
    {
        PyParamoaIntraPointerAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaIntraPointerAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaIntraPointerAppDef_oaDMFile, Choices are:\n"
        "    (oaIntraPointerAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaIntraPointerAppDef_oaDMFile_tp_dealloc(PyoaIntraPointerAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaIntraPointerAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaIntraPointerAppDef_oaDMFile value;
    int convert_status=PyoaIntraPointerAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaIntraPointerAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaIntraPointerAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaIntraPointerAppDef_oaDMFile v1;
    PyParamoaIntraPointerAppDef_oaDMFile v2;
    int convert_status1=PyoaIntraPointerAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaIntraPointerAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaIntraPointerAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaIntraPointerAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaIntraPointerAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaIntraPointerAppDef_oaDMFile**) ((PyoaIntraPointerAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaIntraPointerAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(oaIntraPointerAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaIntraPointerAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaIntraPointerAppDef_oaDMFile_Type.tp_alloc(&PyoaIntraPointerAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaIntraPointerAppDef_oaDMFileObject* self = (PyoaIntraPointerAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(oaIntraPointerAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaIntraPointerAppDef_oaDMFile_Type.tp_alloc(&PyoaIntraPointerAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaIntraPointerAppDef_oaDMFileObject* self = (PyoaIntraPointerAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMFile_get_doc[] = 
"Class: oaIntraPointerAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: oaDMFile* get(const oaDMFile* object)\n"
"    Signature: get|ptr-oaDMFile|cptr-oaDMFile,\n"
"    This function returns the value associated with this oaIntraPointerAppDef extension for the specified object . The value is returned as a pointer to an oaObject .\n"
"    object\n"
"    The object whose extension value to return\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaDMFile data;
    int convert_status=PyoaIntraPointerAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaDMFileObject* self=(PyoaIntraPointerAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaDMFilep result= (data.DataCall()->get(p1.Data()));
        return PyoaDMFile_FromoaDMFile(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMFile_set_doc[] = 
"Class: oaIntraPointerAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,oaDMFile)\n"
"    Calls: void set(oaDMFile* object,const oaDMFile* otherObject)\n"
"    Signature: set|void-void|ptr-oaDMFile,cptr-oaDMFile,\n"
"    This function sets the value associated with this oaIntraPointerAppDef extension for the specified object to the specified value .\n"
"    object\n"
"    The object whose extension value to set\n"
"    otherObject\n"
"    The new value for this extension\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaIntraPointerAppDef_oaDMFile data;
    int convert_status=PyoaIntraPointerAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaIntraPointerAppDef_oaDMFileObject* self=(PyoaIntraPointerAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaDMFile p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaDMFile_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMFile_isNull_doc[] =
"Class: oaIntraPointerAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaIntraPointerAppDef_oaDMFile data;
    int convert_status=PyoaIntraPointerAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaIntraPointerAppDef_oaDMFile_assign_doc[] = 
"Class: oaIntraPointerAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaIntraPointerAppDef_oaDMFile data;
  int convert_status=PyoaIntraPointerAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaIntraPointerAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaIntraPointerAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaIntraPointerAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaIntraPointerAppDef_oaDMFile_get,METH_VARARGS,oaIntraPointerAppDef_oaDMFile_get_doc},
    {"set",(PyCFunction)oaIntraPointerAppDef_oaDMFile_set,METH_VARARGS,oaIntraPointerAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaIntraPointerAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaIntraPointerAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaIntraPointerAppDef_oaDMFile_tp_assign,METH_VARARGS,oaIntraPointerAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMFile_doc[] = 
"Class: oaIntraPointerAppDef_oaDMFile\n"
"  The oaIntraPointerAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a pointer field is added to each object of the specified dataType. The pointer can point to any object of the same type in the same database. The pointer cannot be used to point to anything else. The default value for the object pointer is NULL.\n"
"  Note: This extension is similar to oaInterPointerAppDef . However, since the pointers are all known to be of the same type of object, oaIntraPointerAppDef uses less space.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaIntraPointerAppDef_oaDMFile)\n"
"    Calls: (const oaIntraPointerAppDef_oaDMFile&)\n"
"    Signature: oaIntraPointerAppDef_oaDMFile||cref-oaIntraPointerAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaIntraPointerAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaIntraPointerAppDef_oaDMFile",
    sizeof(PyoaIntraPointerAppDef_oaDMFileObject),
    0,
    (destructor)oaIntraPointerAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaIntraPointerAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaIntraPointerAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaIntraPointerAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaIntraPointerAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaIntraPointerAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMFile_static_find_doc[] = 
"Class: oaIntraPointerAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaIntraPointerAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaIntraPointerAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaDMFilep result= (oaIntraPointerAppDef_oaDMFile::find(p1.Data()));
            return PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaDMFilep result= (oaIntraPointerAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaIntraPointerAppDef_oaDMFile_static_get_doc[] = 
"Class: oaIntraPointerAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaIntraPointerAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMFile|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaDMFile* get(const oaString& name,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMFile|cref-oaString,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name . The name must be unique for all extension types. You can create an oaIntraPointerAppDef extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaIntraPointerAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaBoolean)\n"
"    Calls: oaIntraPointerAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaBoolean persist)\n"
"    Signature: get|ptr-oaIntraPointerAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaBoolean,\n"
"    This function constructs an oaIntraPointerAppDef with the specified name and associates it with the specified objDef . The name must be unique for all extension types.\n"
"    name\n"
"    The name given to the oaIntraPointerAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    persist\n"
"    Saves the oaIntraPointerAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaIntraPointerAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaIntraPointerAppDef_oaDMFilep result= (oaIntraPointerAppDef_oaDMFile::get(p1.Data()));
            return PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            oaIntraPointerAppDef_oaDMFilep result= (oaIntraPointerAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaDMFilep result= (oaIntraPointerAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaIntraPointerAppDef_oaDMFilep result= (oaIntraPointerAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaIntraPointerAppDef_oaDMFile_FromoaIntraPointerAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaIntraPointerAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaIntraPointerAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaIntraPointerAppDef_oaDMFile_static_find,METH_VARARGS,oaIntraPointerAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaIntraPointerAppDef_oaDMFile_static_get,METH_VARARGS,oaIntraPointerAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaIntraPointerAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaIntraPointerAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaIntraPointerAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaIntraPointerAppDef_oaDMFile",
           (PyObject*)(&PyoaIntraPointerAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaIntraPointerAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaIntraPointerAppDef_oaDMFile_Type.tp_dict;
    for(method=oaIntraPointerAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

