
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaReticle
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaReticle_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaReticle_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaReticleObject* self = (PyoaTimeAppDef_oaReticleObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaReticle)
    {
        PyParamoaTimeAppDef_oaReticle p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaReticle_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaReticle, Choices are:\n"
        "    (oaTimeAppDef_oaReticle)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaReticle_tp_dealloc(PyoaTimeAppDef_oaReticleObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaReticle_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaReticle value;
    int convert_status=PyoaTimeAppDef_oaReticle_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaTimeAppDef_oaReticle::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaReticle_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaReticle v1;
    PyParamoaTimeAppDef_oaReticle v2;
    int convert_status1=PyoaTimeAppDef_oaReticle_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaReticle_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaReticle_Convert(PyObject* ob,PyParamoaTimeAppDef_oaReticle* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaReticle_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaReticle**) ((PyoaTimeAppDef_oaReticleObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaReticle Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(oaTimeAppDef_oaReticle** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaReticle* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaReticle_Type.tp_alloc(&PyoaTimeAppDef_oaReticle_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaReticleObject* self = (PyoaTimeAppDef_oaReticleObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(oaTimeAppDef_oaReticle* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaReticle_Type.tp_alloc(&PyoaTimeAppDef_oaReticle_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaReticleObject* self = (PyoaTimeAppDef_oaReticleObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_get_doc[] = 
"Class: oaTimeAppDef_oaReticle, Function: get\n"
"  Paramegers: (oaReticle)\n"
"    Calls: oaTime get(const oaReticle* object)\n"
"    Signature: get|simple-oaTime|cptr-oaReticle,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaReticle_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaReticle data;
    int convert_status=PyoaTimeAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaReticleObject* self=(PyoaTimeAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticle p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaReticle_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_getDefault_doc[] = 
"Class: oaTimeAppDef_oaReticle, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaReticle_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaReticle data;
    int convert_status=PyoaTimeAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaReticleObject* self=(PyoaTimeAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_set_doc[] = 
"Class: oaTimeAppDef_oaReticle, Function: set\n"
"  Paramegers: (oaReticle,oaTime)\n"
"    Calls: void set(oaReticle* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaReticle,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaReticle_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaReticle data;
    int convert_status=PyoaTimeAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaReticleObject* self=(PyoaTimeAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticle p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticle_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_isNull_doc[] =
"Class: oaTimeAppDef_oaReticle, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaReticle_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaReticle data;
    int convert_status=PyoaTimeAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaReticle_assign_doc[] = 
"Class: oaTimeAppDef_oaReticle, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaReticle_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaReticle data;
  int convert_status=PyoaTimeAppDef_oaReticle_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaReticle p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaReticle_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaReticle_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaReticle_get,METH_VARARGS,oaTimeAppDef_oaReticle_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaReticle_getDefault,METH_VARARGS,oaTimeAppDef_oaReticle_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaReticle_set,METH_VARARGS,oaTimeAppDef_oaReticle_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaReticle_tp_isNull,METH_VARARGS,oaTimeAppDef_oaReticle_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaReticle_tp_assign,METH_VARARGS,oaTimeAppDef_oaReticle_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_doc[] = 
"Class: oaTimeAppDef_oaReticle\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaReticle)\n"
"    Calls: (const oaTimeAppDef_oaReticle&)\n"
"    Signature: oaTimeAppDef_oaReticle||cref-oaTimeAppDef_oaReticle,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaReticle_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaReticle",
    sizeof(PyoaTimeAppDef_oaReticleObject),
    0,
    (destructor)oaTimeAppDef_oaReticle_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaReticle_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaReticle_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaReticle_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaReticle_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaReticle_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_static_find_doc[] = 
"Class: oaTimeAppDef_oaReticle, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaReticle* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaReticle|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaReticle* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaReticle_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::find(p1.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaReticle, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticle_static_get_doc[] = 
"Class: oaTimeAppDef_oaReticle, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaReticle* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticle|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaReticle* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticle|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaReticle* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticle|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaReticle_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::get(p1.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticlep result= (oaTimeAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaReticle_FromoaTimeAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaReticle, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaReticle_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaReticle_static_find,METH_VARARGS,oaTimeAppDef_oaReticle_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaReticle_static_get,METH_VARARGS,oaTimeAppDef_oaReticle_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaReticle_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaReticle_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaReticle\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaReticle",
           (PyObject*)(&PyoaTimeAppDef_oaReticle_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaReticle\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaReticle_Type.tp_dict;
    for(method=oaTimeAppDef_oaReticle_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaReticleRef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaReticleRef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaReticleRef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaReticleRefObject* self = (PyoaTimeAppDef_oaReticleRefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaReticleRef)
    {
        PyParamoaTimeAppDef_oaReticleRef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaReticleRef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaReticleRef, Choices are:\n"
        "    (oaTimeAppDef_oaReticleRef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaReticleRef_tp_dealloc(PyoaTimeAppDef_oaReticleRefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaReticleRef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaReticleRef value;
    int convert_status=PyoaTimeAppDef_oaReticleRef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaReticleRef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaReticleRef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaReticleRef v1;
    PyParamoaTimeAppDef_oaReticleRef v2;
    int convert_status1=PyoaTimeAppDef_oaReticleRef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaReticleRef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaReticleRef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaReticleRef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaReticleRef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaReticleRef**) ((PyoaTimeAppDef_oaReticleRefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaReticleRef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(oaTimeAppDef_oaReticleRef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaReticleRef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaReticleRef_Type.tp_alloc(&PyoaTimeAppDef_oaReticleRef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaReticleRefObject* self = (PyoaTimeAppDef_oaReticleRefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(oaTimeAppDef_oaReticleRef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaReticleRef_Type.tp_alloc(&PyoaTimeAppDef_oaReticleRef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaReticleRefObject* self = (PyoaTimeAppDef_oaReticleRefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_get_doc[] = 
"Class: oaTimeAppDef_oaReticleRef, Function: get\n"
"  Paramegers: (oaReticleRef)\n"
"    Calls: oaTime get(const oaReticleRef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaReticleRef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaReticleRef data;
    int convert_status=PyoaTimeAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaReticleRefObject* self=(PyoaTimeAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticleRef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaReticleRef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaReticleRef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaReticleRef data;
    int convert_status=PyoaTimeAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaReticleRefObject* self=(PyoaTimeAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_set_doc[] = 
"Class: oaTimeAppDef_oaReticleRef, Function: set\n"
"  Paramegers: (oaReticleRef,oaTime)\n"
"    Calls: void set(oaReticleRef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaReticleRef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaReticleRef data;
    int convert_status=PyoaTimeAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaReticleRefObject* self=(PyoaTimeAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticleRef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticleRef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_isNull_doc[] =
"Class: oaTimeAppDef_oaReticleRef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaReticleRef data;
    int convert_status=PyoaTimeAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaReticleRef_assign_doc[] = 
"Class: oaTimeAppDef_oaReticleRef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaReticleRef data;
  int convert_status=PyoaTimeAppDef_oaReticleRef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaReticleRef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaReticleRef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaReticleRef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaReticleRef_get,METH_VARARGS,oaTimeAppDef_oaReticleRef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaReticleRef_getDefault,METH_VARARGS,oaTimeAppDef_oaReticleRef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaReticleRef_set,METH_VARARGS,oaTimeAppDef_oaReticleRef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaReticleRef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaReticleRef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaReticleRef_tp_assign,METH_VARARGS,oaTimeAppDef_oaReticleRef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_doc[] = 
"Class: oaTimeAppDef_oaReticleRef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaReticleRef)\n"
"    Calls: (const oaTimeAppDef_oaReticleRef&)\n"
"    Signature: oaTimeAppDef_oaReticleRef||cref-oaTimeAppDef_oaReticleRef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaReticleRef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaReticleRef",
    sizeof(PyoaTimeAppDef_oaReticleRefObject),
    0,
    (destructor)oaTimeAppDef_oaReticleRef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaReticleRef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaReticleRef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaReticleRef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaReticleRef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaReticleRef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_static_find_doc[] = 
"Class: oaTimeAppDef_oaReticleRef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaReticleRef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaReticleRef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::find(p1.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaReticleRef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaReticleRef_static_get_doc[] = 
"Class: oaTimeAppDef_oaReticleRef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaReticleRef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaReticleRef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaReticleRef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaReticleRef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::get(p1.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaReticleRefp result= (oaTimeAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaReticleRef_FromoaTimeAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaReticleRef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaReticleRef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaReticleRef_static_find,METH_VARARGS,oaTimeAppDef_oaReticleRef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaReticleRef_static_get,METH_VARARGS,oaTimeAppDef_oaReticleRef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaReticleRef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaReticleRef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaReticleRef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaReticleRef",
           (PyObject*)(&PyoaTimeAppDef_oaReticleRef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaReticleRef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaReticleRef_Type.tp_dict;
    for(method=oaTimeAppDef_oaReticleRef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaRoute
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaRoute_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaRoute_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaRouteObject* self = (PyoaTimeAppDef_oaRouteObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaRoute)
    {
        PyParamoaTimeAppDef_oaRoute p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaRoute_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaRoute, Choices are:\n"
        "    (oaTimeAppDef_oaRoute)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaRoute_tp_dealloc(PyoaTimeAppDef_oaRouteObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaRoute_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaRoute value;
    int convert_status=PyoaTimeAppDef_oaRoute_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaTimeAppDef_oaRoute::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaRoute_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaRoute v1;
    PyParamoaTimeAppDef_oaRoute v2;
    int convert_status1=PyoaTimeAppDef_oaRoute_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaRoute_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaRoute_Convert(PyObject* ob,PyParamoaTimeAppDef_oaRoute* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaRoute_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaRoute**) ((PyoaTimeAppDef_oaRouteObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaRoute Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(oaTimeAppDef_oaRoute** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaRoute* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaRoute_Type.tp_alloc(&PyoaTimeAppDef_oaRoute_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaRouteObject* self = (PyoaTimeAppDef_oaRouteObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(oaTimeAppDef_oaRoute* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaRoute_Type.tp_alloc(&PyoaTimeAppDef_oaRoute_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaRouteObject* self = (PyoaTimeAppDef_oaRouteObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_get_doc[] = 
"Class: oaTimeAppDef_oaRoute, Function: get\n"
"  Paramegers: (oaRoute)\n"
"    Calls: oaTime get(const oaRoute* object)\n"
"    Signature: get|simple-oaTime|cptr-oaRoute,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaRoute_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRoute data;
    int convert_status=PyoaTimeAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRouteObject* self=(PyoaTimeAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRoute p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRoute_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_getDefault_doc[] = 
"Class: oaTimeAppDef_oaRoute, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaRoute_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRoute data;
    int convert_status=PyoaTimeAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRouteObject* self=(PyoaTimeAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_set_doc[] = 
"Class: oaTimeAppDef_oaRoute, Function: set\n"
"  Paramegers: (oaRoute,oaTime)\n"
"    Calls: void set(oaRoute* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaRoute,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaRoute_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRoute data;
    int convert_status=PyoaTimeAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRouteObject* self=(PyoaTimeAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRoute p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRoute_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_isNull_doc[] =
"Class: oaTimeAppDef_oaRoute, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaRoute_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaRoute data;
    int convert_status=PyoaTimeAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaRoute_assign_doc[] = 
"Class: oaTimeAppDef_oaRoute, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaRoute_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaRoute data;
  int convert_status=PyoaTimeAppDef_oaRoute_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaRoute p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaRoute_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaRoute_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaRoute_get,METH_VARARGS,oaTimeAppDef_oaRoute_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaRoute_getDefault,METH_VARARGS,oaTimeAppDef_oaRoute_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaRoute_set,METH_VARARGS,oaTimeAppDef_oaRoute_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaRoute_tp_isNull,METH_VARARGS,oaTimeAppDef_oaRoute_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaRoute_tp_assign,METH_VARARGS,oaTimeAppDef_oaRoute_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_doc[] = 
"Class: oaTimeAppDef_oaRoute\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaRoute)\n"
"    Calls: (const oaTimeAppDef_oaRoute&)\n"
"    Signature: oaTimeAppDef_oaRoute||cref-oaTimeAppDef_oaRoute,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaRoute_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaRoute",
    sizeof(PyoaTimeAppDef_oaRouteObject),
    0,
    (destructor)oaTimeAppDef_oaRoute_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaRoute_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaRoute_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaRoute_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaRoute_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaRoute_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_static_find_doc[] = 
"Class: oaTimeAppDef_oaRoute, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaRoute* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaRoute|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaRoute* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaRoute_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::find(p1.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaRoute, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRoute_static_get_doc[] = 
"Class: oaTimeAppDef_oaRoute, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaRoute* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRoute|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaRoute* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRoute|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaRoute* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRoute|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaRoute_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::get(p1.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRoutep result= (oaTimeAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaRoute_FromoaTimeAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaRoute, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaRoute_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaRoute_static_find,METH_VARARGS,oaTimeAppDef_oaRoute_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaRoute_static_get,METH_VARARGS,oaTimeAppDef_oaRoute_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaRoute_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaRoute_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaRoute\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaRoute",
           (PyObject*)(&PyoaTimeAppDef_oaRoute_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaRoute\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaRoute_Type.tp_dict;
    for(method=oaTimeAppDef_oaRoute_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaRow
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaRow_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaRow_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaRowObject* self = (PyoaTimeAppDef_oaRowObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaRow)
    {
        PyParamoaTimeAppDef_oaRow p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaRow_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaRow, Choices are:\n"
        "    (oaTimeAppDef_oaRow)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaRow_tp_dealloc(PyoaTimeAppDef_oaRowObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaRow_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaRow value;
    int convert_status=PyoaTimeAppDef_oaRow_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaTimeAppDef_oaRow::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaRow_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaRow v1;
    PyParamoaTimeAppDef_oaRow v2;
    int convert_status1=PyoaTimeAppDef_oaRow_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaRow_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaRow_Convert(PyObject* ob,PyParamoaTimeAppDef_oaRow* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaRow_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaRow**) ((PyoaTimeAppDef_oaRowObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaRow Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(oaTimeAppDef_oaRow** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaRow* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaRow_Type.tp_alloc(&PyoaTimeAppDef_oaRow_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaRowObject* self = (PyoaTimeAppDef_oaRowObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(oaTimeAppDef_oaRow* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaRow_Type.tp_alloc(&PyoaTimeAppDef_oaRow_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaRowObject* self = (PyoaTimeAppDef_oaRowObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_get_doc[] = 
"Class: oaTimeAppDef_oaRow, Function: get\n"
"  Paramegers: (oaRow)\n"
"    Calls: oaTime get(const oaRow* object)\n"
"    Signature: get|simple-oaTime|cptr-oaRow,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaRow_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRow data;
    int convert_status=PyoaTimeAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRowObject* self=(PyoaTimeAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRow_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_getDefault_doc[] = 
"Class: oaTimeAppDef_oaRow, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaRow_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRow data;
    int convert_status=PyoaTimeAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRowObject* self=(PyoaTimeAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_set_doc[] = 
"Class: oaTimeAppDef_oaRow, Function: set\n"
"  Paramegers: (oaRow,oaTime)\n"
"    Calls: void set(oaRow* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaRow,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaRow_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRow data;
    int convert_status=PyoaTimeAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRowObject* self=(PyoaTimeAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRow_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_isNull_doc[] =
"Class: oaTimeAppDef_oaRow, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaRow_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaRow data;
    int convert_status=PyoaTimeAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaRow_assign_doc[] = 
"Class: oaTimeAppDef_oaRow, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaRow_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaRow data;
  int convert_status=PyoaTimeAppDef_oaRow_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaRow p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaRow_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaRow_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaRow_get,METH_VARARGS,oaTimeAppDef_oaRow_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaRow_getDefault,METH_VARARGS,oaTimeAppDef_oaRow_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaRow_set,METH_VARARGS,oaTimeAppDef_oaRow_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaRow_tp_isNull,METH_VARARGS,oaTimeAppDef_oaRow_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaRow_tp_assign,METH_VARARGS,oaTimeAppDef_oaRow_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_doc[] = 
"Class: oaTimeAppDef_oaRow\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaRow)\n"
"    Calls: (const oaTimeAppDef_oaRow&)\n"
"    Signature: oaTimeAppDef_oaRow||cref-oaTimeAppDef_oaRow,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaRow_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaRow",
    sizeof(PyoaTimeAppDef_oaRowObject),
    0,
    (destructor)oaTimeAppDef_oaRow_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaRow_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaRow_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaRow_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaRow_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaRow_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_static_find_doc[] = 
"Class: oaTimeAppDef_oaRow, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaRow* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaRow|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaRow* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaRow_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::find(p1.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaRow, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRow_static_get_doc[] = 
"Class: oaTimeAppDef_oaRow, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaRow* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRow|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaRow* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRow|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaRow* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRow|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaRow_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::get(p1.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowp result= (oaTimeAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaRow_FromoaTimeAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaRow, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaRow_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaRow_static_find,METH_VARARGS,oaTimeAppDef_oaRow_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaRow_static_get,METH_VARARGS,oaTimeAppDef_oaRow_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaRow_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaRow_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaRow\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaRow",
           (PyObject*)(&PyoaTimeAppDef_oaRow_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaRow\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaRow_Type.tp_dict;
    for(method=oaTimeAppDef_oaRow_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaRowHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaRowHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaRowHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaRowHeaderObject* self = (PyoaTimeAppDef_oaRowHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaRowHeader)
    {
        PyParamoaTimeAppDef_oaRowHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaRowHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaRowHeader, Choices are:\n"
        "    (oaTimeAppDef_oaRowHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaRowHeader_tp_dealloc(PyoaTimeAppDef_oaRowHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaRowHeader_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaRowHeader value;
    int convert_status=PyoaTimeAppDef_oaRowHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaTimeAppDef_oaRowHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaRowHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaRowHeader v1;
    PyParamoaTimeAppDef_oaRowHeader v2;
    int convert_status1=PyoaTimeAppDef_oaRowHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaRowHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaRowHeader_Convert(PyObject* ob,PyParamoaTimeAppDef_oaRowHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaRowHeader_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaRowHeader**) ((PyoaTimeAppDef_oaRowHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaRowHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(oaTimeAppDef_oaRowHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaRowHeader* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaRowHeader_Type.tp_alloc(&PyoaTimeAppDef_oaRowHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaRowHeaderObject* self = (PyoaTimeAppDef_oaRowHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(oaTimeAppDef_oaRowHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaRowHeader_Type.tp_alloc(&PyoaTimeAppDef_oaRowHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaRowHeaderObject* self = (PyoaTimeAppDef_oaRowHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_get_doc[] = 
"Class: oaTimeAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaRowHeader)\n"
"    Calls: oaTime get(const oaRowHeader* object)\n"
"    Signature: get|simple-oaTime|cptr-oaRowHeader,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRowHeader data;
    int convert_status=PyoaTimeAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRowHeaderObject* self=(PyoaTimeAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRowHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_getDefault_doc[] = 
"Class: oaTimeAppDef_oaRowHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRowHeader data;
    int convert_status=PyoaTimeAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRowHeaderObject* self=(PyoaTimeAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_set_doc[] = 
"Class: oaTimeAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaRowHeader,oaTime)\n"
"    Calls: void set(oaRowHeader* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaRowHeader,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaRowHeader data;
    int convert_status=PyoaTimeAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaRowHeaderObject* self=(PyoaTimeAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRowHeader_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_isNull_doc[] =
"Class: oaTimeAppDef_oaRowHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaRowHeader data;
    int convert_status=PyoaTimeAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaRowHeader_assign_doc[] = 
"Class: oaTimeAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaRowHeader data;
  int convert_status=PyoaTimeAppDef_oaRowHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaRowHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaRowHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaRowHeader_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaRowHeader_get,METH_VARARGS,oaTimeAppDef_oaRowHeader_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaRowHeader_getDefault,METH_VARARGS,oaTimeAppDef_oaRowHeader_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaRowHeader_set,METH_VARARGS,oaTimeAppDef_oaRowHeader_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaRowHeader_tp_isNull,METH_VARARGS,oaTimeAppDef_oaRowHeader_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaRowHeader_tp_assign,METH_VARARGS,oaTimeAppDef_oaRowHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_doc[] = 
"Class: oaTimeAppDef_oaRowHeader\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaRowHeader)\n"
"    Calls: (const oaTimeAppDef_oaRowHeader&)\n"
"    Signature: oaTimeAppDef_oaRowHeader||cref-oaTimeAppDef_oaRowHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaRowHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaRowHeader",
    sizeof(PyoaTimeAppDef_oaRowHeaderObject),
    0,
    (destructor)oaTimeAppDef_oaRowHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaRowHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaRowHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaRowHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaRowHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaRowHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_static_find_doc[] = 
"Class: oaTimeAppDef_oaRowHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaRowHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaRowHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::find(p1.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaRowHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaRowHeader_static_get_doc[] = 
"Class: oaTimeAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaRowHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaRowHeader* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaRowHeader* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaRowHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::get(p1.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaRowHeaderp result= (oaTimeAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaRowHeader_FromoaTimeAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaRowHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaRowHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaRowHeader_static_find,METH_VARARGS,oaTimeAppDef_oaRowHeader_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaRowHeader_static_get,METH_VARARGS,oaTimeAppDef_oaRowHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaRowHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaRowHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaRowHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaRowHeader",
           (PyObject*)(&PyoaTimeAppDef_oaRowHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaRowHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaRowHeader_Type.tp_dict;
    for(method=oaTimeAppDef_oaRowHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaScanChain
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaScanChain_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaScanChain_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaScanChainObject* self = (PyoaTimeAppDef_oaScanChainObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaScanChain)
    {
        PyParamoaTimeAppDef_oaScanChain p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaScanChain_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaScanChain, Choices are:\n"
        "    (oaTimeAppDef_oaScanChain)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaScanChain_tp_dealloc(PyoaTimeAppDef_oaScanChainObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaScanChain_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaScanChain value;
    int convert_status=PyoaTimeAppDef_oaScanChain_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaTimeAppDef_oaScanChain::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaScanChain_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaScanChain v1;
    PyParamoaTimeAppDef_oaScanChain v2;
    int convert_status1=PyoaTimeAppDef_oaScanChain_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaScanChain_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaScanChain_Convert(PyObject* ob,PyParamoaTimeAppDef_oaScanChain* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaScanChain_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaScanChain**) ((PyoaTimeAppDef_oaScanChainObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaScanChain Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(oaTimeAppDef_oaScanChain** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaScanChain* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaScanChain_Type.tp_alloc(&PyoaTimeAppDef_oaScanChain_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaScanChainObject* self = (PyoaTimeAppDef_oaScanChainObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(oaTimeAppDef_oaScanChain* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaScanChain_Type.tp_alloc(&PyoaTimeAppDef_oaScanChain_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaScanChainObject* self = (PyoaTimeAppDef_oaScanChainObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_get_doc[] = 
"Class: oaTimeAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaScanChain)\n"
"    Calls: oaTime get(const oaScanChain* object)\n"
"    Signature: get|simple-oaTime|cptr-oaScanChain,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChain data;
    int convert_status=PyoaTimeAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainObject* self=(PyoaTimeAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChain_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_getDefault_doc[] = 
"Class: oaTimeAppDef_oaScanChain, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChain data;
    int convert_status=PyoaTimeAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainObject* self=(PyoaTimeAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_set_doc[] = 
"Class: oaTimeAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaScanChain,oaTime)\n"
"    Calls: void set(oaScanChain* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaScanChain,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChain data;
    int convert_status=PyoaTimeAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainObject* self=(PyoaTimeAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChain_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_isNull_doc[] =
"Class: oaTimeAppDef_oaScanChain, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaScanChain data;
    int convert_status=PyoaTimeAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaScanChain_assign_doc[] = 
"Class: oaTimeAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaScanChain data;
  int convert_status=PyoaTimeAppDef_oaScanChain_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaScanChain p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaScanChain_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaScanChain_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaScanChain_get,METH_VARARGS,oaTimeAppDef_oaScanChain_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaScanChain_getDefault,METH_VARARGS,oaTimeAppDef_oaScanChain_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaScanChain_set,METH_VARARGS,oaTimeAppDef_oaScanChain_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaScanChain_tp_isNull,METH_VARARGS,oaTimeAppDef_oaScanChain_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaScanChain_tp_assign,METH_VARARGS,oaTimeAppDef_oaScanChain_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_doc[] = 
"Class: oaTimeAppDef_oaScanChain\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaScanChain)\n"
"    Calls: (const oaTimeAppDef_oaScanChain&)\n"
"    Signature: oaTimeAppDef_oaScanChain||cref-oaTimeAppDef_oaScanChain,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaScanChain_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaScanChain",
    sizeof(PyoaTimeAppDef_oaScanChainObject),
    0,
    (destructor)oaTimeAppDef_oaScanChain_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaScanChain_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaScanChain_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaScanChain_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaScanChain_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaScanChain_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_static_find_doc[] = 
"Class: oaTimeAppDef_oaScanChain, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaScanChain* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaScanChain|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaScanChain* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::find(p1.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaScanChain, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChain_static_get_doc[] = 
"Class: oaTimeAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaScanChain* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChain|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaScanChain* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChain|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaScanChain* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChain|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaScanChain_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::get(p1.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainp result= (oaTimeAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaScanChain_FromoaTimeAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaScanChain, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaScanChain_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaScanChain_static_find,METH_VARARGS,oaTimeAppDef_oaScanChain_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaScanChain_static_get,METH_VARARGS,oaTimeAppDef_oaScanChain_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaScanChain_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaScanChain_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaScanChain\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaScanChain",
           (PyObject*)(&PyoaTimeAppDef_oaScanChain_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaScanChain\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaScanChain_Type.tp_dict;
    for(method=oaTimeAppDef_oaScanChain_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaScanChainInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaScanChainInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaScanChainInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaScanChainInstObject* self = (PyoaTimeAppDef_oaScanChainInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaScanChainInst)
    {
        PyParamoaTimeAppDef_oaScanChainInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaScanChainInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaScanChainInst, Choices are:\n"
        "    (oaTimeAppDef_oaScanChainInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaScanChainInst_tp_dealloc(PyoaTimeAppDef_oaScanChainInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaScanChainInst_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaScanChainInst value;
    int convert_status=PyoaTimeAppDef_oaScanChainInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaTimeAppDef_oaScanChainInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaScanChainInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaScanChainInst v1;
    PyParamoaTimeAppDef_oaScanChainInst v2;
    int convert_status1=PyoaTimeAppDef_oaScanChainInst_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaScanChainInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaScanChainInst_Convert(PyObject* ob,PyParamoaTimeAppDef_oaScanChainInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaScanChainInst_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaScanChainInst**) ((PyoaTimeAppDef_oaScanChainInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaScanChainInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(oaTimeAppDef_oaScanChainInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaScanChainInst* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaScanChainInst_Type.tp_alloc(&PyoaTimeAppDef_oaScanChainInst_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaScanChainInstObject* self = (PyoaTimeAppDef_oaScanChainInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(oaTimeAppDef_oaScanChainInst* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaScanChainInst_Type.tp_alloc(&PyoaTimeAppDef_oaScanChainInst_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaScanChainInstObject* self = (PyoaTimeAppDef_oaScanChainInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_get_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaScanChainInst)\n"
"    Calls: oaTime get(const oaScanChainInst* object)\n"
"    Signature: get|simple-oaTime|cptr-oaScanChainInst,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChainInst data;
    int convert_status=PyoaTimeAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainInstObject* self=(PyoaTimeAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChainInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_getDefault_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChainInst data;
    int convert_status=PyoaTimeAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainInstObject* self=(PyoaTimeAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_set_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaScanChainInst,oaTime)\n"
"    Calls: void set(oaScanChainInst* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaScanChainInst,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChainInst data;
    int convert_status=PyoaTimeAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainInstObject* self=(PyoaTimeAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainInst_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_isNull_doc[] =
"Class: oaTimeAppDef_oaScanChainInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaScanChainInst data;
    int convert_status=PyoaTimeAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaScanChainInst_assign_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaScanChainInst data;
  int convert_status=PyoaTimeAppDef_oaScanChainInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaScanChainInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaScanChainInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaScanChainInst_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaScanChainInst_get,METH_VARARGS,oaTimeAppDef_oaScanChainInst_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaScanChainInst_getDefault,METH_VARARGS,oaTimeAppDef_oaScanChainInst_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaScanChainInst_set,METH_VARARGS,oaTimeAppDef_oaScanChainInst_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaScanChainInst_tp_isNull,METH_VARARGS,oaTimeAppDef_oaScanChainInst_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaScanChainInst_tp_assign,METH_VARARGS,oaTimeAppDef_oaScanChainInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaScanChainInst)\n"
"    Calls: (const oaTimeAppDef_oaScanChainInst&)\n"
"    Signature: oaTimeAppDef_oaScanChainInst||cref-oaTimeAppDef_oaScanChainInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaScanChainInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaScanChainInst",
    sizeof(PyoaTimeAppDef_oaScanChainInstObject),
    0,
    (destructor)oaTimeAppDef_oaScanChainInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaScanChainInst_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaScanChainInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaScanChainInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaScanChainInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaScanChainInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_static_find_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::find(p1.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaScanChainInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainInst_static_get_doc[] = 
"Class: oaTimeAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaScanChainInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::get(p1.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainInstp result= (oaTimeAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaScanChainInst_FromoaTimeAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaScanChainInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaScanChainInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaScanChainInst_static_find,METH_VARARGS,oaTimeAppDef_oaScanChainInst_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaScanChainInst_static_get,METH_VARARGS,oaTimeAppDef_oaScanChainInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaScanChainInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaScanChainInst_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaScanChainInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaScanChainInst",
           (PyObject*)(&PyoaTimeAppDef_oaScanChainInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaScanChainInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaScanChainInst_Type.tp_dict;
    for(method=oaTimeAppDef_oaScanChainInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaScanChainSet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaScanChainSet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaScanChainSet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaScanChainSetObject* self = (PyoaTimeAppDef_oaScanChainSetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaScanChainSet)
    {
        PyParamoaTimeAppDef_oaScanChainSet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaScanChainSet_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaScanChainSet, Choices are:\n"
        "    (oaTimeAppDef_oaScanChainSet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaScanChainSet_tp_dealloc(PyoaTimeAppDef_oaScanChainSetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaScanChainSet_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaScanChainSet value;
    int convert_status=PyoaTimeAppDef_oaScanChainSet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaTimeAppDef_oaScanChainSet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaScanChainSet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaScanChainSet v1;
    PyParamoaTimeAppDef_oaScanChainSet v2;
    int convert_status1=PyoaTimeAppDef_oaScanChainSet_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaScanChainSet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaScanChainSet_Convert(PyObject* ob,PyParamoaTimeAppDef_oaScanChainSet* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaScanChainSet_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaScanChainSet**) ((PyoaTimeAppDef_oaScanChainSetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaScanChainSet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(oaTimeAppDef_oaScanChainSet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaScanChainSet* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaScanChainSet_Type.tp_alloc(&PyoaTimeAppDef_oaScanChainSet_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaScanChainSetObject* self = (PyoaTimeAppDef_oaScanChainSetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(oaTimeAppDef_oaScanChainSet* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaScanChainSet_Type.tp_alloc(&PyoaTimeAppDef_oaScanChainSet_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaScanChainSetObject* self = (PyoaTimeAppDef_oaScanChainSetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_get_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaScanChainSet)\n"
"    Calls: oaTime get(const oaScanChainSet* object)\n"
"    Signature: get|simple-oaTime|cptr-oaScanChainSet,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChainSet data;
    int convert_status=PyoaTimeAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainSetObject* self=(PyoaTimeAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChainSet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_getDefault_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChainSet data;
    int convert_status=PyoaTimeAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainSetObject* self=(PyoaTimeAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_set_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaScanChainSet,oaTime)\n"
"    Calls: void set(oaScanChainSet* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaScanChainSet,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaScanChainSet data;
    int convert_status=PyoaTimeAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaScanChainSetObject* self=(PyoaTimeAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainSet_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_isNull_doc[] =
"Class: oaTimeAppDef_oaScanChainSet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaScanChainSet data;
    int convert_status=PyoaTimeAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaScanChainSet_assign_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaScanChainSet data;
  int convert_status=PyoaTimeAppDef_oaScanChainSet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaScanChainSet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaScanChainSet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaScanChainSet_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaScanChainSet_get,METH_VARARGS,oaTimeAppDef_oaScanChainSet_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaScanChainSet_getDefault,METH_VARARGS,oaTimeAppDef_oaScanChainSet_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaScanChainSet_set,METH_VARARGS,oaTimeAppDef_oaScanChainSet_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaScanChainSet_tp_isNull,METH_VARARGS,oaTimeAppDef_oaScanChainSet_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaScanChainSet_tp_assign,METH_VARARGS,oaTimeAppDef_oaScanChainSet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaScanChainSet)\n"
"    Calls: (const oaTimeAppDef_oaScanChainSet&)\n"
"    Signature: oaTimeAppDef_oaScanChainSet||cref-oaTimeAppDef_oaScanChainSet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaScanChainSet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaScanChainSet",
    sizeof(PyoaTimeAppDef_oaScanChainSetObject),
    0,
    (destructor)oaTimeAppDef_oaScanChainSet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaScanChainSet_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaScanChainSet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaScanChainSet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaScanChainSet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaScanChainSet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_static_find_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::find(p1.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaScanChainSet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaScanChainSet_static_get_doc[] = 
"Class: oaTimeAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaScanChainSet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::get(p1.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaScanChainSetp result= (oaTimeAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaScanChainSet_FromoaTimeAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaScanChainSet, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaScanChainSet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaScanChainSet_static_find,METH_VARARGS,oaTimeAppDef_oaScanChainSet_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaScanChainSet_static_get,METH_VARARGS,oaTimeAppDef_oaScanChainSet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaScanChainSet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaScanChainSet_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaScanChainSet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaScanChainSet",
           (PyObject*)(&PyoaTimeAppDef_oaScanChainSet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaScanChainSet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaScanChainSet_Type.tp_dict;
    for(method=oaTimeAppDef_oaScanChainSet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaShape
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaShape_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaShape_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaShapeObject* self = (PyoaTimeAppDef_oaShapeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaShape)
    {
        PyParamoaTimeAppDef_oaShape p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaShape_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaShape, Choices are:\n"
        "    (oaTimeAppDef_oaShape)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaShape_tp_dealloc(PyoaTimeAppDef_oaShapeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaShape_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaShape value;
    int convert_status=PyoaTimeAppDef_oaShape_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaTimeAppDef_oaShape::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaShape_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaShape v1;
    PyParamoaTimeAppDef_oaShape v2;
    int convert_status1=PyoaTimeAppDef_oaShape_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaShape_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaShape_Convert(PyObject* ob,PyParamoaTimeAppDef_oaShape* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaShape_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaShape**) ((PyoaTimeAppDef_oaShapeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaShape Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(oaTimeAppDef_oaShape** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaShape* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaShape_Type.tp_alloc(&PyoaTimeAppDef_oaShape_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaShapeObject* self = (PyoaTimeAppDef_oaShapeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(oaTimeAppDef_oaShape* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaShape_Type.tp_alloc(&PyoaTimeAppDef_oaShape_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaShapeObject* self = (PyoaTimeAppDef_oaShapeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_get_doc[] = 
"Class: oaTimeAppDef_oaShape, Function: get\n"
"  Paramegers: (oaShape)\n"
"    Calls: oaTime get(const oaShape* object)\n"
"    Signature: get|simple-oaTime|cptr-oaShape,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaShape_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaShape data;
    int convert_status=PyoaTimeAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaShapeObject* self=(PyoaTimeAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaShape_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_getDefault_doc[] = 
"Class: oaTimeAppDef_oaShape, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaShape_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaShape data;
    int convert_status=PyoaTimeAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaShapeObject* self=(PyoaTimeAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_set_doc[] = 
"Class: oaTimeAppDef_oaShape, Function: set\n"
"  Paramegers: (oaShape,oaTime)\n"
"    Calls: void set(oaShape* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaShape,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaShape_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaShape data;
    int convert_status=PyoaTimeAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaShapeObject* self=(PyoaTimeAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaShape_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_isNull_doc[] =
"Class: oaTimeAppDef_oaShape, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaShape_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaShape data;
    int convert_status=PyoaTimeAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaShape_assign_doc[] = 
"Class: oaTimeAppDef_oaShape, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaShape_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaShape data;
  int convert_status=PyoaTimeAppDef_oaShape_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaShape p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaShape_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaShape_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaShape_get,METH_VARARGS,oaTimeAppDef_oaShape_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaShape_getDefault,METH_VARARGS,oaTimeAppDef_oaShape_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaShape_set,METH_VARARGS,oaTimeAppDef_oaShape_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaShape_tp_isNull,METH_VARARGS,oaTimeAppDef_oaShape_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaShape_tp_assign,METH_VARARGS,oaTimeAppDef_oaShape_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_doc[] = 
"Class: oaTimeAppDef_oaShape\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaShape)\n"
"    Calls: (const oaTimeAppDef_oaShape&)\n"
"    Signature: oaTimeAppDef_oaShape||cref-oaTimeAppDef_oaShape,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaShape_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaShape",
    sizeof(PyoaTimeAppDef_oaShapeObject),
    0,
    (destructor)oaTimeAppDef_oaShape_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaShape_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaShape_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaShape_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaShape_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaShape_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_static_find_doc[] = 
"Class: oaTimeAppDef_oaShape, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaShape* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaShape|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaShape* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaShape_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::find(p1.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaShape, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaShape_static_get_doc[] = 
"Class: oaTimeAppDef_oaShape, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaShape* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaShape|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaShape* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaShape|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaShape* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaShape|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaShape_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::get(p1.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaShapep result= (oaTimeAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaShape_FromoaTimeAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaShape, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaShape_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaShape_static_find,METH_VARARGS,oaTimeAppDef_oaShape_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaShape_static_get,METH_VARARGS,oaTimeAppDef_oaShape_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaShape_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaShape_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaShape\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaShape",
           (PyObject*)(&PyoaTimeAppDef_oaShape_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaShape\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaShape_Type.tp_dict;
    for(method=oaTimeAppDef_oaShape_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaSiteDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaSiteDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaSiteDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaSiteDefObject* self = (PyoaTimeAppDef_oaSiteDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaSiteDef)
    {
        PyParamoaTimeAppDef_oaSiteDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaSiteDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaSiteDef, Choices are:\n"
        "    (oaTimeAppDef_oaSiteDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaSiteDef_tp_dealloc(PyoaTimeAppDef_oaSiteDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaSiteDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaSiteDef value;
    int convert_status=PyoaTimeAppDef_oaSiteDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaTimeAppDef_oaSiteDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaSiteDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaSiteDef v1;
    PyParamoaTimeAppDef_oaSiteDef v2;
    int convert_status1=PyoaTimeAppDef_oaSiteDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaSiteDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaSiteDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaSiteDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaSiteDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaSiteDef**) ((PyoaTimeAppDef_oaSiteDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaSiteDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(oaTimeAppDef_oaSiteDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaSiteDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaSiteDef_Type.tp_alloc(&PyoaTimeAppDef_oaSiteDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaSiteDefObject* self = (PyoaTimeAppDef_oaSiteDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(oaTimeAppDef_oaSiteDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaSiteDef_Type.tp_alloc(&PyoaTimeAppDef_oaSiteDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaSiteDefObject* self = (PyoaTimeAppDef_oaSiteDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_get_doc[] = 
"Class: oaTimeAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaSiteDef)\n"
"    Calls: oaTime get(const oaSiteDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaSiteDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaSiteDef data;
    int convert_status=PyoaTimeAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaSiteDefObject* self=(PyoaTimeAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaSiteDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaSiteDef data;
    int convert_status=PyoaTimeAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaSiteDefObject* self=(PyoaTimeAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_set_doc[] = 
"Class: oaTimeAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaSiteDef,oaTime)\n"
"    Calls: void set(oaSiteDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaSiteDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaSiteDef data;
    int convert_status=PyoaTimeAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaSiteDefObject* self=(PyoaTimeAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSiteDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_isNull_doc[] =
"Class: oaTimeAppDef_oaSiteDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaSiteDef data;
    int convert_status=PyoaTimeAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaSiteDef_assign_doc[] = 
"Class: oaTimeAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaSiteDef data;
  int convert_status=PyoaTimeAppDef_oaSiteDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaSiteDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaSiteDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaSiteDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaSiteDef_get,METH_VARARGS,oaTimeAppDef_oaSiteDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaSiteDef_getDefault,METH_VARARGS,oaTimeAppDef_oaSiteDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaSiteDef_set,METH_VARARGS,oaTimeAppDef_oaSiteDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaSiteDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaSiteDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaSiteDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaSiteDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_doc[] = 
"Class: oaTimeAppDef_oaSiteDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaSiteDef)\n"
"    Calls: (const oaTimeAppDef_oaSiteDef&)\n"
"    Signature: oaTimeAppDef_oaSiteDef||cref-oaTimeAppDef_oaSiteDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaSiteDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaSiteDef",
    sizeof(PyoaTimeAppDef_oaSiteDefObject),
    0,
    (destructor)oaTimeAppDef_oaSiteDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaSiteDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaSiteDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaSiteDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaSiteDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaSiteDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaSiteDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaSiteDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaSiteDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::find(p1.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaSiteDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSiteDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaSiteDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaSiteDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaSiteDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaSiteDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::get(p1.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSiteDefp result= (oaTimeAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaSiteDef_FromoaTimeAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaSiteDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaSiteDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaSiteDef_static_find,METH_VARARGS,oaTimeAppDef_oaSiteDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaSiteDef_static_get,METH_VARARGS,oaTimeAppDef_oaSiteDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaSiteDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaSiteDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaSiteDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaSiteDef",
           (PyObject*)(&PyoaTimeAppDef_oaSiteDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaSiteDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaSiteDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaSiteDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaSteiner
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaSteiner_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaSteiner_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaSteinerObject* self = (PyoaTimeAppDef_oaSteinerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaSteiner)
    {
        PyParamoaTimeAppDef_oaSteiner p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaSteiner_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaSteiner, Choices are:\n"
        "    (oaTimeAppDef_oaSteiner)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaSteiner_tp_dealloc(PyoaTimeAppDef_oaSteinerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaSteiner_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaSteiner value;
    int convert_status=PyoaTimeAppDef_oaSteiner_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaTimeAppDef_oaSteiner::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaSteiner_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaSteiner v1;
    PyParamoaTimeAppDef_oaSteiner v2;
    int convert_status1=PyoaTimeAppDef_oaSteiner_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaSteiner_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaSteiner_Convert(PyObject* ob,PyParamoaTimeAppDef_oaSteiner* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaSteiner_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaSteiner**) ((PyoaTimeAppDef_oaSteinerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaSteiner Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(oaTimeAppDef_oaSteiner** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaSteiner* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaSteiner_Type.tp_alloc(&PyoaTimeAppDef_oaSteiner_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaSteinerObject* self = (PyoaTimeAppDef_oaSteinerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(oaTimeAppDef_oaSteiner* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaSteiner_Type.tp_alloc(&PyoaTimeAppDef_oaSteiner_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaSteinerObject* self = (PyoaTimeAppDef_oaSteinerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_get_doc[] = 
"Class: oaTimeAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaSteiner)\n"
"    Calls: oaTime get(const oaSteiner* object)\n"
"    Signature: get|simple-oaTime|cptr-oaSteiner,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaSteiner data;
    int convert_status=PyoaTimeAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaSteinerObject* self=(PyoaTimeAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSteiner_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_getDefault_doc[] = 
"Class: oaTimeAppDef_oaSteiner, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaSteiner data;
    int convert_status=PyoaTimeAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaSteinerObject* self=(PyoaTimeAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_set_doc[] = 
"Class: oaTimeAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaSteiner,oaTime)\n"
"    Calls: void set(oaSteiner* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaSteiner,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaSteiner data;
    int convert_status=PyoaTimeAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaSteinerObject* self=(PyoaTimeAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSteiner_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_isNull_doc[] =
"Class: oaTimeAppDef_oaSteiner, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaSteiner data;
    int convert_status=PyoaTimeAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaSteiner_assign_doc[] = 
"Class: oaTimeAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaSteiner data;
  int convert_status=PyoaTimeAppDef_oaSteiner_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaSteiner p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaSteiner_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaSteiner_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaSteiner_get,METH_VARARGS,oaTimeAppDef_oaSteiner_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaSteiner_getDefault,METH_VARARGS,oaTimeAppDef_oaSteiner_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaSteiner_set,METH_VARARGS,oaTimeAppDef_oaSteiner_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaSteiner_tp_isNull,METH_VARARGS,oaTimeAppDef_oaSteiner_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaSteiner_tp_assign,METH_VARARGS,oaTimeAppDef_oaSteiner_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_doc[] = 
"Class: oaTimeAppDef_oaSteiner\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaSteiner)\n"
"    Calls: (const oaTimeAppDef_oaSteiner&)\n"
"    Signature: oaTimeAppDef_oaSteiner||cref-oaTimeAppDef_oaSteiner,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaSteiner_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaSteiner",
    sizeof(PyoaTimeAppDef_oaSteinerObject),
    0,
    (destructor)oaTimeAppDef_oaSteiner_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaSteiner_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaSteiner_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaSteiner_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaSteiner_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaSteiner_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_static_find_doc[] = 
"Class: oaTimeAppDef_oaSteiner, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaSteiner* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaSteiner|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaSteiner* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::find(p1.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaSteiner, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaSteiner_static_get_doc[] = 
"Class: oaTimeAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaSteiner* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSteiner|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaSteiner* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSteiner|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaSteiner* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSteiner|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaSteiner_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::get(p1.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaSteinerp result= (oaTimeAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaSteiner_FromoaTimeAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaSteiner, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaSteiner_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaSteiner_static_find,METH_VARARGS,oaTimeAppDef_oaSteiner_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaSteiner_static_get,METH_VARARGS,oaTimeAppDef_oaSteiner_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaSteiner_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaSteiner_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaSteiner\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaSteiner",
           (PyObject*)(&PyoaTimeAppDef_oaSteiner_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaSteiner\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaSteiner_Type.tp_dict;
    for(method=oaTimeAppDef_oaSteiner_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaStepperMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaStepperMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaStepperMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaStepperMapObject* self = (PyoaTimeAppDef_oaStepperMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaStepperMap)
    {
        PyParamoaTimeAppDef_oaStepperMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaStepperMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaStepperMap, Choices are:\n"
        "    (oaTimeAppDef_oaStepperMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaStepperMap_tp_dealloc(PyoaTimeAppDef_oaStepperMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaStepperMap_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaStepperMap value;
    int convert_status=PyoaTimeAppDef_oaStepperMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaStepperMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaStepperMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaStepperMap v1;
    PyParamoaTimeAppDef_oaStepperMap v2;
    int convert_status1=PyoaTimeAppDef_oaStepperMap_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaStepperMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaStepperMap_Convert(PyObject* ob,PyParamoaTimeAppDef_oaStepperMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaStepperMap_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaStepperMap**) ((PyoaTimeAppDef_oaStepperMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaStepperMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(oaTimeAppDef_oaStepperMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaStepperMap* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaStepperMap_Type.tp_alloc(&PyoaTimeAppDef_oaStepperMap_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaStepperMapObject* self = (PyoaTimeAppDef_oaStepperMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(oaTimeAppDef_oaStepperMap* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaStepperMap_Type.tp_alloc(&PyoaTimeAppDef_oaStepperMap_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaStepperMapObject* self = (PyoaTimeAppDef_oaStepperMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_get_doc[] = 
"Class: oaTimeAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaStepperMap)\n"
"    Calls: oaTime get(const oaStepperMap* object)\n"
"    Signature: get|simple-oaTime|cptr-oaStepperMap,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaStepperMap data;
    int convert_status=PyoaTimeAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaStepperMapObject* self=(PyoaTimeAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaStepperMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_getDefault_doc[] = 
"Class: oaTimeAppDef_oaStepperMap, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaStepperMap data;
    int convert_status=PyoaTimeAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaStepperMapObject* self=(PyoaTimeAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_set_doc[] = 
"Class: oaTimeAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaStepperMap,oaTime)\n"
"    Calls: void set(oaStepperMap* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaStepperMap,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaStepperMap data;
    int convert_status=PyoaTimeAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaStepperMapObject* self=(PyoaTimeAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaStepperMap_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_isNull_doc[] =
"Class: oaTimeAppDef_oaStepperMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaStepperMap data;
    int convert_status=PyoaTimeAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaStepperMap_assign_doc[] = 
"Class: oaTimeAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaStepperMap data;
  int convert_status=PyoaTimeAppDef_oaStepperMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaStepperMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaStepperMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaStepperMap_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaStepperMap_get,METH_VARARGS,oaTimeAppDef_oaStepperMap_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaStepperMap_getDefault,METH_VARARGS,oaTimeAppDef_oaStepperMap_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaStepperMap_set,METH_VARARGS,oaTimeAppDef_oaStepperMap_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaStepperMap_tp_isNull,METH_VARARGS,oaTimeAppDef_oaStepperMap_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaStepperMap_tp_assign,METH_VARARGS,oaTimeAppDef_oaStepperMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_doc[] = 
"Class: oaTimeAppDef_oaStepperMap\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaStepperMap)\n"
"    Calls: (const oaTimeAppDef_oaStepperMap&)\n"
"    Signature: oaTimeAppDef_oaStepperMap||cref-oaTimeAppDef_oaStepperMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaStepperMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaStepperMap",
    sizeof(PyoaTimeAppDef_oaStepperMapObject),
    0,
    (destructor)oaTimeAppDef_oaStepperMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaStepperMap_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaStepperMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaStepperMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaStepperMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaStepperMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_static_find_doc[] = 
"Class: oaTimeAppDef_oaStepperMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaStepperMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaStepperMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::find(p1.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaStepperMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaStepperMap_static_get_doc[] = 
"Class: oaTimeAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaStepperMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaStepperMap* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaStepperMap* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaStepperMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::get(p1.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaStepperMapp result= (oaTimeAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaStepperMap_FromoaTimeAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaStepperMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaStepperMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaStepperMap_static_find,METH_VARARGS,oaTimeAppDef_oaStepperMap_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaStepperMap_static_get,METH_VARARGS,oaTimeAppDef_oaStepperMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaStepperMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaStepperMap_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaStepperMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaStepperMap",
           (PyObject*)(&PyoaTimeAppDef_oaStepperMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaStepperMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaStepperMap_Type.tp_dict;
    for(method=oaTimeAppDef_oaStepperMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaTech
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTech_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaTech_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaTechObject* self = (PyoaTimeAppDef_oaTechObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaTech)
    {
        PyParamoaTimeAppDef_oaTech p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaTech_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaTech, Choices are:\n"
        "    (oaTimeAppDef_oaTech)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaTech_tp_dealloc(PyoaTimeAppDef_oaTechObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTech_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaTech value;
    int convert_status=PyoaTimeAppDef_oaTech_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaTimeAppDef_oaTech::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaTech_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaTech v1;
    PyParamoaTimeAppDef_oaTech v2;
    int convert_status1=PyoaTimeAppDef_oaTech_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaTech_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaTech_Convert(PyObject* ob,PyParamoaTimeAppDef_oaTech* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaTech_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaTech**) ((PyoaTimeAppDef_oaTechObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaTech Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(oaTimeAppDef_oaTech** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaTech* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaTech_Type.tp_alloc(&PyoaTimeAppDef_oaTech_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaTechObject* self = (PyoaTimeAppDef_oaTechObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(oaTimeAppDef_oaTech* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaTech_Type.tp_alloc(&PyoaTimeAppDef_oaTech_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaTechObject* self = (PyoaTimeAppDef_oaTechObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_get_doc[] = 
"Class: oaTimeAppDef_oaTech, Function: get\n"
"  Paramegers: (oaTech)\n"
"    Calls: oaTime get(const oaTech* object)\n"
"    Signature: get|simple-oaTime|cptr-oaTech,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTech_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTech data;
    int convert_status=PyoaTimeAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechObject* self=(PyoaTimeAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTech_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_getDefault_doc[] = 
"Class: oaTimeAppDef_oaTech, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaTech_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTech data;
    int convert_status=PyoaTimeAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechObject* self=(PyoaTimeAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_set_doc[] = 
"Class: oaTimeAppDef_oaTech, Function: set\n"
"  Paramegers: (oaTech,oaTime)\n"
"    Calls: void set(oaTech* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaTech,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTech_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTech data;
    int convert_status=PyoaTimeAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechObject* self=(PyoaTimeAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTech_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_isNull_doc[] =
"Class: oaTimeAppDef_oaTech, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaTech_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaTech data;
    int convert_status=PyoaTimeAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaTech_assign_doc[] = 
"Class: oaTimeAppDef_oaTech, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaTech_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaTech data;
  int convert_status=PyoaTimeAppDef_oaTech_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaTech p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaTech_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaTech_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaTech_get,METH_VARARGS,oaTimeAppDef_oaTech_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaTech_getDefault,METH_VARARGS,oaTimeAppDef_oaTech_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaTech_set,METH_VARARGS,oaTimeAppDef_oaTech_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaTech_tp_isNull,METH_VARARGS,oaTimeAppDef_oaTech_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaTech_tp_assign,METH_VARARGS,oaTimeAppDef_oaTech_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_doc[] = 
"Class: oaTimeAppDef_oaTech\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaTech)\n"
"    Calls: (const oaTimeAppDef_oaTech&)\n"
"    Signature: oaTimeAppDef_oaTech||cref-oaTimeAppDef_oaTech,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaTech_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaTech",
    sizeof(PyoaTimeAppDef_oaTechObject),
    0,
    (destructor)oaTimeAppDef_oaTech_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaTech_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaTech_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaTech_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaTech_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaTech_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_static_find_doc[] = 
"Class: oaTimeAppDef_oaTech, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTech* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTech|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTech* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaTech_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::find(p1.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTech, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTech_static_get_doc[] = 
"Class: oaTimeAppDef_oaTech, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTech* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTech|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaTech* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTech|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTech* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTech|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaTech_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::get(p1.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechp result= (oaTimeAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaTech_FromoaTimeAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTech, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaTech_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaTech_static_find,METH_VARARGS,oaTimeAppDef_oaTech_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaTech_static_get,METH_VARARGS,oaTimeAppDef_oaTech_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaTech_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaTech_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaTech\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaTech",
           (PyObject*)(&PyoaTimeAppDef_oaTech_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaTech\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaTech_Type.tp_dict;
    for(method=oaTimeAppDef_oaTech_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaTechHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTechHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaTechHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaTechHeaderObject* self = (PyoaTimeAppDef_oaTechHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaTechHeader)
    {
        PyParamoaTimeAppDef_oaTechHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaTechHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaTechHeader, Choices are:\n"
        "    (oaTimeAppDef_oaTechHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaTechHeader_tp_dealloc(PyoaTimeAppDef_oaTechHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTechHeader_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaTechHeader value;
    int convert_status=PyoaTimeAppDef_oaTechHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaTechHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaTechHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaTechHeader v1;
    PyParamoaTimeAppDef_oaTechHeader v2;
    int convert_status1=PyoaTimeAppDef_oaTechHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaTechHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaTechHeader_Convert(PyObject* ob,PyParamoaTimeAppDef_oaTechHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaTechHeader_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaTechHeader**) ((PyoaTimeAppDef_oaTechHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaTechHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(oaTimeAppDef_oaTechHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaTechHeader* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaTechHeader_Type.tp_alloc(&PyoaTimeAppDef_oaTechHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaTechHeaderObject* self = (PyoaTimeAppDef_oaTechHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(oaTimeAppDef_oaTechHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaTechHeader_Type.tp_alloc(&PyoaTimeAppDef_oaTechHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaTechHeaderObject* self = (PyoaTimeAppDef_oaTechHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_get_doc[] = 
"Class: oaTimeAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaTechHeader)\n"
"    Calls: oaTime get(const oaTechHeader* object)\n"
"    Signature: get|simple-oaTime|cptr-oaTechHeader,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechHeader data;
    int convert_status=PyoaTimeAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechHeaderObject* self=(PyoaTimeAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_getDefault_doc[] = 
"Class: oaTimeAppDef_oaTechHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechHeader data;
    int convert_status=PyoaTimeAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechHeaderObject* self=(PyoaTimeAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_set_doc[] = 
"Class: oaTimeAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaTechHeader,oaTime)\n"
"    Calls: void set(oaTechHeader* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaTechHeader,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechHeader data;
    int convert_status=PyoaTimeAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechHeaderObject* self=(PyoaTimeAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechHeader_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_isNull_doc[] =
"Class: oaTimeAppDef_oaTechHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaTechHeader data;
    int convert_status=PyoaTimeAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaTechHeader_assign_doc[] = 
"Class: oaTimeAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaTechHeader data;
  int convert_status=PyoaTimeAppDef_oaTechHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaTechHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaTechHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaTechHeader_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaTechHeader_get,METH_VARARGS,oaTimeAppDef_oaTechHeader_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaTechHeader_getDefault,METH_VARARGS,oaTimeAppDef_oaTechHeader_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaTechHeader_set,METH_VARARGS,oaTimeAppDef_oaTechHeader_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaTechHeader_tp_isNull,METH_VARARGS,oaTimeAppDef_oaTechHeader_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaTechHeader_tp_assign,METH_VARARGS,oaTimeAppDef_oaTechHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_doc[] = 
"Class: oaTimeAppDef_oaTechHeader\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaTechHeader)\n"
"    Calls: (const oaTimeAppDef_oaTechHeader&)\n"
"    Signature: oaTimeAppDef_oaTechHeader||cref-oaTimeAppDef_oaTechHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaTechHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaTechHeader",
    sizeof(PyoaTimeAppDef_oaTechHeaderObject),
    0,
    (destructor)oaTimeAppDef_oaTechHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaTechHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaTechHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaTechHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaTechHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaTechHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_static_find_doc[] = 
"Class: oaTimeAppDef_oaTechHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTechHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTechHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::find(p1.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTechHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechHeader_static_get_doc[] = 
"Class: oaTimeAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTechHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaTechHeader* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTechHeader* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaTechHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::get(p1.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechHeaderp result= (oaTimeAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaTechHeader_FromoaTimeAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTechHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaTechHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaTechHeader_static_find,METH_VARARGS,oaTimeAppDef_oaTechHeader_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaTechHeader_static_get,METH_VARARGS,oaTimeAppDef_oaTechHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaTechHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaTechHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaTechHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaTechHeader",
           (PyObject*)(&PyoaTimeAppDef_oaTechHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaTechHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaTechHeader_Type.tp_dict;
    for(method=oaTimeAppDef_oaTechHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaTechLayerHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTechLayerHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaTechLayerHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaTechLayerHeaderObject* self = (PyoaTimeAppDef_oaTechLayerHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaTechLayerHeader)
    {
        PyParamoaTimeAppDef_oaTechLayerHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaTechLayerHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaTechLayerHeader, Choices are:\n"
        "    (oaTimeAppDef_oaTechLayerHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaTechLayerHeader_tp_dealloc(PyoaTimeAppDef_oaTechLayerHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTechLayerHeader_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaTechLayerHeader value;
    int convert_status=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaTimeAppDef_oaTechLayerHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaTechLayerHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaTechLayerHeader v1;
    PyParamoaTimeAppDef_oaTechLayerHeader v2;
    int convert_status1=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaTechLayerHeader_Convert(PyObject* ob,PyParamoaTimeAppDef_oaTechLayerHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaTechLayerHeader_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaTechLayerHeader**) ((PyoaTimeAppDef_oaTechLayerHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaTechLayerHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(oaTimeAppDef_oaTechLayerHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaTechLayerHeader* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaTechLayerHeader_Type.tp_alloc(&PyoaTimeAppDef_oaTechLayerHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaTechLayerHeaderObject* self = (PyoaTimeAppDef_oaTechLayerHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(oaTimeAppDef_oaTechLayerHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaTechLayerHeader_Type.tp_alloc(&PyoaTimeAppDef_oaTechLayerHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaTechLayerHeaderObject* self = (PyoaTimeAppDef_oaTechLayerHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_get_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader, Function: get\n"
"  Paramegers: (oaTechLayerHeader)\n"
"    Calls: oaTime get(const oaTechLayerHeader* object)\n"
"    Signature: get|simple-oaTime|cptr-oaTechLayerHeader,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechLayerHeader data;
    int convert_status=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechLayerHeaderObject* self=(PyoaTimeAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_getDefault_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechLayerHeader data;
    int convert_status=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechLayerHeaderObject* self=(PyoaTimeAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_set_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader, Function: set\n"
"  Paramegers: (oaTechLayerHeader,oaTime)\n"
"    Calls: void set(oaTechLayerHeader* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaTechLayerHeader,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechLayerHeader data;
    int convert_status=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechLayerHeaderObject* self=(PyoaTimeAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechLayerHeader p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechLayerHeader_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_isNull_doc[] =
"Class: oaTimeAppDef_oaTechLayerHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaTechLayerHeader data;
    int convert_status=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaTechLayerHeader_assign_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaTechLayerHeader data;
  int convert_status=PyoaTimeAppDef_oaTechLayerHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaTechLayerHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaTechLayerHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaTechLayerHeader_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_get,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_getDefault,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_set,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_tp_isNull,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_tp_assign,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaTechLayerHeader)\n"
"    Calls: (const oaTimeAppDef_oaTechLayerHeader&)\n"
"    Signature: oaTimeAppDef_oaTechLayerHeader||cref-oaTimeAppDef_oaTechLayerHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaTechLayerHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaTechLayerHeader",
    sizeof(PyoaTimeAppDef_oaTechLayerHeaderObject),
    0,
    (destructor)oaTimeAppDef_oaTechLayerHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaTechLayerHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaTechLayerHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaTechLayerHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaTechLayerHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaTechLayerHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_static_find_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::find(p1.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTechLayerHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechLayerHeader_static_get_doc[] = 
"Class: oaTimeAppDef_oaTechLayerHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaTechLayerHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::get(p1.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechLayerHeaderp result= (oaTimeAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaTechLayerHeader_FromoaTimeAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTechLayerHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaTechLayerHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_static_find,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaTechLayerHeader_static_get,METH_VARARGS,oaTimeAppDef_oaTechLayerHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaTechLayerHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaTechLayerHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaTechLayerHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaTechLayerHeader",
           (PyObject*)(&PyoaTimeAppDef_oaTechLayerHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaTechLayerHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaTechLayerHeader_Type.tp_dict;
    for(method=oaTimeAppDef_oaTechLayerHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaTechViaDefHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTechViaDefHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaTechViaDefHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaTechViaDefHeaderObject* self = (PyoaTimeAppDef_oaTechViaDefHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaTechViaDefHeader)
    {
        PyParamoaTimeAppDef_oaTechViaDefHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaTechViaDefHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaTechViaDefHeader, Choices are:\n"
        "    (oaTimeAppDef_oaTechViaDefHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaTechViaDefHeader_tp_dealloc(PyoaTimeAppDef_oaTechViaDefHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTechViaDefHeader_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaTechViaDefHeader value;
    int convert_status=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaTimeAppDef_oaTechViaDefHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaTechViaDefHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaTechViaDefHeader v1;
    PyParamoaTimeAppDef_oaTechViaDefHeader v2;
    int convert_status1=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaTechViaDefHeader_Convert(PyObject* ob,PyParamoaTimeAppDef_oaTechViaDefHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaTechViaDefHeader_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaTechViaDefHeader**) ((PyoaTimeAppDef_oaTechViaDefHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaTechViaDefHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(oaTimeAppDef_oaTechViaDefHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaTechViaDefHeader* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaTechViaDefHeader_Type.tp_alloc(&PyoaTimeAppDef_oaTechViaDefHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaTechViaDefHeaderObject* self = (PyoaTimeAppDef_oaTechViaDefHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(oaTimeAppDef_oaTechViaDefHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaTechViaDefHeader_Type.tp_alloc(&PyoaTimeAppDef_oaTechViaDefHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaTechViaDefHeaderObject* self = (PyoaTimeAppDef_oaTechViaDefHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_get_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: get\n"
"  Paramegers: (oaTechViaDefHeader)\n"
"    Calls: oaTime get(const oaTechViaDefHeader* object)\n"
"    Signature: get|simple-oaTime|cptr-oaTechViaDefHeader,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechViaDefHeaderObject* self=(PyoaTimeAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechViaDefHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_getDefault_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechViaDefHeaderObject* self=(PyoaTimeAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_set_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaTechViaDefHeader,oaTime)\n"
"    Calls: void set(oaTechViaDefHeader* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaTechViaDefHeader,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTechViaDefHeaderObject* self=(PyoaTimeAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechViaDefHeader p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechViaDefHeader_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_isNull_doc[] =
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaTechViaDefHeader_assign_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaTechViaDefHeader data;
  int convert_status=PyoaTimeAppDef_oaTechViaDefHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaTechViaDefHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaTechViaDefHeader_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_get,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_getDefault,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_set,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_tp_isNull,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_tp_assign,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaTechViaDefHeader)\n"
"    Calls: (const oaTimeAppDef_oaTechViaDefHeader&)\n"
"    Signature: oaTimeAppDef_oaTechViaDefHeader||cref-oaTimeAppDef_oaTechViaDefHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaTechViaDefHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaTechViaDefHeader",
    sizeof(PyoaTimeAppDef_oaTechViaDefHeaderObject),
    0,
    (destructor)oaTimeAppDef_oaTechViaDefHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaTechViaDefHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaTechViaDefHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaTechViaDefHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaTechViaDefHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaTechViaDefHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_static_find_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::find(p1.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTechViaDefHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTechViaDefHeader_static_get_doc[] = 
"Class: oaTimeAppDef_oaTechViaDefHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaTechViaDefHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::get(p1.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTechViaDefHeaderp result= (oaTimeAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaTechViaDefHeader_FromoaTimeAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTechViaDefHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaTechViaDefHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_static_find,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaTechViaDefHeader_static_get,METH_VARARGS,oaTimeAppDef_oaTechViaDefHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaTechViaDefHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaTechViaDefHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaTechViaDefHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaTechViaDefHeader",
           (PyObject*)(&PyoaTimeAppDef_oaTechViaDefHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaTechViaDefHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaTechViaDefHeader_Type.tp_dict;
    for(method=oaTimeAppDef_oaTechViaDefHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaTermObject* self = (PyoaTimeAppDef_oaTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaTerm)
    {
        PyParamoaTimeAppDef_oaTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaTerm, Choices are:\n"
        "    (oaTimeAppDef_oaTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaTerm_tp_dealloc(PyoaTimeAppDef_oaTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTerm_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaTerm value;
    int convert_status=PyoaTimeAppDef_oaTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaTimeAppDef_oaTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaTerm v1;
    PyParamoaTimeAppDef_oaTerm v2;
    int convert_status1=PyoaTimeAppDef_oaTerm_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaTerm_Convert(PyObject* ob,PyParamoaTimeAppDef_oaTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaTerm_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaTerm**) ((PyoaTimeAppDef_oaTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(oaTimeAppDef_oaTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaTerm* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaTerm_Type.tp_alloc(&PyoaTimeAppDef_oaTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaTermObject* self = (PyoaTimeAppDef_oaTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(oaTimeAppDef_oaTerm* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaTerm_Type.tp_alloc(&PyoaTimeAppDef_oaTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaTermObject* self = (PyoaTimeAppDef_oaTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_get_doc[] = 
"Class: oaTimeAppDef_oaTerm, Function: get\n"
"  Paramegers: (oaTerm)\n"
"    Calls: oaTime get(const oaTerm* object)\n"
"    Signature: get|simple-oaTime|cptr-oaTerm,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTerm data;
    int convert_status=PyoaTimeAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTermObject* self=(PyoaTimeAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_getDefault_doc[] = 
"Class: oaTimeAppDef_oaTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTerm data;
    int convert_status=PyoaTimeAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTermObject* self=(PyoaTimeAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_set_doc[] = 
"Class: oaTimeAppDef_oaTerm, Function: set\n"
"  Paramegers: (oaTerm,oaTime)\n"
"    Calls: void set(oaTerm* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaTerm,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTerm data;
    int convert_status=PyoaTimeAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTermObject* self=(PyoaTimeAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTerm p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTerm_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_isNull_doc[] =
"Class: oaTimeAppDef_oaTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaTerm data;
    int convert_status=PyoaTimeAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaTerm_assign_doc[] = 
"Class: oaTimeAppDef_oaTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaTerm data;
  int convert_status=PyoaTimeAppDef_oaTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaTerm_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaTerm_get,METH_VARARGS,oaTimeAppDef_oaTerm_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaTerm_getDefault,METH_VARARGS,oaTimeAppDef_oaTerm_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaTerm_set,METH_VARARGS,oaTimeAppDef_oaTerm_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaTerm_tp_isNull,METH_VARARGS,oaTimeAppDef_oaTerm_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaTerm_tp_assign,METH_VARARGS,oaTimeAppDef_oaTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_doc[] = 
"Class: oaTimeAppDef_oaTerm\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaTerm)\n"
"    Calls: (const oaTimeAppDef_oaTerm&)\n"
"    Signature: oaTimeAppDef_oaTerm||cref-oaTimeAppDef_oaTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaTerm",
    sizeof(PyoaTimeAppDef_oaTermObject),
    0,
    (destructor)oaTimeAppDef_oaTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_static_find_doc[] = 
"Class: oaTimeAppDef_oaTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTerm|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::find(p1.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTerm_static_get_doc[] = 
"Class: oaTimeAppDef_oaTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTerm|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaTerm* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTerm|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTerm* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTerm|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::get(p1.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTermp result= (oaTimeAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaTerm_FromoaTimeAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaTerm_static_find,METH_VARARGS,oaTimeAppDef_oaTerm_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaTerm_static_get,METH_VARARGS,oaTimeAppDef_oaTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaTerm",
           (PyObject*)(&PyoaTimeAppDef_oaTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaTerm_Type.tp_dict;
    for(method=oaTimeAppDef_oaTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaTrackPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTrackPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaTrackPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaTrackPatternObject* self = (PyoaTimeAppDef_oaTrackPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaTrackPattern)
    {
        PyParamoaTimeAppDef_oaTrackPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaTrackPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaTrackPattern, Choices are:\n"
        "    (oaTimeAppDef_oaTrackPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaTrackPattern_tp_dealloc(PyoaTimeAppDef_oaTrackPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaTrackPattern_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaTrackPattern value;
    int convert_status=PyoaTimeAppDef_oaTrackPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaTimeAppDef_oaTrackPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaTrackPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaTrackPattern v1;
    PyParamoaTimeAppDef_oaTrackPattern v2;
    int convert_status1=PyoaTimeAppDef_oaTrackPattern_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaTrackPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaTrackPattern_Convert(PyObject* ob,PyParamoaTimeAppDef_oaTrackPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaTrackPattern_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaTrackPattern**) ((PyoaTimeAppDef_oaTrackPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaTrackPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(oaTimeAppDef_oaTrackPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaTrackPattern* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaTrackPattern_Type.tp_alloc(&PyoaTimeAppDef_oaTrackPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaTrackPatternObject* self = (PyoaTimeAppDef_oaTrackPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(oaTimeAppDef_oaTrackPattern* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaTrackPattern_Type.tp_alloc(&PyoaTimeAppDef_oaTrackPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaTrackPatternObject* self = (PyoaTimeAppDef_oaTrackPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_get_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern, Function: get\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: oaTime get(const oaTrackPattern* object)\n"
"    Signature: get|simple-oaTime|cptr-oaTrackPattern,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTrackPattern data;
    int convert_status=PyoaTimeAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTrackPatternObject* self=(PyoaTimeAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_getDefault_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTrackPattern data;
    int convert_status=PyoaTimeAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTrackPatternObject* self=(PyoaTimeAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_set_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern, Function: set\n"
"  Paramegers: (oaTrackPattern,oaTime)\n"
"    Calls: void set(oaTrackPattern* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaTrackPattern,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaTrackPattern data;
    int convert_status=PyoaTimeAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaTrackPatternObject* self=(PyoaTimeAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTrackPattern p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_isNull_doc[] =
"Class: oaTimeAppDef_oaTrackPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaTrackPattern data;
    int convert_status=PyoaTimeAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaTrackPattern_assign_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaTrackPattern data;
  int convert_status=PyoaTimeAppDef_oaTrackPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaTrackPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaTrackPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaTrackPattern_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaTrackPattern_get,METH_VARARGS,oaTimeAppDef_oaTrackPattern_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaTrackPattern_getDefault,METH_VARARGS,oaTimeAppDef_oaTrackPattern_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaTrackPattern_set,METH_VARARGS,oaTimeAppDef_oaTrackPattern_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaTrackPattern_tp_isNull,METH_VARARGS,oaTimeAppDef_oaTrackPattern_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaTrackPattern_tp_assign,METH_VARARGS,oaTimeAppDef_oaTrackPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaTrackPattern)\n"
"    Calls: (const oaTimeAppDef_oaTrackPattern&)\n"
"    Signature: oaTimeAppDef_oaTrackPattern||cref-oaTimeAppDef_oaTrackPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaTrackPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaTrackPattern",
    sizeof(PyoaTimeAppDef_oaTrackPatternObject),
    0,
    (destructor)oaTimeAppDef_oaTrackPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaTrackPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaTrackPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaTrackPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaTrackPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaTrackPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_static_find_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::find(p1.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTrackPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaTrackPattern_static_get_doc[] = 
"Class: oaTimeAppDef_oaTrackPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaTrackPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::get(p1.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaTrackPatternp result= (oaTimeAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaTrackPattern_FromoaTimeAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaTrackPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaTrackPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaTrackPattern_static_find,METH_VARARGS,oaTimeAppDef_oaTrackPattern_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaTrackPattern_static_get,METH_VARARGS,oaTimeAppDef_oaTrackPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaTrackPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaTrackPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaTrackPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaTrackPattern",
           (PyObject*)(&PyoaTimeAppDef_oaTrackPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaTrackPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaTrackPattern_Type.tp_dict;
    for(method=oaTimeAppDef_oaTrackPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaValueObject* self = (PyoaTimeAppDef_oaValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaValue)
    {
        PyParamoaTimeAppDef_oaValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaValue, Choices are:\n"
        "    (oaTimeAppDef_oaValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaValue_tp_dealloc(PyoaTimeAppDef_oaValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaValue_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaValue value;
    int convert_status=PyoaTimeAppDef_oaValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaTimeAppDef_oaValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaValue v1;
    PyParamoaTimeAppDef_oaValue v2;
    int convert_status1=PyoaTimeAppDef_oaValue_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaValue_Convert(PyObject* ob,PyParamoaTimeAppDef_oaValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaValue_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaValue**) ((PyoaTimeAppDef_oaValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(oaTimeAppDef_oaValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaValue* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaValue_Type.tp_alloc(&PyoaTimeAppDef_oaValue_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaValueObject* self = (PyoaTimeAppDef_oaValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(oaTimeAppDef_oaValue* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaValue_Type.tp_alloc(&PyoaTimeAppDef_oaValue_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaValueObject* self = (PyoaTimeAppDef_oaValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_get_doc[] = 
"Class: oaTimeAppDef_oaValue, Function: get\n"
"  Paramegers: (oaValue)\n"
"    Calls: oaTime get(const oaValue* object)\n"
"    Signature: get|simple-oaTime|cptr-oaValue,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaValue data;
    int convert_status=PyoaTimeAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaValueObject* self=(PyoaTimeAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_getDefault_doc[] = 
"Class: oaTimeAppDef_oaValue, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaValue_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaValue data;
    int convert_status=PyoaTimeAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaValueObject* self=(PyoaTimeAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_set_doc[] = 
"Class: oaTimeAppDef_oaValue, Function: set\n"
"  Paramegers: (oaValue,oaTime)\n"
"    Calls: void set(oaValue* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaValue,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaValue data;
    int convert_status=PyoaTimeAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaValueObject* self=(PyoaTimeAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_isNull_doc[] =
"Class: oaTimeAppDef_oaValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaValue data;
    int convert_status=PyoaTimeAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaValue_assign_doc[] = 
"Class: oaTimeAppDef_oaValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaValue data;
  int convert_status=PyoaTimeAppDef_oaValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaValue_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaValue_get,METH_VARARGS,oaTimeAppDef_oaValue_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaValue_getDefault,METH_VARARGS,oaTimeAppDef_oaValue_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaValue_set,METH_VARARGS,oaTimeAppDef_oaValue_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaValue_tp_isNull,METH_VARARGS,oaTimeAppDef_oaValue_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaValue_tp_assign,METH_VARARGS,oaTimeAppDef_oaValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_doc[] = 
"Class: oaTimeAppDef_oaValue\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaValue)\n"
"    Calls: (const oaTimeAppDef_oaValue&)\n"
"    Signature: oaTimeAppDef_oaValue||cref-oaTimeAppDef_oaValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaValue",
    sizeof(PyoaTimeAppDef_oaValueObject),
    0,
    (destructor)oaTimeAppDef_oaValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaValue_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_static_find_doc[] = 
"Class: oaTimeAppDef_oaValue, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaValue* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaValue|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaValue* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaValue_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::find(p1.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaValue, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaValue_static_get_doc[] = 
"Class: oaTimeAppDef_oaValue, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaValue* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaValue|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaValue* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaValue|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaValue* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaValue|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaValue_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::get(p1.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaValuep result= (oaTimeAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaValue_FromoaTimeAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaValue, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaValue_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaValue_static_find,METH_VARARGS,oaTimeAppDef_oaValue_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaValue_static_get,METH_VARARGS,oaTimeAppDef_oaValue_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaValue_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaValue",
           (PyObject*)(&PyoaTimeAppDef_oaValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaValue_Type.tp_dict;
    for(method=oaTimeAppDef_oaValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaVectorInstDefObject* self = (PyoaTimeAppDef_oaVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaVectorInstDef)
    {
        PyParamoaTimeAppDef_oaVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaVectorInstDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaVectorInstDef, Choices are:\n"
        "    (oaTimeAppDef_oaVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaVectorInstDef_tp_dealloc(PyoaTimeAppDef_oaVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaVectorInstDef value;
    int convert_status=PyoaTimeAppDef_oaVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaTimeAppDef_oaVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaVectorInstDef v1;
    PyParamoaTimeAppDef_oaVectorInstDef v2;
    int convert_status1=PyoaTimeAppDef_oaVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaVectorInstDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaVectorInstDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaVectorInstDef**) ((PyoaTimeAppDef_oaVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(oaTimeAppDef_oaVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaVectorInstDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaVectorInstDef_Type.tp_alloc(&PyoaTimeAppDef_oaVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaVectorInstDefObject* self = (PyoaTimeAppDef_oaVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(oaTimeAppDef_oaVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaVectorInstDef_Type.tp_alloc(&PyoaTimeAppDef_oaVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaVectorInstDefObject* self = (PyoaTimeAppDef_oaVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_get_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef, Function: get\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: oaTime get(const oaVectorInstDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaVectorInstDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaVectorInstDef data;
    int convert_status=PyoaTimeAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaVectorInstDefObject* self=(PyoaTimeAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaVectorInstDef data;
    int convert_status=PyoaTimeAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaVectorInstDefObject* self=(PyoaTimeAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_set_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef, Function: set\n"
"  Paramegers: (oaVectorInstDef,oaTime)\n"
"    Calls: void set(oaVectorInstDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaVectorInstDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaVectorInstDef data;
    int convert_status=PyoaTimeAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaVectorInstDefObject* self=(PyoaTimeAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVectorInstDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_isNull_doc[] =
"Class: oaTimeAppDef_oaVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaVectorInstDef data;
    int convert_status=PyoaTimeAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaVectorInstDef_assign_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaVectorInstDef data;
  int convert_status=PyoaTimeAppDef_oaVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaVectorInstDef_get,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaVectorInstDef_getDefault,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaVectorInstDef_set,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaVectorInstDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaVectorInstDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaVectorInstDef)\n"
"    Calls: (const oaTimeAppDef_oaVectorInstDef&)\n"
"    Signature: oaTimeAppDef_oaVectorInstDef||cref-oaTimeAppDef_oaVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaVectorInstDef",
    sizeof(PyoaTimeAppDef_oaVectorInstDefObject),
    0,
    (destructor)oaTimeAppDef_oaVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::find(p1.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVectorInstDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaVectorInstDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::get(p1.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaVectorInstDefp result= (oaTimeAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaVectorInstDef_FromoaTimeAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaVectorInstDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaVectorInstDef_static_find,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaVectorInstDef_static_get,METH_VARARGS,oaTimeAppDef_oaVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaVectorInstDef",
           (PyObject*)(&PyoaTimeAppDef_oaVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaVectorInstDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaVia
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaVia_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaVia_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaViaObject* self = (PyoaTimeAppDef_oaViaObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaVia)
    {
        PyParamoaTimeAppDef_oaVia p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaVia_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaVia, Choices are:\n"
        "    (oaTimeAppDef_oaVia)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaVia_tp_dealloc(PyoaTimeAppDef_oaViaObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaVia_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaVia value;
    int convert_status=PyoaTimeAppDef_oaVia_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaTimeAppDef_oaVia::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaVia_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaVia v1;
    PyParamoaTimeAppDef_oaVia v2;
    int convert_status1=PyoaTimeAppDef_oaVia_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaVia_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaVia_Convert(PyObject* ob,PyParamoaTimeAppDef_oaVia* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaVia_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaVia**) ((PyoaTimeAppDef_oaViaObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaVia Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(oaTimeAppDef_oaVia** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaVia* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaVia_Type.tp_alloc(&PyoaTimeAppDef_oaVia_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaViaObject* self = (PyoaTimeAppDef_oaViaObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(oaTimeAppDef_oaVia* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaVia_Type.tp_alloc(&PyoaTimeAppDef_oaVia_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaViaObject* self = (PyoaTimeAppDef_oaViaObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_get_doc[] = 
"Class: oaTimeAppDef_oaVia, Function: get\n"
"  Paramegers: (oaVia)\n"
"    Calls: oaTime get(const oaVia* object)\n"
"    Signature: get|simple-oaTime|cptr-oaVia,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaVia_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaVia data;
    int convert_status=PyoaTimeAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaObject* self=(PyoaTimeAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_getDefault_doc[] = 
"Class: oaTimeAppDef_oaVia, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaVia_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaVia data;
    int convert_status=PyoaTimeAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaObject* self=(PyoaTimeAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_set_doc[] = 
"Class: oaTimeAppDef_oaVia, Function: set\n"
"  Paramegers: (oaVia,oaTime)\n"
"    Calls: void set(oaVia* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaVia,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaVia_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaVia data;
    int convert_status=PyoaTimeAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaObject* self=(PyoaTimeAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVia p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_isNull_doc[] =
"Class: oaTimeAppDef_oaVia, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaVia_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaVia data;
    int convert_status=PyoaTimeAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaVia_assign_doc[] = 
"Class: oaTimeAppDef_oaVia, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaVia_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaVia data;
  int convert_status=PyoaTimeAppDef_oaVia_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaVia p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaVia_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaVia_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaVia_get,METH_VARARGS,oaTimeAppDef_oaVia_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaVia_getDefault,METH_VARARGS,oaTimeAppDef_oaVia_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaVia_set,METH_VARARGS,oaTimeAppDef_oaVia_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaVia_tp_isNull,METH_VARARGS,oaTimeAppDef_oaVia_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaVia_tp_assign,METH_VARARGS,oaTimeAppDef_oaVia_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_doc[] = 
"Class: oaTimeAppDef_oaVia\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaVia)\n"
"    Calls: (const oaTimeAppDef_oaVia&)\n"
"    Signature: oaTimeAppDef_oaVia||cref-oaTimeAppDef_oaVia,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaVia_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaVia",
    sizeof(PyoaTimeAppDef_oaViaObject),
    0,
    (destructor)oaTimeAppDef_oaVia_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaVia_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaVia_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaVia_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaVia_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaVia_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_static_find_doc[] = 
"Class: oaTimeAppDef_oaVia, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaVia* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaVia|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaVia* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaVia_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::find(p1.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaVia, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaVia_static_get_doc[] = 
"Class: oaTimeAppDef_oaVia, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaVia* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVia|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaVia* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVia|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaVia* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVia|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaVia_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::get(p1.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViap result= (oaTimeAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaVia_FromoaTimeAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaVia, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaVia_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaVia_static_find,METH_VARARGS,oaTimeAppDef_oaVia_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaVia_static_get,METH_VARARGS,oaTimeAppDef_oaVia_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaVia_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaVia_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaVia\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaVia",
           (PyObject*)(&PyoaTimeAppDef_oaVia_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaVia\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaVia_Type.tp_dict;
    for(method=oaTimeAppDef_oaVia_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaViaDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaViaDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaViaDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaViaDefObject* self = (PyoaTimeAppDef_oaViaDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaViaDef)
    {
        PyParamoaTimeAppDef_oaViaDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaViaDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaViaDef, Choices are:\n"
        "    (oaTimeAppDef_oaViaDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaViaDef_tp_dealloc(PyoaTimeAppDef_oaViaDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaViaDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaViaDef value;
    int convert_status=PyoaTimeAppDef_oaViaDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaTimeAppDef_oaViaDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaViaDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaViaDef v1;
    PyParamoaTimeAppDef_oaViaDef v2;
    int convert_status1=PyoaTimeAppDef_oaViaDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaViaDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaViaDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaViaDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaViaDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaViaDef**) ((PyoaTimeAppDef_oaViaDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaViaDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(oaTimeAppDef_oaViaDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaViaDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaViaDef_Type.tp_alloc(&PyoaTimeAppDef_oaViaDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaViaDefObject* self = (PyoaTimeAppDef_oaViaDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(oaTimeAppDef_oaViaDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaViaDef_Type.tp_alloc(&PyoaTimeAppDef_oaViaDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaViaDefObject* self = (PyoaTimeAppDef_oaViaDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_get_doc[] = 
"Class: oaTimeAppDef_oaViaDef, Function: get\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: oaTime get(const oaViaDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaViaDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaDef data;
    int convert_status=PyoaTimeAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaDefObject* self=(PyoaTimeAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaViaDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaDef data;
    int convert_status=PyoaTimeAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaDefObject* self=(PyoaTimeAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_set_doc[] = 
"Class: oaTimeAppDef_oaViaDef, Function: set\n"
"  Paramegers: (oaViaDef,oaTime)\n"
"    Calls: void set(oaViaDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaViaDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaDef data;
    int convert_status=PyoaTimeAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaDefObject* self=(PyoaTimeAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_isNull_doc[] =
"Class: oaTimeAppDef_oaViaDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaViaDef data;
    int convert_status=PyoaTimeAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaViaDef_assign_doc[] = 
"Class: oaTimeAppDef_oaViaDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaViaDef data;
  int convert_status=PyoaTimeAppDef_oaViaDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaViaDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaViaDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaViaDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaViaDef_get,METH_VARARGS,oaTimeAppDef_oaViaDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaViaDef_getDefault,METH_VARARGS,oaTimeAppDef_oaViaDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaViaDef_set,METH_VARARGS,oaTimeAppDef_oaViaDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaViaDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaViaDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaViaDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaViaDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_doc[] = 
"Class: oaTimeAppDef_oaViaDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaViaDef)\n"
"    Calls: (const oaTimeAppDef_oaViaDef&)\n"
"    Signature: oaTimeAppDef_oaViaDef||cref-oaTimeAppDef_oaViaDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaViaDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaViaDef",
    sizeof(PyoaTimeAppDef_oaViaDefObject),
    0,
    (destructor)oaTimeAppDef_oaViaDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaViaDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaViaDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaViaDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaViaDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaViaDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaViaDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaViaDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaViaDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaViaDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::find(p1.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaViaDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaViaDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaViaDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaViaDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaViaDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaViaDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::get(p1.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaDefp result= (oaTimeAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaViaDef_FromoaTimeAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaViaDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaViaDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaViaDef_static_find,METH_VARARGS,oaTimeAppDef_oaViaDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaViaDef_static_get,METH_VARARGS,oaTimeAppDef_oaViaDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaViaDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaViaDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaViaDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaViaDef",
           (PyObject*)(&PyoaTimeAppDef_oaViaDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaViaDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaViaDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaViaDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaViaHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaViaHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaViaHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaViaHeaderObject* self = (PyoaTimeAppDef_oaViaHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaViaHeader)
    {
        PyParamoaTimeAppDef_oaViaHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaViaHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaViaHeader, Choices are:\n"
        "    (oaTimeAppDef_oaViaHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaViaHeader_tp_dealloc(PyoaTimeAppDef_oaViaHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaViaHeader_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaViaHeader value;
    int convert_status=PyoaTimeAppDef_oaViaHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaTimeAppDef_oaViaHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaViaHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaViaHeader v1;
    PyParamoaTimeAppDef_oaViaHeader v2;
    int convert_status1=PyoaTimeAppDef_oaViaHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaViaHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaViaHeader_Convert(PyObject* ob,PyParamoaTimeAppDef_oaViaHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaViaHeader_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaViaHeader**) ((PyoaTimeAppDef_oaViaHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaViaHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(oaTimeAppDef_oaViaHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaViaHeader* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaViaHeader_Type.tp_alloc(&PyoaTimeAppDef_oaViaHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaViaHeaderObject* self = (PyoaTimeAppDef_oaViaHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(oaTimeAppDef_oaViaHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaViaHeader_Type.tp_alloc(&PyoaTimeAppDef_oaViaHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaViaHeaderObject* self = (PyoaTimeAppDef_oaViaHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_get_doc[] = 
"Class: oaTimeAppDef_oaViaHeader, Function: get\n"
"  Paramegers: (oaViaHeader)\n"
"    Calls: oaTime get(const oaViaHeader* object)\n"
"    Signature: get|simple-oaTime|cptr-oaViaHeader,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaHeader data;
    int convert_status=PyoaTimeAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaHeaderObject* self=(PyoaTimeAppDef_oaViaHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_getDefault_doc[] = 
"Class: oaTimeAppDef_oaViaHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaHeader data;
    int convert_status=PyoaTimeAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaHeaderObject* self=(PyoaTimeAppDef_oaViaHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_set_doc[] = 
"Class: oaTimeAppDef_oaViaHeader, Function: set\n"
"  Paramegers: (oaViaHeader,oaTime)\n"
"    Calls: void set(oaViaHeader* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaViaHeader,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaHeader data;
    int convert_status=PyoaTimeAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaHeaderObject* self=(PyoaTimeAppDef_oaViaHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaHeader p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaHeader_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_isNull_doc[] =
"Class: oaTimeAppDef_oaViaHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaViaHeader data;
    int convert_status=PyoaTimeAppDef_oaViaHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaViaHeader_assign_doc[] = 
"Class: oaTimeAppDef_oaViaHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaViaHeader data;
  int convert_status=PyoaTimeAppDef_oaViaHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaViaHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaViaHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaViaHeader_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaViaHeader_get,METH_VARARGS,oaTimeAppDef_oaViaHeader_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaViaHeader_getDefault,METH_VARARGS,oaTimeAppDef_oaViaHeader_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaViaHeader_set,METH_VARARGS,oaTimeAppDef_oaViaHeader_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaViaHeader_tp_isNull,METH_VARARGS,oaTimeAppDef_oaViaHeader_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaViaHeader_tp_assign,METH_VARARGS,oaTimeAppDef_oaViaHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_doc[] = 
"Class: oaTimeAppDef_oaViaHeader\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaViaHeader)\n"
"    Calls: (const oaTimeAppDef_oaViaHeader&)\n"
"    Signature: oaTimeAppDef_oaViaHeader||cref-oaTimeAppDef_oaViaHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaViaHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaViaHeader",
    sizeof(PyoaTimeAppDef_oaViaHeaderObject),
    0,
    (destructor)oaTimeAppDef_oaViaHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaViaHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaViaHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaViaHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaViaHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaViaHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_static_find_doc[] = 
"Class: oaTimeAppDef_oaViaHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaViaHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaViaHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::find(p1.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaViaHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaHeader_static_get_doc[] = 
"Class: oaTimeAppDef_oaViaHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaViaHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaViaHeader* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaViaHeader* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaViaHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaViaHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaViaHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaViaHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::get(p1.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaHeaderp result= (oaTimeAppDef_oaViaHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaViaHeader_FromoaTimeAppDef_oaViaHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaViaHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaViaHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaViaHeader_static_find,METH_VARARGS,oaTimeAppDef_oaViaHeader_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaViaHeader_static_get,METH_VARARGS,oaTimeAppDef_oaViaHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaViaHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaViaHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaViaHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaViaHeader",
           (PyObject*)(&PyoaTimeAppDef_oaViaHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaViaHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaViaHeader_Type.tp_dict;
    for(method=oaTimeAppDef_oaViaHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaViaSpec
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaViaSpec_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaViaSpec_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaViaSpecObject* self = (PyoaTimeAppDef_oaViaSpecObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaViaSpec)
    {
        PyParamoaTimeAppDef_oaViaSpec p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaViaSpec_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaViaSpec, Choices are:\n"
        "    (oaTimeAppDef_oaViaSpec)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaViaSpec_tp_dealloc(PyoaTimeAppDef_oaViaSpecObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaViaSpec_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaViaSpec value;
    int convert_status=PyoaTimeAppDef_oaViaSpec_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaTimeAppDef_oaViaSpec::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaViaSpec_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaViaSpec v1;
    PyParamoaTimeAppDef_oaViaSpec v2;
    int convert_status1=PyoaTimeAppDef_oaViaSpec_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaViaSpec_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaViaSpec_Convert(PyObject* ob,PyParamoaTimeAppDef_oaViaSpec* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaViaSpec_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaViaSpec**) ((PyoaTimeAppDef_oaViaSpecObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaViaSpec Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(oaTimeAppDef_oaViaSpec** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaViaSpec* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaViaSpec_Type.tp_alloc(&PyoaTimeAppDef_oaViaSpec_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaViaSpecObject* self = (PyoaTimeAppDef_oaViaSpecObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(oaTimeAppDef_oaViaSpec* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaViaSpec_Type.tp_alloc(&PyoaTimeAppDef_oaViaSpec_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaViaSpecObject* self = (PyoaTimeAppDef_oaViaSpecObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_get_doc[] = 
"Class: oaTimeAppDef_oaViaSpec, Function: get\n"
"  Paramegers: (oaViaSpec)\n"
"    Calls: oaTime get(const oaViaSpec* object)\n"
"    Signature: get|simple-oaTime|cptr-oaViaSpec,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaSpec data;
    int convert_status=PyoaTimeAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaSpecObject* self=(PyoaTimeAppDef_oaViaSpecObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaSpec p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaSpec_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_getDefault_doc[] = 
"Class: oaTimeAppDef_oaViaSpec, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaSpec data;
    int convert_status=PyoaTimeAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaSpecObject* self=(PyoaTimeAppDef_oaViaSpecObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_set_doc[] = 
"Class: oaTimeAppDef_oaViaSpec, Function: set\n"
"  Paramegers: (oaViaSpec,oaTime)\n"
"    Calls: void set(oaViaSpec* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaViaSpec,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaViaSpec data;
    int convert_status=PyoaTimeAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViaSpecObject* self=(PyoaTimeAppDef_oaViaSpecObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaSpec p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaSpec_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_isNull_doc[] =
"Class: oaTimeAppDef_oaViaSpec, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaViaSpec data;
    int convert_status=PyoaTimeAppDef_oaViaSpec_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaViaSpec_assign_doc[] = 
"Class: oaTimeAppDef_oaViaSpec, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaViaSpec data;
  int convert_status=PyoaTimeAppDef_oaViaSpec_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaViaSpec p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaViaSpec_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaViaSpec_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaViaSpec_get,METH_VARARGS,oaTimeAppDef_oaViaSpec_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaViaSpec_getDefault,METH_VARARGS,oaTimeAppDef_oaViaSpec_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaViaSpec_set,METH_VARARGS,oaTimeAppDef_oaViaSpec_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaViaSpec_tp_isNull,METH_VARARGS,oaTimeAppDef_oaViaSpec_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaViaSpec_tp_assign,METH_VARARGS,oaTimeAppDef_oaViaSpec_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_doc[] = 
"Class: oaTimeAppDef_oaViaSpec\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaViaSpec)\n"
"    Calls: (const oaTimeAppDef_oaViaSpec&)\n"
"    Signature: oaTimeAppDef_oaViaSpec||cref-oaTimeAppDef_oaViaSpec,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaViaSpec_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaViaSpec",
    sizeof(PyoaTimeAppDef_oaViaSpecObject),
    0,
    (destructor)oaTimeAppDef_oaViaSpec_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaViaSpec_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaViaSpec_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaViaSpec_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaViaSpec_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaViaSpec_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_static_find_doc[] = 
"Class: oaTimeAppDef_oaViaSpec, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaViaSpec* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaViaSpec* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::find(p1.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaViaSpec, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaViaSpec_static_get_doc[] = 
"Class: oaTimeAppDef_oaViaSpec, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaViaSpec* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaViaSpec* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaViaSpec* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaViaSpec* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaViaSpec* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaViaSpec* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaViaSpec|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaViaSpec_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::get(p1.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViaSpecp result= (oaTimeAppDef_oaViaSpec::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaViaSpec_FromoaTimeAppDef_oaViaSpec(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaViaSpec, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaViaSpec_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaViaSpec_static_find,METH_VARARGS,oaTimeAppDef_oaViaSpec_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaViaSpec_static_get,METH_VARARGS,oaTimeAppDef_oaViaSpec_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaViaSpec_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaViaSpec_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaViaSpec\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaViaSpec",
           (PyObject*)(&PyoaTimeAppDef_oaViaSpec_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaViaSpec\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaViaSpec_Type.tp_dict;
    for(method=oaTimeAppDef_oaViaSpec_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaViewObject* self = (PyoaTimeAppDef_oaViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaView)
    {
        PyParamoaTimeAppDef_oaView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaView, Choices are:\n"
        "    (oaTimeAppDef_oaView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaView_tp_dealloc(PyoaTimeAppDef_oaViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaView_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaView value;
    int convert_status=PyoaTimeAppDef_oaView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaTimeAppDef_oaView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaView v1;
    PyParamoaTimeAppDef_oaView v2;
    int convert_status1=PyoaTimeAppDef_oaView_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaView_Convert(PyObject* ob,PyParamoaTimeAppDef_oaView* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaView_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaView**) ((PyoaTimeAppDef_oaViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(oaTimeAppDef_oaView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaView* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaView_Type.tp_alloc(&PyoaTimeAppDef_oaView_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaViewObject* self = (PyoaTimeAppDef_oaViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(oaTimeAppDef_oaView* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaView_Type.tp_alloc(&PyoaTimeAppDef_oaView_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaViewObject* self = (PyoaTimeAppDef_oaViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_get_doc[] = 
"Class: oaTimeAppDef_oaView, Function: get\n"
"  Paramegers: (oaView)\n"
"    Calls: oaTime get(const oaView* object)\n"
"    Signature: get|simple-oaTime|cptr-oaView,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaView data;
    int convert_status=PyoaTimeAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViewObject* self=(PyoaTimeAppDef_oaViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_getDefault_doc[] = 
"Class: oaTimeAppDef_oaView, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaView data;
    int convert_status=PyoaTimeAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViewObject* self=(PyoaTimeAppDef_oaViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_set_doc[] = 
"Class: oaTimeAppDef_oaView, Function: set\n"
"  Paramegers: (oaView,oaTime)\n"
"    Calls: void set(oaView* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaView,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaView data;
    int convert_status=PyoaTimeAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaViewObject* self=(PyoaTimeAppDef_oaViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaView p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaView_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_isNull_doc[] =
"Class: oaTimeAppDef_oaView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaView data;
    int convert_status=PyoaTimeAppDef_oaView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaView_assign_doc[] = 
"Class: oaTimeAppDef_oaView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaView data;
  int convert_status=PyoaTimeAppDef_oaView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaView_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaView_get,METH_VARARGS,oaTimeAppDef_oaView_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaView_getDefault,METH_VARARGS,oaTimeAppDef_oaView_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaView_set,METH_VARARGS,oaTimeAppDef_oaView_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaView_tp_isNull,METH_VARARGS,oaTimeAppDef_oaView_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaView_tp_assign,METH_VARARGS,oaTimeAppDef_oaView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_doc[] = 
"Class: oaTimeAppDef_oaView\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaView)\n"
"    Calls: (const oaTimeAppDef_oaView&)\n"
"    Signature: oaTimeAppDef_oaView||cref-oaTimeAppDef_oaView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaView",
    sizeof(PyoaTimeAppDef_oaViewObject),
    0,
    (destructor)oaTimeAppDef_oaView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaView_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_static_find_doc[] = 
"Class: oaTimeAppDef_oaView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaView* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaView|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::find(p1.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaView_static_get_doc[] = 
"Class: oaTimeAppDef_oaView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaView* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaView|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaView* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaView|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaView* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaView|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaView* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaView* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaView|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::get(p1.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaViewp result= (oaTimeAppDef_oaView::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaView_FromoaTimeAppDef_oaView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaView_static_find,METH_VARARGS,oaTimeAppDef_oaView_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaView_static_get,METH_VARARGS,oaTimeAppDef_oaView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaView_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaView",
           (PyObject*)(&PyoaTimeAppDef_oaView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaView_Type.tp_dict;
    for(method=oaTimeAppDef_oaView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaWafer
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaWafer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaWafer_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaWaferObject* self = (PyoaTimeAppDef_oaWaferObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaWafer)
    {
        PyParamoaTimeAppDef_oaWafer p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaWafer_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaWafer, Choices are:\n"
        "    (oaTimeAppDef_oaWafer)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaWafer_tp_dealloc(PyoaTimeAppDef_oaWaferObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaWafer_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaWafer value;
    int convert_status=PyoaTimeAppDef_oaWafer_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaTimeAppDef_oaWafer::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaWafer_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaWafer v1;
    PyParamoaTimeAppDef_oaWafer v2;
    int convert_status1=PyoaTimeAppDef_oaWafer_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaWafer_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaWafer_Convert(PyObject* ob,PyParamoaTimeAppDef_oaWafer* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaWafer_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaWafer**) ((PyoaTimeAppDef_oaWaferObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaWafer Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(oaTimeAppDef_oaWafer** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaWafer* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaWafer_Type.tp_alloc(&PyoaTimeAppDef_oaWafer_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaWaferObject* self = (PyoaTimeAppDef_oaWaferObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(oaTimeAppDef_oaWafer* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaWafer_Type.tp_alloc(&PyoaTimeAppDef_oaWafer_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaWaferObject* self = (PyoaTimeAppDef_oaWaferObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_get_doc[] = 
"Class: oaTimeAppDef_oaWafer, Function: get\n"
"  Paramegers: (oaWafer)\n"
"    Calls: oaTime get(const oaWafer* object)\n"
"    Signature: get|simple-oaTime|cptr-oaWafer,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaWafer_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWafer data;
    int convert_status=PyoaTimeAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferObject* self=(PyoaTimeAppDef_oaWaferObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWafer p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWafer_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_getDefault_doc[] = 
"Class: oaTimeAppDef_oaWafer, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaWafer_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWafer data;
    int convert_status=PyoaTimeAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferObject* self=(PyoaTimeAppDef_oaWaferObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_set_doc[] = 
"Class: oaTimeAppDef_oaWafer, Function: set\n"
"  Paramegers: (oaWafer,oaTime)\n"
"    Calls: void set(oaWafer* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaWafer,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaWafer_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWafer data;
    int convert_status=PyoaTimeAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferObject* self=(PyoaTimeAppDef_oaWaferObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWafer p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWafer_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_isNull_doc[] =
"Class: oaTimeAppDef_oaWafer, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaWafer_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaWafer data;
    int convert_status=PyoaTimeAppDef_oaWafer_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaWafer_assign_doc[] = 
"Class: oaTimeAppDef_oaWafer, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaWafer_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaWafer data;
  int convert_status=PyoaTimeAppDef_oaWafer_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaWafer p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaWafer_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaWafer_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaWafer_get,METH_VARARGS,oaTimeAppDef_oaWafer_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaWafer_getDefault,METH_VARARGS,oaTimeAppDef_oaWafer_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaWafer_set,METH_VARARGS,oaTimeAppDef_oaWafer_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaWafer_tp_isNull,METH_VARARGS,oaTimeAppDef_oaWafer_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaWafer_tp_assign,METH_VARARGS,oaTimeAppDef_oaWafer_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_doc[] = 
"Class: oaTimeAppDef_oaWafer\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaWafer)\n"
"    Calls: (const oaTimeAppDef_oaWafer&)\n"
"    Signature: oaTimeAppDef_oaWafer||cref-oaTimeAppDef_oaWafer,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaWafer_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaWafer",
    sizeof(PyoaTimeAppDef_oaWaferObject),
    0,
    (destructor)oaTimeAppDef_oaWafer_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaWafer_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaWafer_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaWafer_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaWafer_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaWafer_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_static_find_doc[] = 
"Class: oaTimeAppDef_oaWafer, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaWafer* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaWafer|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaWafer* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaWafer_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::find(p1.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaWafer, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWafer_static_get_doc[] = 
"Class: oaTimeAppDef_oaWafer, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaWafer* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWafer|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaWafer* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWafer|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaWafer* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWafer|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaWafer* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaWafer* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaWafer* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWafer|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaWafer_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::get(p1.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferp result= (oaTimeAppDef_oaWafer::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaWafer_FromoaTimeAppDef_oaWafer(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaWafer, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaWafer_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaWafer_static_find,METH_VARARGS,oaTimeAppDef_oaWafer_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaWafer_static_get,METH_VARARGS,oaTimeAppDef_oaWafer_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaWafer_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaWafer_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaWafer\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaWafer",
           (PyObject*)(&PyoaTimeAppDef_oaWafer_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaWafer\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaWafer_Type.tp_dict;
    for(method=oaTimeAppDef_oaWafer_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaWaferDesc
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaWaferDesc_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaWaferDesc_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaWaferDescObject* self = (PyoaTimeAppDef_oaWaferDescObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaWaferDesc)
    {
        PyParamoaTimeAppDef_oaWaferDesc p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaWaferDesc_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaWaferDesc, Choices are:\n"
        "    (oaTimeAppDef_oaWaferDesc)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaWaferDesc_tp_dealloc(PyoaTimeAppDef_oaWaferDescObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaWaferDesc_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaWaferDesc value;
    int convert_status=PyoaTimeAppDef_oaWaferDesc_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaTimeAppDef_oaWaferDesc::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaWaferDesc_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaWaferDesc v1;
    PyParamoaTimeAppDef_oaWaferDesc v2;
    int convert_status1=PyoaTimeAppDef_oaWaferDesc_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaWaferDesc_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaWaferDesc_Convert(PyObject* ob,PyParamoaTimeAppDef_oaWaferDesc* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaWaferDesc_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaWaferDesc**) ((PyoaTimeAppDef_oaWaferDescObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaWaferDesc Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(oaTimeAppDef_oaWaferDesc** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaWaferDesc* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaWaferDesc_Type.tp_alloc(&PyoaTimeAppDef_oaWaferDesc_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaWaferDescObject* self = (PyoaTimeAppDef_oaWaferDescObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(oaTimeAppDef_oaWaferDesc* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaWaferDesc_Type.tp_alloc(&PyoaTimeAppDef_oaWaferDesc_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaWaferDescObject* self = (PyoaTimeAppDef_oaWaferDescObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_get_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc, Function: get\n"
"  Paramegers: (oaWaferDesc)\n"
"    Calls: oaTime get(const oaWaferDesc* object)\n"
"    Signature: get|simple-oaTime|cptr-oaWaferDesc,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWaferDesc data;
    int convert_status=PyoaTimeAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferDescObject* self=(PyoaTimeAppDef_oaWaferDescObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferDesc p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferDesc_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_getDefault_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWaferDesc data;
    int convert_status=PyoaTimeAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferDescObject* self=(PyoaTimeAppDef_oaWaferDescObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_set_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc, Function: set\n"
"  Paramegers: (oaWaferDesc,oaTime)\n"
"    Calls: void set(oaWaferDesc* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaWaferDesc,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWaferDesc data;
    int convert_status=PyoaTimeAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferDescObject* self=(PyoaTimeAppDef_oaWaferDescObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferDesc p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferDesc_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_isNull_doc[] =
"Class: oaTimeAppDef_oaWaferDesc, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaWaferDesc data;
    int convert_status=PyoaTimeAppDef_oaWaferDesc_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaWaferDesc_assign_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaWaferDesc data;
  int convert_status=PyoaTimeAppDef_oaWaferDesc_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaWaferDesc p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaWaferDesc_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaWaferDesc_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaWaferDesc_get,METH_VARARGS,oaTimeAppDef_oaWaferDesc_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaWaferDesc_getDefault,METH_VARARGS,oaTimeAppDef_oaWaferDesc_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaWaferDesc_set,METH_VARARGS,oaTimeAppDef_oaWaferDesc_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaWaferDesc_tp_isNull,METH_VARARGS,oaTimeAppDef_oaWaferDesc_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaWaferDesc_tp_assign,METH_VARARGS,oaTimeAppDef_oaWaferDesc_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaWaferDesc)\n"
"    Calls: (const oaTimeAppDef_oaWaferDesc&)\n"
"    Signature: oaTimeAppDef_oaWaferDesc||cref-oaTimeAppDef_oaWaferDesc,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaWaferDesc_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaWaferDesc",
    sizeof(PyoaTimeAppDef_oaWaferDescObject),
    0,
    (destructor)oaTimeAppDef_oaWaferDesc_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaWaferDesc_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaWaferDesc_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaWaferDesc_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaWaferDesc_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaWaferDesc_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_static_find_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::find(p1.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaWaferDesc, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferDesc_static_get_doc[] = 
"Class: oaTimeAppDef_oaWaferDesc, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaWaferDesc* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferDesc|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaWaferDesc_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::get(p1.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferDescp result= (oaTimeAppDef_oaWaferDesc::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaWaferDesc_FromoaTimeAppDef_oaWaferDesc(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaWaferDesc, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaWaferDesc_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaWaferDesc_static_find,METH_VARARGS,oaTimeAppDef_oaWaferDesc_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaWaferDesc_static_get,METH_VARARGS,oaTimeAppDef_oaWaferDesc_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaWaferDesc_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaWaferDesc_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaWaferDesc\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaWaferDesc",
           (PyObject*)(&PyoaTimeAppDef_oaWaferDesc_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaWaferDesc\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaWaferDesc_Type.tp_dict;
    for(method=oaTimeAppDef_oaWaferDesc_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaWaferFeature
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaWaferFeature_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaWaferFeature_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaWaferFeatureObject* self = (PyoaTimeAppDef_oaWaferFeatureObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaWaferFeature)
    {
        PyParamoaTimeAppDef_oaWaferFeature p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaWaferFeature_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaWaferFeature, Choices are:\n"
        "    (oaTimeAppDef_oaWaferFeature)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaWaferFeature_tp_dealloc(PyoaTimeAppDef_oaWaferFeatureObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaWaferFeature_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaWaferFeature value;
    int convert_status=PyoaTimeAppDef_oaWaferFeature_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaTimeAppDef_oaWaferFeature::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaWaferFeature_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaWaferFeature v1;
    PyParamoaTimeAppDef_oaWaferFeature v2;
    int convert_status1=PyoaTimeAppDef_oaWaferFeature_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaWaferFeature_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaWaferFeature_Convert(PyObject* ob,PyParamoaTimeAppDef_oaWaferFeature* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaWaferFeature_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaWaferFeature**) ((PyoaTimeAppDef_oaWaferFeatureObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaWaferFeature Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(oaTimeAppDef_oaWaferFeature** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaWaferFeature* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaWaferFeature_Type.tp_alloc(&PyoaTimeAppDef_oaWaferFeature_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaWaferFeatureObject* self = (PyoaTimeAppDef_oaWaferFeatureObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(oaTimeAppDef_oaWaferFeature* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaWaferFeature_Type.tp_alloc(&PyoaTimeAppDef_oaWaferFeature_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaWaferFeatureObject* self = (PyoaTimeAppDef_oaWaferFeatureObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_get_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature, Function: get\n"
"  Paramegers: (oaWaferFeature)\n"
"    Calls: oaTime get(const oaWaferFeature* object)\n"
"    Signature: get|simple-oaTime|cptr-oaWaferFeature,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWaferFeature data;
    int convert_status=PyoaTimeAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferFeatureObject* self=(PyoaTimeAppDef_oaWaferFeatureObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferFeature p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaWaferFeature_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_getDefault_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWaferFeature data;
    int convert_status=PyoaTimeAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferFeatureObject* self=(PyoaTimeAppDef_oaWaferFeatureObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_set_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature, Function: set\n"
"  Paramegers: (oaWaferFeature,oaTime)\n"
"    Calls: void set(oaWaferFeature* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaWaferFeature,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaWaferFeature data;
    int convert_status=PyoaTimeAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaWaferFeatureObject* self=(PyoaTimeAppDef_oaWaferFeatureObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaWaferFeature p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaWaferFeature_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_isNull_doc[] =
"Class: oaTimeAppDef_oaWaferFeature, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaWaferFeature data;
    int convert_status=PyoaTimeAppDef_oaWaferFeature_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaWaferFeature_assign_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaWaferFeature data;
  int convert_status=PyoaTimeAppDef_oaWaferFeature_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaWaferFeature p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaWaferFeature_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaWaferFeature_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaWaferFeature_get,METH_VARARGS,oaTimeAppDef_oaWaferFeature_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaWaferFeature_getDefault,METH_VARARGS,oaTimeAppDef_oaWaferFeature_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaWaferFeature_set,METH_VARARGS,oaTimeAppDef_oaWaferFeature_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaWaferFeature_tp_isNull,METH_VARARGS,oaTimeAppDef_oaWaferFeature_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaWaferFeature_tp_assign,METH_VARARGS,oaTimeAppDef_oaWaferFeature_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaWaferFeature)\n"
"    Calls: (const oaTimeAppDef_oaWaferFeature&)\n"
"    Signature: oaTimeAppDef_oaWaferFeature||cref-oaTimeAppDef_oaWaferFeature,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaWaferFeature_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaWaferFeature",
    sizeof(PyoaTimeAppDef_oaWaferFeatureObject),
    0,
    (destructor)oaTimeAppDef_oaWaferFeature_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaWaferFeature_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaWaferFeature_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaWaferFeature_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaWaferFeature_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaWaferFeature_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_static_find_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::find(p1.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaWaferFeature, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaWaferFeature_static_get_doc[] = 
"Class: oaTimeAppDef_oaWaferFeature, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaWaferFeature* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaWaferFeature|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaWaferFeature_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::get(p1.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaWaferFeaturep result= (oaTimeAppDef_oaWaferFeature::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaWaferFeature_FromoaTimeAppDef_oaWaferFeature(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaWaferFeature, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaWaferFeature_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaWaferFeature_static_find,METH_VARARGS,oaTimeAppDef_oaWaferFeature_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaWaferFeature_static_get,METH_VARARGS,oaTimeAppDef_oaWaferFeature_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaWaferFeature_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaWaferFeature_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaWaferFeature\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaWaferFeature",
           (PyObject*)(&PyoaTimeAppDef_oaWaferFeature_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaWaferFeature\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaWaferFeature_Type.tp_dict;
    for(method=oaTimeAppDef_oaWaferFeature_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeProp
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeProp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeProp_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimePropObject* self = (PyoaTimePropObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeProp)
    {
        PyParamoaTimeProp p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeProp_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeProp, Choices are:\n"
        "    (oaTimeProp)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeProp_tp_dealloc(PyoaTimePropObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeProp_tp_repr(PyObject *ob)
{
    PyParamoaTimeProp value;
    int convert_status=PyoaTimeProp_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaTimeProp::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaString sresult;
        value.DataCall()->getName(sresult);
    
        char addr[32];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaTimeProp::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeProp_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeProp v1;
    PyParamoaTimeProp v2;
    int convert_status1=PyoaTimeProp_Convert(ob1,&v1);
    int convert_status2=PyoaTimeProp_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeProp_Convert(PyObject* ob,PyParamoaTimeProp* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeProp_Check(ob)) {
        result->SetData( (oaTimeProp**) ((PyoaTimePropObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeProp Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeProp_FromoaTimeProp(oaTimeProp** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeProp* data=*value;
        PyObject* bself = PyoaTimeProp_Type.tp_alloc(&PyoaTimeProp_Type,0);
        if (bself == NULL) return bself;
        PyoaTimePropObject* self = (PyoaTimePropObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeProp_FromoaTimeProp(oaTimeProp* data)
{
    if (data) {
       PyObject* bself = PyoaTimeProp_Type.tp_alloc(&PyoaTimeProp_Type,0);
       if (bself == NULL) return bself;
       PyoaTimePropObject* self = (PyoaTimePropObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeProp_getValue_doc[] = 
"Class: oaTimeProp, Function: getValue\n"
"  Paramegers: ()\n"
"    Calls: oaTime getValue() const\n"
"    Signature: getValue|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the value of this property.\n"
;

static PyObject*
oaTimeProp_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeProp data;
    int convert_status=PyoaTimeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimePropObject* self=(PyoaTimePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getValue());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeProp_setValue_doc[] = 
"Class: oaTimeProp, Function: setValue\n"
"  Paramegers: (oaTime)\n"
"    Calls: void setValue(oaTime value)\n"
"    Signature: setValue|void-void|simple-oaTime,\n"
"    This function sets this property to the specified value.\n"
;

static PyObject*
oaTimeProp_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeProp data;
    int convert_status=PyoaTimeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimePropObject* self=(PyoaTimePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTime p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTime_Convert,&p1)) {
        data.DataCall()->setValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeProp_isNull_doc[] =
"Class: oaTimeProp, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeProp_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeProp data;
    int convert_status=PyoaTimeProp_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeProp_assign_doc[] = 
"Class: oaTimeProp, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeProp_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeProp data;
  int convert_status=PyoaTimeProp_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeProp p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeProp_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeProp_methodlist[] = {
    {"getValue",(PyCFunction)oaTimeProp_getValue,METH_VARARGS,oaTimeProp_getValue_doc},
    {"setValue",(PyCFunction)oaTimeProp_setValue,METH_VARARGS,oaTimeProp_setValue_doc},
    {"isNull",(PyCFunction)oaTimeProp_tp_isNull,METH_VARARGS,oaTimeProp_isNull_doc},
    {"assign",(PyCFunction)oaTimeProp_tp_assign,METH_VARARGS,oaTimeProp_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeProp_doc[] = 
"Class: oaTimeProp\n"
"  The oaTimeProp is a property that has a value of type oaTime. These represent a time and date with a resolution of 1 second.\n"
"  Properties are application-defined values that can be added to any managed object in oaDesign , oaTech , and oaWafer databases except for the following paged objects: oaDevice , oaNode , oaParasiticNetwork , and oaSubNetwork .\n"
"  To create properties on DM Objects, create the corresponding oaDMData object (using oaLibDMData::open , oaCellDMData::open , oaViewDMData::open , or oaCellViewDMData::open ), then create properties on that oaDMData object.\n"
"  See oaProp for a general discussion of properties.\n"
"Constructors:\n"
"  Paramegers: (oaTimeProp)\n"
"    Calls: (const oaTimeProp&)\n"
"    Signature: oaTimeProp||cref-oaTimeProp,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeProp_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeProp",
    sizeof(PyoaTimePropObject),
    0,
    (destructor)oaTimeProp_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeProp_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeProp_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeProp_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeProp_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaProp_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeProp_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeProp_static_create_doc[] = 
"Class: oaTimeProp, Function: create\n"
"  Paramegers: (oaObject,oaString,oaTime)\n"
"    Calls: oaTimeProp* create(oaObject* object,const oaString& name,oaTime value)\n"
"    Signature: create|ptr-oaTimeProp|ptr-oaObject,cref-oaString,simple-oaTime,\n"
"    This function creates a time property with the specified attributes. The specified name is checked to verify it is unique for properties on the specified object .\n"
"    oacInvalidObjForProp\n"
"    oacPropNameUsed\n"
;

static PyObject*
oaTimeProp_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoaString p2;
    PyParamoaTime p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaObject_Convert,&p1,
          &PyoaString_Convert,&p2,
          &PyoaTime_Convert,&p3)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTimePropp result= (oaTimeProp::create(p1.Data(),p2.Data(),p3.Data()));
        return PyoaTimeProp_FromoaTimeProp(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeProp_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaTimeProp_static_create,METH_VARARGS,oaTimeProp_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeProp_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeProp_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeProp\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeProp",
           (PyObject*)(&PyoaTimeProp_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeProp\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeProp_Type.tp_dict;
    for(method=oaTimeProp_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeRangeProp
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeRangeProp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeRangeProp_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeRangePropObject* self = (PyoaTimeRangePropObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeRangeProp)
    {
        PyParamoaTimeRangeProp p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeRangeProp_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeRangeProp, Choices are:\n"
        "    (oaTimeRangeProp)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeRangeProp_tp_dealloc(PyoaTimeRangePropObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeRangeProp_tp_repr(PyObject *ob)
{
    PyParamoaTimeRangeProp value;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaTimeRangeProp::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaString sresult;
        value.DataCall()->getName(sresult);
    
        char addr[37];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaTimeRangeProp::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeRangeProp_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeRangeProp v1;
    PyParamoaTimeRangeProp v2;
    int convert_status1=PyoaTimeRangeProp_Convert(ob1,&v1);
    int convert_status2=PyoaTimeRangeProp_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeRangeProp_Convert(PyObject* ob,PyParamoaTimeRangeProp* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeRangeProp_Check(ob)) {
        result->SetData( (oaTimeRangeProp**) ((PyoaTimeRangePropObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeRangeProp Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeRangeProp_FromoaTimeRangeProp(oaTimeRangeProp** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeRangeProp* data=*value;
        PyObject* bself = PyoaTimeRangeProp_Type.tp_alloc(&PyoaTimeRangeProp_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeRangePropObject* self = (PyoaTimeRangePropObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeRangeProp_FromoaTimeRangeProp(oaTimeRangeProp* data)
{
    if (data) {
       PyObject* bself = PyoaTimeRangeProp_Type.tp_alloc(&PyoaTimeRangeProp_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeRangePropObject* self = (PyoaTimeRangePropObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeRangeProp_getLowerBound_doc[] = 
"Class: oaTimeRangeProp, Function: getLowerBound\n"
"  Paramegers: ()\n"
"    Calls: oaTime getLowerBound() const\n"
"    Signature: getLowerBound|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the lower bound of the time range.\n"
;

static PyObject*
oaTimeRangeProp_getLowerBound(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeRangeProp data;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeRangePropObject* self=(PyoaTimeRangePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getLowerBound());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeRangeProp_getUpperBound_doc[] = 
"Class: oaTimeRangeProp, Function: getUpperBound\n"
"  Paramegers: ()\n"
"    Calls: oaTime getUpperBound() const\n"
"    Signature: getUpperBound|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the upper bound of the time range.\n"
;

static PyObject*
oaTimeRangeProp_getUpperBound(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeRangeProp data;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeRangePropObject* self=(PyoaTimeRangePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getUpperBound());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeRangeProp_getValue_doc[] = 
"Class: oaTimeRangeProp, Function: getValue\n"
"  Paramegers: ()\n"
"    Calls: oaTime getValue() const\n"
"    Signature: getValue|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the value of this property.\n"
;

static PyObject*
oaTimeRangeProp_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeRangeProp data;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeRangePropObject* self=(PyoaTimeRangePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getValue());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeRangeProp_set_doc[] = 
"Class: oaTimeRangeProp, Function: set\n"
"  Paramegers: (oaTime,oaTime,oaTime)\n"
"    Calls: void set(oaTime lowerBound,oaTime value,oaTime upperBound)\n"
"    Signature: set|void-void|simple-oaTime,simple-oaTime,simple-oaTime,\n"
"    This function sets the attributes for this property.\n"
"    oacInvalidValueForIntRange\n"
;

static PyObject*
oaTimeRangeProp_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeRangeProp data;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeRangePropObject* self=(PyoaTimeRangePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTime p1;
    PyParamoaTime p2;
    PyParamoaTime p3;
    if (PyArg_ParseTuple(args,"O&O&O&",
          &PyoaTime_Convert,&p1,
          &PyoaTime_Convert,&p2,
          &PyoaTime_Convert,&p3)) {
        data.DataCall()->set(p1.Data(),p2.Data(),p3.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeRangeProp_setValue_doc[] = 
"Class: oaTimeRangeProp, Function: setValue\n"
"  Paramegers: (oaTime)\n"
"    Calls: void setValue(oaTime value)\n"
"    Signature: setValue|void-void|simple-oaTime,\n"
"    This function sets this property to the specified value.\n"
"    oacInvalidValueForIntRange\n"
;

static PyObject*
oaTimeRangeProp_setValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeRangeProp data;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeRangePropObject* self=(PyoaTimeRangePropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTime p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTime_Convert,&p1)) {
        data.DataCall()->setValue(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeRangeProp_isNull_doc[] =
"Class: oaTimeRangeProp, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeRangeProp_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeRangeProp data;
    int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeRangeProp_assign_doc[] = 
"Class: oaTimeRangeProp, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeRangeProp_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeRangeProp data;
  int convert_status=PyoaTimeRangeProp_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeRangeProp p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeRangeProp_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeRangeProp_methodlist[] = {
    {"getLowerBound",(PyCFunction)oaTimeRangeProp_getLowerBound,METH_VARARGS,oaTimeRangeProp_getLowerBound_doc},
    {"getUpperBound",(PyCFunction)oaTimeRangeProp_getUpperBound,METH_VARARGS,oaTimeRangeProp_getUpperBound_doc},
    {"getValue",(PyCFunction)oaTimeRangeProp_getValue,METH_VARARGS,oaTimeRangeProp_getValue_doc},
    {"set",(PyCFunction)oaTimeRangeProp_set,METH_VARARGS,oaTimeRangeProp_set_doc},
    {"setValue",(PyCFunction)oaTimeRangeProp_setValue,METH_VARARGS,oaTimeRangeProp_setValue_doc},
    {"isNull",(PyCFunction)oaTimeRangeProp_tp_isNull,METH_VARARGS,oaTimeRangeProp_isNull_doc},
    {"assign",(PyCFunction)oaTimeRangeProp_tp_assign,METH_VARARGS,oaTimeRangeProp_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeRangeProp_doc[] = 
"Class: oaTimeRangeProp\n"
"  The oaTimeRangeProp is a property that has a time-type value as well as a range of valid values that the time is allowed to take on. The range can be used by a generic property editor to assist a user to enter a proper value.\n"
"  Properties are application-defined values that can be added to any managed object in oaDesign , oaTech , and oaWafer databases except for the following paged objects: oaDevice , oaNode , oaParasiticNetwork , and oaSubNetwork .\n"
"  To create properties on DM Objects, create the corresponding oaDMData object (using oaLibDMData::open , oaCellDMData::open , oaViewDMData::open , or oaCellViewDMData::open ), then create properties on that oaDMData object.\n"
"  See oaProp for a general discussion of properties.\n"
"Constructors:\n"
"  Paramegers: (oaTimeRangeProp)\n"
"    Calls: (const oaTimeRangeProp&)\n"
"    Signature: oaTimeRangeProp||cref-oaTimeRangeProp,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeRangeProp_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeRangeProp",
    sizeof(PyoaTimeRangePropObject),
    0,
    (destructor)oaTimeRangeProp_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeRangeProp_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeRangeProp_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeRangeProp_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeRangeProp_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaProp_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeRangeProp_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeRangeProp_static_create_doc[] = 
"Class: oaTimeRangeProp, Function: create\n"
"  Paramegers: (oaObject,oaString,oaTime,oaTime,oaTime)\n"
"    Calls: oaTimeRangeProp* create(oaObject* object,const oaString& name,oaTime lowerBound,oaTime value,oaTime upperBound)\n"
"    Signature: create|ptr-oaTimeRangeProp|ptr-oaObject,cref-oaString,simple-oaTime,simple-oaTime,simple-oaTime,\n"
"    This function creates a time property with the specified attributes. The specified name is checked to verify it is unique for properties on the specified object .\n"
"    oacInvalidValueForIntRange\n"
"    oacInvalidObjForProp\n"
"    oacPropNameUsed\n"
;

static PyObject*
oaTimeRangeProp_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoaString p2;
    PyParamoaTime p3;
    PyParamoaTime p4;
    PyParamoaTime p5;
    if (PyArg_ParseTuple(args,"O&O&O&O&O&",
          &PyoaObject_Convert,&p1,
          &PyoaString_Convert,&p2,
          &PyoaTime_Convert,&p3,
          &PyoaTime_Convert,&p4,
          &PyoaTime_Convert,&p5)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTimeRangePropp result= (oaTimeRangeProp::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
        return PyoaTimeRangeProp_FromoaTimeRangeProp(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeRangeProp_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaTimeRangeProp_static_create,METH_VARARGS,oaTimeRangeProp_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeRangeProp_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeRangeProp_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeRangeProp\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeRangeProp",
           (PyObject*)(&PyoaTimeRangeProp_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeRangeProp\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeRangeProp_Type.tp_dict;
    for(method=oaTimeRangeProp_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeStamp
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeStamp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeStamp_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeStampObject* self = (PyoaTimeStampObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaTimeStamp();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->value =  new oaTimeStamp(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTimeStamp)
    {
        PyParamoaTimeStamp p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeStamp_Convert,&p1)) {
            self->value= new oaTimeStamp(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeStamp, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaTimeStamp)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeStamp_tp_dealloc(PyoaTimeStampObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeStamp_tp_repr(PyObject *ob)
{
    PyParamoaTimeStamp value;
    int convert_status=PyoaTimeStamp_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[33];
    sprintf(buffer,"<oaTimeStamp::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeStamp_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeStamp v1;
    PyParamoaTimeStamp v2;
    int convert_status1=PyoaTimeStamp_Convert(ob1,&v1);
    int convert_status2=PyoaTimeStamp_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    if (v1.Data()==v2.Data()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeStamp_Convert(PyObject* ob,PyParamoaTimeStamp* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeStamp_Check(ob)) {
        result->SetData(  ((PyoaTimeStampObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeStamp Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeStamp_FromoaTimeStamp(oaTimeStamp* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTimeStamp_Type.tp_alloc(&PyoaTimeStamp_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeStampObject* self = (PyoaTimeStampObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeStamp_oaUInt4_doc[] = 
"Class: oaTimeStamp, Function: oaUInt4\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 oaUInt4() const\n"
"    Signature: operator oaUInt4|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the value of this time stamp.\n"
;

static PyObject*
oaTimeStamp_oaUInt4(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeStamp data;
    int convert_status=PyoaTimeStamp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeStampObject* self=(PyoaTimeStampObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->operator oaUInt4());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeStamp_set_doc[] = 
"Class: oaTimeStamp, Function: set\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void set(oaUInt4 st)\n"
"    Signature: set|void-void|simple-oaUInt4,\n"
"    This function sets this time stamp to the specified value.\n"
"  Paramegers: (oaTimeStamp)\n"
"    Calls: void set(const oaTimeStamp& st)\n"
"    Signature: set|void-void|cref-oaTimeStamp,\n"
"    This function sets the value of this time stamp to the value of the specified time stamp.\n"
;

static PyObject*
oaTimeStamp_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeStamp data;
    int convert_status=PyoaTimeStamp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeStampObject* self=(PyoaTimeStampObject*)ob;

    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            data.DataCall()->set(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaTimeStamp)
    {
        PyParamoaTimeStamp p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTimeStamp_Convert,&p1)) {
            data.DataCall()->set(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeStamp, function: set, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaTimeStamp)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTimeStamp_assign_doc[] = 
"Class: oaTimeStamp, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeStamp_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeStamp data;
  int convert_status=PyoaTimeStamp_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeStamp p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeStamp_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeStamp_methodlist[] = {
    {"oaUInt4",(PyCFunction)oaTimeStamp_oaUInt4,METH_VARARGS,oaTimeStamp_oaUInt4_doc},
    {"set",(PyCFunction)oaTimeStamp_set,METH_VARARGS,oaTimeStamp_set_doc},
    {"assign",(PyCFunction)oaTimeStamp_tp_assign,METH_VARARGS,oaTimeStamp_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeStamp_doc[] = 
"Class: oaTimeStamp\n"
"  The oaTimeStamp utility class provides a simple mechanism for testing objects if the objects are modified.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTimeStamp()\n"
"    Signature: oaTimeStamp||\n"
"    This function constructs an oaTimeStamp object and initializes the time stamp to zero.\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaTimeStamp(oaUInt4 value)\n"
"    Signature: oaTimeStamp||simple-oaUInt4,\n"
"    This function constructs an oaTimeStamp object and initializes the time stamp to the specified value .\n"
"  Paramegers: (oaTimeStamp)\n"
"    Calls: (const oaTimeStamp&)\n"
"    Signature: oaTimeStamp||cref-oaTimeStamp,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeStamp_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeStamp",
    sizeof(PyoaTimeStampObject),
    0,
    (destructor)oaTimeStamp_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeStamp_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeStamp_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeStamp_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeStamp_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeStamp_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeStamp_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeStamp_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeStamp\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeStamp",
           (PyObject*)(&PyoaTimeStamp_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeStamp\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimer
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimer_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimerObject* self = (PyoaTimerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaTimer();
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimer, Choices are:\n"
        "    ()\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimer_tp_dealloc(PyoaTimerObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimer_tp_repr(PyObject *ob)
{
    PyParamoaTimer value;
    int convert_status=PyoaTimer_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[29];
    sprintf(buffer,"<oaTimer::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimer_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimer v1;
    PyParamoaTimer v2;
    int convert_status1=PyoaTimer_Convert(ob1,&v1);
    int convert_status2=PyoaTimer_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimer_Convert(PyObject* ob,PyParamoaTimer* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimer_Check(ob)) {
        result->SetData(  ((PyoaTimerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimer Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimer_FromoaTimer(oaTimer* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTimer_Type.tp_alloc(&PyoaTimer_Type,0);
        if (bself == NULL) return bself;
        PyoaTimerObject* self = (PyoaTimerObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimer_getElapsed_doc[] = 
"Class: oaTimer, Function: getElapsed\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getElapsed()\n"
"    Signature: getElapsed|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the elapsed time from when the oaTimer object was constructed or from the last call to reset() .\n"
;

static PyObject*
oaTimer_getElapsed(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimer data;
    int convert_status=PyoaTimer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimerObject* self=(PyoaTimerObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getElapsed());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimer_reset_doc[] = 
"Class: oaTimer, Function: reset\n"
"  Paramegers: ()\n"
"    Calls: void reset()\n"
"    Signature: reset|void-void|\n"
"    BrowseData: 0\n"
"    This function resets the time counter with a new snapshot of the clock.\n"
;

static PyObject*
oaTimer_reset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimer data;
    int convert_status=PyoaTimer_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimerObject* self=(PyoaTimerObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->reset();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTimer_assign_doc[] = 
"Class: oaTimer, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimer_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimer data;
  int convert_status=PyoaTimer_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimer p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimer_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimer_methodlist[] = {
    {"getElapsed",(PyCFunction)oaTimer_getElapsed,METH_VARARGS,oaTimer_getElapsed_doc},
    {"reset",(PyCFunction)oaTimer_reset,METH_VARARGS,oaTimer_reset_doc},
    {"assign",(PyCFunction)oaTimer_tp_assign,METH_VARARGS,oaTimer_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimer_doc[] = 
"Class: oaTimer\n"
"  The oaTimer class is a utility class used to time how long a section of code takes to execute. Elapsed time is recorded since the construction of oaTimer or the last reset. The units for the elapsed time is seconds.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTimer()\n"
"    Signature: oaTimer||\n"
"    This function constructs an oaTimer instance, initializing the counter with a snapshot of the clock in order to calculate elapsed time value.\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimer_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimer",
    sizeof(PyoaTimerObject),
    0,
    (destructor)oaTimer_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimer_tp_compare,	/* tp_compare */
    (reprfunc)oaTimer_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimer_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimer_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimer_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimer_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimer_Type)<0) {
      printf("** PyType_Ready failed for: oaTimer\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimer",
           (PyObject*)(&PyoaTimer_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimer\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTrackPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTrackPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTrackPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTrackPatternObject* self = (PyoaTrackPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTrackPattern)
    {
        PyParamoaTrackPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTrackPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTrackPattern, Choices are:\n"
        "    (oaTrackPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTrackPattern_tp_dealloc(PyoaTrackPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTrackPattern_tp_repr(PyObject *ob)
{
    PyParamoaTrackPattern value;
    int convert_status=PyoaTrackPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[36];
    sprintf(buffer,"<oaTrackPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTrackPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTrackPattern v1;
    PyParamoaTrackPattern v2;
    int convert_status1=PyoaTrackPattern_Convert(ob1,&v1);
    int convert_status2=PyoaTrackPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTrackPattern_Convert(PyObject* ob,PyParamoaTrackPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaTrackPattern_Check(ob)) {
        result->SetData( (oaTrackPattern**) ((PyoaTrackPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTrackPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTrackPattern_FromoaTrackPattern(oaTrackPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTrackPattern* data=*value;
        PyObject* bself = PyoaTrackPattern_Type.tp_alloc(&PyoaTrackPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaTrackPatternObject* self = (PyoaTrackPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTrackPattern_FromoaTrackPattern(oaTrackPattern* data)
{
    if (data) {
       PyObject* bself = PyoaTrackPattern_Type.tp_alloc(&PyoaTrackPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaTrackPatternObject* self = (PyoaTrackPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTrackPattern_destroy_doc[] = 
"Class: oaTrackPattern, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function deletes this trackPattern, removing it from the database.\n"
;

static PyObject*
oaTrackPattern_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_getNumTracks_doc[] = 
"Class: oaTrackPattern, Function: getNumTracks\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumTracks() const\n"
"    Signature: getNumTracks|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function gets the number of track lines of this trackPattern.\n"
;

static PyObject*
oaTrackPattern_getNumTracks(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumTracks());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_getRoutingLayer_doc[] = 
"Class: oaTrackPattern, Function: getRoutingLayer\n"
"  Paramegers: ()\n"
"    Calls: oaLayerNum getRoutingLayer() const\n"
"    Signature: getRoutingLayer|simple-oaLayerNum|\n"
"    BrowseData: 1\n"
"    This function gets the layer number of this trackPattern. If the trackPattern has not been assigned to a layer, the result is undefined. See also hasRoutingLayer .\n"
;

static PyObject*
oaTrackPattern_getRoutingLayer(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaLayerNum result= (data.DataCall()->getRoutingLayer());
        return PyoaLayerNum_FromoaLayerNum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_getStartCoord_doc[] = 
"Class: oaTrackPattern, Function: getStartCoord\n"
"  Paramegers: ()\n"
"    Calls: oaCoord getStartCoord() const\n"
"    Signature: getStartCoord|simple-oaCoord|\n"
"    BrowseData: 1\n"
"    This function gets the starting coordinates of the trackPattern.\n"
;

static PyObject*
oaTrackPattern_getStartCoord(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCoord result= (data.DataCall()->getStartCoord());
        return PyoaCoord_FromoaCoord(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_getTrackSpacing_doc[] = 
"Class: oaTrackPattern, Function: getTrackSpacing\n"
"  Paramegers: ()\n"
"    Calls: oaDist getTrackSpacing() const\n"
"    Signature: getTrackSpacing|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function gets the space value between two track lines in this trackPattern.\n"
;

static PyObject*
oaTrackPattern_getTrackSpacing(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getTrackSpacing());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_hasRoutingLayer_doc[] = 
"Class: oaTrackPattern, Function: hasRoutingLayer\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasRoutingLayer() const\n"
"    Signature: hasRoutingLayer|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if the trackPattern is assigned to a layer. Otherwise, the function returns false.\n"
;

static PyObject*
oaTrackPattern_hasRoutingLayer(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasRoutingLayer());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_isHorizontal_doc[] = 
"Class: oaTrackPattern, Function: isHorizontal\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isHorizontal() const\n"
"    Signature: isHorizontal|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns the flag that indicates if this trackPattern is horizontal.\n"
;

static PyObject*
oaTrackPattern_isHorizontal(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isHorizontal());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_removeRoutingLayer_doc[] = 
"Class: oaTrackPattern, Function: removeRoutingLayer\n"
"  Paramegers: ()\n"
"    Calls: void removeRoutingLayer()\n"
"    Signature: removeRoutingLayer|void-void|\n"
"    BrowseData: 0\n"
"    This function removes the routing layer from this trackPattern.\n"
;

static PyObject*
oaTrackPattern_removeRoutingLayer(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->removeRoutingLayer();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_setHorizontal_doc[] = 
"Class: oaTrackPattern, Function: setHorizontal\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setHorizontal(oaBoolean isHorizontal)\n"
"    Signature: setHorizontal|void-void|simple-oaBoolean,\n"
"    This function sets the horizontal field of the trackPattern.\n"
;

static PyObject*
oaTrackPattern_setHorizontal(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setHorizontal(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_setNumTracks_doc[] = 
"Class: oaTrackPattern, Function: setNumTracks\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setNumTracks(oaUInt4 num)\n"
"    Signature: setNumTracks|void-void|simple-oaUInt4,\n"
"    This function sets the number of the track lines of this trackPattern.\n"
;

static PyObject*
oaTrackPattern_setNumTracks(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setNumTracks(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_setRoutingLayer_doc[] = 
"Class: oaTrackPattern, Function: setRoutingLayer\n"
"  Paramegers: (oaLayerNum)\n"
"    Calls: void setRoutingLayer(oaLayerNum layer)\n"
"    Signature: setRoutingLayer|void-void|simple-oaLayerNum,\n"
"    This function sets the routing layer for this trackPattern.\n"
;

static PyObject*
oaTrackPattern_setRoutingLayer(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaLayerNum p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaLayerNum_Convert,&p1)) {
        data.DataCall()->setRoutingLayer(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_setStartCoord_doc[] = 
"Class: oaTrackPattern, Function: setStartCoord\n"
"  Paramegers: (oaCoord)\n"
"    Calls: void setStartCoord(oaCoord start)\n"
"    Signature: setStartCoord|void-void|simple-oaCoord,\n"
"    This function sets the starting coordinate field of the trackPattern.\n"
;

static PyObject*
oaTrackPattern_setStartCoord(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCoord p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCoord_Convert,&p1)) {
        data.DataCall()->setStartCoord(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_setTrackSpacing_doc[] = 
"Class: oaTrackPattern, Function: setTrackSpacing\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setTrackSpacing(oaDist spacing)\n"
"    Signature: setTrackSpacing|void-void|simple-oaDist,\n"
"    This function sets the trackSpacing of this trackPattern.\n"
;

static PyObject*
oaTrackPattern_setTrackSpacing(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTrackPatternObject* self=(PyoaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setTrackSpacing(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTrackPattern_isNull_doc[] =
"Class: oaTrackPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTrackPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTrackPattern data;
    int convert_status=PyoaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTrackPattern_assign_doc[] = 
"Class: oaTrackPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTrackPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTrackPattern data;
  int convert_status=PyoaTrackPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTrackPattern_methodlist[] = {
    {"destroy",(PyCFunction)oaTrackPattern_destroy,METH_VARARGS,oaTrackPattern_destroy_doc},
    {"getNumTracks",(PyCFunction)oaTrackPattern_getNumTracks,METH_VARARGS,oaTrackPattern_getNumTracks_doc},
    {"getRoutingLayer",(PyCFunction)oaTrackPattern_getRoutingLayer,METH_VARARGS,oaTrackPattern_getRoutingLayer_doc},
    {"getStartCoord",(PyCFunction)oaTrackPattern_getStartCoord,METH_VARARGS,oaTrackPattern_getStartCoord_doc},
    {"getTrackSpacing",(PyCFunction)oaTrackPattern_getTrackSpacing,METH_VARARGS,oaTrackPattern_getTrackSpacing_doc},
    {"hasRoutingLayer",(PyCFunction)oaTrackPattern_hasRoutingLayer,METH_VARARGS,oaTrackPattern_hasRoutingLayer_doc},
    {"isHorizontal",(PyCFunction)oaTrackPattern_isHorizontal,METH_VARARGS,oaTrackPattern_isHorizontal_doc},
    {"removeRoutingLayer",(PyCFunction)oaTrackPattern_removeRoutingLayer,METH_VARARGS,oaTrackPattern_removeRoutingLayer_doc},
    {"setHorizontal",(PyCFunction)oaTrackPattern_setHorizontal,METH_VARARGS,oaTrackPattern_setHorizontal_doc},
    {"setNumTracks",(PyCFunction)oaTrackPattern_setNumTracks,METH_VARARGS,oaTrackPattern_setNumTracks_doc},
    {"setRoutingLayer",(PyCFunction)oaTrackPattern_setRoutingLayer,METH_VARARGS,oaTrackPattern_setRoutingLayer_doc},
    {"setStartCoord",(PyCFunction)oaTrackPattern_setStartCoord,METH_VARARGS,oaTrackPattern_setStartCoord_doc},
    {"setTrackSpacing",(PyCFunction)oaTrackPattern_setTrackSpacing,METH_VARARGS,oaTrackPattern_setTrackSpacing_doc},
    {"isNull",(PyCFunction)oaTrackPattern_tp_isNull,METH_VARARGS,oaTrackPattern_isNull_doc},
    {"assign",(PyCFunction)oaTrackPattern_tp_assign,METH_VARARGS,oaTrackPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTrackPattern_doc[] = 
"Class: oaTrackPattern\n"
"  The oaTrackPattern class defines the position and number of routing tracks. Routing tracks are used by grided routers to determine preferred locations for routes. Tracks are defined as a grid - possibly non uniform - covering the area of the design.\n"
"  Track patterns are similar to RouteGridPitch and RouteGridOffset constraints (see the built-in Routing constraint section in Creating and Modeling Process Rules and Constraints in the Programmers Guide). The routing constraints are the overall technology plan. Track patterns are generally initialized by a router after considering the routing constraints and the details of a given design such as the width of the available vias. The track patterns often will be usable only by the router that created them.\n"
"  TrackPatterns can be horizontal or vertical and at least one of each must exist in a design for it to have a usable routing grid. Each TrackPattern declares a set of uniformly spaced routing tracks. TrackPatterns with isHorizontal set will define a horizontally spaced set of vertical routing tracks, and TrackPatterns with isHorizontal unset will define a set of vertically spaced horizontal routing tracks.\n"
"  The startCoord of the TrackPattern with isHorizontal set will be the left X coordinate of the first track and the startCoord of the TrackPattern with isHorizontal unset will define the bottom Y coordinate of the lowest track.\n"
"  An oaTrackPattern can optionally have an oaLayerNumber, in which case the trackPattern only applies to the specified layer.\n"
"  Non-uniform grids may be declared by using multiple TrackPatterns for a given direction.\n"
"  The oaTrackPattern class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: (const oaTrackPattern&)\n"
"    Signature: oaTrackPattern||cref-oaTrackPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTrackPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTrackPattern",
    sizeof(PyoaTrackPatternObject),
    0,
    (destructor)oaTrackPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTrackPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaTrackPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTrackPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTrackPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBlockObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTrackPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTrackPattern_static_create_doc[] = 
"Class: oaTrackPattern, Function: create\n"
"  Paramegers: (oaBlock,oaBoolean,oaCoord,oaUInt4,oaDist,oaLayerNum)\n"
"    Calls: oaTrackPattern* create(oaBlock* block,oaBoolean isHorizontal,oaCoord startCoord,oaUInt4 numTracks,oaDist trackSpacing,oaLayerNum routingLayer)\n"
"    Signature: create|ptr-oaTrackPattern|ptr-oaBlock,simple-oaBoolean,simple-oaCoord,simple-oaUInt4,simple-oaDist,simple-oaLayerNum,\n"
"    This function creates a new trackPattern in the specified block with the specified attributes. This trackPattern only applies to the specified layer.\n"
"    block\n"
"    The block in which to create the new TrackPattern\n"
"    isHorizontal\n"
"    Determines if the pattern is horizontal\n"
"    startCoord\n"
"    The starting coordinate for the pattern\n"
"    numTracks\n"
"    The number of tracks defined by the pattern\n"
"    trackSpacing\n"
"    The spacing for the pattern\n"
"    routingLayer\n"
"    The layer this trackPattern applies to.\n"
"  Paramegers: (oaBlock,oaBoolean,oaCoord,oaUInt4,oaDist)\n"
"    Calls: oaTrackPattern* create(oaBlock* block,oaBoolean isHorizontal,oaCoord startCoord,oaUInt4 numTracks,oaDist trackSpacing)\n"
"    Signature: create|ptr-oaTrackPattern|ptr-oaBlock,simple-oaBoolean,simple-oaCoord,simple-oaUInt4,simple-oaDist,\n"
"    This function creates a new trackPattern in the specified block with the specified attributes.\n"
"    block\n"
"    The block in which to create the new TrackPattern\n"
"    isHorizontal\n"
"    Determines if the pattern is horizontal\n"
"    startCoord\n"
"    The starting coordinate for the pattern\n"
"    numTracks\n"
"    The number of tracks defined by the pattern\n"
"    trackSpacing\n"
"    The spacing for the pattern\n"
;

static PyObject*
oaTrackPattern_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaBoolean,oaCoord,oaUInt4,oaDist,oaLayerNum)
    {
        PyParamoaBlock p1;
        PyParamoaBoolean p2;
        PyParamoaCoord p3;
        PyParamoaUInt4 p4;
        PyParamoaDist p5;
        PyParamoaLayerNum p6;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaBoolean_Convert,&p2,
              &PyoaCoord_Convert,&p3,
              &PyoaUInt4_Convert,&p4,
              &PyoaDist_Convert,&p5,
              &PyoaLayerNum_Convert,&p6)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTrackPatternp result= (oaTrackPattern::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data()));
            return PyoaTrackPattern_FromoaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaBoolean,oaCoord,oaUInt4,oaDist)
    {
        PyParamoaBlock p1;
        PyParamoaBoolean p2;
        PyParamoaCoord p3;
        PyParamoaUInt4 p4;
        PyParamoaDist p5;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaBoolean_Convert,&p2,
              &PyoaCoord_Convert,&p3,
              &PyoaUInt4_Convert,&p4,
              &PyoaDist_Convert,&p5)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTrackPatternp result= (oaTrackPattern::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
            return PyoaTrackPattern_FromoaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTrackPattern, function: create, Choices are:\n"
        "    (oaBlock,oaBoolean,oaCoord,oaUInt4,oaDist,oaLayerNum)\n"
        "    (oaBlock,oaBoolean,oaCoord,oaUInt4,oaDist)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTrackPattern_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaTrackPattern_static_create,METH_VARARGS,oaTrackPattern_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTrackPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTrackPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaTrackPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTrackPattern",
           (PyObject*)(&PyoaTrackPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTrackPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTrackPattern_Type.tp_dict;
    for(method=oaTrackPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTrackPatternModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTrackPatternModTypeEnum_Convert(PyObject* ob,PyParamoaTrackPatternModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetHorizontalTrackPatternModType")==0) { result->SetData(oacSetHorizontalTrackPatternModType); return 1;}
        if (strcasecmp(str,"oacSetStartCoordTrackPatternModType")==0) { result->SetData(oacSetStartCoordTrackPatternModType); return 1;}
        if (strcasecmp(str,"oacSetNumTracksTrackPatternModType")==0) { result->SetData(oacSetNumTracksTrackPatternModType); return 1;}
        if (strcasecmp(str,"oacSetTrackspaceTrackPatternModType")==0) { result->SetData(oacSetTrackspaceTrackPatternModType); return 1;}
        if (strcasecmp(str,"oacSetRoutingLayerTrackPatternModType")==0) { result->SetData(oacSetRoutingLayerTrackPatternModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTrackPatternModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTrackPatternModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTrackPatternModTypeEnum_FromoaTrackPatternModTypeEnum(oaTrackPatternModTypeEnum ob)
{
    if (ob==oacSetHorizontalTrackPatternModType) return PyString_FromString("oacSetHorizontalTrackPatternModType");
    if (ob==oacSetStartCoordTrackPatternModType) return PyString_FromString("oacSetStartCoordTrackPatternModType");
    if (ob==oacSetNumTracksTrackPatternModType) return PyString_FromString("oacSetNumTracksTrackPatternModType");
    if (ob==oacSetTrackspaceTrackPatternModType) return PyString_FromString("oacSetTrackspaceTrackPatternModType");
    if (ob==oacSetRoutingLayerTrackPatternModType) return PyString_FromString("oacSetRoutingLayerTrackPatternModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTrackPatternModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTrackPatternModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTrackPatternModTypeEnum_FromoaTrackPatternModTypeEnum(oaTrackPatternModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTrackPatternModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTrackPatternModTypeEnum_doc[] =
"Type convert function for enum: oaTrackPatternModTypeEnum";
                               
static PyMethodDef PyoaTrackPatternModTypeEnum_method =
  {"oaTrackPatternModTypeEnum",(PyCFunction)PyoaTrackPatternModTypeEnum_TypeFunction,METH_VARARGS,oaTrackPatternModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTrackPatternModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetHorizontalTrackPatternModType");
    PyDict_SetItemString(mod_dict,"oacSetHorizontalTrackPatternModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetStartCoordTrackPatternModType");
    PyDict_SetItemString(mod_dict,"oacSetStartCoordTrackPatternModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetNumTracksTrackPatternModType");
    PyDict_SetItemString(mod_dict,"oacSetNumTracksTrackPatternModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetTrackspaceTrackPatternModType");
    PyDict_SetItemString(mod_dict,"oacSetTrackspaceTrackPatternModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetRoutingLayerTrackPatternModType");
    PyDict_SetItemString(mod_dict,"oacSetRoutingLayerTrackPatternModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTrackPatternModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTrackPatternModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTrackPatternModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTransform
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTransform_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTransform_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTransformObject* self = (PyoaTransformObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaTransform();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaPoint)
    {
        PyParamoaPoint p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaPoint_Convert,&p1)) {
            self->value =  new oaTransform(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaPoint,oaOrient)
    {
        PyParamoaPoint p1;
        PyParamoaOrient p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaPoint_Convert,&p1,
              &PyoaOrient_Convert,&p2)) {
            self->value =  new oaTransform(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaOffset,oaOffset)
    {
        PyParamoaOffset p1;
        PyParamoaOffset p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaOffset_Convert,&p1,
              &PyoaOffset_Convert,&p2)) {
            self->value =  new oaTransform(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaOffset,oaOffset,oaOrient)
    {
        PyParamoaOffset p1;
        PyParamoaOffset p2;
        PyParamoaOrient p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaOffset_Convert,&p1,
              &PyoaOffset_Convert,&p2,
              &PyoaOrient_Convert,&p3)) {
            self->value =  new oaTransform(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaOrient)
    {
        PyParamoaOrient p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaOrient_Convert,&p1)) {
            self->value =  new oaTransform(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTransform,oaTransform)
    {
        PyParamoaTransform p1;
        PyParamoaTransform p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTransform_Convert,&p1,
              &PyoaTransform_Convert,&p2)) {
            self->value =  new oaTransform(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTransform)
    {
        PyParamoaTransform p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTransform_Convert,&p1)) {
            self->value= new oaTransform(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTransform, Choices are:\n"
        "    ()\n"
        "    (oaPoint)\n"
        "    (oaPoint,oaOrient)\n"
        "    (oaOffset,oaOffset)\n"
        "    (oaOffset,oaOffset,oaOrient)\n"
        "    (oaOrient)\n"
        "    (oaTransform,oaTransform)\n"
        "    (oaTransform)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTransform_tp_dealloc(PyoaTransformObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTransform_tp_repr(PyObject *ob)
{
    PyParamoaTransform value;
    int convert_status=PyoaTransform_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[33];
    sprintf(buffer,"<oaTransform::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTransform_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTransform v1;
    PyParamoaTransform v2;
    int convert_status1=PyoaTransform_Convert(ob1,&v1);
    int convert_status2=PyoaTransform_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    if (v1.Data()==v2.Data()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTransform_Convert(PyObject* ob,PyParamoaTransform* result)
{
    if (ob == NULL) return 1;
    if (PyoaTransform_Check(ob)) {
        result->SetData(  ((PyoaTransformObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTransform Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTransform_FromoaTransform(oaTransform* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTransform_Type.tp_alloc(&PyoaTransform_Type,0);
        if (bself == NULL) return bself;
        PyoaTransformObject* self = (PyoaTransformObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTransform_concat_doc[] = 
"Class: oaTransform, Function: concat\n"
"  Paramegers: (oaTransform,oaTransform)\n"
"    Calls: void concat(const oaTransform& xform,oaTransform& result) const\n"
"    Signature: concat|void-void|cref-oaTransform,ref-oaTransform,\n"
"    This function concatenates this transform with the specified transform and stores the result in result . The current transform is not changed.\n"
"    xform\n"
"    The transform to concatenate to this transform\n"
"    result\n"
"    The resulting transform\n"
"  Paramegers: (oaTransform)\n"
"    Calls: void concat(const oaTransform& xform)\n"
"    Signature: concat|void-void|cref-oaTransform,\n"
"    This function concatenates this transform with the specified transform. This transform becomes the concatenated transform.\n"
"    xform\n"
"    The transform to concatenate to this transform\n"
;

static PyObject*
oaTransform_concat(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    // Case: (oaTransform,oaTransform)
    {
        PyParamoaTransform p1;
        PyParamoaTransform p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTransform_Convert,&p1,
              &PyoaTransform_Convert,&p2)) {
            data.DataCall()->concat(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaTransform)
    {
        PyParamoaTransform p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTransform_Convert,&p1)) {
            data.DataCall()->concat(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTransform, function: concat, Choices are:\n"
        "    (oaTransform,oaTransform)\n"
        "    (oaTransform)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_init_doc[] = 
"Class: oaTransform, Function: init\n"
"  Paramegers: ()\n"
"    Calls: void init()\n"
"    Signature: init|void-void|\n"
"    BrowseData: 0\n"
"    This function initializes this transform to represent the identity transform, with offset equal to (0, 0) and orientation equal to oacR0.\n"
;

static PyObject*
oaTransform_init(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->init();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_invert_doc[] = 
"Class: oaTransform, Function: invert\n"
"  Paramegers: (oaTransform)\n"
"    Calls: void invert(oaTransform& result) const\n"
"    Signature: invert|void-void|ref-oaTransform,\n"
"    BrowseData: 0,oaTransform\n"
"    This function inverts this transform and stores the result in result .\n"
"    Note: The inverse transform is the transform that will undo the effect of the original transform.\n"
"  Paramegers: ()\n"
"    Calls: void invert()\n"
"    Signature: invert|void-void|\n"
"    BrowseData: 0\n"
"    This function inverts this transform.\n"
"    Note: The inverse transform is the transform that will undo the effect of the original transform.\n"
;

static PyObject*
oaTransform_invert(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    // Case: (oaTransform)
    {
        PyParamoaTransform p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTransform_Convert,&p1)) {
            data.DataCall()->invert(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            data.DataCall()->invert();
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTransform, function: invert, Choices are:\n"
        "    (oaTransform)\n"
        "    ()\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_isIdentity_doc[] = 
"Class: oaTransform, Function: isIdentity\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isIdentity() const\n"
"    Signature: isIdentity|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if this transform is the identity transform.\n"
;

static PyObject*
oaTransform_isIdentity(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isIdentity());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_offset_doc[] = 
"Class: oaTransform, Function: offset\n"
"  Paramegers: ()\n"
"    Calls: oaPoint& offset()\n"
"    Signature: offset|ref-oaPoint|\n"
"    BrowseData: 1\n"
"    This function returns a reference to the offset of the transform. The offset represents the delta X and delta Y of the transform.\n"
;

static PyObject*
oaTransform_offset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaPoint* result=&(data.DataCall()->offset());
        return PyoaPoint_FromoaPoint(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_orient_doc[] = 
"Class: oaTransform, Function: orient\n"
"  Paramegers: ()\n"
"    Calls: oaOrient& orient()\n"
"    Signature: orient|ref-oaOrient|\n"
"    BrowseData: 1\n"
"    This function returns a reference to the orientation of the transform.\n"
;

static PyObject*
oaTransform_orient(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaOrient* result=&(data.DataCall()->orient());
        return PyoaOrient_FromoaOrient(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_set_doc[] = 
"Class: oaTransform, Function: set\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void set(const oaPoint& offsetIn)\n"
"    Signature: set|void-void|cref-oaPoint,simple-oaOrient,\n"
"    This function sets the offset and orientation of this transform object according to the given values.\n"
"    offsetIn\n"
"    the offset that this transform is set to\n"
"    orientIn\n"
"    the orientation that this transform is set to\n"
"  Paramegers: (oaPoint,oaOrient)\n"
"    Calls: void set(const oaPoint& offsetIn,oaOrient orientIn)\n"
"    Signature: set|void-void|cref-oaPoint,simple-oaOrient,\n"
"    This function sets the offset and orientation of this transform object according to the given values.\n"
"    offsetIn\n"
"    the offset that this transform is set to\n"
"    orientIn\n"
"    the orientation that this transform is set to\n"
"  Paramegers: (oaOffset,oaOffset)\n"
"    Calls: void set(oaOffset xOffsetIn,oaOffset yOffsetIn)\n"
"    Signature: set|void-void|simple-oaOffset,simple-oaOffset,simple-oaOrient,\n"
"    This function sets the offsets and orientation of this transform object according to the given values.\n"
"    xOffsetIn\n"
"    the x-offset value that this transform is set to\n"
"    yOffsetIn\n"
"    the y-offset value that this transform is set to\n"
"    orientIn\n"
"    the orientation that this transform is set to.\n"
"  Paramegers: (oaOffset,oaOffset,oaOrient)\n"
"    Calls: void set(oaOffset xOffsetIn,oaOffset yOffsetIn,oaOrient orientIn)\n"
"    Signature: set|void-void|simple-oaOffset,simple-oaOffset,simple-oaOrient,\n"
"    This function sets the offsets and orientation of this transform object according to the given values.\n"
"    xOffsetIn\n"
"    the x-offset value that this transform is set to\n"
"    yOffsetIn\n"
"    the y-offset value that this transform is set to\n"
"    orientIn\n"
"    the orientation that this transform is set to.\n"
"  Paramegers: (oaOrient)\n"
"    Calls: void set(oaOrient orientIn)\n"
"    Signature: set|void-void|simple-oaOrient,\n"
"    This function sets the orientation of this transform object to the given value.\n"
"    orientIn\n"
"    the orientation that this transform is set to\n"
"  Paramegers: (oaTransform,oaTransform)\n"
"    Calls: void set(const oaTransform& xform1,const oaTransform& xform2)\n"
"    Signature: set|void-void|cref-oaTransform,cref-oaTransform,\n"
"    This function sets the offset and orientation of this transform object to be the same as the concatenation of the two given transforms. The resulting orientation equals the concatenation of the orientations of the two given transforms; the resulting offset equals the offset of the first given transform transformed by the second given transform.\n"
"    xform1\n"
"    the first transform to concatenate\n"
"    xform2\n"
"    the second transform to concatenate\n"
;

static PyObject*
oaTransform_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    // Case: (oaPoint)
    {
        PyParamoaPoint p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaPoint_Convert,&p1)) {
            data.DataCall()->set(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaPoint,oaOrient)
    {
        PyParamoaPoint p1;
        PyParamoaOrient p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaPoint_Convert,&p1,
              &PyoaOrient_Convert,&p2)) {
            data.DataCall()->set(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaOffset,oaOffset)
    {
        PyParamoaOffset p1;
        PyParamoaOffset p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaOffset_Convert,&p1,
              &PyoaOffset_Convert,&p2)) {
            data.DataCall()->set(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaOffset,oaOffset,oaOrient)
    {
        PyParamoaOffset p1;
        PyParamoaOffset p2;
        PyParamoaOrient p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaOffset_Convert,&p1,
              &PyoaOffset_Convert,&p2,
              &PyoaOrient_Convert,&p3)) {
            data.DataCall()->set(p1.Data(),p2.Data(),p3.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaOrient)
    {
        PyParamoaOrient p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaOrient_Convert,&p1)) {
            data.DataCall()->set(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaTransform,oaTransform)
    {
        PyParamoaTransform p1;
        PyParamoaTransform p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaTransform_Convert,&p1,
              &PyoaTransform_Convert,&p2)) {
            data.DataCall()->set(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTransform, function: set, Choices are:\n"
        "    (oaPoint)\n"
        "    (oaPoint,oaOrient)\n"
        "    (oaOffset,oaOffset)\n"
        "    (oaOffset,oaOffset,oaOrient)\n"
        "    (oaOrient)\n"
        "    (oaTransform,oaTransform)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_xOffset_doc[] = 
"Class: oaTransform, Function: xOffset\n"
"  Paramegers: ()\n"
"    Calls: oaOffset& xOffset()\n"
"    Signature: xOffset|ref-oaOffset|\n"
"    BrowseData: 1\n"
"    This function returns a reference to the delta X portion of the offset.\n"
;

static PyObject*
oaTransform_xOffset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaOffset* result=&(data.DataCall()->xOffset());
        return PyoaOffset_FromoaOffset(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTransform_yOffset_doc[] = 
"Class: oaTransform, Function: yOffset\n"
"  Paramegers: ()\n"
"    Calls: oaOffset& yOffset()\n"
"    Signature: yOffset|ref-oaOffset|\n"
"    BrowseData: 1\n"
"    This function returns a reference to the delta Y portion of the offset.\n"
;

static PyObject*
oaTransform_yOffset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTransform data;
    int convert_status=PyoaTransform_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTransformObject* self=(PyoaTransformObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaOffset* result=&(data.DataCall()->yOffset());
        return PyoaOffset_FromoaOffset(result,1,ob);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTransform_assign_doc[] = 
"Class: oaTransform, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTransform_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTransform data;
  int convert_status=PyoaTransform_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTransform p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTransform_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTransform_methodlist[] = {
    {"concat",(PyCFunction)oaTransform_concat,METH_VARARGS,oaTransform_concat_doc},
    {"init",(PyCFunction)oaTransform_init,METH_VARARGS,oaTransform_init_doc},
    {"invert",(PyCFunction)oaTransform_invert,METH_VARARGS,oaTransform_invert_doc},
    {"isIdentity",(PyCFunction)oaTransform_isIdentity,METH_VARARGS,oaTransform_isIdentity_doc},
    {"offset",(PyCFunction)oaTransform_offset,METH_VARARGS,oaTransform_offset_doc},
    {"orient",(PyCFunction)oaTransform_orient,METH_VARARGS,oaTransform_orient_doc},
    {"set",(PyCFunction)oaTransform_set,METH_VARARGS,oaTransform_set_doc},
    {"xOffset",(PyCFunction)oaTransform_xOffset,METH_VARARGS,oaTransform_xOffset_doc},
    {"yOffset",(PyCFunction)oaTransform_yOffset,METH_VARARGS,oaTransform_yOffset_doc},
    {"assign",(PyCFunction)oaTransform_tp_assign,METH_VARARGS,oaTransform_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTransform_doc[] = 
"Class: oaTransform\n"
"  The oaTransform class implements a 2-D transformation including orientation and translation. This class consists of an orientation (angle and mirroring information) and an offset in the X and Y directions. This information and the functions for modifying the transform are encapsulated in this class.\n"
"  Note: when a transform is applied that contains both an orientation change and a translation, the orientation change is applied first.\n"
"  OpenAccess can use oaTransform to transform various geometric objects, including figures ( oaFig::move ), boxes ( oaBox::transform ), and point arrays ( oaPointArray::transform ). For more information, see Using Transforms in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTransform()\n"
"    Signature: oaTransform||\n"
"    This function constructs an oaTransform class without initializing any data members.\n"
"  Paramegers: (oaPoint)\n"
"    Calls: oaTransform(const oaPoint& offsetIn)\n"
"    Signature: oaTransform||cref-oaPoint,simple-oaOrient,\n"
"    This function constructs an oaTransform class and initializes the transform with the offset specified by offsetIn . The orientIn argument is optional. The appropriate default is applied if it is not specified.\n"
"  Paramegers: (oaPoint,oaOrient)\n"
"    Calls: oaTransform(const oaPoint& offsetIn,oaOrient orientIn)\n"
"    Signature: oaTransform||cref-oaPoint,simple-oaOrient,\n"
"    This function constructs an oaTransform class and initializes the transform with the offset specified by offsetIn . The orientIn argument is optional. The appropriate default is applied if it is not specified.\n"
"  Paramegers: (oaOffset,oaOffset)\n"
"    Calls: oaTransform(oaOffset xOffsetIn,oaOffset yOffsetIn)\n"
"    Signature: oaTransform||simple-oaOffset,simple-oaOffset,simple-oaOrient,\n"
"    This function constructs an oaTransform class and initializes the transform with the offset using the given delta X offset specified by xOffsetIn and delta Y offset specified by yOffsetIn . The orientIn argument is optional. The appropriate default is applied if it is not specified.\n"
"  Paramegers: (oaOffset,oaOffset,oaOrient)\n"
"    Calls: oaTransform(oaOffset xOffsetIn,oaOffset yOffsetIn,oaOrient orientIn)\n"
"    Signature: oaTransform||simple-oaOffset,simple-oaOffset,simple-oaOrient,\n"
"    This function constructs an oaTransform class and initializes the transform with the offset using the given delta X offset specified by xOffsetIn and delta Y offset specified by yOffsetIn . The orientIn argument is optional. The appropriate default is applied if it is not specified.\n"
"  Paramegers: (oaOrient)\n"
"    Calls: oaTransform(oaOrient orientIn)\n"
"    Signature: oaTransform||simple-oaOrient,\n"
"    This function constructs an oaTransform class and initializes the transform with the given orientation orientIn . The transform offset is set by default to (0,0).\n"
"  Paramegers: (oaTransform,oaTransform)\n"
"    Calls: oaTransform(const oaTransform& xform1,const oaTransform& xform2)\n"
"    Signature: oaTransform||cref-oaTransform,cref-oaTransform,\n"
"    This function constructs an oaTransform class and initializes the transform by concatenating the two given transforms.\n"
"    xform1\n"
"    The first transform\n"
"    xform2\n"
"    The second transform\n"
"  Paramegers: (oaTransform)\n"
"    Calls: (const oaTransform&)\n"
"    Signature: oaTransform||cref-oaTransform,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTransform_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTransform",
    sizeof(PyoaTransformObject),
    0,
    (destructor)oaTransform_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTransform_tp_compare,	/* tp_compare */
    (reprfunc)oaTransform_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTransform_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTransform_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTransform_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTransform_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTransform_Type)<0) {
      printf("** PyType_Ready failed for: oaTransform\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTransform",
           (PyObject*)(&PyoaTransform_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTransform\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTypeObject* self = (PyoaTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value =  new oaType();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTypeEnum)
    {
        PyParamoaTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTypeEnum_Convert,&p1)) {
            self->value =  new oaType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaType)
    {
        PyParamoaType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaType_Convert,&p1)) {
            self->value= new oaType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaType, Choices are:\n"
        "    ()\n"
        "    (oaTypeEnum)\n"
        "    (oaString)\n"
        "    (oaType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaType_tp_dealloc(PyoaTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaType_tp_repr(PyObject *ob)
{
    PyParamoaType value;
    int convert_status=PyoaType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[28];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaType v1;
    PyParamoaType v2;
    int convert_status1=PyoaType_Convert(ob1,&v1);
    int convert_status2=PyoaType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaType_Convert(PyObject* ob,PyParamoaType* result)
{
    if (ob == NULL) return 1;
    if (PyoaType_Check(ob)) {
        result->SetData(  ((PyoaTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaType_FromoaType(oaType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaType_Type.tp_alloc(&PyoaType_Type,0);
        if (bself == NULL) return bself;
        PyoaTypeObject* self = (PyoaTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaType_FromoaType(const oaType& data)
{
    PyObject* bself = PyoaType_Type.tp_alloc(&PyoaType_Type,0);
    if (bself == NULL) return bself;
    PyoaTypeObject* self = (PyoaTypeObject*)bself;
    self->value =  new oaType(data);
    self->borrow = 0;
    self->locks = NULL;
    return bself;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaType_getName_doc[] = 
"Class: oaType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaTypeEnum object.\n"
;

static PyObject*
oaType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaType data;
    int convert_status=PyoaType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTypeObject* self=(PyoaTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaType_oaTypeEnum_doc[] = 
"Class: oaType, Function: oaTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaTypeEnum oaTypeEnum() const\n"
"    Signature: operator oaTypeEnum|simple-oaTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaType object into the corresponding oaTypeEnum value.\n"
;

static PyObject*
oaType_oaTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaType data;
    int convert_status=PyoaType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTypeObject* self=(PyoaTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTypeEnum result= (data.DataCall()->operator oaTypeEnum());
        return PyoaTypeEnum_FromoaTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaType_assign_doc[] = 
"Class: oaType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaType data;
  int convert_status=PyoaType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaType_methodlist[] = {
    {"getName",(PyCFunction)oaType_getName,METH_VARARGS,oaType_getName_doc},
    {"oaTypeEnum",(PyCFunction)oaType_oaTypeEnum,METH_VARARGS,oaType_oaTypeEnum_doc},
    {"assign",(PyCFunction)oaType_tp_assign,METH_VARARGS,oaType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaType_doc[] = 
"Class: oaType\n"
"  The oaType class is an enum wrapper for the values that indicate the type of any managed database object. All persistent design database, technology database, and library database objects are included.\n"
"  Abstract base classes are not included in the list of types. Use the isClass functions on various base classes to classify an object by one of the base classes. For example, you can use isShape() on any oaBlockObject .\n"
"  See oaObject::getType for its usage. See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"  oaTypeEnum\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaType()\n"
"    Signature: oaType||\n"
"    This is the default oaType constructor.\n"
"  Paramegers: (oaTypeEnum)\n"
"    Calls: oaType(oaTypeEnum valueIn)\n"
"    Signature: oaType||simple-oaTypeEnum,\n"
"    This function constructs an instance of an oaType class using the specified oaTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaType(const oaString& name)\n"
"    Signature: oaType||cref-oaString,\n"
"    This function constructs an instance of an oaType class using the #oaTypeEnum associated with the specified string name . This name must be defined in the legal set of names associated with oaTypeEnum.\n"
"    oacInvalidObjectTypeName\n"
"  Paramegers: (oaType)\n"
"    Calls: (const oaType&)\n"
"    Signature: oaType||cref-oaType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaType",
    sizeof(PyoaTypeObject),
    0,
    (destructor)oaType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaType_tp_compare,	/* tp_compare */
    (reprfunc)oaType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaType_Type)<0) {
      printf("** PyType_Ready failed for: oaType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaType",
           (PyObject*)(&PyoaType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaType\n");
       return -1;
    }
    return 0;
}


// ==================================================================
// Array for class: oaType
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaType_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaType_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaType_ArrayObject* self = (PyoaType_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaType_Array) */
    {
        PyParamoaType_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaType_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaType_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaType_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaType_Array_dealloc(PyObject* gself)
{
    PyoaType_ArrayObject* self = (PyoaType_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaType_Array_str(PyObject *ob)
{
    PyParamoaType_Array value;
    int convert_status=PyoaType_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaType_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaType_Array_repr(PyObject *ob)
{
    PyParamoaType_Array value;
    int convert_status=PyoaType_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaType_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaType_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaType_Array p1;
    PyParamoaType_Array p2;
    int s1=PyoaType_Array_Convert(ob1,&p1);
    int s2=PyoaType_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaType_Array_CreateList(p1);
    PyObject* l2=PyoaType_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaType_Array_Convert(PyObject* ob,PyParamoaType_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaType_Array_Check(ob)) {
    PyoaType_ArrayObject* self = (PyoaType_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaType data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaType_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaType data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaType_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaType_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaType_Array_FromoaType_Array(const oaType_Array& value)
{
  PyObject* gself = PyoaType_Array_Type.tp_alloc(&PyoaType_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaType_ArrayObject* self = (PyoaType_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaType_Array_FromoaType_Array(PyTypeoaType* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaType_Array_Type.tp_alloc(&PyoaType_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaType_ArrayObject* self = (PyoaType_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaType_Array_CreateList(PyParamoaType_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaType_FromoaType(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaType_Array_assign_doc[] = 
"Class: oaType_Array, Function: assign\n"
"  Paramegers: (oaType_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaType_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaType_ArrayObject* self=(PyoaType_ArrayObject*)ob;
  try {
    PyParamoaType_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaType_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaType_Array_list_doc[] = 
"Class: oaType_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaType_Array_list(PyObject* ob, PyObject *args)
{
  PyoaType_ArrayObject* self=(PyoaType_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaType_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaType_Array_methodlist[] = {
    {"assign",(PyCFunction)oaType_Array_assign,METH_VARARGS,oaType_Array_assign_doc},
    {"list",(PyCFunction)oaType_Array_list,METH_VARARGS,oaType_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaType_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaType_ArrayObject* self=(PyoaType_ArrayObject*)ob;
  try {
    PyParamoaType_Array data;
    int convert_status=PyoaType_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaType_FromoaType(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaType_Array_index_get_length(PyObject* ob)
{
    PyParamoaType_Array data;
    int convert_status=PyoaType_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaType_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaType_Array data;
    PyParamoaType dataitem;
    int convert_status=PyoaType_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaType_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaType_Array_doc[] =
"Class: oaType_Array\n"
"  The oaType_Array utility class provides an array of oaType.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaType_Array()\n"
"    Signature: oaType_Array||\n"
"    This is the default constructor for the oaType_Array class. This constructor creates an empty oaType_Array.\n"
"  Paramegers: (oaType_Array)\n"
"    Calls: (const oaType_Array&)\n"
"    Signature: oaType_Array||cref-oaType_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaType_Array_as_sequence = {
    (Pyoa_inquiry)oaType_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaType_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaType_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaType_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaType_Array",
    sizeof(PyoaType_ArrayObject),
    0,
    oaType_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaType_Array_compare,    /* tp_compare */
    oaType_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaType_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaType_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaType_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaType_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaType_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaType_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaType_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaType_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaType_Array",
           (PyObject*)(&PyoaType_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaType_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTypeEnum_Convert(PyObject* ob,PyParamoaTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacUnknownType")==0) { result->SetData(oacUnknownType); return 1;}
        if (strcasecmp(str,"oacSessionType")==0) { result->SetData(oacSessionType); return 1;}
        if (strcasecmp(str,"oacLibType")==0) { result->SetData(oacLibType); return 1;}
        if (strcasecmp(str,"oacTechType")==0) { result->SetData(oacTechType); return 1;}
        if (strcasecmp(str,"oacDesignType")==0) { result->SetData(oacDesignType); return 1;}
        if (strcasecmp(str,"oacWaferType")==0) { result->SetData(oacWaferType); return 1;}
        if (strcasecmp(str,"oacBlockType")==0) { result->SetData(oacBlockType); return 1;}
        if (strcasecmp(str,"oacModuleType")==0) { result->SetData(oacModuleType); return 1;}
        if (strcasecmp(str,"oacOccurrenceType")==0) { result->SetData(oacOccurrenceType); return 1;}
        if (strcasecmp(str,"oacLPPHeaderType")==0) { result->SetData(oacLPPHeaderType); return 1;}
        if (strcasecmp(str,"oacLayerHeaderType")==0) { result->SetData(oacLayerHeaderType); return 1;}
        if (strcasecmp(str,"oacArcType")==0) { result->SetData(oacArcType); return 1;}
        if (strcasecmp(str,"oacDonutType")==0) { result->SetData(oacDonutType); return 1;}
        if (strcasecmp(str,"oacDotType")==0) { result->SetData(oacDotType); return 1;}
        if (strcasecmp(str,"oacEllipseType")==0) { result->SetData(oacEllipseType); return 1;}
        if (strcasecmp(str,"oacLineType")==0) { result->SetData(oacLineType); return 1;}
        if (strcasecmp(str,"oacPathType")==0) { result->SetData(oacPathType); return 1;}
        if (strcasecmp(str,"oacPathSegType")==0) { result->SetData(oacPathSegType); return 1;}
        if (strcasecmp(str,"oacPolygonType")==0) { result->SetData(oacPolygonType); return 1;}
        if (strcasecmp(str,"oacRectType")==0) { result->SetData(oacRectType); return 1;}
        if (strcasecmp(str,"oacTextType")==0) { result->SetData(oacTextType); return 1;}
        if (strcasecmp(str,"oacEvalTextType")==0) { result->SetData(oacEvalTextType); return 1;}
        if (strcasecmp(str,"oacPropDisplayType")==0) { result->SetData(oacPropDisplayType); return 1;}
        if (strcasecmp(str,"oacAttrDisplayType")==0) { result->SetData(oacAttrDisplayType); return 1;}
        if (strcasecmp(str,"oacTextOverrideType")==0) { result->SetData(oacTextOverrideType); return 1;}
        if (strcasecmp(str,"oacInstPropDisplayType")==0) { result->SetData(oacInstPropDisplayType); return 1;}
        if (strcasecmp(str,"oacInstAttrDisplayType")==0) { result->SetData(oacInstAttrDisplayType); return 1;}
        if (strcasecmp(str,"oacRouteType")==0) { result->SetData(oacRouteType); return 1;}
        if (strcasecmp(str,"oacMarkerType")==0) { result->SetData(oacMarkerType); return 1;}
        if (strcasecmp(str,"oacTrackPatternType")==0) { result->SetData(oacTrackPatternType); return 1;}
        if (strcasecmp(str,"oacRowType")==0) { result->SetData(oacRowType); return 1;}
        if (strcasecmp(str,"oacRowHeaderType")==0) { result->SetData(oacRowHeaderType); return 1;}
        if (strcasecmp(str,"oacPinType")==0) { result->SetData(oacPinType); return 1;}
        if (strcasecmp(str,"oacClusterType")==0) { result->SetData(oacClusterType); return 1;}
        if (strcasecmp(str,"oacAreaBoundaryType")==0) { result->SetData(oacAreaBoundaryType); return 1;}
        if (strcasecmp(str,"oacPRBoundaryType")==0) { result->SetData(oacPRBoundaryType); return 1;}
        if (strcasecmp(str,"oacSnapBoundaryType")==0) { result->SetData(oacSnapBoundaryType); return 1;}
        if (strcasecmp(str,"oacClusterBoundaryType")==0) { result->SetData(oacClusterBoundaryType); return 1;}
        if (strcasecmp(str,"oacAreaBlockageType")==0) { result->SetData(oacAreaBlockageType); return 1;}
        if (strcasecmp(str,"oacAreaHaloType")==0) { result->SetData(oacAreaHaloType); return 1;}
        if (strcasecmp(str,"oacLayerBlockageType")==0) { result->SetData(oacLayerBlockageType); return 1;}
        if (strcasecmp(str,"oacLayerHaloType")==0) { result->SetData(oacLayerHaloType); return 1;}
        if (strcasecmp(str,"oacSteinerType")==0) { result->SetData(oacSteinerType); return 1;}
        if (strcasecmp(str,"oacStdViaType")==0) { result->SetData(oacStdViaType); return 1;}
        if (strcasecmp(str,"oacCustomViaType")==0) { result->SetData(oacCustomViaType); return 1;}
        if (strcasecmp(str,"oacStdViaHeaderType")==0) { result->SetData(oacStdViaHeaderType); return 1;}
        if (strcasecmp(str,"oacCustomViaHeaderType")==0) { result->SetData(oacCustomViaHeaderType); return 1;}
        if (strcasecmp(str,"oacGCellPatternType")==0) { result->SetData(oacGCellPatternType); return 1;}
        if (strcasecmp(str,"oacCMapType")==0) { result->SetData(oacCMapType); return 1;}
        if (strcasecmp(str,"oacArrayInstType")==0) { result->SetData(oacArrayInstType); return 1;}
        if (strcasecmp(str,"oacScalarInstType")==0) { result->SetData(oacScalarInstType); return 1;}
        if (strcasecmp(str,"oacVectorInstType")==0) { result->SetData(oacVectorInstType); return 1;}
        if (strcasecmp(str,"oacVectorInstBitType")==0) { result->SetData(oacVectorInstBitType); return 1;}
        if (strcasecmp(str,"oacVectorInstDefType")==0) { result->SetData(oacVectorInstDefType); return 1;}
        if (strcasecmp(str,"oacBundleNetType")==0) { result->SetData(oacBundleNetType); return 1;}
        if (strcasecmp(str,"oacBusNetType")==0) { result->SetData(oacBusNetType); return 1;}
        if (strcasecmp(str,"oacBusNetBitType")==0) { result->SetData(oacBusNetBitType); return 1;}
        if (strcasecmp(str,"oacScalarNetType")==0) { result->SetData(oacScalarNetType); return 1;}
        if (strcasecmp(str,"oacBusNetDefType")==0) { result->SetData(oacBusNetDefType); return 1;}
        if (strcasecmp(str,"oacBundleTermType")==0) { result->SetData(oacBundleTermType); return 1;}
        if (strcasecmp(str,"oacBusTermType")==0) { result->SetData(oacBusTermType); return 1;}
        if (strcasecmp(str,"oacBusTermBitType")==0) { result->SetData(oacBusTermBitType); return 1;}
        if (strcasecmp(str,"oacScalarTermType")==0) { result->SetData(oacScalarTermType); return 1;}
        if (strcasecmp(str,"oacBusTermDefType")==0) { result->SetData(oacBusTermDefType); return 1;}
        if (strcasecmp(str,"oacInstTermType")==0) { result->SetData(oacInstTermType); return 1;}
        if (strcasecmp(str,"oacNetConnectDefType")==0) { result->SetData(oacNetConnectDefType); return 1;}
        if (strcasecmp(str,"oacTermConnectDefType")==0) { result->SetData(oacTermConnectDefType); return 1;}
        if (strcasecmp(str,"oacAssignValueType")==0) { result->SetData(oacAssignValueType); return 1;}
        if (strcasecmp(str,"oacAssignAssignmentType")==0) { result->SetData(oacAssignAssignmentType); return 1;}
        if (strcasecmp(str,"oacScanChainType")==0) { result->SetData(oacScanChainType); return 1;}
        if (strcasecmp(str,"oacScanChainInstType")==0) { result->SetData(oacScanChainInstType); return 1;}
        if (strcasecmp(str,"oacScanChainSetType")==0) { result->SetData(oacScanChainSetType); return 1;}
        if (strcasecmp(str,"oacInstHeaderType")==0) { result->SetData(oacInstHeaderType); return 1;}
        if (strcasecmp(str,"oacOccScalarInstType")==0) { result->SetData(oacOccScalarInstType); return 1;}
        if (strcasecmp(str,"oacOccVectorInstType")==0) { result->SetData(oacOccVectorInstType); return 1;}
        if (strcasecmp(str,"oacOccVectorInstBitType")==0) { result->SetData(oacOccVectorInstBitType); return 1;}
        if (strcasecmp(str,"oacOccVectorInstDefType")==0) { result->SetData(oacOccVectorInstDefType); return 1;}
        if (strcasecmp(str,"oacOccBundleNetType")==0) { result->SetData(oacOccBundleNetType); return 1;}
        if (strcasecmp(str,"oacOccBusNetType")==0) { result->SetData(oacOccBusNetType); return 1;}
        if (strcasecmp(str,"oacOccBusNetBitType")==0) { result->SetData(oacOccBusNetBitType); return 1;}
        if (strcasecmp(str,"oacOccScalarNetType")==0) { result->SetData(oacOccScalarNetType); return 1;}
        if (strcasecmp(str,"oacOccBusNetDefType")==0) { result->SetData(oacOccBusNetDefType); return 1;}
        if (strcasecmp(str,"oacOccBundleTermType")==0) { result->SetData(oacOccBundleTermType); return 1;}
        if (strcasecmp(str,"oacOccBusTermType")==0) { result->SetData(oacOccBusTermType); return 1;}
        if (strcasecmp(str,"oacOccBusTermBitType")==0) { result->SetData(oacOccBusTermBitType); return 1;}
        if (strcasecmp(str,"oacOccScalarTermType")==0) { result->SetData(oacOccScalarTermType); return 1;}
        if (strcasecmp(str,"oacOccBusTermDefType")==0) { result->SetData(oacOccBusTermDefType); return 1;}
        if (strcasecmp(str,"oacOccInstTermType")==0) { result->SetData(oacOccInstTermType); return 1;}
        if (strcasecmp(str,"oacOccNetConnectDefType")==0) { result->SetData(oacOccNetConnectDefType); return 1;}
        if (strcasecmp(str,"oacOccTermConnectDefType")==0) { result->SetData(oacOccTermConnectDefType); return 1;}
        if (strcasecmp(str,"oacOccAssignValueType")==0) { result->SetData(oacOccAssignValueType); return 1;}
        if (strcasecmp(str,"oacOccAssignAssignmentType")==0) { result->SetData(oacOccAssignAssignmentType); return 1;}
        if (strcasecmp(str,"oacObsoleteType92")==0) { result->SetData(oacObsoleteType92); return 1;}
        if (strcasecmp(str,"oacObsoleteType93")==0) { result->SetData(oacObsoleteType93); return 1;}
        if (strcasecmp(str,"oacObsoleteType94")==0) { result->SetData(oacObsoleteType94); return 1;}
        if (strcasecmp(str,"oacOccInstHeaderType")==0) { result->SetData(oacOccInstHeaderType); return 1;}
        if (strcasecmp(str,"oacModScalarInstType")==0) { result->SetData(oacModScalarInstType); return 1;}
        if (strcasecmp(str,"oacModVectorInstType")==0) { result->SetData(oacModVectorInstType); return 1;}
        if (strcasecmp(str,"oacModVectorInstBitType")==0) { result->SetData(oacModVectorInstBitType); return 1;}
        if (strcasecmp(str,"oacModVectorInstDefType")==0) { result->SetData(oacModVectorInstDefType); return 1;}
        if (strcasecmp(str,"oacModBundleNetType")==0) { result->SetData(oacModBundleNetType); return 1;}
        if (strcasecmp(str,"oacModBusNetType")==0) { result->SetData(oacModBusNetType); return 1;}
        if (strcasecmp(str,"oacModBusNetBitType")==0) { result->SetData(oacModBusNetBitType); return 1;}
        if (strcasecmp(str,"oacModScalarNetType")==0) { result->SetData(oacModScalarNetType); return 1;}
        if (strcasecmp(str,"oacModBusNetDefType")==0) { result->SetData(oacModBusNetDefType); return 1;}
        if (strcasecmp(str,"oacModBundleTermType")==0) { result->SetData(oacModBundleTermType); return 1;}
        if (strcasecmp(str,"oacModBusTermType")==0) { result->SetData(oacModBusTermType); return 1;}
        if (strcasecmp(str,"oacModBusTermBitType")==0) { result->SetData(oacModBusTermBitType); return 1;}
        if (strcasecmp(str,"oacModScalarTermType")==0) { result->SetData(oacModScalarTermType); return 1;}
        if (strcasecmp(str,"oacModBusTermDefType")==0) { result->SetData(oacModBusTermDefType); return 1;}
        if (strcasecmp(str,"oacModInstTermType")==0) { result->SetData(oacModInstTermType); return 1;}
        if (strcasecmp(str,"oacModNetConnectDefType")==0) { result->SetData(oacModNetConnectDefType); return 1;}
        if (strcasecmp(str,"oacModTermConnectDefType")==0) { result->SetData(oacModTermConnectDefType); return 1;}
        if (strcasecmp(str,"oacModAssignValueType")==0) { result->SetData(oacModAssignValueType); return 1;}
        if (strcasecmp(str,"oacModAssignAssignmentType")==0) { result->SetData(oacModAssignAssignmentType); return 1;}
        if (strcasecmp(str,"oacObsoleteType115")==0) { result->SetData(oacObsoleteType115); return 1;}
        if (strcasecmp(str,"oacObsoleteType116")==0) { result->SetData(oacObsoleteType116); return 1;}
        if (strcasecmp(str,"oacObsoleteType117")==0) { result->SetData(oacObsoleteType117); return 1;}
        if (strcasecmp(str,"oacModInstHeaderType")==0) { result->SetData(oacModInstHeaderType); return 1;}
        if (strcasecmp(str,"oacModModuleScalarInstType")==0) { result->SetData(oacModModuleScalarInstType); return 1;}
        if (strcasecmp(str,"oacModModuleVectorInstType")==0) { result->SetData(oacModModuleVectorInstType); return 1;}
        if (strcasecmp(str,"oacModModuleVectorInstBitType")==0) { result->SetData(oacModModuleVectorInstBitType); return 1;}
        if (strcasecmp(str,"oacOccArrayInstType")==0) { result->SetData(oacOccArrayInstType); return 1;}
        if (strcasecmp(str,"oacOccModuleScalarInstType")==0) { result->SetData(oacOccModuleScalarInstType); return 1;}
        if (strcasecmp(str,"oacOccModuleVectorInstType")==0) { result->SetData(oacOccModuleVectorInstType); return 1;}
        if (strcasecmp(str,"oacOccModuleVectorInstBitType")==0) { result->SetData(oacOccModuleVectorInstBitType); return 1;}
        if (strcasecmp(str,"oacOccModuleInstHeaderType")==0) { result->SetData(oacOccModuleInstHeaderType); return 1;}
        if (strcasecmp(str,"oacModModuleInstHeaderType")==0) { result->SetData(oacModModuleInstHeaderType); return 1;}
        if (strcasecmp(str,"oacAnalysisPointType")==0) { result->SetData(oacAnalysisPointType); return 1;}
        if (strcasecmp(str,"oacAnalysisOpPointType")==0) { result->SetData(oacAnalysisOpPointType); return 1;}
        if (strcasecmp(str,"oacOpPointHeaderType")==0) { result->SetData(oacOpPointHeaderType); return 1;}
        if (strcasecmp(str,"oacReducedDriverType")==0) { result->SetData(oacReducedDriverType); return 1;}
        if (strcasecmp(str,"oacParasiticNetworkType")==0) { result->SetData(oacParasiticNetworkType); return 1;}
        if (strcasecmp(str,"oacSubNetworkType")==0) { result->SetData(oacSubNetworkType); return 1;}
        if (strcasecmp(str,"oacSubNetworkMemType")==0) { result->SetData(oacSubNetworkMemType); return 1;}
        if (strcasecmp(str,"oacResistorType")==0) { result->SetData(oacResistorType); return 1;}
        if (strcasecmp(str,"oacCouplingCapType")==0) { result->SetData(oacCouplingCapType); return 1;}
        if (strcasecmp(str,"oacInductorType")==0) { result->SetData(oacInductorType); return 1;}
        if (strcasecmp(str,"oacDiodeType")==0) { result->SetData(oacDiodeType); return 1;}
        if (strcasecmp(str,"oacSeriesRLType")==0) { result->SetData(oacSeriesRLType); return 1;}
        if (strcasecmp(str,"oacMutualInductorType")==0) { result->SetData(oacMutualInductorType); return 1;}
        if (strcasecmp(str,"oacExternalDeviceType")==0) { result->SetData(oacExternalDeviceType); return 1;}
        if (strcasecmp(str,"oacNodeType")==0) { result->SetData(oacNodeType); return 1;}
        if (strcasecmp(str,"oacGroundedNodeType")==0) { result->SetData(oacGroundedNodeType); return 1;}
        if (strcasecmp(str,"oacGuideType")==0) { result->SetData(oacGuideType); return 1;}
        if (strcasecmp(str,"oacLumpedElmoreType")==0) { result->SetData(oacLumpedElmoreType); return 1;}
        if (strcasecmp(str,"oacPiElmoreType")==0) { result->SetData(oacPiElmoreType); return 1;}
        if (strcasecmp(str,"oacPiPoleResidueType")==0) { result->SetData(oacPiPoleResidueType); return 1;}
        if (strcasecmp(str,"oacElmoreType")==0) { result->SetData(oacElmoreType); return 1;}
        if (strcasecmp(str,"oacPoleResidueType")==0) { result->SetData(oacPoleResidueType); return 1;}
        if (strcasecmp(str,"oacOccArcType")==0) { result->SetData(oacOccArcType); return 1;}
        if (strcasecmp(str,"oacOccDonutType")==0) { result->SetData(oacOccDonutType); return 1;}
        if (strcasecmp(str,"oacOccDotType")==0) { result->SetData(oacOccDotType); return 1;}
        if (strcasecmp(str,"oacOccEllipseType")==0) { result->SetData(oacOccEllipseType); return 1;}
        if (strcasecmp(str,"oacOccLineType")==0) { result->SetData(oacOccLineType); return 1;}
        if (strcasecmp(str,"oacOccPathType")==0) { result->SetData(oacOccPathType); return 1;}
        if (strcasecmp(str,"oacOccPathSegType")==0) { result->SetData(oacOccPathSegType); return 1;}
        if (strcasecmp(str,"oacOccPolygonType")==0) { result->SetData(oacOccPolygonType); return 1;}
        if (strcasecmp(str,"oacOccRectType")==0) { result->SetData(oacOccRectType); return 1;}
        if (strcasecmp(str,"oacOccTextType")==0) { result->SetData(oacOccTextType); return 1;}
        if (strcasecmp(str,"oacOccEvalTextType")==0) { result->SetData(oacOccEvalTextType); return 1;}
        if (strcasecmp(str,"oacOccPropDisplayType")==0) { result->SetData(oacOccPropDisplayType); return 1;}
        if (strcasecmp(str,"oacOccAttrDisplayType")==0) { result->SetData(oacOccAttrDisplayType); return 1;}
        if (strcasecmp(str,"oacOccTextOverrideType")==0) { result->SetData(oacOccTextOverrideType); return 1;}
        if (strcasecmp(str,"oacOccInstPropDisplayType")==0) { result->SetData(oacOccInstPropDisplayType); return 1;}
        if (strcasecmp(str,"oacOccInstAttrDisplayType")==0) { result->SetData(oacOccInstAttrDisplayType); return 1;}
        if (strcasecmp(str,"oacIntPropType")==0) { result->SetData(oacIntPropType); return 1;}
        if (strcasecmp(str,"oacIntRangePropType")==0) { result->SetData(oacIntRangePropType); return 1;}
        if (strcasecmp(str,"oacFloatPropType")==0) { result->SetData(oacFloatPropType); return 1;}
        if (strcasecmp(str,"oacFloatRangePropType")==0) { result->SetData(oacFloatRangePropType); return 1;}
        if (strcasecmp(str,"oacStringPropType")==0) { result->SetData(oacStringPropType); return 1;}
        if (strcasecmp(str,"oacAppPropType")==0) { result->SetData(oacAppPropType); return 1;}
        if (strcasecmp(str,"oacDoublePropType")==0) { result->SetData(oacDoublePropType); return 1;}
        if (strcasecmp(str,"oacDoubleRangePropType")==0) { result->SetData(oacDoubleRangePropType); return 1;}
        if (strcasecmp(str,"oacBooleanPropType")==0) { result->SetData(oacBooleanPropType); return 1;}
        if (strcasecmp(str,"oacHierPropType")==0) { result->SetData(oacHierPropType); return 1;}
        if (strcasecmp(str,"oacTimePropType")==0) { result->SetData(oacTimePropType); return 1;}
        if (strcasecmp(str,"oacTimeRangePropType")==0) { result->SetData(oacTimeRangePropType); return 1;}
        if (strcasecmp(str,"oacEnumPropType")==0) { result->SetData(oacEnumPropType); return 1;}
        if (strcasecmp(str,"oacGroupType")==0) { result->SetData(oacGroupType); return 1;}
        if (strcasecmp(str,"oacGroupMemberType")==0) { result->SetData(oacGroupMemberType); return 1;}
        if (strcasecmp(str,"oacPhysicalLayerType")==0) { result->SetData(oacPhysicalLayerType); return 1;}
        if (strcasecmp(str,"oacDerivedLayerType")==0) { result->SetData(oacDerivedLayerType); return 1;}
        if (strcasecmp(str,"oacSizedLayerType")==0) { result->SetData(oacSizedLayerType); return 1;}
        if (strcasecmp(str,"oacPurposeType")==0) { result->SetData(oacPurposeType); return 1;}
        if (strcasecmp(str,"oacScalarSiteDefType")==0) { result->SetData(oacScalarSiteDefType); return 1;}
        if (strcasecmp(str,"oacArraySiteDefType")==0) { result->SetData(oacArraySiteDefType); return 1;}
        if (strcasecmp(str,"oacViaSpecType")==0) { result->SetData(oacViaSpecType); return 1;}
        if (strcasecmp(str,"oacStdViaDefType")==0) { result->SetData(oacStdViaDefType); return 1;}
        if (strcasecmp(str,"oacCustomViaDefType")==0) { result->SetData(oacCustomViaDefType); return 1;}
        if (strcasecmp(str,"oacOpPointType")==0) { result->SetData(oacOpPointType); return 1;}
        if (strcasecmp(str,"oacAnalysisLibType")==0) { result->SetData(oacAnalysisLibType); return 1;}
        if (strcasecmp(str,"oacAppObjectType")==0) { result->SetData(oacAppObjectType); return 1;}
        if (strcasecmp(str,"oacCellType")==0) { result->SetData(oacCellType); return 1;}
        if (strcasecmp(str,"oacViewType")==0) { result->SetData(oacViewType); return 1;}
        if (strcasecmp(str,"oacCellViewType")==0) { result->SetData(oacCellViewType); return 1;}
        if (strcasecmp(str,"oacDMFileType")==0) { result->SetData(oacDMFileType); return 1;}
        if (strcasecmp(str,"oacWaferDescType")==0) { result->SetData(oacWaferDescType); return 1;}
        if (strcasecmp(str,"oacFrameType")==0) { result->SetData(oacFrameType); return 1;}
        if (strcasecmp(str,"oacReticleType")==0) { result->SetData(oacReticleType); return 1;}
        if (strcasecmp(str,"oacReticleRefType")==0) { result->SetData(oacReticleRefType); return 1;}
        if (strcasecmp(str,"oacWaferFeatureType")==0) { result->SetData(oacWaferFeatureType); return 1;}
        if (strcasecmp(str,"oacStepperMapType")==0) { result->SetData(oacStepperMapType); return 1;}
        if (strcasecmp(str,"oacImageType")==0) { result->SetData(oacImageType); return 1;}
        if (strcasecmp(str,"oacFrameInstType")==0) { result->SetData(oacFrameInstType); return 1;}
        if (strcasecmp(str,"oacDesignInstType")==0) { result->SetData(oacDesignInstType); return 1;}
        if (strcasecmp(str,"oacViewTypeType")==0) { result->SetData(oacViewTypeType); return 1;}
        if (strcasecmp(str,"oacConstraintParamDefType")==0) { result->SetData(oacConstraintParamDefType); return 1;}
        if (strcasecmp(str,"oacConstraintParamType")==0) { result->SetData(oacConstraintParamType); return 1;}
        if (strcasecmp(str,"oacSimpleConstraintDefType")==0) { result->SetData(oacSimpleConstraintDefType); return 1;}
        if (strcasecmp(str,"oacLayerConstraintDefType")==0) { result->SetData(oacLayerConstraintDefType); return 1;}
        if (strcasecmp(str,"oacLayerPairConstraintDefType")==0) { result->SetData(oacLayerPairConstraintDefType); return 1;}
        if (strcasecmp(str,"oacSimpleConstraintType")==0) { result->SetData(oacSimpleConstraintType); return 1;}
        if (strcasecmp(str,"oacLayerConstraintType")==0) { result->SetData(oacLayerConstraintType); return 1;}
        if (strcasecmp(str,"oacLayerPairConstraintType")==0) { result->SetData(oacLayerPairConstraintType); return 1;}
        if (strcasecmp(str,"oacConstraintGroupType")==0) { result->SetData(oacConstraintGroupType); return 1;}
        if (strcasecmp(str,"oacConstraintGroupMemType")==0) { result->SetData(oacConstraintGroupMemType); return 1;}
        if (strcasecmp(str,"oacConstraintGroupHeaderType")==0) { result->SetData(oacConstraintGroupHeaderType); return 1;}
        if (strcasecmp(str,"oacBooleanValueType")==0) { result->SetData(oacBooleanValueType); return 1;}
        if (strcasecmp(str,"oacIntValueType")==0) { result->SetData(oacIntValueType); return 1;}
        if (strcasecmp(str,"oacFltValueType")==0) { result->SetData(oacFltValueType); return 1;}
        if (strcasecmp(str,"oacLayerArrayValueType")==0) { result->SetData(oacLayerArrayValueType); return 1;}
        if (strcasecmp(str,"oacInt1DTblValueType")==0) { result->SetData(oacInt1DTblValueType); return 1;}
        if (strcasecmp(str,"oacFlt1DTblValueType")==0) { result->SetData(oacFlt1DTblValueType); return 1;}
        if (strcasecmp(str,"oacInt2DTblValueType")==0) { result->SetData(oacInt2DTblValueType); return 1;}
        if (strcasecmp(str,"oacFlt2DTblValueType")==0) { result->SetData(oacFlt2DTblValueType); return 1;}
        if (strcasecmp(str,"oacIntFltTblValueType")==0) { result->SetData(oacIntFltTblValueType); return 1;}
        if (strcasecmp(str,"oacFltIntFltTblValueType")==0) { result->SetData(oacFltIntFltTblValueType); return 1;}
        if (strcasecmp(str,"oacDualIntValueType")==0) { result->SetData(oacDualIntValueType); return 1;}
        if (strcasecmp(str,"oacDualInt1DTblValueType")==0) { result->SetData(oacDualInt1DTblValueType); return 1;}
        if (strcasecmp(str,"oacBoxArrayValueType")==0) { result->SetData(oacBoxArrayValueType); return 1;}
        if (strcasecmp(str,"oacValueArrayValueType")==0) { result->SetData(oacValueArrayValueType); return 1;}
        if (strcasecmp(str,"oacViaDefArrayValueType")==0) { result->SetData(oacViaDefArrayValueType); return 1;}
        if (strcasecmp(str,"oacLayerValueType")==0) { result->SetData(oacLayerValueType); return 1;}
        if (strcasecmp(str,"oacAntennaRatioValueType")==0) { result->SetData(oacAntennaRatioValueType); return 1;}
        if (strcasecmp(str,"oacAntennaRatioArrayValueType")==0) { result->SetData(oacAntennaRatioArrayValueType); return 1;}
        if (strcasecmp(str,"oacViaDef2DTblValueType")==0) { result->SetData(oacViaDef2DTblValueType); return 1;}
        if (strcasecmp(str,"oacIntAppDefType")==0) { result->SetData(oacIntAppDefType); return 1;}
        if (strcasecmp(str,"oacFloatAppDefType")==0) { result->SetData(oacFloatAppDefType); return 1;}
        if (strcasecmp(str,"oacStringAppDefType")==0) { result->SetData(oacStringAppDefType); return 1;}
        if (strcasecmp(str,"oacIntraPointerAppDefType")==0) { result->SetData(oacIntraPointerAppDefType); return 1;}
        if (strcasecmp(str,"oacInterPointerAppDefType")==0) { result->SetData(oacInterPointerAppDefType); return 1;}
        if (strcasecmp(str,"oacDataAppDefType")==0) { result->SetData(oacDataAppDefType); return 1;}
        if (strcasecmp(str,"oacVarDataAppDefType")==0) { result->SetData(oacVarDataAppDefType); return 1;}
        if (strcasecmp(str,"oacTimeAppDefType")==0) { result->SetData(oacTimeAppDefType); return 1;}
        if (strcasecmp(str,"oacDoubleAppDefType")==0) { result->SetData(oacDoubleAppDefType); return 1;}
        if (strcasecmp(str,"oacVoidPointerAppDefType")==0) { result->SetData(oacVoidPointerAppDefType); return 1;}
        if (strcasecmp(str,"oacBooleanAppDefType")==0) { result->SetData(oacBooleanAppDefType); return 1;}
        if (strcasecmp(str,"oacAppObjectDefType")==0) { result->SetData(oacAppObjectDefType); return 1;}
        if (strcasecmp(str,"oacLibDefListType")==0) { result->SetData(oacLibDefListType); return 1;}
        if (strcasecmp(str,"oacLibDefType")==0) { result->SetData(oacLibDefType); return 1;}
        if (strcasecmp(str,"oacLibDefListRefType")==0) { result->SetData(oacLibDefListRefType); return 1;}
        if (strcasecmp(str,"oacLibDMDataType")==0) { result->SetData(oacLibDMDataType); return 1;}
        if (strcasecmp(str,"oacCellDMDataType")==0) { result->SetData(oacCellDMDataType); return 1;}
        if (strcasecmp(str,"oacViewDMDataType")==0) { result->SetData(oacViewDMDataType); return 1;}
        if (strcasecmp(str,"oacCellViewDMDataType")==0) { result->SetData(oacCellViewDMDataType); return 1;}
        if (strcasecmp(str,"oacFeatureType")==0) { result->SetData(oacFeatureType); return 1;}
        if (strcasecmp(str,"oacFigGroupType")==0) { result->SetData(oacFigGroupType); return 1;}
        if (strcasecmp(str,"oacFigGroupMemType")==0) { result->SetData(oacFigGroupMemType); return 1;}
        if (strcasecmp(str,"oacTechHeaderType")==0) { result->SetData(oacTechHeaderType); return 1;}
        if (strcasecmp(str,"oacTechLayerHeaderType")==0) { result->SetData(oacTechLayerHeaderType); return 1;}
        if (strcasecmp(str,"oacTechViaDefHeaderType")==0) { result->SetData(oacTechViaDefHeaderType); return 1;}
        if (strcasecmp(str,"oacLayerArrayConstraintDefType")==0) { result->SetData(oacLayerArrayConstraintDefType); return 1;}
        if (strcasecmp(str,"oacLayerArrayConstraintType")==0) { result->SetData(oacLayerArrayConstraintType); return 1;}
        if (strcasecmp(str,"oacUInt8ValueType")==0) { result->SetData(oacUInt8ValueType); return 1;}
        if (strcasecmp(str,"oacIntDualIntArrayTblValueType")==0) { result->SetData(oacIntDualIntArrayTblValueType); return 1;}
        if (strcasecmp(str,"oacIntRangeValueType")==0) { result->SetData(oacIntRangeValueType); return 1;}
        if (strcasecmp(str,"oacUInt8RangeValueType")==0) { result->SetData(oacUInt8RangeValueType); return 1;}
        if (strcasecmp(str,"oacDerivedLayerParamDefType")==0) { result->SetData(oacDerivedLayerParamDefType); return 1;}
        if (strcasecmp(str,"oacDerivedLayerParamType")==0) { result->SetData(oacDerivedLayerParamType); return 1;}
        if (strcasecmp(str,"oacDerivedLayerDefType")==0) { result->SetData(oacDerivedLayerDefType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTypeEnum_FromoaTypeEnum(oaTypeEnum ob)
{
    if (ob==oacUnknownType) return PyString_FromString("oacUnknownType");
    if (ob==oacSessionType) return PyString_FromString("oacSessionType");
    if (ob==oacLibType) return PyString_FromString("oacLibType");
    if (ob==oacTechType) return PyString_FromString("oacTechType");
    if (ob==oacDesignType) return PyString_FromString("oacDesignType");
    if (ob==oacWaferType) return PyString_FromString("oacWaferType");
    if (ob==oacBlockType) return PyString_FromString("oacBlockType");
    if (ob==oacModuleType) return PyString_FromString("oacModuleType");
    if (ob==oacOccurrenceType) return PyString_FromString("oacOccurrenceType");
    if (ob==oacLPPHeaderType) return PyString_FromString("oacLPPHeaderType");
    if (ob==oacLayerHeaderType) return PyString_FromString("oacLayerHeaderType");
    if (ob==oacArcType) return PyString_FromString("oacArcType");
    if (ob==oacDonutType) return PyString_FromString("oacDonutType");
    if (ob==oacDotType) return PyString_FromString("oacDotType");
    if (ob==oacEllipseType) return PyString_FromString("oacEllipseType");
    if (ob==oacLineType) return PyString_FromString("oacLineType");
    if (ob==oacPathType) return PyString_FromString("oacPathType");
    if (ob==oacPathSegType) return PyString_FromString("oacPathSegType");
    if (ob==oacPolygonType) return PyString_FromString("oacPolygonType");
    if (ob==oacRectType) return PyString_FromString("oacRectType");
    if (ob==oacTextType) return PyString_FromString("oacTextType");
    if (ob==oacEvalTextType) return PyString_FromString("oacEvalTextType");
    if (ob==oacPropDisplayType) return PyString_FromString("oacPropDisplayType");
    if (ob==oacAttrDisplayType) return PyString_FromString("oacAttrDisplayType");
    if (ob==oacTextOverrideType) return PyString_FromString("oacTextOverrideType");
    if (ob==oacInstPropDisplayType) return PyString_FromString("oacInstPropDisplayType");
    if (ob==oacInstAttrDisplayType) return PyString_FromString("oacInstAttrDisplayType");
    if (ob==oacRouteType) return PyString_FromString("oacRouteType");
    if (ob==oacMarkerType) return PyString_FromString("oacMarkerType");
    if (ob==oacTrackPatternType) return PyString_FromString("oacTrackPatternType");
    if (ob==oacRowType) return PyString_FromString("oacRowType");
    if (ob==oacRowHeaderType) return PyString_FromString("oacRowHeaderType");
    if (ob==oacPinType) return PyString_FromString("oacPinType");
    if (ob==oacClusterType) return PyString_FromString("oacClusterType");
    if (ob==oacAreaBoundaryType) return PyString_FromString("oacAreaBoundaryType");
    if (ob==oacPRBoundaryType) return PyString_FromString("oacPRBoundaryType");
    if (ob==oacSnapBoundaryType) return PyString_FromString("oacSnapBoundaryType");
    if (ob==oacClusterBoundaryType) return PyString_FromString("oacClusterBoundaryType");
    if (ob==oacAreaBlockageType) return PyString_FromString("oacAreaBlockageType");
    if (ob==oacAreaHaloType) return PyString_FromString("oacAreaHaloType");
    if (ob==oacLayerBlockageType) return PyString_FromString("oacLayerBlockageType");
    if (ob==oacLayerHaloType) return PyString_FromString("oacLayerHaloType");
    if (ob==oacSteinerType) return PyString_FromString("oacSteinerType");
    if (ob==oacStdViaType) return PyString_FromString("oacStdViaType");
    if (ob==oacCustomViaType) return PyString_FromString("oacCustomViaType");
    if (ob==oacStdViaHeaderType) return PyString_FromString("oacStdViaHeaderType");
    if (ob==oacCustomViaHeaderType) return PyString_FromString("oacCustomViaHeaderType");
    if (ob==oacGCellPatternType) return PyString_FromString("oacGCellPatternType");
    if (ob==oacCMapType) return PyString_FromString("oacCMapType");
    if (ob==oacArrayInstType) return PyString_FromString("oacArrayInstType");
    if (ob==oacScalarInstType) return PyString_FromString("oacScalarInstType");
    if (ob==oacVectorInstType) return PyString_FromString("oacVectorInstType");
    if (ob==oacVectorInstBitType) return PyString_FromString("oacVectorInstBitType");
    if (ob==oacVectorInstDefType) return PyString_FromString("oacVectorInstDefType");
    if (ob==oacBundleNetType) return PyString_FromString("oacBundleNetType");
    if (ob==oacBusNetType) return PyString_FromString("oacBusNetType");
    if (ob==oacBusNetBitType) return PyString_FromString("oacBusNetBitType");
    if (ob==oacScalarNetType) return PyString_FromString("oacScalarNetType");
    if (ob==oacBusNetDefType) return PyString_FromString("oacBusNetDefType");
    if (ob==oacBundleTermType) return PyString_FromString("oacBundleTermType");
    if (ob==oacBusTermType) return PyString_FromString("oacBusTermType");
    if (ob==oacBusTermBitType) return PyString_FromString("oacBusTermBitType");
    if (ob==oacScalarTermType) return PyString_FromString("oacScalarTermType");
    if (ob==oacBusTermDefType) return PyString_FromString("oacBusTermDefType");
    if (ob==oacInstTermType) return PyString_FromString("oacInstTermType");
    if (ob==oacNetConnectDefType) return PyString_FromString("oacNetConnectDefType");
    if (ob==oacTermConnectDefType) return PyString_FromString("oacTermConnectDefType");
    if (ob==oacAssignValueType) return PyString_FromString("oacAssignValueType");
    if (ob==oacAssignAssignmentType) return PyString_FromString("oacAssignAssignmentType");
    if (ob==oacScanChainType) return PyString_FromString("oacScanChainType");
    if (ob==oacScanChainInstType) return PyString_FromString("oacScanChainInstType");
    if (ob==oacScanChainSetType) return PyString_FromString("oacScanChainSetType");
    if (ob==oacInstHeaderType) return PyString_FromString("oacInstHeaderType");
    if (ob==oacOccScalarInstType) return PyString_FromString("oacOccScalarInstType");
    if (ob==oacOccVectorInstType) return PyString_FromString("oacOccVectorInstType");
    if (ob==oacOccVectorInstBitType) return PyString_FromString("oacOccVectorInstBitType");
    if (ob==oacOccVectorInstDefType) return PyString_FromString("oacOccVectorInstDefType");
    if (ob==oacOccBundleNetType) return PyString_FromString("oacOccBundleNetType");
    if (ob==oacOccBusNetType) return PyString_FromString("oacOccBusNetType");
    if (ob==oacOccBusNetBitType) return PyString_FromString("oacOccBusNetBitType");
    if (ob==oacOccScalarNetType) return PyString_FromString("oacOccScalarNetType");
    if (ob==oacOccBusNetDefType) return PyString_FromString("oacOccBusNetDefType");
    if (ob==oacOccBundleTermType) return PyString_FromString("oacOccBundleTermType");
    if (ob==oacOccBusTermType) return PyString_FromString("oacOccBusTermType");
    if (ob==oacOccBusTermBitType) return PyString_FromString("oacOccBusTermBitType");
    if (ob==oacOccScalarTermType) return PyString_FromString("oacOccScalarTermType");
    if (ob==oacOccBusTermDefType) return PyString_FromString("oacOccBusTermDefType");
    if (ob==oacOccInstTermType) return PyString_FromString("oacOccInstTermType");
    if (ob==oacOccNetConnectDefType) return PyString_FromString("oacOccNetConnectDefType");
    if (ob==oacOccTermConnectDefType) return PyString_FromString("oacOccTermConnectDefType");
    if (ob==oacOccAssignValueType) return PyString_FromString("oacOccAssignValueType");
    if (ob==oacOccAssignAssignmentType) return PyString_FromString("oacOccAssignAssignmentType");
    if (ob==oacObsoleteType92) return PyString_FromString("oacObsoleteType92");
    if (ob==oacObsoleteType93) return PyString_FromString("oacObsoleteType93");
    if (ob==oacObsoleteType94) return PyString_FromString("oacObsoleteType94");
    if (ob==oacOccInstHeaderType) return PyString_FromString("oacOccInstHeaderType");
    if (ob==oacModScalarInstType) return PyString_FromString("oacModScalarInstType");
    if (ob==oacModVectorInstType) return PyString_FromString("oacModVectorInstType");
    if (ob==oacModVectorInstBitType) return PyString_FromString("oacModVectorInstBitType");
    if (ob==oacModVectorInstDefType) return PyString_FromString("oacModVectorInstDefType");
    if (ob==oacModBundleNetType) return PyString_FromString("oacModBundleNetType");
    if (ob==oacModBusNetType) return PyString_FromString("oacModBusNetType");
    if (ob==oacModBusNetBitType) return PyString_FromString("oacModBusNetBitType");
    if (ob==oacModScalarNetType) return PyString_FromString("oacModScalarNetType");
    if (ob==oacModBusNetDefType) return PyString_FromString("oacModBusNetDefType");
    if (ob==oacModBundleTermType) return PyString_FromString("oacModBundleTermType");
    if (ob==oacModBusTermType) return PyString_FromString("oacModBusTermType");
    if (ob==oacModBusTermBitType) return PyString_FromString("oacModBusTermBitType");
    if (ob==oacModScalarTermType) return PyString_FromString("oacModScalarTermType");
    if (ob==oacModBusTermDefType) return PyString_FromString("oacModBusTermDefType");
    if (ob==oacModInstTermType) return PyString_FromString("oacModInstTermType");
    if (ob==oacModNetConnectDefType) return PyString_FromString("oacModNetConnectDefType");
    if (ob==oacModTermConnectDefType) return PyString_FromString("oacModTermConnectDefType");
    if (ob==oacModAssignValueType) return PyString_FromString("oacModAssignValueType");
    if (ob==oacModAssignAssignmentType) return PyString_FromString("oacModAssignAssignmentType");
    if (ob==oacObsoleteType115) return PyString_FromString("oacObsoleteType115");
    if (ob==oacObsoleteType116) return PyString_FromString("oacObsoleteType116");
    if (ob==oacObsoleteType117) return PyString_FromString("oacObsoleteType117");
    if (ob==oacModInstHeaderType) return PyString_FromString("oacModInstHeaderType");
    if (ob==oacModModuleScalarInstType) return PyString_FromString("oacModModuleScalarInstType");
    if (ob==oacModModuleVectorInstType) return PyString_FromString("oacModModuleVectorInstType");
    if (ob==oacModModuleVectorInstBitType) return PyString_FromString("oacModModuleVectorInstBitType");
    if (ob==oacOccArrayInstType) return PyString_FromString("oacOccArrayInstType");
    if (ob==oacOccModuleScalarInstType) return PyString_FromString("oacOccModuleScalarInstType");
    if (ob==oacOccModuleVectorInstType) return PyString_FromString("oacOccModuleVectorInstType");
    if (ob==oacOccModuleVectorInstBitType) return PyString_FromString("oacOccModuleVectorInstBitType");
    if (ob==oacOccModuleInstHeaderType) return PyString_FromString("oacOccModuleInstHeaderType");
    if (ob==oacModModuleInstHeaderType) return PyString_FromString("oacModModuleInstHeaderType");
    if (ob==oacAnalysisPointType) return PyString_FromString("oacAnalysisPointType");
    if (ob==oacAnalysisOpPointType) return PyString_FromString("oacAnalysisOpPointType");
    if (ob==oacOpPointHeaderType) return PyString_FromString("oacOpPointHeaderType");
    if (ob==oacReducedDriverType) return PyString_FromString("oacReducedDriverType");
    if (ob==oacParasiticNetworkType) return PyString_FromString("oacParasiticNetworkType");
    if (ob==oacSubNetworkType) return PyString_FromString("oacSubNetworkType");
    if (ob==oacSubNetworkMemType) return PyString_FromString("oacSubNetworkMemType");
    if (ob==oacResistorType) return PyString_FromString("oacResistorType");
    if (ob==oacCouplingCapType) return PyString_FromString("oacCouplingCapType");
    if (ob==oacInductorType) return PyString_FromString("oacInductorType");
    if (ob==oacDiodeType) return PyString_FromString("oacDiodeType");
    if (ob==oacSeriesRLType) return PyString_FromString("oacSeriesRLType");
    if (ob==oacMutualInductorType) return PyString_FromString("oacMutualInductorType");
    if (ob==oacExternalDeviceType) return PyString_FromString("oacExternalDeviceType");
    if (ob==oacNodeType) return PyString_FromString("oacNodeType");
    if (ob==oacGroundedNodeType) return PyString_FromString("oacGroundedNodeType");
    if (ob==oacGuideType) return PyString_FromString("oacGuideType");
    if (ob==oacLumpedElmoreType) return PyString_FromString("oacLumpedElmoreType");
    if (ob==oacPiElmoreType) return PyString_FromString("oacPiElmoreType");
    if (ob==oacPiPoleResidueType) return PyString_FromString("oacPiPoleResidueType");
    if (ob==oacElmoreType) return PyString_FromString("oacElmoreType");
    if (ob==oacPoleResidueType) return PyString_FromString("oacPoleResidueType");
    if (ob==oacOccArcType) return PyString_FromString("oacOccArcType");
    if (ob==oacOccDonutType) return PyString_FromString("oacOccDonutType");
    if (ob==oacOccDotType) return PyString_FromString("oacOccDotType");
    if (ob==oacOccEllipseType) return PyString_FromString("oacOccEllipseType");
    if (ob==oacOccLineType) return PyString_FromString("oacOccLineType");
    if (ob==oacOccPathType) return PyString_FromString("oacOccPathType");
    if (ob==oacOccPathSegType) return PyString_FromString("oacOccPathSegType");
    if (ob==oacOccPolygonType) return PyString_FromString("oacOccPolygonType");
    if (ob==oacOccRectType) return PyString_FromString("oacOccRectType");
    if (ob==oacOccTextType) return PyString_FromString("oacOccTextType");
    if (ob==oacOccEvalTextType) return PyString_FromString("oacOccEvalTextType");
    if (ob==oacOccPropDisplayType) return PyString_FromString("oacOccPropDisplayType");
    if (ob==oacOccAttrDisplayType) return PyString_FromString("oacOccAttrDisplayType");
    if (ob==oacOccTextOverrideType) return PyString_FromString("oacOccTextOverrideType");
    if (ob==oacOccInstPropDisplayType) return PyString_FromString("oacOccInstPropDisplayType");
    if (ob==oacOccInstAttrDisplayType) return PyString_FromString("oacOccInstAttrDisplayType");
    if (ob==oacIntPropType) return PyString_FromString("oacIntPropType");
    if (ob==oacIntRangePropType) return PyString_FromString("oacIntRangePropType");
    if (ob==oacFloatPropType) return PyString_FromString("oacFloatPropType");
    if (ob==oacFloatRangePropType) return PyString_FromString("oacFloatRangePropType");
    if (ob==oacStringPropType) return PyString_FromString("oacStringPropType");
    if (ob==oacAppPropType) return PyString_FromString("oacAppPropType");
    if (ob==oacDoublePropType) return PyString_FromString("oacDoublePropType");
    if (ob==oacDoubleRangePropType) return PyString_FromString("oacDoubleRangePropType");
    if (ob==oacBooleanPropType) return PyString_FromString("oacBooleanPropType");
    if (ob==oacHierPropType) return PyString_FromString("oacHierPropType");
    if (ob==oacTimePropType) return PyString_FromString("oacTimePropType");
    if (ob==oacTimeRangePropType) return PyString_FromString("oacTimeRangePropType");
    if (ob==oacEnumPropType) return PyString_FromString("oacEnumPropType");
    if (ob==oacGroupType) return PyString_FromString("oacGroupType");
    if (ob==oacGroupMemberType) return PyString_FromString("oacGroupMemberType");
    if (ob==oacPhysicalLayerType) return PyString_FromString("oacPhysicalLayerType");
    if (ob==oacDerivedLayerType) return PyString_FromString("oacDerivedLayerType");
    if (ob==oacSizedLayerType) return PyString_FromString("oacSizedLayerType");
    if (ob==oacPurposeType) return PyString_FromString("oacPurposeType");
    if (ob==oacScalarSiteDefType) return PyString_FromString("oacScalarSiteDefType");
    if (ob==oacArraySiteDefType) return PyString_FromString("oacArraySiteDefType");
    if (ob==oacViaSpecType) return PyString_FromString("oacViaSpecType");
    if (ob==oacStdViaDefType) return PyString_FromString("oacStdViaDefType");
    if (ob==oacCustomViaDefType) return PyString_FromString("oacCustomViaDefType");
    if (ob==oacOpPointType) return PyString_FromString("oacOpPointType");
    if (ob==oacAnalysisLibType) return PyString_FromString("oacAnalysisLibType");
    if (ob==oacAppObjectType) return PyString_FromString("oacAppObjectType");
    if (ob==oacCellType) return PyString_FromString("oacCellType");
    if (ob==oacViewType) return PyString_FromString("oacViewType");
    if (ob==oacCellViewType) return PyString_FromString("oacCellViewType");
    if (ob==oacDMFileType) return PyString_FromString("oacDMFileType");
    if (ob==oacWaferDescType) return PyString_FromString("oacWaferDescType");
    if (ob==oacFrameType) return PyString_FromString("oacFrameType");
    if (ob==oacReticleType) return PyString_FromString("oacReticleType");
    if (ob==oacReticleRefType) return PyString_FromString("oacReticleRefType");
    if (ob==oacWaferFeatureType) return PyString_FromString("oacWaferFeatureType");
    if (ob==oacStepperMapType) return PyString_FromString("oacStepperMapType");
    if (ob==oacImageType) return PyString_FromString("oacImageType");
    if (ob==oacFrameInstType) return PyString_FromString("oacFrameInstType");
    if (ob==oacDesignInstType) return PyString_FromString("oacDesignInstType");
    if (ob==oacViewTypeType) return PyString_FromString("oacViewTypeType");
    if (ob==oacConstraintParamDefType) return PyString_FromString("oacConstraintParamDefType");
    if (ob==oacConstraintParamType) return PyString_FromString("oacConstraintParamType");
    if (ob==oacSimpleConstraintDefType) return PyString_FromString("oacSimpleConstraintDefType");
    if (ob==oacLayerConstraintDefType) return PyString_FromString("oacLayerConstraintDefType");
    if (ob==oacLayerPairConstraintDefType) return PyString_FromString("oacLayerPairConstraintDefType");
    if (ob==oacSimpleConstraintType) return PyString_FromString("oacSimpleConstraintType");
    if (ob==oacLayerConstraintType) return PyString_FromString("oacLayerConstraintType");
    if (ob==oacLayerPairConstraintType) return PyString_FromString("oacLayerPairConstraintType");
    if (ob==oacConstraintGroupType) return PyString_FromString("oacConstraintGroupType");
    if (ob==oacConstraintGroupMemType) return PyString_FromString("oacConstraintGroupMemType");
    if (ob==oacConstraintGroupHeaderType) return PyString_FromString("oacConstraintGroupHeaderType");
    if (ob==oacBooleanValueType) return PyString_FromString("oacBooleanValueType");
    if (ob==oacIntValueType) return PyString_FromString("oacIntValueType");
    if (ob==oacFltValueType) return PyString_FromString("oacFltValueType");
    if (ob==oacLayerArrayValueType) return PyString_FromString("oacLayerArrayValueType");
    if (ob==oacInt1DTblValueType) return PyString_FromString("oacInt1DTblValueType");
    if (ob==oacFlt1DTblValueType) return PyString_FromString("oacFlt1DTblValueType");
    if (ob==oacInt2DTblValueType) return PyString_FromString("oacInt2DTblValueType");
    if (ob==oacFlt2DTblValueType) return PyString_FromString("oacFlt2DTblValueType");
    if (ob==oacIntFltTblValueType) return PyString_FromString("oacIntFltTblValueType");
    if (ob==oacFltIntFltTblValueType) return PyString_FromString("oacFltIntFltTblValueType");
    if (ob==oacDualIntValueType) return PyString_FromString("oacDualIntValueType");
    if (ob==oacDualInt1DTblValueType) return PyString_FromString("oacDualInt1DTblValueType");
    if (ob==oacBoxArrayValueType) return PyString_FromString("oacBoxArrayValueType");
    if (ob==oacValueArrayValueType) return PyString_FromString("oacValueArrayValueType");
    if (ob==oacViaDefArrayValueType) return PyString_FromString("oacViaDefArrayValueType");
    if (ob==oacLayerValueType) return PyString_FromString("oacLayerValueType");
    if (ob==oacAntennaRatioValueType) return PyString_FromString("oacAntennaRatioValueType");
    if (ob==oacAntennaRatioArrayValueType) return PyString_FromString("oacAntennaRatioArrayValueType");
    if (ob==oacViaDef2DTblValueType) return PyString_FromString("oacViaDef2DTblValueType");
    if (ob==oacIntAppDefType) return PyString_FromString("oacIntAppDefType");
    if (ob==oacFloatAppDefType) return PyString_FromString("oacFloatAppDefType");
    if (ob==oacStringAppDefType) return PyString_FromString("oacStringAppDefType");
    if (ob==oacIntraPointerAppDefType) return PyString_FromString("oacIntraPointerAppDefType");
    if (ob==oacInterPointerAppDefType) return PyString_FromString("oacInterPointerAppDefType");
    if (ob==oacDataAppDefType) return PyString_FromString("oacDataAppDefType");
    if (ob==oacVarDataAppDefType) return PyString_FromString("oacVarDataAppDefType");
    if (ob==oacTimeAppDefType) return PyString_FromString("oacTimeAppDefType");
    if (ob==oacDoubleAppDefType) return PyString_FromString("oacDoubleAppDefType");
    if (ob==oacVoidPointerAppDefType) return PyString_FromString("oacVoidPointerAppDefType");
    if (ob==oacBooleanAppDefType) return PyString_FromString("oacBooleanAppDefType");
    if (ob==oacAppObjectDefType) return PyString_FromString("oacAppObjectDefType");
    if (ob==oacLibDefListType) return PyString_FromString("oacLibDefListType");
    if (ob==oacLibDefType) return PyString_FromString("oacLibDefType");
    if (ob==oacLibDefListRefType) return PyString_FromString("oacLibDefListRefType");
    if (ob==oacLibDMDataType) return PyString_FromString("oacLibDMDataType");
    if (ob==oacCellDMDataType) return PyString_FromString("oacCellDMDataType");
    if (ob==oacViewDMDataType) return PyString_FromString("oacViewDMDataType");
    if (ob==oacCellViewDMDataType) return PyString_FromString("oacCellViewDMDataType");
    if (ob==oacFeatureType) return PyString_FromString("oacFeatureType");
    if (ob==oacFigGroupType) return PyString_FromString("oacFigGroupType");
    if (ob==oacFigGroupMemType) return PyString_FromString("oacFigGroupMemType");
    if (ob==oacTechHeaderType) return PyString_FromString("oacTechHeaderType");
    if (ob==oacTechLayerHeaderType) return PyString_FromString("oacTechLayerHeaderType");
    if (ob==oacTechViaDefHeaderType) return PyString_FromString("oacTechViaDefHeaderType");
    if (ob==oacLayerArrayConstraintDefType) return PyString_FromString("oacLayerArrayConstraintDefType");
    if (ob==oacLayerArrayConstraintType) return PyString_FromString("oacLayerArrayConstraintType");
    if (ob==oacUInt8ValueType) return PyString_FromString("oacUInt8ValueType");
    if (ob==oacIntDualIntArrayTblValueType) return PyString_FromString("oacIntDualIntArrayTblValueType");
    if (ob==oacIntRangeValueType) return PyString_FromString("oacIntRangeValueType");
    if (ob==oacUInt8RangeValueType) return PyString_FromString("oacUInt8RangeValueType");
    if (ob==oacDerivedLayerParamDefType) return PyString_FromString("oacDerivedLayerParamDefType");
    if (ob==oacDerivedLayerParamType) return PyString_FromString("oacDerivedLayerParamType");
    if (ob==oacDerivedLayerDefType) return PyString_FromString("oacDerivedLayerDefType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTypeEnum_FromoaTypeEnum(oaTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTypeEnum_doc[] =
"Type convert function for enum: oaTypeEnum";
                               
static PyMethodDef PyoaTypeEnum_method =
  {"oaTypeEnum",(PyCFunction)PyoaTypeEnum_TypeFunction,METH_VARARGS,oaTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacUnknownType");
    PyDict_SetItemString(mod_dict,"oacUnknownType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSessionType");
    PyDict_SetItemString(mod_dict,"oacSessionType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLibType");
    PyDict_SetItemString(mod_dict,"oacLibType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTechType");
    PyDict_SetItemString(mod_dict,"oacTechType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDesignType");
    PyDict_SetItemString(mod_dict,"oacDesignType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacWaferType");
    PyDict_SetItemString(mod_dict,"oacWaferType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBlockType");
    PyDict_SetItemString(mod_dict,"oacBlockType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModuleType");
    PyDict_SetItemString(mod_dict,"oacModuleType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccurrenceType");
    PyDict_SetItemString(mod_dict,"oacOccurrenceType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLPPHeaderType");
    PyDict_SetItemString(mod_dict,"oacLPPHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerHeaderType");
    PyDict_SetItemString(mod_dict,"oacLayerHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacArcType");
    PyDict_SetItemString(mod_dict,"oacArcType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDonutType");
    PyDict_SetItemString(mod_dict,"oacDonutType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDotType");
    PyDict_SetItemString(mod_dict,"oacDotType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacEllipseType");
    PyDict_SetItemString(mod_dict,"oacEllipseType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLineType");
    PyDict_SetItemString(mod_dict,"oacLineType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPathType");
    PyDict_SetItemString(mod_dict,"oacPathType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPathSegType");
    PyDict_SetItemString(mod_dict,"oacPathSegType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPolygonType");
    PyDict_SetItemString(mod_dict,"oacPolygonType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRectType");
    PyDict_SetItemString(mod_dict,"oacRectType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTextType");
    PyDict_SetItemString(mod_dict,"oacTextType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacEvalTextType");
    PyDict_SetItemString(mod_dict,"oacEvalTextType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPropDisplayType");
    PyDict_SetItemString(mod_dict,"oacPropDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAttrDisplayType");
    PyDict_SetItemString(mod_dict,"oacAttrDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTextOverrideType");
    PyDict_SetItemString(mod_dict,"oacTextOverrideType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInstPropDisplayType");
    PyDict_SetItemString(mod_dict,"oacInstPropDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInstAttrDisplayType");
    PyDict_SetItemString(mod_dict,"oacInstAttrDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRouteType");
    PyDict_SetItemString(mod_dict,"oacRouteType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMarkerType");
    PyDict_SetItemString(mod_dict,"oacMarkerType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTrackPatternType");
    PyDict_SetItemString(mod_dict,"oacTrackPatternType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRowType");
    PyDict_SetItemString(mod_dict,"oacRowType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacRowHeaderType");
    PyDict_SetItemString(mod_dict,"oacRowHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPinType");
    PyDict_SetItemString(mod_dict,"oacPinType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacClusterType");
    PyDict_SetItemString(mod_dict,"oacClusterType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAreaBoundaryType");
    PyDict_SetItemString(mod_dict,"oacAreaBoundaryType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPRBoundaryType");
    PyDict_SetItemString(mod_dict,"oacPRBoundaryType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSnapBoundaryType");
    PyDict_SetItemString(mod_dict,"oacSnapBoundaryType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacClusterBoundaryType");
    PyDict_SetItemString(mod_dict,"oacClusterBoundaryType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAreaBlockageType");
    PyDict_SetItemString(mod_dict,"oacAreaBlockageType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAreaHaloType");
    PyDict_SetItemString(mod_dict,"oacAreaHaloType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerBlockageType");
    PyDict_SetItemString(mod_dict,"oacLayerBlockageType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerHaloType");
    PyDict_SetItemString(mod_dict,"oacLayerHaloType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSteinerType");
    PyDict_SetItemString(mod_dict,"oacSteinerType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacStdViaType");
    PyDict_SetItemString(mod_dict,"oacStdViaType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCustomViaType");
    PyDict_SetItemString(mod_dict,"oacCustomViaType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacStdViaHeaderType");
    PyDict_SetItemString(mod_dict,"oacStdViaHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCustomViaHeaderType");
    PyDict_SetItemString(mod_dict,"oacCustomViaHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacGCellPatternType");
    PyDict_SetItemString(mod_dict,"oacGCellPatternType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCMapType");
    PyDict_SetItemString(mod_dict,"oacCMapType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacArrayInstType");
    PyDict_SetItemString(mod_dict,"oacArrayInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarInstType");
    PyDict_SetItemString(mod_dict,"oacScalarInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVectorInstType");
    PyDict_SetItemString(mod_dict,"oacVectorInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVectorInstBitType");
    PyDict_SetItemString(mod_dict,"oacVectorInstBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVectorInstDefType");
    PyDict_SetItemString(mod_dict,"oacVectorInstDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBundleNetType");
    PyDict_SetItemString(mod_dict,"oacBundleNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusNetType");
    PyDict_SetItemString(mod_dict,"oacBusNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusNetBitType");
    PyDict_SetItemString(mod_dict,"oacBusNetBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarNetType");
    PyDict_SetItemString(mod_dict,"oacScalarNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusNetDefType");
    PyDict_SetItemString(mod_dict,"oacBusNetDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBundleTermType");
    PyDict_SetItemString(mod_dict,"oacBundleTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusTermType");
    PyDict_SetItemString(mod_dict,"oacBusTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusTermBitType");
    PyDict_SetItemString(mod_dict,"oacBusTermBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarTermType");
    PyDict_SetItemString(mod_dict,"oacScalarTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusTermDefType");
    PyDict_SetItemString(mod_dict,"oacBusTermDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInstTermType");
    PyDict_SetItemString(mod_dict,"oacInstTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacNetConnectDefType");
    PyDict_SetItemString(mod_dict,"oacNetConnectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTermConnectDefType");
    PyDict_SetItemString(mod_dict,"oacTermConnectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAssignValueType");
    PyDict_SetItemString(mod_dict,"oacAssignValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAssignAssignmentType");
    PyDict_SetItemString(mod_dict,"oacAssignAssignmentType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScanChainType");
    PyDict_SetItemString(mod_dict,"oacScanChainType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScanChainInstType");
    PyDict_SetItemString(mod_dict,"oacScanChainInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScanChainSetType");
    PyDict_SetItemString(mod_dict,"oacScanChainSetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInstHeaderType");
    PyDict_SetItemString(mod_dict,"oacInstHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccScalarInstType");
    PyDict_SetItemString(mod_dict,"oacOccScalarInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccVectorInstType");
    PyDict_SetItemString(mod_dict,"oacOccVectorInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccVectorInstBitType");
    PyDict_SetItemString(mod_dict,"oacOccVectorInstBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccVectorInstDefType");
    PyDict_SetItemString(mod_dict,"oacOccVectorInstDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBundleNetType");
    PyDict_SetItemString(mod_dict,"oacOccBundleNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBusNetType");
    PyDict_SetItemString(mod_dict,"oacOccBusNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBusNetBitType");
    PyDict_SetItemString(mod_dict,"oacOccBusNetBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccScalarNetType");
    PyDict_SetItemString(mod_dict,"oacOccScalarNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBusNetDefType");
    PyDict_SetItemString(mod_dict,"oacOccBusNetDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBundleTermType");
    PyDict_SetItemString(mod_dict,"oacOccBundleTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBusTermType");
    PyDict_SetItemString(mod_dict,"oacOccBusTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBusTermBitType");
    PyDict_SetItemString(mod_dict,"oacOccBusTermBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccScalarTermType");
    PyDict_SetItemString(mod_dict,"oacOccScalarTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccBusTermDefType");
    PyDict_SetItemString(mod_dict,"oacOccBusTermDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccInstTermType");
    PyDict_SetItemString(mod_dict,"oacOccInstTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccNetConnectDefType");
    PyDict_SetItemString(mod_dict,"oacOccNetConnectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccTermConnectDefType");
    PyDict_SetItemString(mod_dict,"oacOccTermConnectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccAssignValueType");
    PyDict_SetItemString(mod_dict,"oacOccAssignValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccAssignAssignmentType");
    PyDict_SetItemString(mod_dict,"oacOccAssignAssignmentType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacObsoleteType92");
    PyDict_SetItemString(mod_dict,"oacObsoleteType92",value);
    Py_DECREF(value);
    value=PyString_FromString("oacObsoleteType93");
    PyDict_SetItemString(mod_dict,"oacObsoleteType93",value);
    Py_DECREF(value);
    value=PyString_FromString("oacObsoleteType94");
    PyDict_SetItemString(mod_dict,"oacObsoleteType94",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccInstHeaderType");
    PyDict_SetItemString(mod_dict,"oacOccInstHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModScalarInstType");
    PyDict_SetItemString(mod_dict,"oacModScalarInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModVectorInstType");
    PyDict_SetItemString(mod_dict,"oacModVectorInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModVectorInstBitType");
    PyDict_SetItemString(mod_dict,"oacModVectorInstBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModVectorInstDefType");
    PyDict_SetItemString(mod_dict,"oacModVectorInstDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBundleNetType");
    PyDict_SetItemString(mod_dict,"oacModBundleNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBusNetType");
    PyDict_SetItemString(mod_dict,"oacModBusNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBusNetBitType");
    PyDict_SetItemString(mod_dict,"oacModBusNetBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModScalarNetType");
    PyDict_SetItemString(mod_dict,"oacModScalarNetType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBusNetDefType");
    PyDict_SetItemString(mod_dict,"oacModBusNetDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBundleTermType");
    PyDict_SetItemString(mod_dict,"oacModBundleTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBusTermType");
    PyDict_SetItemString(mod_dict,"oacModBusTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBusTermBitType");
    PyDict_SetItemString(mod_dict,"oacModBusTermBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModScalarTermType");
    PyDict_SetItemString(mod_dict,"oacModScalarTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModBusTermDefType");
    PyDict_SetItemString(mod_dict,"oacModBusTermDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModInstTermType");
    PyDict_SetItemString(mod_dict,"oacModInstTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModNetConnectDefType");
    PyDict_SetItemString(mod_dict,"oacModNetConnectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModTermConnectDefType");
    PyDict_SetItemString(mod_dict,"oacModTermConnectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModAssignValueType");
    PyDict_SetItemString(mod_dict,"oacModAssignValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModAssignAssignmentType");
    PyDict_SetItemString(mod_dict,"oacModAssignAssignmentType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacObsoleteType115");
    PyDict_SetItemString(mod_dict,"oacObsoleteType115",value);
    Py_DECREF(value);
    value=PyString_FromString("oacObsoleteType116");
    PyDict_SetItemString(mod_dict,"oacObsoleteType116",value);
    Py_DECREF(value);
    value=PyString_FromString("oacObsoleteType117");
    PyDict_SetItemString(mod_dict,"oacObsoleteType117",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModInstHeaderType");
    PyDict_SetItemString(mod_dict,"oacModInstHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModModuleScalarInstType");
    PyDict_SetItemString(mod_dict,"oacModModuleScalarInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModModuleVectorInstType");
    PyDict_SetItemString(mod_dict,"oacModModuleVectorInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModModuleVectorInstBitType");
    PyDict_SetItemString(mod_dict,"oacModModuleVectorInstBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccArrayInstType");
    PyDict_SetItemString(mod_dict,"oacOccArrayInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccModuleScalarInstType");
    PyDict_SetItemString(mod_dict,"oacOccModuleScalarInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccModuleVectorInstType");
    PyDict_SetItemString(mod_dict,"oacOccModuleVectorInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccModuleVectorInstBitType");
    PyDict_SetItemString(mod_dict,"oacOccModuleVectorInstBitType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccModuleInstHeaderType");
    PyDict_SetItemString(mod_dict,"oacOccModuleInstHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacModModuleInstHeaderType");
    PyDict_SetItemString(mod_dict,"oacModModuleInstHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAnalysisPointType");
    PyDict_SetItemString(mod_dict,"oacAnalysisPointType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAnalysisOpPointType");
    PyDict_SetItemString(mod_dict,"oacAnalysisOpPointType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOpPointHeaderType");
    PyDict_SetItemString(mod_dict,"oacOpPointHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacReducedDriverType");
    PyDict_SetItemString(mod_dict,"oacReducedDriverType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacParasiticNetworkType");
    PyDict_SetItemString(mod_dict,"oacParasiticNetworkType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSubNetworkType");
    PyDict_SetItemString(mod_dict,"oacSubNetworkType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSubNetworkMemType");
    PyDict_SetItemString(mod_dict,"oacSubNetworkMemType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacResistorType");
    PyDict_SetItemString(mod_dict,"oacResistorType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCouplingCapType");
    PyDict_SetItemString(mod_dict,"oacCouplingCapType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInductorType");
    PyDict_SetItemString(mod_dict,"oacInductorType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDiodeType");
    PyDict_SetItemString(mod_dict,"oacDiodeType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSeriesRLType");
    PyDict_SetItemString(mod_dict,"oacSeriesRLType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMutualInductorType");
    PyDict_SetItemString(mod_dict,"oacMutualInductorType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacExternalDeviceType");
    PyDict_SetItemString(mod_dict,"oacExternalDeviceType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacNodeType");
    PyDict_SetItemString(mod_dict,"oacNodeType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacGroundedNodeType");
    PyDict_SetItemString(mod_dict,"oacGroundedNodeType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacGuideType");
    PyDict_SetItemString(mod_dict,"oacGuideType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLumpedElmoreType");
    PyDict_SetItemString(mod_dict,"oacLumpedElmoreType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPiElmoreType");
    PyDict_SetItemString(mod_dict,"oacPiElmoreType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPiPoleResidueType");
    PyDict_SetItemString(mod_dict,"oacPiPoleResidueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacElmoreType");
    PyDict_SetItemString(mod_dict,"oacElmoreType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPoleResidueType");
    PyDict_SetItemString(mod_dict,"oacPoleResidueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccArcType");
    PyDict_SetItemString(mod_dict,"oacOccArcType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccDonutType");
    PyDict_SetItemString(mod_dict,"oacOccDonutType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccDotType");
    PyDict_SetItemString(mod_dict,"oacOccDotType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccEllipseType");
    PyDict_SetItemString(mod_dict,"oacOccEllipseType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccLineType");
    PyDict_SetItemString(mod_dict,"oacOccLineType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccPathType");
    PyDict_SetItemString(mod_dict,"oacOccPathType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccPathSegType");
    PyDict_SetItemString(mod_dict,"oacOccPathSegType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccPolygonType");
    PyDict_SetItemString(mod_dict,"oacOccPolygonType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccRectType");
    PyDict_SetItemString(mod_dict,"oacOccRectType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccTextType");
    PyDict_SetItemString(mod_dict,"oacOccTextType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccEvalTextType");
    PyDict_SetItemString(mod_dict,"oacOccEvalTextType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccPropDisplayType");
    PyDict_SetItemString(mod_dict,"oacOccPropDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccAttrDisplayType");
    PyDict_SetItemString(mod_dict,"oacOccAttrDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccTextOverrideType");
    PyDict_SetItemString(mod_dict,"oacOccTextOverrideType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccInstPropDisplayType");
    PyDict_SetItemString(mod_dict,"oacOccInstPropDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOccInstAttrDisplayType");
    PyDict_SetItemString(mod_dict,"oacOccInstAttrDisplayType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntPropType");
    PyDict_SetItemString(mod_dict,"oacIntPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntRangePropType");
    PyDict_SetItemString(mod_dict,"oacIntRangePropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFloatPropType");
    PyDict_SetItemString(mod_dict,"oacFloatPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFloatRangePropType");
    PyDict_SetItemString(mod_dict,"oacFloatRangePropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacStringPropType");
    PyDict_SetItemString(mod_dict,"oacStringPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAppPropType");
    PyDict_SetItemString(mod_dict,"oacAppPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDoublePropType");
    PyDict_SetItemString(mod_dict,"oacDoublePropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDoubleRangePropType");
    PyDict_SetItemString(mod_dict,"oacDoubleRangePropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBooleanPropType");
    PyDict_SetItemString(mod_dict,"oacBooleanPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacHierPropType");
    PyDict_SetItemString(mod_dict,"oacHierPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTimePropType");
    PyDict_SetItemString(mod_dict,"oacTimePropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTimeRangePropType");
    PyDict_SetItemString(mod_dict,"oacTimeRangePropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacEnumPropType");
    PyDict_SetItemString(mod_dict,"oacEnumPropType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacGroupType");
    PyDict_SetItemString(mod_dict,"oacGroupType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacGroupMemberType");
    PyDict_SetItemString(mod_dict,"oacGroupMemberType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPhysicalLayerType");
    PyDict_SetItemString(mod_dict,"oacPhysicalLayerType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDerivedLayerType");
    PyDict_SetItemString(mod_dict,"oacDerivedLayerType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSizedLayerType");
    PyDict_SetItemString(mod_dict,"oacSizedLayerType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacPurposeType");
    PyDict_SetItemString(mod_dict,"oacPurposeType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarSiteDefType");
    PyDict_SetItemString(mod_dict,"oacScalarSiteDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacArraySiteDefType");
    PyDict_SetItemString(mod_dict,"oacArraySiteDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViaSpecType");
    PyDict_SetItemString(mod_dict,"oacViaSpecType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacStdViaDefType");
    PyDict_SetItemString(mod_dict,"oacStdViaDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCustomViaDefType");
    PyDict_SetItemString(mod_dict,"oacCustomViaDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOpPointType");
    PyDict_SetItemString(mod_dict,"oacOpPointType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAnalysisLibType");
    PyDict_SetItemString(mod_dict,"oacAnalysisLibType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAppObjectType");
    PyDict_SetItemString(mod_dict,"oacAppObjectType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellType");
    PyDict_SetItemString(mod_dict,"oacCellType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViewType");
    PyDict_SetItemString(mod_dict,"oacViewType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellViewType");
    PyDict_SetItemString(mod_dict,"oacCellViewType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDMFileType");
    PyDict_SetItemString(mod_dict,"oacDMFileType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacWaferDescType");
    PyDict_SetItemString(mod_dict,"oacWaferDescType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFrameType");
    PyDict_SetItemString(mod_dict,"oacFrameType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacReticleType");
    PyDict_SetItemString(mod_dict,"oacReticleType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacReticleRefType");
    PyDict_SetItemString(mod_dict,"oacReticleRefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacWaferFeatureType");
    PyDict_SetItemString(mod_dict,"oacWaferFeatureType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacStepperMapType");
    PyDict_SetItemString(mod_dict,"oacStepperMapType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacImageType");
    PyDict_SetItemString(mod_dict,"oacImageType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFrameInstType");
    PyDict_SetItemString(mod_dict,"oacFrameInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDesignInstType");
    PyDict_SetItemString(mod_dict,"oacDesignInstType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViewTypeType");
    PyDict_SetItemString(mod_dict,"oacViewTypeType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacConstraintParamDefType");
    PyDict_SetItemString(mod_dict,"oacConstraintParamDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacConstraintParamType");
    PyDict_SetItemString(mod_dict,"oacConstraintParamType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSimpleConstraintDefType");
    PyDict_SetItemString(mod_dict,"oacSimpleConstraintDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerConstraintDefType");
    PyDict_SetItemString(mod_dict,"oacLayerConstraintDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerPairConstraintDefType");
    PyDict_SetItemString(mod_dict,"oacLayerPairConstraintDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSimpleConstraintType");
    PyDict_SetItemString(mod_dict,"oacSimpleConstraintType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerConstraintType");
    PyDict_SetItemString(mod_dict,"oacLayerConstraintType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerPairConstraintType");
    PyDict_SetItemString(mod_dict,"oacLayerPairConstraintType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacConstraintGroupType");
    PyDict_SetItemString(mod_dict,"oacConstraintGroupType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacConstraintGroupMemType");
    PyDict_SetItemString(mod_dict,"oacConstraintGroupMemType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacConstraintGroupHeaderType");
    PyDict_SetItemString(mod_dict,"oacConstraintGroupHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBooleanValueType");
    PyDict_SetItemString(mod_dict,"oacBooleanValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntValueType");
    PyDict_SetItemString(mod_dict,"oacIntValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFltValueType");
    PyDict_SetItemString(mod_dict,"oacFltValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerArrayValueType");
    PyDict_SetItemString(mod_dict,"oacLayerArrayValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInt1DTblValueType");
    PyDict_SetItemString(mod_dict,"oacInt1DTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFlt1DTblValueType");
    PyDict_SetItemString(mod_dict,"oacFlt1DTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInt2DTblValueType");
    PyDict_SetItemString(mod_dict,"oacInt2DTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFlt2DTblValueType");
    PyDict_SetItemString(mod_dict,"oacFlt2DTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntFltTblValueType");
    PyDict_SetItemString(mod_dict,"oacIntFltTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFltIntFltTblValueType");
    PyDict_SetItemString(mod_dict,"oacFltIntFltTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDualIntValueType");
    PyDict_SetItemString(mod_dict,"oacDualIntValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDualInt1DTblValueType");
    PyDict_SetItemString(mod_dict,"oacDualInt1DTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBoxArrayValueType");
    PyDict_SetItemString(mod_dict,"oacBoxArrayValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacValueArrayValueType");
    PyDict_SetItemString(mod_dict,"oacValueArrayValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViaDefArrayValueType");
    PyDict_SetItemString(mod_dict,"oacViaDefArrayValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerValueType");
    PyDict_SetItemString(mod_dict,"oacLayerValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAntennaRatioValueType");
    PyDict_SetItemString(mod_dict,"oacAntennaRatioValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAntennaRatioArrayValueType");
    PyDict_SetItemString(mod_dict,"oacAntennaRatioArrayValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViaDef2DTblValueType");
    PyDict_SetItemString(mod_dict,"oacViaDef2DTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntAppDefType");
    PyDict_SetItemString(mod_dict,"oacIntAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFloatAppDefType");
    PyDict_SetItemString(mod_dict,"oacFloatAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacStringAppDefType");
    PyDict_SetItemString(mod_dict,"oacStringAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntraPointerAppDefType");
    PyDict_SetItemString(mod_dict,"oacIntraPointerAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInterPointerAppDefType");
    PyDict_SetItemString(mod_dict,"oacInterPointerAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDataAppDefType");
    PyDict_SetItemString(mod_dict,"oacDataAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVarDataAppDefType");
    PyDict_SetItemString(mod_dict,"oacVarDataAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTimeAppDefType");
    PyDict_SetItemString(mod_dict,"oacTimeAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDoubleAppDefType");
    PyDict_SetItemString(mod_dict,"oacDoubleAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVoidPointerAppDefType");
    PyDict_SetItemString(mod_dict,"oacVoidPointerAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBooleanAppDefType");
    PyDict_SetItemString(mod_dict,"oacBooleanAppDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacAppObjectDefType");
    PyDict_SetItemString(mod_dict,"oacAppObjectDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLibDefListType");
    PyDict_SetItemString(mod_dict,"oacLibDefListType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLibDefType");
    PyDict_SetItemString(mod_dict,"oacLibDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLibDefListRefType");
    PyDict_SetItemString(mod_dict,"oacLibDefListRefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLibDMDataType");
    PyDict_SetItemString(mod_dict,"oacLibDMDataType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellDMDataType");
    PyDict_SetItemString(mod_dict,"oacCellDMDataType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacViewDMDataType");
    PyDict_SetItemString(mod_dict,"oacViewDMDataType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCellViewDMDataType");
    PyDict_SetItemString(mod_dict,"oacCellViewDMDataType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFeatureType");
    PyDict_SetItemString(mod_dict,"oacFeatureType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFigGroupType");
    PyDict_SetItemString(mod_dict,"oacFigGroupType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacFigGroupMemType");
    PyDict_SetItemString(mod_dict,"oacFigGroupMemType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTechHeaderType");
    PyDict_SetItemString(mod_dict,"oacTechHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTechLayerHeaderType");
    PyDict_SetItemString(mod_dict,"oacTechLayerHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTechViaDefHeaderType");
    PyDict_SetItemString(mod_dict,"oacTechViaDefHeaderType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerArrayConstraintDefType");
    PyDict_SetItemString(mod_dict,"oacLayerArrayConstraintDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLayerArrayConstraintType");
    PyDict_SetItemString(mod_dict,"oacLayerArrayConstraintType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUInt8ValueType");
    PyDict_SetItemString(mod_dict,"oacUInt8ValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntDualIntArrayTblValueType");
    PyDict_SetItemString(mod_dict,"oacIntDualIntArrayTblValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacIntRangeValueType");
    PyDict_SetItemString(mod_dict,"oacIntRangeValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUInt8RangeValueType");
    PyDict_SetItemString(mod_dict,"oacUInt8RangeValueType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDerivedLayerParamDefType");
    PyDict_SetItemString(mod_dict,"oacDerivedLayerParamDefType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDerivedLayerParamType");
    PyDict_SetItemString(mod_dict,"oacDerivedLayerParamType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacDerivedLayerDefType");
    PyDict_SetItemString(mod_dict,"oacDerivedLayerDefType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUInt8Range
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt8Range_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt8Range_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaUInt8RangeObject* self = (PyoaUInt8RangeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaRangeBase*)  new oaUInt8Range();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaRangeType,oaUInt8)
    {
        PyParamoaRangeType p1;
        PyParamoaUInt8 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaRangeType_Convert,&p1,
              &PyoaUInt8_Convert,&p2)) {
            self->value = (oaRangeBase*)  new oaUInt8Range(p1.Data(),p2.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaRangeType,oaUInt8,oaUInt8)
    {
        PyParamoaRangeType p1;
        PyParamoaUInt8 p2;
        PyParamoaUInt8 p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaRangeType_Convert,&p1,
              &PyoaUInt8_Convert,&p2,
              &PyoaUInt8_Convert,&p3)) {
            self->value = (oaRangeBase*)  new oaUInt8Range(p1.Data(),p2.Data(),p3.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt8Range)
    {
        PyParamoaUInt8Range p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt8Range_Convert,&p1)) {
            self->value=(oaRangeBase*)  new oaUInt8Range(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt8Range, Choices are:\n"
        "    ()\n"
        "    (oaRangeType,oaUInt8)\n"
        "    (oaRangeType,oaUInt8,oaUInt8)\n"
        "    (oaUInt8Range)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt8Range_tp_dealloc(PyoaUInt8RangeObject* self)
{
    if (!self->borrow) {
        delete (oaUInt8Range*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt8Range_tp_repr(PyObject *ob)
{
    PyParamoaUInt8Range value;
    int convert_status=PyoaUInt8Range_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[34];
    sprintf(buffer,"<oaUInt8Range::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaUInt8Range_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt8Range v1;
    PyParamoaUInt8Range v2;
    int convert_status1=PyoaUInt8Range_Convert(ob1,&v1);
    int convert_status2=PyoaUInt8Range_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaUInt8Range_Convert(PyObject* ob,PyParamoaUInt8Range* result)
{
    if (ob == NULL) return 1;
    if (PyoaUInt8Range_Check(ob)) {
        result->SetData( (oaUInt8Range*) ((PyoaUInt8RangeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUInt8Range Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaUInt8Range_FromoaUInt8Range(oaUInt8Range* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaUInt8Range_Type.tp_alloc(&PyoaUInt8Range_Type,0);
        if (bself == NULL) return bself;
        PyoaUInt8RangeObject* self = (PyoaUInt8RangeObject*)bself;
        self->value = (oaRangeBase*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8Range_doc[] = 
"Class: oaUInt8Range\n"
"  This class defines range objects for oaInt8 types. The class is used when defining oaInt8RangeValue objects.\n"
"  Todo\n"
"  Check description of class.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8Range()\n"
"    Signature: oaUInt8Range||\n"
"    This is the default constructor for oaIntRange . This constructor does not initialize any member variables.\n"
"  Paramegers: (oaRangeType,oaUInt8)\n"
"    Calls: oaUInt8Range(oaRangeType type,oaUInt8 value)\n"
"    Signature: oaUInt8Range||simple-oaRangeType,simple-oaUInt8,\n"
"    This constructor creates oaInt8 range objects that have either a lower bound or upper bound. This constructor is used to specify range objects for the range types oacLessThanRangeType, oacLessThanEqualRangeType, oacGreaterThanRangeType, and oacGreaterThanEqualRangeType.\n"
"    type\n"
"    The oaRangeType to set on this oaUInt8Range object.\n"
"    value\n"
"    The upper bound or lower bound based on the type.\n"
"    Todo\n"
"    Check description of member function. Add description of each parameter.\n"
"  Paramegers: (oaRangeType,oaUInt8,oaUInt8)\n"
"    Calls: oaUInt8Range(oaRangeType type,oaUInt8 lowerBoundIn,oaUInt8 upperBoundIn)\n"
"    Signature: oaUInt8Range||simple-oaRangeType,simple-oaUInt8,simple-oaUInt8,\n"
"    This oaUInt8Range constructor constructs an oaUInt8Range object with the specified range type and with the specified lower and upper bounds.\n"
"    type\n"
"    The oaRangeType to set on this oaUInt8Range object.\n"
"    lowerBoundIn\n"
"    The lower bound to set on this oaUInt8Range object.\n"
"    upperBoundIn\n"
"    The upper bound to set on this oaUInt8Range object.\n"
"    Todo\n"
"    Check description of member function parameters.\n"
"  Paramegers: (oaUInt8Range)\n"
"    Calls: (const oaUInt8Range&)\n"
"    Signature: oaUInt8Range||cref-oaUInt8Range,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUInt8Range_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt8Range",
    sizeof(PyoaUInt8RangeObject),
    0,
    (destructor)oaUInt8Range_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaUInt8Range_tp_compare,	/* tp_compare */
    (reprfunc)oaUInt8Range_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt8Range_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    0,					/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaRange_oaUInt8_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaUInt8Range_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUInt8Range_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt8Range_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt8Range\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUInt8Range",
           (PyObject*)(&PyoaUInt8Range_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt8Range\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUInt8RangeValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt8RangeValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt8RangeValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaUInt8RangeValueObject* self = (PyoaUInt8RangeValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt8RangeValue)
    {
        PyParamoaUInt8RangeValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt8RangeValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt8RangeValue, Choices are:\n"
        "    (oaUInt8RangeValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt8RangeValue_tp_dealloc(PyoaUInt8RangeValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt8RangeValue_tp_repr(PyObject *ob)
{
    PyParamoaUInt8RangeValue value;
    int convert_status=PyoaUInt8RangeValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[39];
    sprintf(buffer,"<oaUInt8RangeValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaUInt8RangeValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt8RangeValue v1;
    PyParamoaUInt8RangeValue v2;
    int convert_status1=PyoaUInt8RangeValue_Convert(ob1,&v1);
    int convert_status2=PyoaUInt8RangeValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaUInt8RangeValue_Convert(PyObject* ob,PyParamoaUInt8RangeValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaUInt8RangeValue_Check(ob)) {
        result->SetData( (oaUInt8RangeValue**) ((PyoaUInt8RangeValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUInt8RangeValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaUInt8RangeValue_FromoaUInt8RangeValue(oaUInt8RangeValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaUInt8RangeValue* data=*value;
        PyObject* bself = PyoaUInt8RangeValue_Type.tp_alloc(&PyoaUInt8RangeValue_Type,0);
        if (bself == NULL) return bself;
        PyoaUInt8RangeValueObject* self = (PyoaUInt8RangeValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaUInt8RangeValue_FromoaUInt8RangeValue(oaUInt8RangeValue* data)
{
    if (data) {
       PyObject* bself = PyoaUInt8RangeValue_Type.tp_alloc(&PyoaUInt8RangeValue_Type,0);
       if (bself == NULL) return bself;
       PyoaUInt8RangeValueObject* self = (PyoaUInt8RangeValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8RangeValue_get_doc[] = 
"Class: oaUInt8RangeValue, Function: get\n"
"  Paramegers: (oaUInt8Range)\n"
"    Calls: void get(oaUInt8Range& value) const\n"
"    Signature: get|void-void|ref-oaUInt8Range,\n"
"    BrowseData: 0,oaUInt8Range\n"
"    This function returns the UInt8 range value of this object.\n"
"    value\n"
"    The UInt8 range of this object.\n"
;

static PyObject*
oaUInt8RangeValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8RangeValue data;
    int convert_status=PyoaUInt8RangeValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUInt8RangeValueObject* self=(PyoaUInt8RangeValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaUInt8Range p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8Range_Convert,&p1)) {
        data.DataCall()->get(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaUInt8RangeValue_set_doc[] = 
"Class: oaUInt8RangeValue, Function: set\n"
"  Paramegers: (oaUInt8Range)\n"
"    Calls: void set(const oaUInt8Range& value)\n"
"    Signature: set|void-void|cref-oaUInt8Range,\n"
"    This function sets the value of this object to the specified UInt8 range.\n"
"    value\n"
"    The UInt8 range that is set on this object.\n"
;

static PyObject*
oaUInt8RangeValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8RangeValue data;
    int convert_status=PyoaUInt8RangeValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUInt8RangeValueObject* self=(PyoaUInt8RangeValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaUInt8Range p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8Range_Convert,&p1)) {
        data.DataCall()->set(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaUInt8RangeValue_isNull_doc[] =
"Class: oaUInt8RangeValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaUInt8RangeValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaUInt8RangeValue data;
    int convert_status=PyoaUInt8RangeValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaUInt8RangeValue_assign_doc[] = 
"Class: oaUInt8RangeValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaUInt8RangeValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaUInt8RangeValue data;
  int convert_status=PyoaUInt8RangeValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaUInt8RangeValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt8RangeValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaUInt8RangeValue_methodlist[] = {
    {"get",(PyCFunction)oaUInt8RangeValue_get,METH_VARARGS,oaUInt8RangeValue_get_doc},
    {"set",(PyCFunction)oaUInt8RangeValue_set,METH_VARARGS,oaUInt8RangeValue_set_doc},
    {"isNull",(PyCFunction)oaUInt8RangeValue_tp_isNull,METH_VARARGS,oaUInt8RangeValue_isNull_doc},
    {"assign",(PyCFunction)oaUInt8RangeValue_tp_assign,METH_VARARGS,oaUInt8RangeValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8RangeValue_doc[] = 
"Class: oaUInt8RangeValue\n"
"  This class implements oaValue functionality for the instantiation of the oaRange template class with the oaUInt8 type.\n"
"  Todo\n"
"  Check description of class.\n"
"Constructors:\n"
"  Paramegers: (oaUInt8RangeValue)\n"
"    Calls: (const oaUInt8RangeValue&)\n"
"    Signature: oaUInt8RangeValue||cref-oaUInt8RangeValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUInt8RangeValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt8RangeValue",
    sizeof(PyoaUInt8RangeValueObject),
    0,
    (destructor)oaUInt8RangeValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaUInt8RangeValue_tp_compare,	/* tp_compare */
    (reprfunc)oaUInt8RangeValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt8RangeValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaUInt8RangeValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaValue_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaUInt8RangeValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8RangeValue_static_create_doc[] = 
"Class: oaUInt8RangeValue, Function: create\n"
"  Paramegers: (oaObject,oaUInt8Range)\n"
"    Calls: oaUInt8RangeValue* create(oaObject* database,const oaUInt8Range& value)\n"
"    Signature: create|ptr-oaUInt8RangeValue|ptr-oaObject,cref-oaUInt8Range,\n"
"    This function creates an UInt8 range value in the specified database.\n"
"    database\n"
"    The database in which the intValue is created.\n"
"    value\n"
"    The range to create the range value with.\n"
;

static PyObject*
oaUInt8RangeValue_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoaUInt8Range p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaObject_Convert,&p1,
          &PyoaUInt8Range_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt8RangeValuep result= (oaUInt8RangeValue::create(p1.Data(),p2.Data()));
        return PyoaUInt8RangeValue_FromoaUInt8RangeValue(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaUInt8RangeValue_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaUInt8RangeValue_static_create,METH_VARARGS,oaUInt8RangeValue_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUInt8RangeValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt8RangeValue_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt8RangeValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUInt8RangeValue",
           (PyObject*)(&PyoaUInt8RangeValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt8RangeValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaUInt8RangeValue_Type.tp_dict;
    for(method=oaUInt8RangeValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUInt8Value
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUInt8Value_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUInt8Value_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaUInt8ValueObject* self = (PyoaUInt8ValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt8Value)
    {
        PyParamoaUInt8Value p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUInt8Value_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUInt8Value, Choices are:\n"
        "    (oaUInt8Value)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUInt8Value_tp_dealloc(PyoaUInt8ValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaUInt8Value_tp_repr(PyObject *ob)
{
    PyParamoaUInt8Value value;
    int convert_status=PyoaUInt8Value_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[34];
    sprintf(buffer,"<oaUInt8Value::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaUInt8Value_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUInt8Value v1;
    PyParamoaUInt8Value v2;
    int convert_status1=PyoaUInt8Value_Convert(ob1,&v1);
    int convert_status2=PyoaUInt8Value_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaUInt8Value_Convert(PyObject* ob,PyParamoaUInt8Value* result)
{
    if (ob == NULL) return 1;
    if (PyoaUInt8Value_Check(ob)) {
        result->SetData( (oaUInt8Value**) ((PyoaUInt8ValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUInt8Value Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaUInt8Value_FromoaUInt8Value(oaUInt8Value** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaUInt8Value* data=*value;
        PyObject* bself = PyoaUInt8Value_Type.tp_alloc(&PyoaUInt8Value_Type,0);
        if (bself == NULL) return bself;
        PyoaUInt8ValueObject* self = (PyoaUInt8ValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaUInt8Value_FromoaUInt8Value(oaUInt8Value* data)
{
    if (data) {
       PyObject* bself = PyoaUInt8Value_Type.tp_alloc(&PyoaUInt8Value_Type,0);
       if (bself == NULL) return bself;
       PyoaUInt8ValueObject* self = (PyoaUInt8ValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8Value_get_doc[] = 
"Class: oaUInt8Value, Function: get\n"
"  Paramegers: ()\n"
"    Calls: oaUInt8 get() const\n"
"    Signature: get|simple-oaUInt8|\n"
"    BrowseData: 1\n"
"    This function returns the value of this class.\n"
;

static PyObject*
oaUInt8Value_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8Value data;
    int convert_status=PyoaUInt8Value_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUInt8ValueObject* self=(PyoaUInt8ValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt8 result= (data.DataCall()->get());
        return PyoaUInt8_FromoaUInt8(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaUInt8Value_set_doc[] = 
"Class: oaUInt8Value, Function: set\n"
"  Paramegers: (oaUInt8)\n"
"    Calls: void set(oaUInt8 value)\n"
"    Signature: set|void-void|simple-oaUInt8,\n"
"    This function sets this value to the specified UInt8 value.\n"
"    value\n"
"    The UInt8 value.\n"
;

static PyObject*
oaUInt8Value_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUInt8Value data;
    int convert_status=PyoaUInt8Value_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUInt8ValueObject* self=(PyoaUInt8ValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaUInt8 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt8_Convert,&p1)) {
        data.DataCall()->set(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaUInt8Value_isNull_doc[] =
"Class: oaUInt8Value, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaUInt8Value_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaUInt8Value data;
    int convert_status=PyoaUInt8Value_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaUInt8Value_assign_doc[] = 
"Class: oaUInt8Value, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaUInt8Value_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaUInt8Value data;
  int convert_status=PyoaUInt8Value_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaUInt8Value p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUInt8Value_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaUInt8Value_methodlist[] = {
    {"get",(PyCFunction)oaUInt8Value_get,METH_VARARGS,oaUInt8Value_get_doc},
    {"set",(PyCFunction)oaUInt8Value_set,METH_VARARGS,oaUInt8Value_set_doc},
    {"isNull",(PyCFunction)oaUInt8Value_tp_isNull,METH_VARARGS,oaUInt8Value_isNull_doc},
    {"assign",(PyCFunction)oaUInt8Value_tp_assign,METH_VARARGS,oaUInt8Value_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8Value_doc[] = 
"Class: oaUInt8Value\n"
"  This class implements oaValue functionality for oaUInt8 integers. It is declared in the oaBase module.\n"
"  Todo\n"
"  Check description of class.\n"
"Constructors:\n"
"  Paramegers: (oaUInt8Value)\n"
"    Calls: (const oaUInt8Value&)\n"
"    Signature: oaUInt8Value||cref-oaUInt8Value,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUInt8Value_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUInt8Value",
    sizeof(PyoaUInt8ValueObject),
    0,
    (destructor)oaUInt8Value_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaUInt8Value_tp_compare,	/* tp_compare */
    (reprfunc)oaUInt8Value_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUInt8Value_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaUInt8Value_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaValue_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaUInt8Value_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUInt8Value_static_create_doc[] = 
"Class: oaUInt8Value, Function: create\n"
"  Paramegers: (oaObject,oaUInt8)\n"
"    Calls: oaUInt8Value* create(oaObject* database,oaUInt8 value)\n"
"    Signature: create|ptr-oaUInt8Value|ptr-oaObject,simple-oaUInt8,\n"
"    This function creates an UInt8 value in the specified database.\n"
"    database\n"
"    The database in which the intValue is created.\n"
"    value\n"
"    The UInt8 value.\n"
;

static PyObject*
oaUInt8Value_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    PyParamoaUInt8 p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaObject_Convert,&p1,
          &PyoaUInt8_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt8Valuep result= (oaUInt8Value::create(p1.Data(),p2.Data()));
        return PyoaUInt8Value_FromoaUInt8Value(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaUInt8Value_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaUInt8Value_static_create,METH_VARARGS,oaUInt8Value_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUInt8Value_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUInt8Value_Type)<0) {
      printf("** PyType_Ready failed for: oaUInt8Value\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUInt8Value",
           (PyObject*)(&PyoaUInt8Value_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUInt8Value\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaUInt8Value_Type.tp_dict;
    for(method=oaUInt8Value_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUndoModelEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaUndoModelEnum_Convert(PyObject* ob,PyParamoaUndoModelEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacUndoModelNotSpecified")==0) { result->SetData(oacUndoModelNotSpecified); return 1;}
        if (strcasecmp(str,"oacUndoModelPostCheckpoint")==0) { result->SetData(oacUndoModelPostCheckpoint); return 1;}
        if (strcasecmp(str,"oacUndoModelPreCheckpoint")==0) { result->SetData(oacUndoModelPreCheckpoint); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaUndoModelEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUndoModelEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaUndoModelEnum_FromoaUndoModelEnum(oaUndoModelEnum ob)
{
    if (ob==oacUndoModelNotSpecified) return PyString_FromString("oacUndoModelNotSpecified");
    if (ob==oacUndoModelPostCheckpoint) return PyString_FromString("oacUndoModelPostCheckpoint");
    if (ob==oacUndoModelPreCheckpoint) return PyString_FromString("oacUndoModelPreCheckpoint");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaUndoModelEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaUndoModelEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaUndoModelEnum_FromoaUndoModelEnum(oaUndoModelEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaUndoModelEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaUndoModelEnum_doc[] =
"Type convert function for enum: oaUndoModelEnum";
                               
static PyMethodDef PyoaUndoModelEnum_method =
  {"oaUndoModelEnum",(PyCFunction)PyoaUndoModelEnum_TypeFunction,METH_VARARGS,oaUndoModelEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaUndoModelEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacUndoModelNotSpecified");
    PyDict_SetItemString(mod_dict,"oacUndoModelNotSpecified",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUndoModelPostCheckpoint");
    PyDict_SetItemString(mod_dict,"oacUndoModelPostCheckpoint",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUndoModelPreCheckpoint");
    PyDict_SetItemString(mod_dict,"oacUndoModelPreCheckpoint",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaUndoModelEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaUndoModelEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaUndoModelEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUnixNS
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUnixNS_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUnixNS_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaUnixNSObject* self = (PyoaUnixNSObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaNameSpace*)  new oaUnixNS();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUnixNS)
    {
        PyParamoaUnixNS p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUnixNS_Convert,&p1)) {
            self->value=(oaNameSpace*)  new oaUnixNS(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUnixNS, Choices are:\n"
        "    ()\n"
        "    (oaUnixNS)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUnixNS_tp_dealloc(PyoaUnixNSObject* self)
{
    if (!self->borrow) {
        delete (oaUnixNS*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaUnixNS_tp_repr(PyObject *ob)
{
    PyParamoaUnixNS value;
    int convert_status=PyoaUnixNS_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[30];
    sprintf(buffer,"<oaUnixNS::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaUnixNS_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUnixNS v1;
    PyParamoaUnixNS v2;
    int convert_status1=PyoaUnixNS_Convert(ob1,&v1);
    int convert_status2=PyoaUnixNS_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaUnixNS_Convert(PyObject* ob,PyParamoaUnixNS* result)
{
    if (ob == NULL) return 1;
    if (PyoaUnixNS_Check(ob)) {
        result->SetData( (oaUnixNS*) ((PyoaUnixNSObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUnixNS Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaUnixNS_FromoaUnixNS(oaUnixNS* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaUnixNS_Type.tp_alloc(&PyoaUnixNS_Type,0);
        if (bself == NULL) return bself;
        PyoaUnixNSObject* self = (PyoaUnixNSObject*)bself;
        self->value = (oaNameSpace*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUnixNS_getType_doc[] = 
"Class: oaUnixNS, Function: getType\n"
"  Paramegers: ([oaChar])\n"
"    Calls: oaNameType getType(const oaChar* in) const\n"
"    Signature: getType|simple-oaNameType|cptr-oaChar,\n"
"    Function getType\n"
;

static PyObject*
oaUnixNS_getType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUnixNS data;
    int convert_status=PyoaUnixNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUnixNSObject* self=(PyoaUnixNSObject*)ob;

    PyParamoaChar_Array p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaChar_Array_Convert,&p1)) {
        oaNameType* result= new oaNameType(data.DataCall()->getType(p1.Data()));
        return PyoaNameType_FromoaNameType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaUnixNS_isEqual_doc[] = 
"Class: oaUnixNS, Function: isEqual\n"
"  Paramegers: (oaScalarName,oaScalarName)\n"
"    Calls: oaBoolean isEqual(const oaScalarName& n1,const oaScalarName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaScalarName,cref-oaScalarName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorName,oaVectorName)\n"
"    Calls: oaBoolean isEqual(const oaVectorName& n1,const oaVectorName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorName,cref-oaVectorName,\n"
"    Function isEqual\n"
"  Paramegers: (oaVectorBitName,oaVectorBitName)\n"
"    Calls: oaBoolean isEqual(const oaVectorBitName& n1,const oaVectorBitName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaVectorBitName,cref-oaVectorBitName,\n"
"    Function isEqual\n"
"  Paramegers: (oaBundleName,oaBundleName)\n"
"    Calls: oaBoolean isEqual(const oaBundleName& n1,const oaBundleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaBundleName,cref-oaBundleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaSimpleName,oaSimpleName)\n"
"    Calls: oaBoolean isEqual(const oaSimpleName& n1,const oaSimpleName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaSimpleName,cref-oaSimpleName,\n"
"    Function isEqual\n"
"  Paramegers: (oaName,oaName)\n"
"    Calls: oaBoolean isEqual(const oaName& n1,const oaName& n2) const\n"
"    Signature: isEqual|simple-oaBoolean|cref-oaName,cref-oaName,\n"
"    Function isEqual\n"
;

static PyObject*
oaUnixNS_isEqual(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUnixNS data;
    int convert_status=PyoaUnixNS_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUnixNSObject* self=(PyoaUnixNSObject*)ob;

    // Case: (oaScalarName,oaScalarName)
    {
        PyParamoaScalarName p1;
        PyParamoaScalarName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaScalarName_Convert,&p1,
              &PyoaScalarName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorName,oaVectorName)
    {
        PyParamoaVectorName p1;
        PyParamoaVectorName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorName_Convert,&p1,
              &PyoaVectorName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaVectorBitName,oaVectorBitName)
    {
        PyParamoaVectorBitName p1;
        PyParamoaVectorBitName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaVectorBitName_Convert,&p1,
              &PyoaVectorBitName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBundleName,oaBundleName)
    {
        PyParamoaBundleName p1;
        PyParamoaBundleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBundleName_Convert,&p1,
              &PyoaBundleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaSimpleName,oaSimpleName)
    {
        PyParamoaSimpleName p1;
        PyParamoaSimpleName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaSimpleName_Convert,&p1,
              &PyoaSimpleName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    // Case: (oaName,oaName)
    {
        PyParamoaName p1;
        PyParamoaName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaName_Convert,&p1,
              &PyoaName_Convert,&p2)) {
            oaBoolean result= (data.DataCall()->isEqual(p1.Data(),p2.Data()));
            return PyoaBoolean_FromoaBoolean(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaUnixNS, function: isEqual, Choices are:\n"
        "    (oaScalarName,oaScalarName)\n"
        "    (oaVectorName,oaVectorName)\n"
        "    (oaVectorBitName,oaVectorBitName)\n"
        "    (oaBundleName,oaBundleName)\n"
        "    (oaSimpleName,oaSimpleName)\n"
        "    (oaName,oaName)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaUnixNS_assign_doc[] = 
"Class: oaUnixNS, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaUnixNS_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaUnixNS data;
  int convert_status=PyoaUnixNS_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaUnixNS p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUnixNS_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaUnixNS_methodlist[] = {
    {"getType",(PyCFunction)oaUnixNS_getType,METH_VARARGS,oaUnixNS_getType_doc},
    {"isEqual",(PyCFunction)oaUnixNS_isEqual,METH_VARARGS,oaUnixNS_isEqual_doc},
    {"assign",(PyCFunction)oaUnixNS_tp_assign,METH_VARARGS,oaUnixNS_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUnixNS_doc[] = 
"Class: oaUnixNS\n"
"  The oaUnixNS class implements the Unix name space used in name mapping. In conjunction with the oaName object, the oaUnixNS class facilitates mapping between the Unix name space and the native name space. See the Name Mapping Section of the Programmer's Guide for more information.\n"
"  The Unix name space reflects the rules for creating directory names on UNIX filesystems. It is used internally by OpenAccess to create cell and view directory names in libraries that are stored on such filesystems. This does not mean that applications must use this name space directly. The name mapping provided by the oaScalarNames used in the API allow the application to create the names with any name space they prefer.\n"
"  Note that the set of legal names in the Unix namespace is more restrictive than the full set of names allowed on UNIX filesystems. For example, a '.' is not legal in a name in oaUnixNS. This allows OpenAccess to differentiate between directories that are cell or views, and directories that are other application data.\n"
"  The Unix name space supports only scalar names. It does not support indexed, vectored, bundled, or hierarchical names. The Unix name space is case-sensitive and has no reserved words. See the Unix and Windows Name Space Section of the Programmer's Guide for a more detailed description of the characteristics of the Unix name space.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaUnixNS()\n"
"    Signature: oaUnixNS||\n"
"    This function constructs the oaUnixNS instance.\n"
"  Paramegers: (oaUnixNS)\n"
"    Calls: (const oaUnixNS&)\n"
"    Signature: oaUnixNS||cref-oaUnixNS,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUnixNS_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUnixNS",
    sizeof(PyoaUnixNSObject),
    0,
    (destructor)oaUnixNS_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaUnixNS_tp_compare,	/* tp_compare */
    (reprfunc)oaUnixNS_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUnixNS_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaUnixNS_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaNameSpace_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaUnixNS_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUnixNS_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUnixNS_Type)<0) {
      printf("** PyType_Ready failed for: oaUnixNS\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUnixNS",
           (PyObject*)(&PyoaUnixNS_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUnixNS\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUserUnitsType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaUserUnitsType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaUserUnitsType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaUserUnitsTypeObject* self = (PyoaUserUnitsTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUserUnitsTypeEnum)
    {
        PyParamoaUserUnitsTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUserUnitsTypeEnum_Convert,&p1)) {
            self->value =  new oaUserUnitsType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaUserUnitsType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUserUnitsType)
    {
        PyParamoaUserUnitsType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaUserUnitsType_Convert,&p1)) {
            self->value= new oaUserUnitsType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaUserUnitsType, Choices are:\n"
        "    (oaUserUnitsTypeEnum)\n"
        "    (oaString)\n"
        "    (oaUserUnitsType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaUserUnitsType_tp_dealloc(PyoaUserUnitsTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaUserUnitsType_tp_repr(PyObject *ob)
{
    PyParamoaUserUnitsType value;
    int convert_status=PyoaUserUnitsType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[37];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaUserUnitsType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaUserUnitsType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaUserUnitsType v1;
    PyParamoaUserUnitsType v2;
    int convert_status1=PyoaUserUnitsType_Convert(ob1,&v1);
    int convert_status2=PyoaUserUnitsType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaUserUnitsType_Convert(PyObject* ob,PyParamoaUserUnitsType* result)
{
    if (ob == NULL) return 1;
    if (PyoaUserUnitsType_Check(ob)) {
        result->SetData(  ((PyoaUserUnitsTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUserUnitsType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaUserUnitsType_FromoaUserUnitsType(oaUserUnitsType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaUserUnitsType_Type.tp_alloc(&PyoaUserUnitsType_Type,0);
        if (bself == NULL) return bself;
        PyoaUserUnitsTypeObject* self = (PyoaUserUnitsTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUserUnitsType_getName_doc[] = 
"Class: oaUserUnitsType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaUserUnitsTypeEnum object.\n"
;

static PyObject*
oaUserUnitsType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUserUnitsType data;
    int convert_status=PyoaUserUnitsType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUserUnitsTypeObject* self=(PyoaUserUnitsTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaUserUnitsType_oaUserUnitsTypeEnum_doc[] = 
"Class: oaUserUnitsType, Function: oaUserUnitsTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaUserUnitsTypeEnum oaUserUnitsTypeEnum() const\n"
"    Signature: operator oaUserUnitsTypeEnum|simple-oaUserUnitsTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaUserUnitsType object into the corresponding #oaUserUnitsTypeEnum value.\n"
;

static PyObject*
oaUserUnitsType_oaUserUnitsTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaUserUnitsType data;
    int convert_status=PyoaUserUnitsType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaUserUnitsTypeObject* self=(PyoaUserUnitsTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUserUnitsTypeEnum result= (data.DataCall()->operator oaUserUnitsTypeEnum());
        return PyoaUserUnitsTypeEnum_FromoaUserUnitsTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaUserUnitsType_assign_doc[] = 
"Class: oaUserUnitsType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaUserUnitsType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaUserUnitsType data;
  int convert_status=PyoaUserUnitsType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaUserUnitsType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaUserUnitsType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaUserUnitsType_methodlist[] = {
    {"getName",(PyCFunction)oaUserUnitsType_getName,METH_VARARGS,oaUserUnitsType_getName_doc},
    {"oaUserUnitsTypeEnum",(PyCFunction)oaUserUnitsType_oaUserUnitsTypeEnum,METH_VARARGS,oaUserUnitsType_oaUserUnitsTypeEnum_doc},
    {"assign",(PyCFunction)oaUserUnitsType_tp_assign,METH_VARARGS,oaUserUnitsType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaUserUnitsType_doc[] = 
"Class: oaUserUnitsType\n"
"  The oaUserUnitsType class encapsulates the enumerated values that describe the different types of user units.\n"
"  oaUserUnitsTypeEnum\n"
"Constructors:\n"
"  Paramegers: (oaUserUnitsTypeEnum)\n"
"    Calls: oaUserUnitsType(oaUserUnitsTypeEnum valueIn)\n"
"    Signature: oaUserUnitsType||simple-oaUserUnitsTypeEnum,\n"
"    This function constructs an instance of an oaUserUnitsType class using the specified #oaUserUnitsTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaUserUnitsType(const oaString& name)\n"
"    Signature: oaUserUnitsType||cref-oaString,\n"
"    This function constructs an instance of an oaUserUnitsType class using the #oaUserUnitsTypeEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaUserUnitsTypeEnum.\n"
"    oacInvalidUserUnitsTypeName\n"
"  Paramegers: (oaUserUnitsType)\n"
"    Calls: (const oaUserUnitsType&)\n"
"    Signature: oaUserUnitsType||cref-oaUserUnitsType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaUserUnitsType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaUserUnitsType",
    sizeof(PyoaUserUnitsTypeObject),
    0,
    (destructor)oaUserUnitsType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaUserUnitsType_tp_compare,	/* tp_compare */
    (reprfunc)oaUserUnitsType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaUserUnitsType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaUserUnitsType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaUserUnitsType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaUserUnitsType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaUserUnitsType_Type)<0) {
      printf("** PyType_Ready failed for: oaUserUnitsType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaUserUnitsType",
           (PyObject*)(&PyoaUserUnitsType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaUserUnitsType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaUserUnitsTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaUserUnitsTypeEnum_Convert(PyObject* ob,PyParamoaUserUnitsTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacMicron")==0) { result->SetData(oacMicron); return 1;}
        if (strcasecmp(str,"oacMillimeter")==0) { result->SetData(oacMillimeter); return 1;}
        if (strcasecmp(str,"oacCentimeter")==0) { result->SetData(oacCentimeter); return 1;}
        if (strcasecmp(str,"oacMeter")==0) { result->SetData(oacMeter); return 1;}
        if (strcasecmp(str,"oacMil")==0) { result->SetData(oacMil); return 1;}
        if (strcasecmp(str,"oacInch")==0) { result->SetData(oacInch); return 1;}
        if (strcasecmp(str,"oacNanometer")==0) { result->SetData(oacNanometer); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaUserUnitsTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaUserUnitsTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaUserUnitsTypeEnum_FromoaUserUnitsTypeEnum(oaUserUnitsTypeEnum ob)
{
    if (ob==oacMicron) return PyString_FromString("oacMicron");
    if (ob==oacMillimeter) return PyString_FromString("oacMillimeter");
    if (ob==oacCentimeter) return PyString_FromString("oacCentimeter");
    if (ob==oacMeter) return PyString_FromString("oacMeter");
    if (ob==oacMil) return PyString_FromString("oacMil");
    if (ob==oacInch) return PyString_FromString("oacInch");
    if (ob==oacNanometer) return PyString_FromString("oacNanometer");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaUserUnitsTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaUserUnitsTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaUserUnitsTypeEnum_FromoaUserUnitsTypeEnum(oaUserUnitsTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaUserUnitsTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaUserUnitsTypeEnum_doc[] =
"Type convert function for enum: oaUserUnitsTypeEnum";
                               
static PyMethodDef PyoaUserUnitsTypeEnum_method =
  {"oaUserUnitsTypeEnum",(PyCFunction)PyoaUserUnitsTypeEnum_TypeFunction,METH_VARARGS,oaUserUnitsTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaUserUnitsTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacMicron");
    PyDict_SetItemString(mod_dict,"oacMicron",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMillimeter");
    PyDict_SetItemString(mod_dict,"oacMillimeter",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCentimeter");
    PyDict_SetItemString(mod_dict,"oacCentimeter",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMeter");
    PyDict_SetItemString(mod_dict,"oacMeter",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMil");
    PyDict_SetItemString(mod_dict,"oacMil",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInch");
    PyDict_SetItemString(mod_dict,"oacInch",value);
    Py_DECREF(value);
    value=PyString_FromString("oacNanometer");
    PyDict_SetItemString(mod_dict,"oacNanometer",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaUserUnitsTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaUserUnitsTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaUserUnitsTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCCap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCCap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCCap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCCapObject* self = (PyoaVCCapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCCapEnum)
    {
        PyParamoaVCCapEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCCapEnum_Convert,&p1)) {
            self->value =  new oaVCCap(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaVCCap(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCCap)
    {
        PyParamoaVCCap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCCap_Convert,&p1)) {
            self->value= new oaVCCap(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCCap, Choices are:\n"
        "    (oaVCCapEnum)\n"
        "    (oaString)\n"
        "    (oaVCCap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCCap_tp_dealloc(PyoaVCCapObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCCap_tp_repr(PyObject *ob)
{
    PyParamoaVCCap value;
    int convert_status=PyoaVCCap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[29];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaVCCap::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCCap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCCap v1;
    PyParamoaVCCap v2;
    int convert_status1=PyoaVCCap_Convert(ob1,&v1);
    int convert_status2=PyoaVCCap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCCap_Convert(PyObject* ob,PyParamoaVCCap* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCCap_Check(ob)) {
        result->SetData(  ((PyoaVCCapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCCap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCCap_FromoaVCCap(oaVCCap* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCCap_Type.tp_alloc(&PyoaVCCap_Type,0);
        if (bself == NULL) return bself;
        PyoaVCCapObject* self = (PyoaVCCapObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCCap_getName_doc[] = 
"Class: oaVCCap, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the oaVCCapEnum value set on this oaVCCap wrapper object.\n"
;

static PyObject*
oaVCCap_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCCap data;
    int convert_status=PyoaVCCap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCCapObject* self=(PyoaVCCapObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCCap_oaVCCapEnum_doc[] = 
"Class: oaVCCap, Function: oaVCCapEnum\n"
"  Paramegers: ()\n"
"    Calls: oaVCCapEnum oaVCCapEnum() const\n"
"    Signature: operator oaVCCapEnum|simple-oaVCCapEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaVCCap object into the oaVCCapEnum value set on this oaVCCap object.\n"
;

static PyObject*
oaVCCap_oaVCCapEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCCap data;
    int convert_status=PyoaVCCap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCCapObject* self=(PyoaVCCapObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVCCapEnum result= (data.DataCall()->operator oaVCCapEnum());
        return PyoaVCCapEnum_FromoaVCCapEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCCap_assign_doc[] = 
"Class: oaVCCap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCCap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCCap data;
  int convert_status=PyoaVCCap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCCap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCCap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCCap_methodlist[] = {
    {"getName",(PyCFunction)oaVCCap_getName,METH_VARARGS,oaVCCap_getName_doc},
    {"oaVCCapEnum",(PyCFunction)oaVCCap_oaVCCapEnum,METH_VARARGS,oaVCCap_oaVCCapEnum_doc},
    {"assign",(PyCFunction)oaVCCap_tp_assign,METH_VARARGS,oaVCCap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCCap_doc[] = 
"Class: oaVCCap\n"
"  oaVCCapEnum\n"
"  The oaVCCap wrapper class implements an enumerated use type for oaVCCapEnum values, which describe the different capabilities of a version control system.\n"
"Constructors:\n"
"  Paramegers: (oaVCCapEnum)\n"
"    Calls: oaVCCap(oaVCCapEnum valueIn)\n"
"    Signature: oaVCCap||simple-oaVCCapEnum,\n"
"    This constructor for the oaVCCap class takes an oaVCCapEnum value.\n"
"    valueIn\n"
"    the oaVCCapEnum value to set on the constructed oaVCCap object\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVCCap(const oaString& name)\n"
"    Signature: oaVCCap||cref-oaString,\n"
"    This oaVCCap constructor takes an oaVCCapEnum oaString name as input.\n"
"    name\n"
"    the name associated with the oaVCCapEnum value to set on the constructed oaVCCap object\n"
"  Paramegers: (oaVCCap)\n"
"    Calls: (const oaVCCap&)\n"
"    Signature: oaVCCap||cref-oaVCCap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCCap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCCap",
    sizeof(PyoaVCCapObject),
    0,
    (destructor)oaVCCap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCCap_tp_compare,	/* tp_compare */
    (reprfunc)oaVCCap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCCap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCCap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCCap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCCap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCCap_Type)<0) {
      printf("** PyType_Ready failed for: oaVCCap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCCap",
           (PyObject*)(&PyoaVCCap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCCap\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCCapEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaVCCapEnum_Convert(PyObject* ob,PyParamoaVCCapEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacCommitMayChangeFilesVCCap")==0) { result->SetData(oacCommitMayChangeFilesVCCap); return 1;}
        if (strcasecmp(str,"oacHasVersionsVCCap")==0) { result->SetData(oacHasVersionsVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsGetStatusVCCap")==0) { result->SetData(oacSupportsGetStatusVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsGetControlledObjectsVCCap")==0) { result->SetData(oacSupportsGetControlledObjectsVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsGetControlledLibsVCCap")==0) { result->SetData(oacSupportsGetControlledLibsVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsGetVersionsVCCap")==0) { result->SetData(oacSupportsGetVersionsVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsGetWorkingVersionVCCap")==0) { result->SetData(oacSupportsGetWorkingVersionVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsGetWorkingVersionsVCCap")==0) { result->SetData(oacSupportsGetWorkingVersionsVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsUpdateVCCap")==0) { result->SetData(oacSupportsUpdateVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsMakeEditableVCCap")==0) { result->SetData(oacSupportsMakeEditableVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsLockVCCap")==0) { result->SetData(oacSupportsLockVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsCancelEditVCCap")==0) { result->SetData(oacSupportsCancelEditVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsCommitEditsVCCap")==0) { result->SetData(oacSupportsCommitEditsVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsSetControlledVCCap")==0) { result->SetData(oacSupportsSetControlledVCCap); return 1;}
        if (strcasecmp(str,"oacSupportsUnSetControlledVCCap")==0) { result->SetData(oacSupportsUnSetControlledVCCap); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaVCCapEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCCapEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaVCCapEnum_FromoaVCCapEnum(oaVCCapEnum ob)
{
    if (ob==oacCommitMayChangeFilesVCCap) return PyString_FromString("oacCommitMayChangeFilesVCCap");
    if (ob==oacHasVersionsVCCap) return PyString_FromString("oacHasVersionsVCCap");
    if (ob==oacSupportsGetStatusVCCap) return PyString_FromString("oacSupportsGetStatusVCCap");
    if (ob==oacSupportsGetControlledObjectsVCCap) return PyString_FromString("oacSupportsGetControlledObjectsVCCap");
    if (ob==oacSupportsGetControlledLibsVCCap) return PyString_FromString("oacSupportsGetControlledLibsVCCap");
    if (ob==oacSupportsGetVersionsVCCap) return PyString_FromString("oacSupportsGetVersionsVCCap");
    if (ob==oacSupportsGetWorkingVersionVCCap) return PyString_FromString("oacSupportsGetWorkingVersionVCCap");
    if (ob==oacSupportsGetWorkingVersionsVCCap) return PyString_FromString("oacSupportsGetWorkingVersionsVCCap");
    if (ob==oacSupportsUpdateVCCap) return PyString_FromString("oacSupportsUpdateVCCap");
    if (ob==oacSupportsMakeEditableVCCap) return PyString_FromString("oacSupportsMakeEditableVCCap");
    if (ob==oacSupportsLockVCCap) return PyString_FromString("oacSupportsLockVCCap");
    if (ob==oacSupportsCancelEditVCCap) return PyString_FromString("oacSupportsCancelEditVCCap");
    if (ob==oacSupportsCommitEditsVCCap) return PyString_FromString("oacSupportsCommitEditsVCCap");
    if (ob==oacSupportsSetControlledVCCap) return PyString_FromString("oacSupportsSetControlledVCCap");
    if (ob==oacSupportsUnSetControlledVCCap) return PyString_FromString("oacSupportsUnSetControlledVCCap");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaVCCapEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaVCCapEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaVCCapEnum_FromoaVCCapEnum(oaVCCapEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaVCCapEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaVCCapEnum_doc[] =
"Type convert function for enum: oaVCCapEnum";
                               
static PyMethodDef PyoaVCCapEnum_method =
  {"oaVCCapEnum",(PyCFunction)PyoaVCCapEnum_TypeFunction,METH_VARARGS,oaVCCapEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaVCCapEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacCommitMayChangeFilesVCCap");
    PyDict_SetItemString(mod_dict,"oacCommitMayChangeFilesVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacHasVersionsVCCap");
    PyDict_SetItemString(mod_dict,"oacHasVersionsVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsGetStatusVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsGetStatusVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsGetControlledObjectsVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsGetControlledObjectsVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsGetControlledLibsVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsGetControlledLibsVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsGetVersionsVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsGetVersionsVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsGetWorkingVersionVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsGetWorkingVersionVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsGetWorkingVersionsVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsGetWorkingVersionsVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsUpdateVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsUpdateVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsMakeEditableVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsMakeEditableVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsLockVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsLockVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsCancelEditVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsCancelEditVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsCommitEditsVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsCommitEditsVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsSetControlledVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsSetControlledVCCap",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSupportsUnSetControlledVCCap");
    PyDict_SetItemString(mod_dict,"oacSupportsUnSetControlledVCCap",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaVCCapEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaVCCapEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaVCCapEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCMessageType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCMessageType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCMessageType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCMessageTypeObject* self = (PyoaVCMessageTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCMessageTypeEnum)
    {
        PyParamoaVCMessageTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCMessageTypeEnum_Convert,&p1)) {
            self->value =  new oaVCMessageType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaVCMessageType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCMessageType)
    {
        PyParamoaVCMessageType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCMessageType_Convert,&p1)) {
            self->value= new oaVCMessageType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCMessageType, Choices are:\n"
        "    (oaVCMessageTypeEnum)\n"
        "    (oaString)\n"
        "    (oaVCMessageType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCMessageType_tp_dealloc(PyoaVCMessageTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCMessageType_tp_repr(PyObject *ob)
{
    PyParamoaVCMessageType value;
    int convert_status=PyoaVCMessageType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[37];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaVCMessageType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCMessageType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCMessageType v1;
    PyParamoaVCMessageType v2;
    int convert_status1=PyoaVCMessageType_Convert(ob1,&v1);
    int convert_status2=PyoaVCMessageType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCMessageType_Convert(PyObject* ob,PyParamoaVCMessageType* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCMessageType_Check(ob)) {
        result->SetData(  ((PyoaVCMessageTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCMessageType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCMessageType_FromoaVCMessageType(oaVCMessageType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCMessageType_Type.tp_alloc(&PyoaVCMessageType_Type,0);
        if (bself == NULL) return bself;
        PyoaVCMessageTypeObject* self = (PyoaVCMessageTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCMessageType_getName_doc[] = 
"Class: oaVCMessageType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name of the oaVCMessageTypeEnum value set on this oaVCMessageType wrapper object.\n"
;

static PyObject*
oaVCMessageType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCMessageType data;
    int convert_status=PyoaVCMessageType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCMessageTypeObject* self=(PyoaVCMessageTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCMessageType_oaVCMessageTypeEnum_doc[] = 
"Class: oaVCMessageType, Function: oaVCMessageTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaVCMessageTypeEnum oaVCMessageTypeEnum() const\n"
"    Signature: operator oaVCMessageTypeEnum|simple-oaVCMessageTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaVCMessageType object into its corresponding oaVCMessageTypeEnum value.\n"
;

static PyObject*
oaVCMessageType_oaVCMessageTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCMessageType data;
    int convert_status=PyoaVCMessageType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCMessageTypeObject* self=(PyoaVCMessageTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVCMessageTypeEnum result= (data.DataCall()->operator oaVCMessageTypeEnum());
        return PyoaVCMessageTypeEnum_FromoaVCMessageTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCMessageType_assign_doc[] = 
"Class: oaVCMessageType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCMessageType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCMessageType data;
  int convert_status=PyoaVCMessageType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCMessageType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCMessageType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCMessageType_methodlist[] = {
    {"getName",(PyCFunction)oaVCMessageType_getName,METH_VARARGS,oaVCMessageType_getName_doc},
    {"oaVCMessageTypeEnum",(PyCFunction)oaVCMessageType_oaVCMessageTypeEnum,METH_VARARGS,oaVCMessageType_oaVCMessageTypeEnum_doc},
    {"assign",(PyCFunction)oaVCMessageType_tp_assign,METH_VARARGS,oaVCMessageType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCMessageType_doc[] = 
"Class: oaVCMessageType\n"
"  oaVCMessageTypeEnum\n"
"  The oaVCMessageType class is an enum wrapper class for oaVCMessageTypeEnum values.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"Constructors:\n"
"  Paramegers: (oaVCMessageTypeEnum)\n"
"    Calls: oaVCMessageType(oaVCMessageTypeEnum valueIn)\n"
"    Signature: oaVCMessageType||simple-oaVCMessageTypeEnum,\n"
"    This oaVCMessageType constructor takes an oaVCMessageTypeEnum value.\n"
"    valueIn\n"
"    an oaVCMessageTypeEnum value\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVCMessageType(const oaString& name)\n"
"    Signature: oaVCMessageType||cref-oaString,\n"
"    This oaVCMessageType constructor takes an oaVCMessageTypeEnum name.\n"
"    name\n"
"    the name associated with an oaVCMessageTypeEnum value\n"
"    oacInvalidVCMessageTypeName\n"
"  Paramegers: (oaVCMessageType)\n"
"    Calls: (const oaVCMessageType&)\n"
"    Signature: oaVCMessageType||cref-oaVCMessageType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCMessageType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCMessageType",
    sizeof(PyoaVCMessageTypeObject),
    0,
    (destructor)oaVCMessageType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCMessageType_tp_compare,	/* tp_compare */
    (reprfunc)oaVCMessageType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCMessageType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCMessageType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCMessageType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCMessageType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCMessageType_Type)<0) {
      printf("** PyType_Ready failed for: oaVCMessageType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCMessageType",
           (PyObject*)(&PyoaVCMessageType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCMessageType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCMessageTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaVCMessageTypeEnum_Convert(PyObject* ob,PyParamoaVCMessageTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacVCMsgTypeInfo")==0) { result->SetData(oacVCMsgTypeInfo); return 1;}
        if (strcasecmp(str,"oacVCMsgTypeWarning")==0) { result->SetData(oacVCMsgTypeWarning); return 1;}
        if (strcasecmp(str,"oacVCMsgTypeError")==0) { result->SetData(oacVCMsgTypeError); return 1;}
        if (strcasecmp(str,"oacVCMsgTypeStatus")==0) { result->SetData(oacVCMsgTypeStatus); return 1;}
        if (strcasecmp(str,"oacVCMsgTypeQueryOk")==0) { result->SetData(oacVCMsgTypeQueryOk); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaVCMessageTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCMessageTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaVCMessageTypeEnum_FromoaVCMessageTypeEnum(oaVCMessageTypeEnum ob)
{
    if (ob==oacVCMsgTypeInfo) return PyString_FromString("oacVCMsgTypeInfo");
    if (ob==oacVCMsgTypeWarning) return PyString_FromString("oacVCMsgTypeWarning");
    if (ob==oacVCMsgTypeError) return PyString_FromString("oacVCMsgTypeError");
    if (ob==oacVCMsgTypeStatus) return PyString_FromString("oacVCMsgTypeStatus");
    if (ob==oacVCMsgTypeQueryOk) return PyString_FromString("oacVCMsgTypeQueryOk");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaVCMessageTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaVCMessageTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaVCMessageTypeEnum_FromoaVCMessageTypeEnum(oaVCMessageTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaVCMessageTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaVCMessageTypeEnum_doc[] =
"Type convert function for enum: oaVCMessageTypeEnum";
                               
static PyMethodDef PyoaVCMessageTypeEnum_method =
  {"oaVCMessageTypeEnum",(PyCFunction)PyoaVCMessageTypeEnum_TypeFunction,METH_VARARGS,oaVCMessageTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaVCMessageTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacVCMsgTypeInfo");
    PyDict_SetItemString(mod_dict,"oacVCMsgTypeInfo",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCMsgTypeWarning");
    PyDict_SetItemString(mod_dict,"oacVCMsgTypeWarning",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCMsgTypeError");
    PyDict_SetItemString(mod_dict,"oacVCMsgTypeError",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCMsgTypeStatus");
    PyDict_SetItemString(mod_dict,"oacVCMsgTypeStatus",value);
    Py_DECREF(value);
    value=PyString_FromString("oacVCMsgTypeQueryOk");
    PyDict_SetItemString(mod_dict,"oacVCMsgTypeQueryOk",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaVCMessageTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaVCMessageTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaVCMessageTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCObserver
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCObserver_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCObserver_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCObserverObject* self = (PyoaVCObserverObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaVCObserver(p1.Data());
            }
            else {
                pyv_oaVCObserver* p=new pyv_oaVCObserver(p1.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4,oaBoolean)
    {
        PyParamoaUInt4 p1;
        PyParamoaBoolean p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaUInt4_Convert,&p1,
              &PyoaBoolean_Convert,&p2)) {
            if (is_raw) {
                self->value = (oaBaseObserver*)  new oaVCObserver(p1.Data(),p2.Data());
            }
            else {
                pyv_oaVCObserver* p=new pyv_oaVCObserver(p1.Data(),p2.Data());
                p->pyob=self;
                self->value= (oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCObserver)
    {
        PyParamoaVCObserver p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCObserver_Convert,&p1)) {
            if (is_raw) {
                self->value=(oaBaseObserver*)  new oaVCObserver(p1.Data());
            }
            else {
                pyv_oaVCObserver* p=new pyv_oaVCObserver(p1.Data());
            p->pyob=self;
                self->value=(oaBaseObserver*) p;
            }
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCObserver, Choices are:\n"
        "    (oaUInt4)\n"
        "    (oaUInt4,oaBoolean)\n"
        "    (oaVCObserver)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCObserver_tp_dealloc(PyoaVCObserverObject* self)
{
    if (!self->borrow) {
        delete (oaVCObserver*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCObserver_tp_repr(PyObject *ob)
{
    PyParamoaVCObserver value;
    int convert_status=PyoaVCObserver_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[34];
    sprintf(buffer,"<oaVCObserver::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCObserver_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCObserver v1;
    PyParamoaVCObserver v2;
    int convert_status1=PyoaVCObserver_Convert(ob1,&v1);
    int convert_status2=PyoaVCObserver_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCObserver_Convert(PyObject* ob,PyParamoaVCObserver* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCObserver_Check(ob)) {
        result->SetData( (oaVCObserver*) ((PyoaVCObserverObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCObserver Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCObserver_FromoaVCObserver(oaVCObserver* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCObserver_Type.tp_alloc(&PyoaVCObserver_Type,0);
        if (bself == NULL) return bself;
        PyoaVCObserverObject* self = (PyoaVCObserverObject*)bself;
        self->value = (oaBaseObserver*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// Virtual Functions:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
pyv_oaVCObserver::pyv_oaVCObserver(oaUInt4 p1)
 : pyob(NULL),
   oaVCObserver(p1)
{
}

// ------------------------------------------------------------------
pyv_oaVCObserver::pyv_oaVCObserver(oaUInt4 p1,oaBoolean p2)
 : pyob(NULL),
   oaVCObserver(p1,p2)
{
}

// ------------------------------------------------------------------
pyv_oaVCObserver::pyv_oaVCObserver(const oaVCObserver& p)
 : pyob(NULL),
   oaVCObserver(p)
{
}

// ------------------------------------------------------------------
oaVCObserverResult pyv_oaVCObserver::onVCMessageOut(const oaString& p1,oaDMObject* p2,oaVCOperation p3,oaVCMessageType p4,const oaString& p5)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onVCMessageOut");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaVCObserver::onVCMessageOut was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(5);
    PyTuple_SetItem(args,0,PyoaString_FromoaString(p1));
    PyTuple_SetItem(args,1,PyoaDMObject_FromoaDMObject(p2));
    PyTuple_SetItem(args,2,PyoaVCOperation_FromoaVCOperation(&p3,1));
    PyTuple_SetItem(args,3,PyoaVCMessageType_FromoaVCMessageType(&p4,1));
    PyTuple_SetItem(args,4,PyoaString_FromoaString(p5));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaVCObserver::onVCMessageOut had an error.");
    }
    PyParamoaVCObserverResult rv;
    if (PyoaVCObserverResult_Convert(result,&rv)==0) {
        throw oaPythonException("Python Virtual Function oaVCObserverResult::onVCMessageOut has incorrect return type.");
    }
    Py_DECREF(result);
    return rv.Data();
}

// ------------------------------------------------------------------
void pyv_oaVCObserver::onVCPlugInLoad(const oaString& p1)
{
    PyObject* md=PyObject_GetAttrString((PyObject*)pyob,"onVCPlugInLoad");
    if (!PyCallable_Check(md)) {
        Py_DECREF(md);
        throw oaPythonException("Python Virtual Function oaVCObserver::onVCPlugInLoad was unable to find a callable python routine.");
    }
    PyObject* args=PyTuple_New(1);
    PyTuple_SetItem(args,0,PyoaString_FromoaString(p1));
    PyObject* result=PyObject_CallObject(md,args);
    Py_DECREF(md);
    Py_DECREF(args);
    if (result==NULL) {
        throw oaPythonException("Python Virtual Function oaVCObserver::onVCPlugInLoad had an error.");
    }
    Py_DECREF(result);
}


// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCObserver_onVCMessageOut_doc[] = 
"Class: oaVCObserver, Function: onVCMessageOut\n"
"  Paramegers: (oaString,oaDMObject,oaVCOperation,oaVCMessageType,oaString)\n"
"    Calls: virtual oaVCObserverResult onVCMessageOut(const oaString& plugInName,oaDMObject* object,oaVCOperation operation,oaVCMessageType msgType,const oaString& text)\n"
"    Signature: onVCMessageOut|simple-oaVCObserverResult|cref-oaString,ptr-oaDMObject,simple-oaVCOperation,simple-oaVCMessageType,cref-oaString,\n"
"    This observer function is called after a version control message has been output to a plugin. The application's derived class should implement this function to receive notification and message information after a version control message has been output.\n"
"    plugInName\n"
"    name of the plug in that was sent the message\n"
"    object\n"
"    the object that the message corresponds to.\n"
"    operation\n"
"    the version control operation that was in effect when this message was generated\n"
"    msgType\n"
"    version control message type\n"
"    text\n"
"    the output message string\n"
"    oaVCObserverResult this result is used for messages of oacVCMsgTypeQueryOk. For messages of this type, observers have the opportunity to respond with \"ok\" or \"abort\" (see oaVCObserverResultEnum).\n"
;

static PyObject*
oaVCObserver_onVCMessageOut(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCObserver data;
    int convert_status=PyoaVCObserver_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCObserverObject* self=(PyoaVCObserverObject*)ob;

    PyParamoaString p1;
    PyParamoaDMObject p2;
    PyParamoaVCOperation p3;
    PyParamoaVCMessageType p4;
    PyParamoaString p5;
    if (PyArg_ParseTuple(args,"O&O&O&O&O&",
          &PyoaString_Convert,&p1,
          &PyoaDMObject_Convert,&p2,
          &PyoaVCOperation_Convert,&p3,
          &PyoaVCMessageType_Convert,&p4,
          &PyoaString_Convert,&p5)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaVCObserverResult* result= new oaVCObserverResult(data.DataCall()->oaVCObserver::onVCMessageOut(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
        return PyoaVCObserverResult_FromoaVCObserverResult(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCObserver_onVCPlugInLoad_doc[] = 
"Class: oaVCObserver, Function: onVCPlugInLoad\n"
"  Paramegers: (oaString)\n"
"    Calls: virtual void onVCPlugInLoad(const oaString& plugInName)\n"
"    Signature: onVCPlugInLoad|void-void|cref-oaString,\n"
"    This observer function is called after a version control plugin has been loaded. The application's derived class should implement this function to receive notification after a version control plugin has been loaded.\n"
"    plugInName\n"
"    name of the loaded version control plugin\n"
;

static PyObject*
oaVCObserver_onVCPlugInLoad(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCObserver data;
    int convert_status=PyoaVCObserver_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCObserverObject* self=(PyoaVCObserverObject*)ob;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->oaVCObserver::onVCPlugInLoad(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCObserver_assign_doc[] = 
"Class: oaVCObserver, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCObserver_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCObserver data;
  int convert_status=PyoaVCObserver_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCObserver p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCObserver_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCObserver_methodlist[] = {
    {"onVCMessageOut",(PyCFunction)oaVCObserver_onVCMessageOut,METH_VARARGS,oaVCObserver_onVCMessageOut_doc},
    {"onVCPlugInLoad",(PyCFunction)oaVCObserver_onVCPlugInLoad,METH_VARARGS,oaVCObserver_onVCPlugInLoad_doc},
    {"assign",(PyCFunction)oaVCObserver_tp_assign,METH_VARARGS,oaVCObserver_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCObserver_doc[] = 
"Class: oaVCObserver\n"
"  The oaVCObserver class is a base class for version control (VC) observers. It supports onVCPlugInLoad and onVCMessageOut event notifications.\n"
"  See oaObserver for information on using Open Access observer classes to derive and instantiate observers in an application.\n"
"Constructors:\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaVCObserver(oaUInt4 priorityIn)\n"
"    Signature: oaVCObserver||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the oaVCObserver constructor. If multiple observers exist for a given notification event, observers with a lower priorityIn value are called before those with a higher value.\n"
"    priorityIn\n"
"    priority of this observer relative to other oaVCObservers\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaUInt4,oaBoolean)\n"
"    Calls: oaVCObserver(oaUInt4 priorityIn,oaBoolean enabledIn)\n"
"    Signature: oaVCObserver||simple-oaUInt4,simple-oaBoolean,\n"
"    This is the oaVCObserver constructor. If multiple observers exist for a given notification event, observers with a lower priorityIn value are called before those with a higher value.\n"
"    priorityIn\n"
"    priority of this observer relative to other oaVCObservers\n"
"    enabledIn\n"
"    Determines whether this observer is called when an observed event occurs\n"
"  Paramegers: (oaVCObserver)\n"
"    Calls: (const oaVCObserver&)\n"
"    Signature: oaVCObserver||cref-oaVCObserver,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCObserver_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCObserver",
    sizeof(PyoaVCObserverObject),
    0,
    (destructor)oaVCObserver_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCObserver_tp_compare,	/* tp_compare */
    (reprfunc)oaVCObserver_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCObserver_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCObserver_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBaseObserver_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCObserver_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCObserver_static_invokeVCMessageOut_doc[] = 
"Class: oaVCObserver, Function: invokeVCMessageOut\n"
"  Paramegers: (oaString,oaDMObject,oaVCOperation,oaVCMessageType,oaString)\n"
"    Calls: oaVCObserverResult invokeVCMessageOut(const oaString& plugInName,oaDMObject* object,oaVCOperation operation,oaVCMessageType msgType,const oaString& text)\n"
"    Signature: invokeVCMessageOut|simple-oaVCObserverResult|cref-oaString,ptr-oaDMObject,simple-oaVCOperation,simple-oaVCMessageType,cref-oaString,\n"
"    Function invokeVCMessageOut\n"
;

static PyObject*
oaVCObserver_static_invokeVCMessageOut(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaDMObject p2;
    PyParamoaVCOperation p3;
    PyParamoaVCMessageType p4;
    PyParamoaString p5;
    if (PyArg_ParseTuple(args,"O&O&O&O&O&",
          &PyoaString_Convert,&p1,
          &PyoaDMObject_Convert,&p2,
          &PyoaVCOperation_Convert,&p3,
          &PyoaVCMessageType_Convert,&p4,
          &PyoaString_Convert,&p5)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaVCObserverResult* result= new oaVCObserverResult(oaVCObserver::invokeVCMessageOut(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data()));
        return PyoaVCObserverResult_FromoaVCObserverResult(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCObserver_static_invokeVCPlugInLoad_doc[] = 
"Class: oaVCObserver, Function: invokeVCPlugInLoad\n"
"  Paramegers: (oaString)\n"
"    Calls: void invokeVCPlugInLoad(const oaString& plugInName)\n"
"    Signature: invokeVCPlugInLoad|void-void|cref-oaString,\n"
"    Function invokeVCPlugInLoad\n"
;

static PyObject*
oaVCObserver_static_invokeVCPlugInLoad(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        oaVCObserver::invokeVCPlugInLoad(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaVCObserver_staticmethodlist[] = {
    {"static_invokeVCMessageOut",(PyCFunction)oaVCObserver_static_invokeVCMessageOut,METH_VARARGS,oaVCObserver_static_invokeVCMessageOut_doc},
    {"static_invokeVCPlugInLoad",(PyCFunction)oaVCObserver_static_invokeVCPlugInLoad,METH_VARARGS,oaVCObserver_static_invokeVCPlugInLoad_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCObserver_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCObserver_Type)<0) {
      printf("** PyType_Ready failed for: oaVCObserver\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCObserver",
           (PyObject*)(&PyoaVCObserver_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCObserver\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaVCObserver_Type.tp_dict;
    for(method=oaVCObserver_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaVCObserverResult
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaVCObserverResult_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaVCObserverResult_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaVCObserverResultObject* self = (PyoaVCObserverResultObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaVCObserverResultEnum)
    {
        PyParamoaVCObserverResultEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaVCObserverResultEnum_Convert,&p1)) {
            self->value =  new oaVCObserverResult(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaVCObserverResult(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaVCObserverResult)
    {
        PyParamoaVCObserverResult p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaVCObserverResult_Convert,&p1)) {
            self->value= new oaVCObserverResult(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaVCObserverResult, Choices are:\n"
        "    (oaVCObserverResultEnum)\n"
        "    (oaString)\n"
        "    (oaVCObserverResult)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaVCObserverResult_tp_dealloc(PyoaVCObserverResultObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaVCObserverResult_tp_repr(PyObject *ob)
{
    PyParamoaVCObserverResult value;
    int convert_status=PyoaVCObserverResult_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[40];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaVCObserverResult::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaVCObserverResult_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaVCObserverResult v1;
    PyParamoaVCObserverResult v2;
    int convert_status1=PyoaVCObserverResult_Convert(ob1,&v1);
    int convert_status2=PyoaVCObserverResult_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaVCObserverResult_Convert(PyObject* ob,PyParamoaVCObserverResult* result)
{
    if (ob == NULL) return 1;
    if (PyoaVCObserverResult_Check(ob)) {
        result->SetData(  ((PyoaVCObserverResultObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaVCObserverResult Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaVCObserverResult_FromoaVCObserverResult(oaVCObserverResult* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaVCObserverResult_Type.tp_alloc(&PyoaVCObserverResult_Type,0);
        if (bself == NULL) return bself;
        PyoaVCObserverResultObject* self = (PyoaVCObserverResultObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCObserverResult_getName_doc[] = 
"Class: oaVCObserverResult, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the string name of the oaVCObserverResultEnum value set on this oaVCObserverResult wrapper object.\n"
;

static PyObject*
oaVCObserverResult_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCObserverResult data;
    int convert_status=PyoaVCObserverResult_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCObserverResultObject* self=(PyoaVCObserverResultObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaVCObserverResult_oaVCObserverResultEnum_doc[] = 
"Class: oaVCObserverResult, Function: oaVCObserverResultEnum\n"
"  Paramegers: ()\n"
"    Calls: oaVCObserverResultEnum oaVCObserverResultEnum() const\n"
"    Signature: operator oaVCObserverResultEnum|simple-oaVCObserverResultEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaVCObserverResult object into its corresponding oaVCObserverResultEnum value.\n"
;

static PyObject*
oaVCObserverResult_oaVCObserverResultEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaVCObserverResult data;
    int convert_status=PyoaVCObserverResult_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaVCObserverResultObject* self=(PyoaVCObserverResultObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaVCObserverResultEnum result= (data.DataCall()->operator oaVCObserverResultEnum());
        return PyoaVCObserverResultEnum_FromoaVCObserverResultEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaVCObserverResult_assign_doc[] = 
"Class: oaVCObserverResult, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaVCObserverResult_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaVCObserverResult data;
  int convert_status=PyoaVCObserverResult_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaVCObserverResult p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaVCObserverResult_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaVCObserverResult_methodlist[] = {
    {"getName",(PyCFunction)oaVCObserverResult_getName,METH_VARARGS,oaVCObserverResult_getName_doc},
    {"oaVCObserverResultEnum",(PyCFunction)oaVCObserverResult_oaVCObserverResultEnum,METH_VARARGS,oaVCObserverResult_oaVCObserverResultEnum_doc},
    {"assign",(PyCFunction)oaVCObserverResult_tp_assign,METH_VARARGS,oaVCObserverResult_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaVCObserverResult_doc[] = 
"Class: oaVCObserverResult\n"
"  oaVCObserverResultEnum\n"
"  The oaVCObserverResult class is an enum wrapper class for oaVCObserverResultEnum values.\n"
"  See Enum Wrappers in the Programmers Guide for a discussion of enum wrappers.\n"
"Constructors:\n"
"  Paramegers: (oaVCObserverResultEnum)\n"
"    Calls: oaVCObserverResult(oaVCObserverResultEnum valueIn)\n"
"    Signature: oaVCObserverResult||simple-oaVCObserverResultEnum,\n"
"    This oaVCObserverResult constructor takes an oaVCObserverResultEnum value.\n"
"    valueIn\n"
"    an oaVCObserverResultEnum value\n"
"  Paramegers: (oaString)\n"
"    Calls: oaVCObserverResult(const oaString& name)\n"
"    Signature: oaVCObserverResult||cref-oaString,\n"
"    This oaVCObserverResult constructor takes an oaVCObserverResult name.\n"
"    name\n"
"    the name associated with an oaVCObserverResult value\n"
"    oacInvalidVCObserverResultName\n"
"  Paramegers: (oaVCObserverResult)\n"
"    Calls: (const oaVCObserverResult&)\n"
"    Signature: oaVCObserverResult||cref-oaVCObserverResult,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaVCObserverResult_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaVCObserverResult",
    sizeof(PyoaVCObserverResultObject),
    0,
    (destructor)oaVCObserverResult_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaVCObserverResult_tp_compare,	/* tp_compare */
    (reprfunc)oaVCObserverResult_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaVCObserverResult_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaVCObserverResult_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaVCObserverResult_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaVCObserverResult_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaVCObserverResult_Type)<0) {
      printf("** PyType_Ready failed for: oaVCObserverResult\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaVCObserverResult",
           (PyObject*)(&PyoaVCObserverResult_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaVCObserverResult\n");
       return -1;
    }
    return 0;
}

