
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModInstTermObject* self = (PyoaFloatAppDef_oaModInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModInstTerm)
    {
        PyParamoaFloatAppDef_oaModInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModInstTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModInstTerm, Choices are:\n"
        "    (oaFloatAppDef_oaModInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModInstTerm_tp_dealloc(PyoaFloatAppDef_oaModInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModInstTerm value;
    int convert_status=PyoaFloatAppDef_oaModInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaFloatAppDef_oaModInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModInstTerm v1;
    PyParamoaFloatAppDef_oaModInstTerm v2;
    int convert_status1=PyoaFloatAppDef_oaModInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModInstTerm_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModInstTerm_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModInstTerm**) ((PyoaFloatAppDef_oaModInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(oaFloatAppDef_oaModInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModInstTerm* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModInstTerm_Type.tp_alloc(&PyoaFloatAppDef_oaModInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModInstTermObject* self = (PyoaFloatAppDef_oaModInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(oaFloatAppDef_oaModInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModInstTerm_Type.tp_alloc(&PyoaFloatAppDef_oaModInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModInstTermObject* self = (PyoaFloatAppDef_oaModInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_get_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm, Function: get\n"
"  Paramegers: (oaModInstTerm)\n"
"    Calls: oaFloat get(const oaModInstTerm* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModInstTerm,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInstTerm data;
    int convert_status=PyoaFloatAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstTermObject* self=(PyoaFloatAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInstTerm data;
    int convert_status=PyoaFloatAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstTermObject* self=(PyoaFloatAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_set_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm, Function: set\n"
"  Paramegers: (oaModInstTerm,oaFloat)\n"
"    Calls: void set(oaModInstTerm* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModInstTerm,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModInstTerm data;
    int convert_status=PyoaFloatAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModInstTermObject* self=(PyoaFloatAppDef_oaModInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModInstTerm p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModInstTerm_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_isNull_doc[] =
"Class: oaFloatAppDef_oaModInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModInstTerm data;
    int convert_status=PyoaFloatAppDef_oaModInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModInstTerm_assign_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModInstTerm data;
  int convert_status=PyoaFloatAppDef_oaModInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModInstTerm_get,METH_VARARGS,oaFloatAppDef_oaModInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModInstTerm_getDefault,METH_VARARGS,oaFloatAppDef_oaModInstTerm_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModInstTerm_set,METH_VARARGS,oaFloatAppDef_oaModInstTerm_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModInstTerm_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModInstTerm_tp_assign,METH_VARARGS,oaFloatAppDef_oaModInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModInstTerm)\n"
"    Calls: (const oaFloatAppDef_oaModInstTerm&)\n"
"    Signature: oaFloatAppDef_oaModInstTerm||cref-oaFloatAppDef_oaModInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModInstTerm",
    sizeof(PyoaFloatAppDef_oaModInstTermObject),
    0,
    (destructor)oaFloatAppDef_oaModInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_static_find_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::find(p1.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModInstTerm_static_get_doc[] = 
"Class: oaFloatAppDef_oaModInstTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::get(p1.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModInstTermp result= (oaFloatAppDef_oaModInstTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModInstTerm_FromoaFloatAppDef_oaModInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModInstTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModInstTerm_static_find,METH_VARARGS,oaFloatAppDef_oaModInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModInstTerm_static_get,METH_VARARGS,oaFloatAppDef_oaModInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModInstTerm",
           (PyObject*)(&PyoaFloatAppDef_oaModInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModInstTerm_Type.tp_dict;
    for(method=oaFloatAppDef_oaModInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModModuleInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModModuleInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModModuleInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModModuleInstHeaderObject* self = (PyoaFloatAppDef_oaModModuleInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModModuleInstHeader)
    {
        PyParamoaFloatAppDef_oaModModuleInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModModuleInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModModuleInstHeader, Choices are:\n"
        "    (oaFloatAppDef_oaModModuleInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModModuleInstHeader_tp_dealloc(PyoaFloatAppDef_oaModModuleInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModModuleInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModModuleInstHeader value;
    int convert_status=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaFloatAppDef_oaModModuleInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModModuleInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModModuleInstHeader v1;
    PyParamoaFloatAppDef_oaModModuleInstHeader v2;
    int convert_status1=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModModuleInstHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModModuleInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModModuleInstHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModModuleInstHeader**) ((PyoaFloatAppDef_oaModModuleInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModModuleInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(oaFloatAppDef_oaModModuleInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModModuleInstHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModModuleInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaModModuleInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModModuleInstHeaderObject* self = (PyoaFloatAppDef_oaModModuleInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(oaFloatAppDef_oaModModuleInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModModuleInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaModModuleInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModModuleInstHeaderObject* self = (PyoaFloatAppDef_oaModModuleInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_get_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: get\n"
"  Paramegers: (oaModModuleInstHeader)\n"
"    Calls: oaFloat get(const oaModModuleInstHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModModuleInstHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModModuleInstHeaderObject* self=(PyoaFloatAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModModuleInstHeaderObject* self=(PyoaFloatAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_set_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: set\n"
"  Paramegers: (oaModModuleInstHeader,oaFloat)\n"
"    Calls: void set(oaModModuleInstHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModModuleInstHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModModuleInstHeaderObject* self=(PyoaFloatAppDef_oaModModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModModuleInstHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModModuleInstHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModModuleInstHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModModuleInstHeader data;
  int convert_status=PyoaFloatAppDef_oaModModuleInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModModuleInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModModuleInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModModuleInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_get,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_set,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModModuleInstHeader)\n"
"    Calls: (const oaFloatAppDef_oaModModuleInstHeader&)\n"
"    Signature: oaFloatAppDef_oaModModuleInstHeader||cref-oaFloatAppDef_oaModModuleInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModModuleInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModModuleInstHeader",
    sizeof(PyoaFloatAppDef_oaModModuleInstHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaModModuleInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModModuleInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModModuleInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModModuleInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModModuleInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModModuleInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModModuleInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModModuleInstHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaModModuleInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModModuleInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModModuleInstHeaderp result= (oaFloatAppDef_oaModModuleInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModModuleInstHeader_FromoaFloatAppDef_oaModModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModModuleInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModModuleInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_static_find,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModModuleInstHeader_static_get,METH_VARARGS,oaFloatAppDef_oaModModuleInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModModuleInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModModuleInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModModuleInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModModuleInstHeader",
           (PyObject*)(&PyoaFloatAppDef_oaModModuleInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModModuleInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModModuleInstHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaModModuleInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModNet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModNet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModNet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModNetObject* self = (PyoaFloatAppDef_oaModNetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModNet)
    {
        PyParamoaFloatAppDef_oaModNet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModNet_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModNet, Choices are:\n"
        "    (oaFloatAppDef_oaModNet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModNet_tp_dealloc(PyoaFloatAppDef_oaModNetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModNet_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModNet value;
    int convert_status=PyoaFloatAppDef_oaModNet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaModNet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModNet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModNet v1;
    PyParamoaFloatAppDef_oaModNet v2;
    int convert_status1=PyoaFloatAppDef_oaModNet_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModNet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModNet_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModNet* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModNet_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModNet**) ((PyoaFloatAppDef_oaModNetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModNet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(oaFloatAppDef_oaModNet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModNet* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModNet_Type.tp_alloc(&PyoaFloatAppDef_oaModNet_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModNetObject* self = (PyoaFloatAppDef_oaModNetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(oaFloatAppDef_oaModNet* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModNet_Type.tp_alloc(&PyoaFloatAppDef_oaModNet_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModNetObject* self = (PyoaFloatAppDef_oaModNetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_get_doc[] = 
"Class: oaFloatAppDef_oaModNet, Function: get\n"
"  Paramegers: (oaModNet)\n"
"    Calls: oaFloat get(const oaModNet* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModNet,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModNet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModNet data;
    int convert_status=PyoaFloatAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModNetObject* self=(PyoaFloatAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModNet, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModNet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModNet data;
    int convert_status=PyoaFloatAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModNetObject* self=(PyoaFloatAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_set_doc[] = 
"Class: oaFloatAppDef_oaModNet, Function: set\n"
"  Paramegers: (oaModNet,oaFloat)\n"
"    Calls: void set(oaModNet* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModNet,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModNet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModNet data;
    int convert_status=PyoaFloatAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModNetObject* self=(PyoaFloatAppDef_oaModNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModNet p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModNet_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_isNull_doc[] =
"Class: oaFloatAppDef_oaModNet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModNet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModNet data;
    int convert_status=PyoaFloatAppDef_oaModNet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModNet_assign_doc[] = 
"Class: oaFloatAppDef_oaModNet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModNet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModNet data;
  int convert_status=PyoaFloatAppDef_oaModNet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModNet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModNet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModNet_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModNet_get,METH_VARARGS,oaFloatAppDef_oaModNet_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModNet_getDefault,METH_VARARGS,oaFloatAppDef_oaModNet_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModNet_set,METH_VARARGS,oaFloatAppDef_oaModNet_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModNet_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModNet_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModNet_tp_assign,METH_VARARGS,oaFloatAppDef_oaModNet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_doc[] = 
"Class: oaFloatAppDef_oaModNet\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModNet)\n"
"    Calls: (const oaFloatAppDef_oaModNet&)\n"
"    Signature: oaFloatAppDef_oaModNet||cref-oaFloatAppDef_oaModNet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModNet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModNet",
    sizeof(PyoaFloatAppDef_oaModNetObject),
    0,
    (destructor)oaFloatAppDef_oaModNet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModNet_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModNet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModNet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModNet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModNet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_static_find_doc[] = 
"Class: oaFloatAppDef_oaModNet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModNet* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModNet|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModNet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModNet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModNet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::find(p1.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModNet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModNet_static_get_doc[] = 
"Class: oaFloatAppDef_oaModNet, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModNet* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModNet* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModNet* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModNet* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModNet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModNet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModNet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::get(p1.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModNetp result= (oaFloatAppDef_oaModNet::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModNet_FromoaFloatAppDef_oaModNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModNet, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModNet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModNet_static_find,METH_VARARGS,oaFloatAppDef_oaModNet_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModNet_static_get,METH_VARARGS,oaFloatAppDef_oaModNet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModNet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModNet_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModNet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModNet",
           (PyObject*)(&PyoaFloatAppDef_oaModNet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModNet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModNet_Type.tp_dict;
    for(method=oaFloatAppDef_oaModNet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModTermObject* self = (PyoaFloatAppDef_oaModTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModTerm)
    {
        PyParamoaFloatAppDef_oaModTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModTerm, Choices are:\n"
        "    (oaFloatAppDef_oaModTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModTerm_tp_dealloc(PyoaFloatAppDef_oaModTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModTerm_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModTerm value;
    int convert_status=PyoaFloatAppDef_oaModTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaModTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModTerm v1;
    PyParamoaFloatAppDef_oaModTerm v2;
    int convert_status1=PyoaFloatAppDef_oaModTerm_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModTerm_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModTerm_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModTerm**) ((PyoaFloatAppDef_oaModTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(oaFloatAppDef_oaModTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModTerm* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModTerm_Type.tp_alloc(&PyoaFloatAppDef_oaModTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModTermObject* self = (PyoaFloatAppDef_oaModTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(oaFloatAppDef_oaModTerm* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModTerm_Type.tp_alloc(&PyoaFloatAppDef_oaModTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModTermObject* self = (PyoaFloatAppDef_oaModTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_get_doc[] = 
"Class: oaFloatAppDef_oaModTerm, Function: get\n"
"  Paramegers: (oaModTerm)\n"
"    Calls: oaFloat get(const oaModTerm* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModTerm,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModTerm data;
    int convert_status=PyoaFloatAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModTermObject* self=(PyoaFloatAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModTerm data;
    int convert_status=PyoaFloatAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModTermObject* self=(PyoaFloatAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_set_doc[] = 
"Class: oaFloatAppDef_oaModTerm, Function: set\n"
"  Paramegers: (oaModTerm,oaFloat)\n"
"    Calls: void set(oaModTerm* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModTerm,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModTerm data;
    int convert_status=PyoaFloatAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModTermObject* self=(PyoaFloatAppDef_oaModTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModTerm p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModTerm_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_isNull_doc[] =
"Class: oaFloatAppDef_oaModTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModTerm data;
    int convert_status=PyoaFloatAppDef_oaModTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModTerm_assign_doc[] = 
"Class: oaFloatAppDef_oaModTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModTerm data;
  int convert_status=PyoaFloatAppDef_oaModTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModTerm_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModTerm_get,METH_VARARGS,oaFloatAppDef_oaModTerm_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModTerm_getDefault,METH_VARARGS,oaFloatAppDef_oaModTerm_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModTerm_set,METH_VARARGS,oaFloatAppDef_oaModTerm_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModTerm_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModTerm_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModTerm_tp_assign,METH_VARARGS,oaFloatAppDef_oaModTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_doc[] = 
"Class: oaFloatAppDef_oaModTerm\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModTerm)\n"
"    Calls: (const oaFloatAppDef_oaModTerm&)\n"
"    Signature: oaFloatAppDef_oaModTerm||cref-oaFloatAppDef_oaModTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModTerm",
    sizeof(PyoaFloatAppDef_oaModTermObject),
    0,
    (destructor)oaFloatAppDef_oaModTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_static_find_doc[] = 
"Class: oaFloatAppDef_oaModTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModTerm|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::find(p1.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModTerm_static_get_doc[] = 
"Class: oaFloatAppDef_oaModTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModTerm* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModTerm* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::get(p1.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModTermp result= (oaFloatAppDef_oaModTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModTerm_FromoaFloatAppDef_oaModTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModTerm_static_find,METH_VARARGS,oaFloatAppDef_oaModTerm_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModTerm_static_get,METH_VARARGS,oaFloatAppDef_oaModTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModTerm",
           (PyObject*)(&PyoaFloatAppDef_oaModTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModTerm_Type.tp_dict;
    for(method=oaFloatAppDef_oaModTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModVectorInstDefObject* self = (PyoaFloatAppDef_oaModVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModVectorInstDef)
    {
        PyParamoaFloatAppDef_oaModVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModVectorInstDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModVectorInstDef, Choices are:\n"
        "    (oaFloatAppDef_oaModVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModVectorInstDef_tp_dealloc(PyoaFloatAppDef_oaModVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModVectorInstDef value;
    int convert_status=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaFloatAppDef_oaModVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModVectorInstDef v1;
    PyParamoaFloatAppDef_oaModVectorInstDef v2;
    int convert_status1=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModVectorInstDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModVectorInstDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModVectorInstDef**) ((PyoaFloatAppDef_oaModVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(oaFloatAppDef_oaModVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModVectorInstDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModVectorInstDef_Type.tp_alloc(&PyoaFloatAppDef_oaModVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModVectorInstDefObject* self = (PyoaFloatAppDef_oaModVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(oaFloatAppDef_oaModVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModVectorInstDef_Type.tp_alloc(&PyoaFloatAppDef_oaModVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModVectorInstDefObject* self = (PyoaFloatAppDef_oaModVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_get_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef, Function: get\n"
"  Paramegers: (oaModVectorInstDef)\n"
"    Calls: oaFloat get(const oaModVectorInstDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModVectorInstDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModVectorInstDefObject* self=(PyoaFloatAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModVectorInstDefObject* self=(PyoaFloatAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_set_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef, Function: set\n"
"  Paramegers: (oaModVectorInstDef,oaFloat)\n"
"    Calls: void set(oaModVectorInstDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModVectorInstDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModVectorInstDefObject* self=(PyoaFloatAppDef_oaModVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModVectorInstDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModVectorInstDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_isNull_doc[] =
"Class: oaFloatAppDef_oaModVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModVectorInstDef_assign_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModVectorInstDef data;
  int convert_status=PyoaFloatAppDef_oaModVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_get,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_getDefault,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_set,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModVectorInstDef)\n"
"    Calls: (const oaFloatAppDef_oaModVectorInstDef&)\n"
"    Signature: oaFloatAppDef_oaModVectorInstDef||cref-oaFloatAppDef_oaModVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModVectorInstDef",
    sizeof(PyoaFloatAppDef_oaModVectorInstDefObject),
    0,
    (destructor)oaFloatAppDef_oaModVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::find(p1.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModVectorInstDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaModVectorInstDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::get(p1.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModVectorInstDefp result= (oaFloatAppDef_oaModVectorInstDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModVectorInstDef_FromoaFloatAppDef_oaModVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModVectorInstDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_static_find,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModVectorInstDef_static_get,METH_VARARGS,oaFloatAppDef_oaModVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModVectorInstDef",
           (PyObject*)(&PyoaFloatAppDef_oaModVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModVectorInstDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaModVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaModule
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModule_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaModule_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaModuleObject* self = (PyoaFloatAppDef_oaModuleObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaModule)
    {
        PyParamoaFloatAppDef_oaModule p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaModule_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaModule, Choices are:\n"
        "    (oaFloatAppDef_oaModule)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaModule_tp_dealloc(PyoaFloatAppDef_oaModuleObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaModule_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaModule value;
    int convert_status=PyoaFloatAppDef_oaModule_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaModule::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaModule_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaModule v1;
    PyParamoaFloatAppDef_oaModule v2;
    int convert_status1=PyoaFloatAppDef_oaModule_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaModule_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaModule_Convert(PyObject* ob,PyParamoaFloatAppDef_oaModule* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaModule_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaModule**) ((PyoaFloatAppDef_oaModuleObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaModule Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(oaFloatAppDef_oaModule** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaModule* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaModule_Type.tp_alloc(&PyoaFloatAppDef_oaModule_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaModuleObject* self = (PyoaFloatAppDef_oaModuleObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(oaFloatAppDef_oaModule* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaModule_Type.tp_alloc(&PyoaFloatAppDef_oaModule_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaModuleObject* self = (PyoaFloatAppDef_oaModuleObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_get_doc[] = 
"Class: oaFloatAppDef_oaModule, Function: get\n"
"  Paramegers: (oaModule)\n"
"    Calls: oaFloat get(const oaModule* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaModule,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModule_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModule data;
    int convert_status=PyoaFloatAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModuleObject* self=(PyoaFloatAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModule p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaModule_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_getDefault_doc[] = 
"Class: oaFloatAppDef_oaModule, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaModule_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModule data;
    int convert_status=PyoaFloatAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModuleObject* self=(PyoaFloatAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_set_doc[] = 
"Class: oaFloatAppDef_oaModule, Function: set\n"
"  Paramegers: (oaModule,oaFloat)\n"
"    Calls: void set(oaModule* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaModule,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaModule_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaModule data;
    int convert_status=PyoaFloatAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaModuleObject* self=(PyoaFloatAppDef_oaModuleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaModule p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaModule_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_isNull_doc[] =
"Class: oaFloatAppDef_oaModule, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaModule_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaModule data;
    int convert_status=PyoaFloatAppDef_oaModule_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaModule_assign_doc[] = 
"Class: oaFloatAppDef_oaModule, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaModule_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaModule data;
  int convert_status=PyoaFloatAppDef_oaModule_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaModule p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaModule_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaModule_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaModule_get,METH_VARARGS,oaFloatAppDef_oaModule_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaModule_getDefault,METH_VARARGS,oaFloatAppDef_oaModule_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaModule_set,METH_VARARGS,oaFloatAppDef_oaModule_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaModule_tp_isNull,METH_VARARGS,oaFloatAppDef_oaModule_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaModule_tp_assign,METH_VARARGS,oaFloatAppDef_oaModule_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_doc[] = 
"Class: oaFloatAppDef_oaModule\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaModule)\n"
"    Calls: (const oaFloatAppDef_oaModule&)\n"
"    Signature: oaFloatAppDef_oaModule||cref-oaFloatAppDef_oaModule,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaModule_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaModule",
    sizeof(PyoaFloatAppDef_oaModuleObject),
    0,
    (destructor)oaFloatAppDef_oaModule_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaModule_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaModule_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaModule_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaModule_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaModule_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_static_find_doc[] = 
"Class: oaFloatAppDef_oaModule, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModule* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModule|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModule* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaModule|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaModule_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::find(p1.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModule, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaModule_static_get_doc[] = 
"Class: oaFloatAppDef_oaModule, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaModule* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModule|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModule* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModule|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModule* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModule|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaModule* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModule|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaModule* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModule|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaModule* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaModule|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaModule_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::get(p1.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaModulep result= (oaFloatAppDef_oaModule::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaModule_FromoaFloatAppDef_oaModule(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaModule, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaModule_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaModule_static_find,METH_VARARGS,oaFloatAppDef_oaModule_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaModule_static_get,METH_VARARGS,oaFloatAppDef_oaModule_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaModule_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaModule_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaModule\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaModule",
           (PyObject*)(&PyoaFloatAppDef_oaModule_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaModule\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaModule_Type.tp_dict;
    for(method=oaFloatAppDef_oaModule_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaNet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaNet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaNet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaNetObject* self = (PyoaFloatAppDef_oaNetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaNet)
    {
        PyParamoaFloatAppDef_oaNet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaNet_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaNet, Choices are:\n"
        "    (oaFloatAppDef_oaNet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaNet_tp_dealloc(PyoaFloatAppDef_oaNetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaNet_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaNet value;
    int convert_status=PyoaFloatAppDef_oaNet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaFloatAppDef_oaNet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaNet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaNet v1;
    PyParamoaFloatAppDef_oaNet v2;
    int convert_status1=PyoaFloatAppDef_oaNet_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaNet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaNet_Convert(PyObject* ob,PyParamoaFloatAppDef_oaNet* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaNet_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaNet**) ((PyoaFloatAppDef_oaNetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaNet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(oaFloatAppDef_oaNet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaNet* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaNet_Type.tp_alloc(&PyoaFloatAppDef_oaNet_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaNetObject* self = (PyoaFloatAppDef_oaNetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(oaFloatAppDef_oaNet* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaNet_Type.tp_alloc(&PyoaFloatAppDef_oaNet_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaNetObject* self = (PyoaFloatAppDef_oaNetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_get_doc[] = 
"Class: oaFloatAppDef_oaNet, Function: get\n"
"  Paramegers: (oaNet)\n"
"    Calls: oaFloat get(const oaNet* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaNet,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaNet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaNet data;
    int convert_status=PyoaFloatAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaNetObject* self=(PyoaFloatAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_getDefault_doc[] = 
"Class: oaFloatAppDef_oaNet, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaNet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaNet data;
    int convert_status=PyoaFloatAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaNetObject* self=(PyoaFloatAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_set_doc[] = 
"Class: oaFloatAppDef_oaNet, Function: set\n"
"  Paramegers: (oaNet,oaFloat)\n"
"    Calls: void set(oaNet* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaNet,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaNet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaNet data;
    int convert_status=PyoaFloatAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaNetObject* self=(PyoaFloatAppDef_oaNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNet p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_isNull_doc[] =
"Class: oaFloatAppDef_oaNet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaNet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaNet data;
    int convert_status=PyoaFloatAppDef_oaNet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaNet_assign_doc[] = 
"Class: oaFloatAppDef_oaNet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaNet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaNet data;
  int convert_status=PyoaFloatAppDef_oaNet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaNet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaNet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaNet_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaNet_get,METH_VARARGS,oaFloatAppDef_oaNet_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaNet_getDefault,METH_VARARGS,oaFloatAppDef_oaNet_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaNet_set,METH_VARARGS,oaFloatAppDef_oaNet_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaNet_tp_isNull,METH_VARARGS,oaFloatAppDef_oaNet_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaNet_tp_assign,METH_VARARGS,oaFloatAppDef_oaNet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_doc[] = 
"Class: oaFloatAppDef_oaNet\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaNet)\n"
"    Calls: (const oaFloatAppDef_oaNet&)\n"
"    Signature: oaFloatAppDef_oaNet||cref-oaFloatAppDef_oaNet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaNet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaNet",
    sizeof(PyoaFloatAppDef_oaNetObject),
    0,
    (destructor)oaFloatAppDef_oaNet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaNet_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaNet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaNet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaNet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaNet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_static_find_doc[] = 
"Class: oaFloatAppDef_oaNet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaNet* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaNet|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaNet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaNet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaNet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::find(p1.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaNet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNet_static_get_doc[] = 
"Class: oaFloatAppDef_oaNet, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaNet* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaNet* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaNet* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaNet* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaNet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaNet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaNet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::get(p1.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNetp result= (oaFloatAppDef_oaNet::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaNet_FromoaFloatAppDef_oaNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaNet, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaNet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaNet_static_find,METH_VARARGS,oaFloatAppDef_oaNet_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaNet_static_get,METH_VARARGS,oaFloatAppDef_oaNet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaNet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaNet_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaNet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaNet",
           (PyObject*)(&PyoaFloatAppDef_oaNet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaNet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaNet_Type.tp_dict;
    for(method=oaFloatAppDef_oaNet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaNode
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaNode_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaNode_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaNodeObject* self = (PyoaFloatAppDef_oaNodeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaNode)
    {
        PyParamoaFloatAppDef_oaNode p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaNode_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaNode, Choices are:\n"
        "    (oaFloatAppDef_oaNode)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaNode_tp_dealloc(PyoaFloatAppDef_oaNodeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaNode_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaNode value;
    int convert_status=PyoaFloatAppDef_oaNode_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaNode::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaNode_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaNode v1;
    PyParamoaFloatAppDef_oaNode v2;
    int convert_status1=PyoaFloatAppDef_oaNode_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaNode_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaNode_Convert(PyObject* ob,PyParamoaFloatAppDef_oaNode* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaNode_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaNode**) ((PyoaFloatAppDef_oaNodeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaNode Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(oaFloatAppDef_oaNode** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaNode* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaNode_Type.tp_alloc(&PyoaFloatAppDef_oaNode_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaNodeObject* self = (PyoaFloatAppDef_oaNodeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(oaFloatAppDef_oaNode* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaNode_Type.tp_alloc(&PyoaFloatAppDef_oaNode_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaNodeObject* self = (PyoaFloatAppDef_oaNodeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_get_doc[] = 
"Class: oaFloatAppDef_oaNode, Function: get\n"
"  Paramegers: (oaNode)\n"
"    Calls: oaFloat get(const oaNode* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaNode,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaNode_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaNode data;
    int convert_status=PyoaFloatAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaNodeObject* self=(PyoaFloatAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNode p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNode_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_getDefault_doc[] = 
"Class: oaFloatAppDef_oaNode, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaNode_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaNode data;
    int convert_status=PyoaFloatAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaNodeObject* self=(PyoaFloatAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_set_doc[] = 
"Class: oaFloatAppDef_oaNode, Function: set\n"
"  Paramegers: (oaNode,oaFloat)\n"
"    Calls: void set(oaNode* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaNode,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaNode_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaNode data;
    int convert_status=PyoaFloatAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaNodeObject* self=(PyoaFloatAppDef_oaNodeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNode p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNode_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_isNull_doc[] =
"Class: oaFloatAppDef_oaNode, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaNode_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaNode data;
    int convert_status=PyoaFloatAppDef_oaNode_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaNode_assign_doc[] = 
"Class: oaFloatAppDef_oaNode, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaNode_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaNode data;
  int convert_status=PyoaFloatAppDef_oaNode_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaNode p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaNode_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaNode_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaNode_get,METH_VARARGS,oaFloatAppDef_oaNode_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaNode_getDefault,METH_VARARGS,oaFloatAppDef_oaNode_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaNode_set,METH_VARARGS,oaFloatAppDef_oaNode_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaNode_tp_isNull,METH_VARARGS,oaFloatAppDef_oaNode_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaNode_tp_assign,METH_VARARGS,oaFloatAppDef_oaNode_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_doc[] = 
"Class: oaFloatAppDef_oaNode\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaNode)\n"
"    Calls: (const oaFloatAppDef_oaNode&)\n"
"    Signature: oaFloatAppDef_oaNode||cref-oaFloatAppDef_oaNode,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaNode_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaNode",
    sizeof(PyoaFloatAppDef_oaNodeObject),
    0,
    (destructor)oaFloatAppDef_oaNode_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaNode_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaNode_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaNode_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaNode_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaNode_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_static_find_doc[] = 
"Class: oaFloatAppDef_oaNode, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaNode* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaNode|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaNode* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaNode|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaNode_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::find(p1.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaNode, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaNode_static_get_doc[] = 
"Class: oaFloatAppDef_oaNode, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaNode* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNode|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaNode* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNode|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaNode* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNode|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaNode* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNode|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaNode* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNode|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaNode* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaNode|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaNode_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::get(p1.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaNodep result= (oaFloatAppDef_oaNode::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaNode_FromoaFloatAppDef_oaNode(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaNode, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaNode_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaNode_static_find,METH_VARARGS,oaFloatAppDef_oaNode_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaNode_static_get,METH_VARARGS,oaFloatAppDef_oaNode_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaNode_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaNode_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaNode\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaNode",
           (PyObject*)(&PyoaFloatAppDef_oaNode_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaNode\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaNode_Type.tp_dict;
    for(method=oaFloatAppDef_oaNode_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccAssignmentObject* self = (PyoaFloatAppDef_oaOccAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccAssignment)
    {
        PyParamoaFloatAppDef_oaOccAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccAssignment, Choices are:\n"
        "    (oaFloatAppDef_oaOccAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccAssignment_tp_dealloc(PyoaFloatAppDef_oaOccAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccAssignment_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccAssignment value;
    int convert_status=PyoaFloatAppDef_oaOccAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaOccAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccAssignment v1;
    PyParamoaFloatAppDef_oaOccAssignment v2;
    int convert_status1=PyoaFloatAppDef_oaOccAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccAssignment_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccAssignment_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccAssignment**) ((PyoaFloatAppDef_oaOccAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(oaFloatAppDef_oaOccAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccAssignment* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccAssignment_Type.tp_alloc(&PyoaFloatAppDef_oaOccAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccAssignmentObject* self = (PyoaFloatAppDef_oaOccAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(oaFloatAppDef_oaOccAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccAssignment_Type.tp_alloc(&PyoaFloatAppDef_oaOccAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccAssignmentObject* self = (PyoaFloatAppDef_oaOccAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_get_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment, Function: get\n"
"  Paramegers: (oaOccAssignment)\n"
"    Calls: oaFloat get(const oaOccAssignment* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccAssignment,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccAssignment data;
    int convert_status=PyoaFloatAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccAssignmentObject* self=(PyoaFloatAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccAssignment data;
    int convert_status=PyoaFloatAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccAssignmentObject* self=(PyoaFloatAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_set_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment, Function: set\n"
"  Paramegers: (oaOccAssignment,oaFloat)\n"
"    Calls: void set(oaOccAssignment* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccAssignment,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccAssignment data;
    int convert_status=PyoaFloatAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccAssignmentObject* self=(PyoaFloatAppDef_oaOccAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccAssignment p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccAssignment_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_isNull_doc[] =
"Class: oaFloatAppDef_oaOccAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccAssignment data;
    int convert_status=PyoaFloatAppDef_oaOccAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccAssignment_assign_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccAssignment data;
  int convert_status=PyoaFloatAppDef_oaOccAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccAssignment_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccAssignment_get,METH_VARARGS,oaFloatAppDef_oaOccAssignment_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccAssignment_getDefault,METH_VARARGS,oaFloatAppDef_oaOccAssignment_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccAssignment_set,METH_VARARGS,oaFloatAppDef_oaOccAssignment_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccAssignment_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccAssignment_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccAssignment_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccAssignment)\n"
"    Calls: (const oaFloatAppDef_oaOccAssignment&)\n"
"    Signature: oaFloatAppDef_oaOccAssignment||cref-oaFloatAppDef_oaOccAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccAssignment",
    sizeof(PyoaFloatAppDef_oaOccAssignmentObject),
    0,
    (destructor)oaFloatAppDef_oaOccAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::find(p1.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccAssignment_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::get(p1.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccAssignmentp result= (oaFloatAppDef_oaOccAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccAssignment_FromoaFloatAppDef_oaOccAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccAssignment_static_find,METH_VARARGS,oaFloatAppDef_oaOccAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccAssignment_static_get,METH_VARARGS,oaFloatAppDef_oaOccAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccAssignment",
           (PyObject*)(&PyoaFloatAppDef_oaOccAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccAssignment_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccBusNetDefObject* self = (PyoaFloatAppDef_oaOccBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccBusNetDef)
    {
        PyParamoaFloatAppDef_oaOccBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccBusNetDef, Choices are:\n"
        "    (oaFloatAppDef_oaOccBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccBusNetDef_tp_dealloc(PyoaFloatAppDef_oaOccBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccBusNetDef value;
    int convert_status=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaFloatAppDef_oaOccBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccBusNetDef v1;
    PyParamoaFloatAppDef_oaOccBusNetDef v2;
    int convert_status1=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccBusNetDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccBusNetDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccBusNetDef**) ((PyoaFloatAppDef_oaOccBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(oaFloatAppDef_oaOccBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccBusNetDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccBusNetDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccBusNetDefObject* self = (PyoaFloatAppDef_oaOccBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(oaFloatAppDef_oaOccBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccBusNetDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccBusNetDefObject* self = (PyoaFloatAppDef_oaOccBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_get_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef, Function: get\n"
"  Paramegers: (oaOccBusNetDef)\n"
"    Calls: oaFloat get(const oaOccBusNetDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccBusNetDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccBusNetDefObject* self=(PyoaFloatAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccBusNetDefObject* self=(PyoaFloatAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_set_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef, Function: set\n"
"  Paramegers: (oaOccBusNetDef,oaFloat)\n"
"    Calls: void set(oaOccBusNetDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccBusNetDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccBusNetDefObject* self=(PyoaFloatAppDef_oaOccBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusNetDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusNetDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_isNull_doc[] =
"Class: oaFloatAppDef_oaOccBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccBusNetDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccBusNetDef_assign_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccBusNetDef data;
  int convert_status=PyoaFloatAppDef_oaOccBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_get,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_getDefault,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_set,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccBusNetDef)\n"
"    Calls: (const oaFloatAppDef_oaOccBusNetDef&)\n"
"    Signature: oaFloatAppDef_oaOccBusNetDef||cref-oaFloatAppDef_oaOccBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccBusNetDef",
    sizeof(PyoaFloatAppDef_oaOccBusNetDefObject),
    0,
    (destructor)oaFloatAppDef_oaOccBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::find(p1.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusNetDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::get(p1.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusNetDefp result= (oaFloatAppDef_oaOccBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccBusNetDef_FromoaFloatAppDef_oaOccBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_static_find,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccBusNetDef_static_get,METH_VARARGS,oaFloatAppDef_oaOccBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccBusNetDef",
           (PyObject*)(&PyoaFloatAppDef_oaOccBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccBusNetDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccBusTermDefObject* self = (PyoaFloatAppDef_oaOccBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccBusTermDef)
    {
        PyParamoaFloatAppDef_oaOccBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccBusTermDef, Choices are:\n"
        "    (oaFloatAppDef_oaOccBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccBusTermDef_tp_dealloc(PyoaFloatAppDef_oaOccBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccBusTermDef value;
    int convert_status=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaOccBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccBusTermDef v1;
    PyParamoaFloatAppDef_oaOccBusTermDef v2;
    int convert_status1=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccBusTermDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccBusTermDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccBusTermDef**) ((PyoaFloatAppDef_oaOccBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(oaFloatAppDef_oaOccBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccBusTermDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccBusTermDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccBusTermDefObject* self = (PyoaFloatAppDef_oaOccBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(oaFloatAppDef_oaOccBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccBusTermDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccBusTermDefObject* self = (PyoaFloatAppDef_oaOccBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_get_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef, Function: get\n"
"  Paramegers: (oaOccBusTermDef)\n"
"    Calls: oaFloat get(const oaOccBusTermDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccBusTermDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccBusTermDefObject* self=(PyoaFloatAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccBusTermDefObject* self=(PyoaFloatAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_set_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef, Function: set\n"
"  Paramegers: (oaOccBusTermDef,oaFloat)\n"
"    Calls: void set(oaOccBusTermDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccBusTermDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccBusTermDefObject* self=(PyoaFloatAppDef_oaOccBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccBusTermDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccBusTermDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_isNull_doc[] =
"Class: oaFloatAppDef_oaOccBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccBusTermDef data;
    int convert_status=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccBusTermDef_assign_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccBusTermDef data;
  int convert_status=PyoaFloatAppDef_oaOccBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_get,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_getDefault,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_set,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccBusTermDef)\n"
"    Calls: (const oaFloatAppDef_oaOccBusTermDef&)\n"
"    Signature: oaFloatAppDef_oaOccBusTermDef||cref-oaFloatAppDef_oaOccBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccBusTermDef",
    sizeof(PyoaFloatAppDef_oaOccBusTermDefObject),
    0,
    (destructor)oaFloatAppDef_oaOccBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::find(p1.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccBusTermDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::get(p1.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccBusTermDefp result= (oaFloatAppDef_oaOccBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccBusTermDef_FromoaFloatAppDef_oaOccBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_static_find,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccBusTermDef_static_get,METH_VARARGS,oaFloatAppDef_oaOccBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccBusTermDef",
           (PyObject*)(&PyoaFloatAppDef_oaOccBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccBusTermDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccConnectDefObject* self = (PyoaFloatAppDef_oaOccConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccConnectDef)
    {
        PyParamoaFloatAppDef_oaOccConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccConnectDef, Choices are:\n"
        "    (oaFloatAppDef_oaOccConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccConnectDef_tp_dealloc(PyoaFloatAppDef_oaOccConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccConnectDef value;
    int convert_status=PyoaFloatAppDef_oaOccConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaOccConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccConnectDef v1;
    PyParamoaFloatAppDef_oaOccConnectDef v2;
    int convert_status1=PyoaFloatAppDef_oaOccConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccConnectDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccConnectDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccConnectDef**) ((PyoaFloatAppDef_oaOccConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(oaFloatAppDef_oaOccConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccConnectDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccConnectDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccConnectDefObject* self = (PyoaFloatAppDef_oaOccConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(oaFloatAppDef_oaOccConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccConnectDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccConnectDefObject* self = (PyoaFloatAppDef_oaOccConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_get_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef, Function: get\n"
"  Paramegers: (oaOccConnectDef)\n"
"    Calls: oaFloat get(const oaOccConnectDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccConnectDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccConnectDef data;
    int convert_status=PyoaFloatAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccConnectDefObject* self=(PyoaFloatAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccConnectDef data;
    int convert_status=PyoaFloatAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccConnectDefObject* self=(PyoaFloatAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_set_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef, Function: set\n"
"  Paramegers: (oaOccConnectDef,oaFloat)\n"
"    Calls: void set(oaOccConnectDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccConnectDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccConnectDef data;
    int convert_status=PyoaFloatAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccConnectDefObject* self=(PyoaFloatAppDef_oaOccConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccConnectDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccConnectDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_isNull_doc[] =
"Class: oaFloatAppDef_oaOccConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccConnectDef data;
    int convert_status=PyoaFloatAppDef_oaOccConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccConnectDef_assign_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccConnectDef data;
  int convert_status=PyoaFloatAppDef_oaOccConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccConnectDef_get,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccConnectDef_getDefault,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccConnectDef_set,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccConnectDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccConnectDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccConnectDef)\n"
"    Calls: (const oaFloatAppDef_oaOccConnectDef&)\n"
"    Signature: oaFloatAppDef_oaOccConnectDef||cref-oaFloatAppDef_oaOccConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccConnectDef",
    sizeof(PyoaFloatAppDef_oaOccConnectDefObject),
    0,
    (destructor)oaFloatAppDef_oaOccConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::find(p1.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccConnectDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::get(p1.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccConnectDefp result= (oaFloatAppDef_oaOccConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccConnectDef_FromoaFloatAppDef_oaOccConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccConnectDef_static_find,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccConnectDef_static_get,METH_VARARGS,oaFloatAppDef_oaOccConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccConnectDef",
           (PyObject*)(&PyoaFloatAppDef_oaOccConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccConnectDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccInstObject* self = (PyoaFloatAppDef_oaOccInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccInst)
    {
        PyParamoaFloatAppDef_oaOccInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccInst, Choices are:\n"
        "    (oaFloatAppDef_oaOccInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccInst_tp_dealloc(PyoaFloatAppDef_oaOccInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccInst_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccInst value;
    int convert_status=PyoaFloatAppDef_oaOccInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaOccInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccInst v1;
    PyParamoaFloatAppDef_oaOccInst v2;
    int convert_status1=PyoaFloatAppDef_oaOccInst_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccInst_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccInst_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccInst**) ((PyoaFloatAppDef_oaOccInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(oaFloatAppDef_oaOccInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccInst* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccInst_Type.tp_alloc(&PyoaFloatAppDef_oaOccInst_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccInstObject* self = (PyoaFloatAppDef_oaOccInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(oaFloatAppDef_oaOccInst* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccInst_Type.tp_alloc(&PyoaFloatAppDef_oaOccInst_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccInstObject* self = (PyoaFloatAppDef_oaOccInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_get_doc[] = 
"Class: oaFloatAppDef_oaOccInst, Function: get\n"
"  Paramegers: (oaOccInst)\n"
"    Calls: oaFloat get(const oaOccInst* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccInst,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInst data;
    int convert_status=PyoaFloatAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstObject* self=(PyoaFloatAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInst data;
    int convert_status=PyoaFloatAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstObject* self=(PyoaFloatAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_set_doc[] = 
"Class: oaFloatAppDef_oaOccInst, Function: set\n"
"  Paramegers: (oaOccInst,oaFloat)\n"
"    Calls: void set(oaOccInst* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccInst,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInst data;
    int convert_status=PyoaFloatAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstObject* self=(PyoaFloatAppDef_oaOccInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInst p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInst_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_isNull_doc[] =
"Class: oaFloatAppDef_oaOccInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccInst data;
    int convert_status=PyoaFloatAppDef_oaOccInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccInst_assign_doc[] = 
"Class: oaFloatAppDef_oaOccInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccInst data;
  int convert_status=PyoaFloatAppDef_oaOccInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccInst_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccInst_get,METH_VARARGS,oaFloatAppDef_oaOccInst_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccInst_getDefault,METH_VARARGS,oaFloatAppDef_oaOccInst_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccInst_set,METH_VARARGS,oaFloatAppDef_oaOccInst_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccInst_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccInst_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccInst_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_doc[] = 
"Class: oaFloatAppDef_oaOccInst\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccInst)\n"
"    Calls: (const oaFloatAppDef_oaOccInst&)\n"
"    Signature: oaFloatAppDef_oaOccInst||cref-oaFloatAppDef_oaOccInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccInst",
    sizeof(PyoaFloatAppDef_oaOccInstObject),
    0,
    (destructor)oaFloatAppDef_oaOccInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccInst_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccInst|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::find(p1.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInst_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccInst* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccInst* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::get(p1.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstp result= (oaFloatAppDef_oaOccInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccInst_FromoaFloatAppDef_oaOccInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccInst_static_find,METH_VARARGS,oaFloatAppDef_oaOccInst_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccInst_static_get,METH_VARARGS,oaFloatAppDef_oaOccInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccInst_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccInst",
           (PyObject*)(&PyoaFloatAppDef_oaOccInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccInst_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccInstHeaderObject* self = (PyoaFloatAppDef_oaOccInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccInstHeader)
    {
        PyParamoaFloatAppDef_oaOccInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccInstHeader, Choices are:\n"
        "    (oaFloatAppDef_oaOccInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccInstHeader_tp_dealloc(PyoaFloatAppDef_oaOccInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccInstHeader value;
    int convert_status=PyoaFloatAppDef_oaOccInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaOccInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccInstHeader v1;
    PyParamoaFloatAppDef_oaOccInstHeader v2;
    int convert_status1=PyoaFloatAppDef_oaOccInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccInstHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccInstHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccInstHeader**) ((PyoaFloatAppDef_oaOccInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(oaFloatAppDef_oaOccInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccInstHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaOccInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccInstHeaderObject* self = (PyoaFloatAppDef_oaOccInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(oaFloatAppDef_oaOccInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaOccInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccInstHeaderObject* self = (PyoaFloatAppDef_oaOccInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_get_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader, Function: get\n"
"  Paramegers: (oaOccInstHeader)\n"
"    Calls: oaFloat get(const oaOccInstHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccInstHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstHeaderObject* self=(PyoaFloatAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstHeaderObject* self=(PyoaFloatAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_set_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader, Function: set\n"
"  Paramegers: (oaOccInstHeader,oaFloat)\n"
"    Calls: void set(oaOccInstHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccInstHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstHeaderObject* self=(PyoaFloatAppDef_oaOccInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaOccInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccInstHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccInstHeader data;
  int convert_status=PyoaFloatAppDef_oaOccInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccInstHeader_get,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccInstHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccInstHeader_set,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccInstHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccInstHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccInstHeader)\n"
"    Calls: (const oaFloatAppDef_oaOccInstHeader&)\n"
"    Signature: oaFloatAppDef_oaOccInstHeader||cref-oaFloatAppDef_oaOccInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccInstHeader",
    sizeof(PyoaFloatAppDef_oaOccInstHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaOccInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstHeaderp result= (oaFloatAppDef_oaOccInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccInstHeader_FromoaFloatAppDef_oaOccInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccInstHeader_static_find,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccInstHeader_static_get,METH_VARARGS,oaFloatAppDef_oaOccInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccInstHeader",
           (PyObject*)(&PyoaFloatAppDef_oaOccInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccInstHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccInstTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccInstTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccInstTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccInstTermObject* self = (PyoaFloatAppDef_oaOccInstTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccInstTerm)
    {
        PyParamoaFloatAppDef_oaOccInstTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccInstTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccInstTerm, Choices are:\n"
        "    (oaFloatAppDef_oaOccInstTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccInstTerm_tp_dealloc(PyoaFloatAppDef_oaOccInstTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccInstTerm_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccInstTerm value;
    int convert_status=PyoaFloatAppDef_oaOccInstTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaFloatAppDef_oaOccInstTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccInstTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccInstTerm v1;
    PyParamoaFloatAppDef_oaOccInstTerm v2;
    int convert_status1=PyoaFloatAppDef_oaOccInstTerm_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccInstTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccInstTerm_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccInstTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccInstTerm_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccInstTerm**) ((PyoaFloatAppDef_oaOccInstTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccInstTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(oaFloatAppDef_oaOccInstTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccInstTerm* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccInstTerm_Type.tp_alloc(&PyoaFloatAppDef_oaOccInstTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccInstTermObject* self = (PyoaFloatAppDef_oaOccInstTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(oaFloatAppDef_oaOccInstTerm* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccInstTerm_Type.tp_alloc(&PyoaFloatAppDef_oaOccInstTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccInstTermObject* self = (PyoaFloatAppDef_oaOccInstTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_get_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm, Function: get\n"
"  Paramegers: (oaOccInstTerm)\n"
"    Calls: oaFloat get(const oaOccInstTerm* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccInstTerm,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInstTerm data;
    int convert_status=PyoaFloatAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstTermObject* self=(PyoaFloatAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccInstTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInstTerm data;
    int convert_status=PyoaFloatAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstTermObject* self=(PyoaFloatAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_set_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm, Function: set\n"
"  Paramegers: (oaOccInstTerm,oaFloat)\n"
"    Calls: void set(oaOccInstTerm* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccInstTerm,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccInstTerm data;
    int convert_status=PyoaFloatAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccInstTermObject* self=(PyoaFloatAppDef_oaOccInstTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccInstTerm p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccInstTerm_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_isNull_doc[] =
"Class: oaFloatAppDef_oaOccInstTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccInstTerm data;
    int convert_status=PyoaFloatAppDef_oaOccInstTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccInstTerm_assign_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccInstTerm data;
  int convert_status=PyoaFloatAppDef_oaOccInstTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccInstTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccInstTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccInstTerm_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccInstTerm_get,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccInstTerm_getDefault,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccInstTerm_set,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccInstTerm_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccInstTerm_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccInstTerm)\n"
"    Calls: (const oaFloatAppDef_oaOccInstTerm&)\n"
"    Signature: oaFloatAppDef_oaOccInstTerm||cref-oaFloatAppDef_oaOccInstTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccInstTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccInstTerm",
    sizeof(PyoaFloatAppDef_oaOccInstTermObject),
    0,
    (destructor)oaFloatAppDef_oaOccInstTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccInstTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccInstTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccInstTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccInstTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccInstTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::find(p1.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccInstTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccInstTerm_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccInstTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccInstTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccInstTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccInstTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::get(p1.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccInstTermp result= (oaFloatAppDef_oaOccInstTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccInstTerm_FromoaFloatAppDef_oaOccInstTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccInstTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccInstTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccInstTerm_static_find,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccInstTerm_static_get,METH_VARARGS,oaFloatAppDef_oaOccInstTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccInstTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccInstTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccInstTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccInstTerm",
           (PyObject*)(&PyoaFloatAppDef_oaOccInstTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccInstTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccInstTerm_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccInstTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccModuleInstHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccModuleInstHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccModuleInstHeaderObject* self = (PyoaFloatAppDef_oaOccModuleInstHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccModuleInstHeader)
    {
        PyParamoaFloatAppDef_oaOccModuleInstHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccModuleInstHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccModuleInstHeader, Choices are:\n"
        "    (oaFloatAppDef_oaOccModuleInstHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccModuleInstHeader_tp_dealloc(PyoaFloatAppDef_oaOccModuleInstHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccModuleInstHeader value;
    int convert_status=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[57];
    sprintf(buffer,"<oaFloatAppDef_oaOccModuleInstHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccModuleInstHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccModuleInstHeader v1;
    PyParamoaFloatAppDef_oaOccModuleInstHeader v2;
    int convert_status1=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccModuleInstHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccModuleInstHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccModuleInstHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccModuleInstHeader**) ((PyoaFloatAppDef_oaOccModuleInstHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccModuleInstHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(oaFloatAppDef_oaOccModuleInstHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccModuleInstHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccModuleInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaOccModuleInstHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccModuleInstHeaderObject* self = (PyoaFloatAppDef_oaOccModuleInstHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(oaFloatAppDef_oaOccModuleInstHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccModuleInstHeader_Type.tp_alloc(&PyoaFloatAppDef_oaOccModuleInstHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccModuleInstHeaderObject* self = (PyoaFloatAppDef_oaOccModuleInstHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_get_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: get\n"
"  Paramegers: (oaOccModuleInstHeader)\n"
"    Calls: oaFloat get(const oaOccModuleInstHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccModuleInstHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccModuleInstHeaderObject* self=(PyoaFloatAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccModuleInstHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccModuleInstHeaderObject* self=(PyoaFloatAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_set_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: set\n"
"  Paramegers: (oaOccModuleInstHeader,oaFloat)\n"
"    Calls: void set(oaOccModuleInstHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccModuleInstHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccModuleInstHeaderObject* self=(PyoaFloatAppDef_oaOccModuleInstHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccModuleInstHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccModuleInstHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccModuleInstHeader data;
    int convert_status=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccModuleInstHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccModuleInstHeader data;
  int convert_status=PyoaFloatAppDef_oaOccModuleInstHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccModuleInstHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccModuleInstHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccModuleInstHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_get,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_set,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccModuleInstHeader)\n"
"    Calls: (const oaFloatAppDef_oaOccModuleInstHeader&)\n"
"    Signature: oaFloatAppDef_oaOccModuleInstHeader||cref-oaFloatAppDef_oaOccModuleInstHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccModuleInstHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccModuleInstHeader",
    sizeof(PyoaFloatAppDef_oaOccModuleInstHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaOccModuleInstHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccModuleInstHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccModuleInstHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccModuleInstHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccModuleInstHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccModuleInstHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccModuleInstHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccModuleInstHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccModuleInstHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccModuleInstHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccModuleInstHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccModuleInstHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccModuleInstHeaderp result= (oaFloatAppDef_oaOccModuleInstHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccModuleInstHeader_FromoaFloatAppDef_oaOccModuleInstHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccModuleInstHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccModuleInstHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_static_find,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccModuleInstHeader_static_get,METH_VARARGS,oaFloatAppDef_oaOccModuleInstHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccModuleInstHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccModuleInstHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccModuleInstHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccModuleInstHeader",
           (PyObject*)(&PyoaFloatAppDef_oaOccModuleInstHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccModuleInstHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccModuleInstHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccModuleInstHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccNet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccNet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccNet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccNetObject* self = (PyoaFloatAppDef_oaOccNetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccNet)
    {
        PyParamoaFloatAppDef_oaOccNet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccNet_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccNet, Choices are:\n"
        "    (oaFloatAppDef_oaOccNet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccNet_tp_dealloc(PyoaFloatAppDef_oaOccNetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccNet_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccNet value;
    int convert_status=PyoaFloatAppDef_oaOccNet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaOccNet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccNet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccNet v1;
    PyParamoaFloatAppDef_oaOccNet v2;
    int convert_status1=PyoaFloatAppDef_oaOccNet_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccNet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccNet_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccNet* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccNet_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccNet**) ((PyoaFloatAppDef_oaOccNetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccNet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(oaFloatAppDef_oaOccNet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccNet* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccNet_Type.tp_alloc(&PyoaFloatAppDef_oaOccNet_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccNetObject* self = (PyoaFloatAppDef_oaOccNetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(oaFloatAppDef_oaOccNet* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccNet_Type.tp_alloc(&PyoaFloatAppDef_oaOccNet_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccNetObject* self = (PyoaFloatAppDef_oaOccNetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_get_doc[] = 
"Class: oaFloatAppDef_oaOccNet, Function: get\n"
"  Paramegers: (oaOccNet)\n"
"    Calls: oaFloat get(const oaOccNet* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccNet,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccNet data;
    int convert_status=PyoaFloatAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccNetObject* self=(PyoaFloatAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccNet, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccNet data;
    int convert_status=PyoaFloatAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccNetObject* self=(PyoaFloatAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_set_doc[] = 
"Class: oaFloatAppDef_oaOccNet, Function: set\n"
"  Paramegers: (oaOccNet,oaFloat)\n"
"    Calls: void set(oaOccNet* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccNet,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccNet data;
    int convert_status=PyoaFloatAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccNetObject* self=(PyoaFloatAppDef_oaOccNetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccNet p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccNet_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_isNull_doc[] =
"Class: oaFloatAppDef_oaOccNet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccNet data;
    int convert_status=PyoaFloatAppDef_oaOccNet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccNet_assign_doc[] = 
"Class: oaFloatAppDef_oaOccNet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccNet data;
  int convert_status=PyoaFloatAppDef_oaOccNet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccNet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccNet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccNet_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccNet_get,METH_VARARGS,oaFloatAppDef_oaOccNet_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccNet_getDefault,METH_VARARGS,oaFloatAppDef_oaOccNet_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccNet_set,METH_VARARGS,oaFloatAppDef_oaOccNet_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccNet_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccNet_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccNet_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccNet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_doc[] = 
"Class: oaFloatAppDef_oaOccNet\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccNet)\n"
"    Calls: (const oaFloatAppDef_oaOccNet&)\n"
"    Signature: oaFloatAppDef_oaOccNet||cref-oaFloatAppDef_oaOccNet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccNet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccNet",
    sizeof(PyoaFloatAppDef_oaOccNetObject),
    0,
    (destructor)oaFloatAppDef_oaOccNet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccNet_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccNet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccNet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccNet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccNet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccNet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccNet* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccNet|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccNet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccNet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::find(p1.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccNet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccNet_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccNet, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccNet* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccNet* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccNet* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccNet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccNet* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccNet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccNet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccNet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccNet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::get(p1.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccNetp result= (oaFloatAppDef_oaOccNet::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccNet_FromoaFloatAppDef_oaOccNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccNet, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccNet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccNet_static_find,METH_VARARGS,oaFloatAppDef_oaOccNet_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccNet_static_get,METH_VARARGS,oaFloatAppDef_oaOccNet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccNet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccNet_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccNet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccNet",
           (PyObject*)(&PyoaFloatAppDef_oaOccNet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccNet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccNet_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccNet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccShape
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccShape_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccShape_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccShapeObject* self = (PyoaFloatAppDef_oaOccShapeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccShape)
    {
        PyParamoaFloatAppDef_oaOccShape p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccShape_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccShape, Choices are:\n"
        "    (oaFloatAppDef_oaOccShape)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccShape_tp_dealloc(PyoaFloatAppDef_oaOccShapeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccShape_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccShape value;
    int convert_status=PyoaFloatAppDef_oaOccShape_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaFloatAppDef_oaOccShape::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccShape_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccShape v1;
    PyParamoaFloatAppDef_oaOccShape v2;
    int convert_status1=PyoaFloatAppDef_oaOccShape_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccShape_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccShape_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccShape* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccShape_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccShape**) ((PyoaFloatAppDef_oaOccShapeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccShape Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(oaFloatAppDef_oaOccShape** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccShape* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccShape_Type.tp_alloc(&PyoaFloatAppDef_oaOccShape_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccShapeObject* self = (PyoaFloatAppDef_oaOccShapeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(oaFloatAppDef_oaOccShape* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccShape_Type.tp_alloc(&PyoaFloatAppDef_oaOccShape_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccShapeObject* self = (PyoaFloatAppDef_oaOccShapeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_get_doc[] = 
"Class: oaFloatAppDef_oaOccShape, Function: get\n"
"  Paramegers: (oaOccShape)\n"
"    Calls: oaFloat get(const oaOccShape* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccShape,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccShape data;
    int convert_status=PyoaFloatAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccShapeObject* self=(PyoaFloatAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccShape p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccShape_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccShape, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccShape data;
    int convert_status=PyoaFloatAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccShapeObject* self=(PyoaFloatAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_set_doc[] = 
"Class: oaFloatAppDef_oaOccShape, Function: set\n"
"  Paramegers: (oaOccShape,oaFloat)\n"
"    Calls: void set(oaOccShape* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccShape,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccShape data;
    int convert_status=PyoaFloatAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccShapeObject* self=(PyoaFloatAppDef_oaOccShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccShape p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccShape_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_isNull_doc[] =
"Class: oaFloatAppDef_oaOccShape, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccShape data;
    int convert_status=PyoaFloatAppDef_oaOccShape_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccShape_assign_doc[] = 
"Class: oaFloatAppDef_oaOccShape, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccShape data;
  int convert_status=PyoaFloatAppDef_oaOccShape_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccShape p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccShape_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccShape_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccShape_get,METH_VARARGS,oaFloatAppDef_oaOccShape_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccShape_getDefault,METH_VARARGS,oaFloatAppDef_oaOccShape_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccShape_set,METH_VARARGS,oaFloatAppDef_oaOccShape_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccShape_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccShape_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccShape_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccShape_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_doc[] = 
"Class: oaFloatAppDef_oaOccShape\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccShape)\n"
"    Calls: (const oaFloatAppDef_oaOccShape&)\n"
"    Signature: oaFloatAppDef_oaOccShape||cref-oaFloatAppDef_oaOccShape,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccShape_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccShape",
    sizeof(PyoaFloatAppDef_oaOccShapeObject),
    0,
    (destructor)oaFloatAppDef_oaOccShape_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccShape_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccShape_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccShape_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccShape_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccShape_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccShape, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccShape* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccShape|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccShape* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccShape|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::find(p1.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccShape, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccShape_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccShape, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccShape* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccShape|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccShape* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccShape|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccShape* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccShape|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccShape* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccShape|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccShape* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccShape|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccShape* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccShape|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccShape_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::get(p1.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccShapep result= (oaFloatAppDef_oaOccShape::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccShape_FromoaFloatAppDef_oaOccShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccShape, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccShape_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccShape_static_find,METH_VARARGS,oaFloatAppDef_oaOccShape_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccShape_static_get,METH_VARARGS,oaFloatAppDef_oaOccShape_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccShape_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccShape_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccShape\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccShape",
           (PyObject*)(&PyoaFloatAppDef_oaOccShape_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccShape\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccShape_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccShape_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccTermObject* self = (PyoaFloatAppDef_oaOccTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccTerm)
    {
        PyParamoaFloatAppDef_oaOccTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccTerm, Choices are:\n"
        "    (oaFloatAppDef_oaOccTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccTerm_tp_dealloc(PyoaFloatAppDef_oaOccTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccTerm_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccTerm value;
    int convert_status=PyoaFloatAppDef_oaOccTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaOccTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccTerm v1;
    PyParamoaFloatAppDef_oaOccTerm v2;
    int convert_status1=PyoaFloatAppDef_oaOccTerm_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccTerm_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccTerm_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccTerm**) ((PyoaFloatAppDef_oaOccTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(oaFloatAppDef_oaOccTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccTerm* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccTerm_Type.tp_alloc(&PyoaFloatAppDef_oaOccTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccTermObject* self = (PyoaFloatAppDef_oaOccTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(oaFloatAppDef_oaOccTerm* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccTerm_Type.tp_alloc(&PyoaFloatAppDef_oaOccTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccTermObject* self = (PyoaFloatAppDef_oaOccTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_get_doc[] = 
"Class: oaFloatAppDef_oaOccTerm, Function: get\n"
"  Paramegers: (oaOccTerm)\n"
"    Calls: oaFloat get(const oaOccTerm* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccTerm,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccTerm data;
    int convert_status=PyoaFloatAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccTermObject* self=(PyoaFloatAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccTerm data;
    int convert_status=PyoaFloatAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccTermObject* self=(PyoaFloatAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_set_doc[] = 
"Class: oaFloatAppDef_oaOccTerm, Function: set\n"
"  Paramegers: (oaOccTerm,oaFloat)\n"
"    Calls: void set(oaOccTerm* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccTerm,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccTerm data;
    int convert_status=PyoaFloatAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccTermObject* self=(PyoaFloatAppDef_oaOccTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccTerm p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccTerm_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_isNull_doc[] =
"Class: oaFloatAppDef_oaOccTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccTerm data;
    int convert_status=PyoaFloatAppDef_oaOccTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccTerm_assign_doc[] = 
"Class: oaFloatAppDef_oaOccTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccTerm data;
  int convert_status=PyoaFloatAppDef_oaOccTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccTerm_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccTerm_get,METH_VARARGS,oaFloatAppDef_oaOccTerm_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccTerm_getDefault,METH_VARARGS,oaFloatAppDef_oaOccTerm_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccTerm_set,METH_VARARGS,oaFloatAppDef_oaOccTerm_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccTerm_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccTerm_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccTerm_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_doc[] = 
"Class: oaFloatAppDef_oaOccTerm\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccTerm)\n"
"    Calls: (const oaFloatAppDef_oaOccTerm&)\n"
"    Signature: oaFloatAppDef_oaOccTerm||cref-oaFloatAppDef_oaOccTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccTerm",
    sizeof(PyoaFloatAppDef_oaOccTermObject),
    0,
    (destructor)oaFloatAppDef_oaOccTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::find(p1.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccTerm_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccTerm* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccTerm* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::get(p1.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccTermp result= (oaFloatAppDef_oaOccTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccTerm_FromoaFloatAppDef_oaOccTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccTerm_static_find,METH_VARARGS,oaFloatAppDef_oaOccTerm_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccTerm_static_get,METH_VARARGS,oaFloatAppDef_oaOccTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccTerm",
           (PyObject*)(&PyoaFloatAppDef_oaOccTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccTerm_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccVectorInstDefObject* self = (PyoaFloatAppDef_oaOccVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccVectorInstDef)
    {
        PyParamoaFloatAppDef_oaOccVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccVectorInstDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccVectorInstDef, Choices are:\n"
        "    (oaFloatAppDef_oaOccVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccVectorInstDef_tp_dealloc(PyoaFloatAppDef_oaOccVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccVectorInstDef value;
    int convert_status=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaFloatAppDef_oaOccVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccVectorInstDef v1;
    PyParamoaFloatAppDef_oaOccVectorInstDef v2;
    int convert_status1=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccVectorInstDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccVectorInstDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccVectorInstDef**) ((PyoaFloatAppDef_oaOccVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(oaFloatAppDef_oaOccVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccVectorInstDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccVectorInstDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccVectorInstDefObject* self = (PyoaFloatAppDef_oaOccVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(oaFloatAppDef_oaOccVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccVectorInstDef_Type.tp_alloc(&PyoaFloatAppDef_oaOccVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccVectorInstDefObject* self = (PyoaFloatAppDef_oaOccVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_get_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: get\n"
"  Paramegers: (oaOccVectorInstDef)\n"
"    Calls: oaFloat get(const oaOccVectorInstDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccVectorInstDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccVectorInstDefObject* self=(PyoaFloatAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccVectorInstDefObject* self=(PyoaFloatAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_set_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: set\n"
"  Paramegers: (oaOccVectorInstDef,oaFloat)\n"
"    Calls: void set(oaOccVectorInstDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccVectorInstDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccVectorInstDefObject* self=(PyoaFloatAppDef_oaOccVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccVectorInstDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccVectorInstDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_isNull_doc[] =
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccVectorInstDef_assign_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccVectorInstDef data;
  int convert_status=PyoaFloatAppDef_oaOccVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_get,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_getDefault,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_set,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccVectorInstDef)\n"
"    Calls: (const oaFloatAppDef_oaOccVectorInstDef&)\n"
"    Signature: oaFloatAppDef_oaOccVectorInstDef||cref-oaFloatAppDef_oaOccVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccVectorInstDef",
    sizeof(PyoaFloatAppDef_oaOccVectorInstDefObject),
    0,
    (destructor)oaFloatAppDef_oaOccVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::find(p1.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccVectorInstDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccVectorInstDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::get(p1.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccVectorInstDefp result= (oaFloatAppDef_oaOccVectorInstDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccVectorInstDef_FromoaFloatAppDef_oaOccVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccVectorInstDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_static_find,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccVectorInstDef_static_get,METH_VARARGS,oaFloatAppDef_oaOccVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccVectorInstDef",
           (PyObject*)(&PyoaFloatAppDef_oaOccVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccVectorInstDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOccurrence
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccurrence_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOccurrence_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOccurrenceObject* self = (PyoaFloatAppDef_oaOccurrenceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOccurrence)
    {
        PyParamoaFloatAppDef_oaOccurrence p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOccurrence_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOccurrence, Choices are:\n"
        "    (oaFloatAppDef_oaOccurrence)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOccurrence_tp_dealloc(PyoaFloatAppDef_oaOccurrenceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOccurrence_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOccurrence value;
    int convert_status=PyoaFloatAppDef_oaOccurrence_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaOccurrence::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOccurrence_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOccurrence v1;
    PyParamoaFloatAppDef_oaOccurrence v2;
    int convert_status1=PyoaFloatAppDef_oaOccurrence_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOccurrence_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOccurrence_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOccurrence* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOccurrence_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOccurrence**) ((PyoaFloatAppDef_oaOccurrenceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOccurrence Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(oaFloatAppDef_oaOccurrence** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOccurrence* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOccurrence_Type.tp_alloc(&PyoaFloatAppDef_oaOccurrence_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOccurrenceObject* self = (PyoaFloatAppDef_oaOccurrenceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(oaFloatAppDef_oaOccurrence* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOccurrence_Type.tp_alloc(&PyoaFloatAppDef_oaOccurrence_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOccurrenceObject* self = (PyoaFloatAppDef_oaOccurrenceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_get_doc[] = 
"Class: oaFloatAppDef_oaOccurrence, Function: get\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: oaFloat get(const oaOccurrence* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOccurrence,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccurrence data;
    int convert_status=PyoaFloatAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccurrenceObject* self=(PyoaFloatAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOccurrence, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccurrence data;
    int convert_status=PyoaFloatAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccurrenceObject* self=(PyoaFloatAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_set_doc[] = 
"Class: oaFloatAppDef_oaOccurrence, Function: set\n"
"  Paramegers: (oaOccurrence,oaFloat)\n"
"    Calls: void set(oaOccurrence* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOccurrence,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOccurrence data;
    int convert_status=PyoaFloatAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOccurrenceObject* self=(PyoaFloatAppDef_oaOccurrenceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccurrence p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOccurrence_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_isNull_doc[] =
"Class: oaFloatAppDef_oaOccurrence, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOccurrence data;
    int convert_status=PyoaFloatAppDef_oaOccurrence_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOccurrence_assign_doc[] = 
"Class: oaFloatAppDef_oaOccurrence, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOccurrence data;
  int convert_status=PyoaFloatAppDef_oaOccurrence_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOccurrence p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOccurrence_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOccurrence_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOccurrence_get,METH_VARARGS,oaFloatAppDef_oaOccurrence_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOccurrence_getDefault,METH_VARARGS,oaFloatAppDef_oaOccurrence_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOccurrence_set,METH_VARARGS,oaFloatAppDef_oaOccurrence_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOccurrence_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOccurrence_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOccurrence_tp_assign,METH_VARARGS,oaFloatAppDef_oaOccurrence_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_doc[] = 
"Class: oaFloatAppDef_oaOccurrence\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOccurrence)\n"
"    Calls: (const oaFloatAppDef_oaOccurrence&)\n"
"    Signature: oaFloatAppDef_oaOccurrence||cref-oaFloatAppDef_oaOccurrence,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOccurrence_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOccurrence",
    sizeof(PyoaFloatAppDef_oaOccurrenceObject),
    0,
    (destructor)oaFloatAppDef_oaOccurrence_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOccurrence_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOccurrence_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOccurrence_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOccurrence_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOccurrence_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_static_find_doc[] = 
"Class: oaFloatAppDef_oaOccurrence, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccurrence* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccurrence* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::find(p1.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccurrence, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOccurrence_static_get_doc[] = 
"Class: oaFloatAppDef_oaOccurrence, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOccurrence* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccurrence* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccurrence* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOccurrence* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOccurrence* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOccurrence* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOccurrence|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOccurrence_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::get(p1.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOccurrencep result= (oaFloatAppDef_oaOccurrence::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOccurrence_FromoaFloatAppDef_oaOccurrence(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOccurrence, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOccurrence_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOccurrence_static_find,METH_VARARGS,oaFloatAppDef_oaOccurrence_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOccurrence_static_get,METH_VARARGS,oaFloatAppDef_oaOccurrence_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOccurrence_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOccurrence_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOccurrence\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOccurrence",
           (PyObject*)(&PyoaFloatAppDef_oaOccurrence_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOccurrence\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOccurrence_Type.tp_dict;
    for(method=oaFloatAppDef_oaOccurrence_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaOpPointHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOpPointHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaOpPointHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaOpPointHeaderObject* self = (PyoaFloatAppDef_oaOpPointHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaOpPointHeader)
    {
        PyParamoaFloatAppDef_oaOpPointHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaOpPointHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaOpPointHeader, Choices are:\n"
        "    (oaFloatAppDef_oaOpPointHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaOpPointHeader_tp_dealloc(PyoaFloatAppDef_oaOpPointHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaOpPointHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaOpPointHeader value;
    int convert_status=PyoaFloatAppDef_oaOpPointHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaOpPointHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaOpPointHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaOpPointHeader v1;
    PyParamoaFloatAppDef_oaOpPointHeader v2;
    int convert_status1=PyoaFloatAppDef_oaOpPointHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaOpPointHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaOpPointHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaOpPointHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaOpPointHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaOpPointHeader**) ((PyoaFloatAppDef_oaOpPointHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaOpPointHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(oaFloatAppDef_oaOpPointHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaOpPointHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaOpPointHeader_Type.tp_alloc(&PyoaFloatAppDef_oaOpPointHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaOpPointHeaderObject* self = (PyoaFloatAppDef_oaOpPointHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(oaFloatAppDef_oaOpPointHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaOpPointHeader_Type.tp_alloc(&PyoaFloatAppDef_oaOpPointHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaOpPointHeaderObject* self = (PyoaFloatAppDef_oaOpPointHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_get_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader, Function: get\n"
"  Paramegers: (oaOpPointHeader)\n"
"    Calls: oaFloat get(const oaOpPointHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaOpPointHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOpPointHeader data;
    int convert_status=PyoaFloatAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOpPointHeaderObject* self=(PyoaFloatAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOpPointHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOpPointHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOpPointHeader data;
    int convert_status=PyoaFloatAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOpPointHeaderObject* self=(PyoaFloatAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_set_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader, Function: set\n"
"  Paramegers: (oaOpPointHeader,oaFloat)\n"
"    Calls: void set(oaOpPointHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaOpPointHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaOpPointHeader data;
    int convert_status=PyoaFloatAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaOpPointHeaderObject* self=(PyoaFloatAppDef_oaOpPointHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOpPointHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaOpPointHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaOpPointHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaOpPointHeader data;
    int convert_status=PyoaFloatAppDef_oaOpPointHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaOpPointHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaOpPointHeader data;
  int convert_status=PyoaFloatAppDef_oaOpPointHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaOpPointHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaOpPointHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaOpPointHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaOpPointHeader_get,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaOpPointHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaOpPointHeader_set,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaOpPointHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaOpPointHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaOpPointHeader)\n"
"    Calls: (const oaFloatAppDef_oaOpPointHeader&)\n"
"    Signature: oaFloatAppDef_oaOpPointHeader||cref-oaFloatAppDef_oaOpPointHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaOpPointHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaOpPointHeader",
    sizeof(PyoaFloatAppDef_oaOpPointHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaOpPointHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaOpPointHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaOpPointHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaOpPointHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaOpPointHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaOpPointHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOpPointHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaOpPointHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaOpPointHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaOpPointHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaOpPointHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaOpPointHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaOpPointHeaderp result= (oaFloatAppDef_oaOpPointHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaOpPointHeader_FromoaFloatAppDef_oaOpPointHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaOpPointHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaOpPointHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaOpPointHeader_static_find,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaOpPointHeader_static_get,METH_VARARGS,oaFloatAppDef_oaOpPointHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaOpPointHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaOpPointHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaOpPointHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaOpPointHeader",
           (PyObject*)(&PyoaFloatAppDef_oaOpPointHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaOpPointHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaOpPointHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaOpPointHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaParasiticNetwork
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaParasiticNetwork_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaParasiticNetwork_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaParasiticNetworkObject* self = (PyoaFloatAppDef_oaParasiticNetworkObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaParasiticNetwork)
    {
        PyParamoaFloatAppDef_oaParasiticNetwork p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaParasiticNetwork_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaParasiticNetwork, Choices are:\n"
        "    (oaFloatAppDef_oaParasiticNetwork)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaParasiticNetwork_tp_dealloc(PyoaFloatAppDef_oaParasiticNetworkObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaParasiticNetwork_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaParasiticNetwork value;
    int convert_status=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaFloatAppDef_oaParasiticNetwork::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaParasiticNetwork_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaParasiticNetwork v1;
    PyParamoaFloatAppDef_oaParasiticNetwork v2;
    int convert_status1=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaParasiticNetwork_Convert(PyObject* ob,PyParamoaFloatAppDef_oaParasiticNetwork* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaParasiticNetwork_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaParasiticNetwork**) ((PyoaFloatAppDef_oaParasiticNetworkObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaParasiticNetwork Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(oaFloatAppDef_oaParasiticNetwork** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaParasiticNetwork* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaParasiticNetwork_Type.tp_alloc(&PyoaFloatAppDef_oaParasiticNetwork_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaParasiticNetworkObject* self = (PyoaFloatAppDef_oaParasiticNetworkObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(oaFloatAppDef_oaParasiticNetwork* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaParasiticNetwork_Type.tp_alloc(&PyoaFloatAppDef_oaParasiticNetwork_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaParasiticNetworkObject* self = (PyoaFloatAppDef_oaParasiticNetworkObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_get_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork, Function: get\n"
"  Paramegers: (oaParasiticNetwork)\n"
"    Calls: oaFloat get(const oaParasiticNetwork* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaParasiticNetwork,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaParasiticNetwork data;
    int convert_status=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaParasiticNetworkObject* self=(PyoaFloatAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaParasiticNetwork p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaParasiticNetwork_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_getDefault_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaParasiticNetwork data;
    int convert_status=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaParasiticNetworkObject* self=(PyoaFloatAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_set_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork, Function: set\n"
"  Paramegers: (oaParasiticNetwork,oaFloat)\n"
"    Calls: void set(oaParasiticNetwork* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaParasiticNetwork,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaParasiticNetwork data;
    int convert_status=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaParasiticNetworkObject* self=(PyoaFloatAppDef_oaParasiticNetworkObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaParasiticNetwork p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaParasiticNetwork_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_isNull_doc[] =
"Class: oaFloatAppDef_oaParasiticNetwork, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaParasiticNetwork data;
    int convert_status=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaParasiticNetwork_assign_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaParasiticNetwork data;
  int convert_status=PyoaFloatAppDef_oaParasiticNetwork_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaParasiticNetwork p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaParasiticNetwork_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaParasiticNetwork_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_get,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_getDefault,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_set,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_tp_isNull,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_tp_assign,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaParasiticNetwork)\n"
"    Calls: (const oaFloatAppDef_oaParasiticNetwork&)\n"
"    Signature: oaFloatAppDef_oaParasiticNetwork||cref-oaFloatAppDef_oaParasiticNetwork,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaParasiticNetwork_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaParasiticNetwork",
    sizeof(PyoaFloatAppDef_oaParasiticNetworkObject),
    0,
    (destructor)oaFloatAppDef_oaParasiticNetwork_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaParasiticNetwork_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaParasiticNetwork_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaParasiticNetwork_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaParasiticNetwork_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaParasiticNetwork_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_static_find_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::find(p1.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaParasiticNetwork, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaParasiticNetwork_static_get_doc[] = 
"Class: oaFloatAppDef_oaParasiticNetwork, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaParasiticNetwork* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaParasiticNetwork|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaParasiticNetwork_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::get(p1.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaParasiticNetworkp result= (oaFloatAppDef_oaParasiticNetwork::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaParasiticNetwork_FromoaFloatAppDef_oaParasiticNetwork(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaParasiticNetwork, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaParasiticNetwork_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_static_find,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaParasiticNetwork_static_get,METH_VARARGS,oaFloatAppDef_oaParasiticNetwork_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaParasiticNetwork_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaParasiticNetwork_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaParasiticNetwork\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaParasiticNetwork",
           (PyObject*)(&PyoaFloatAppDef_oaParasiticNetwork_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaParasiticNetwork\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaParasiticNetwork_Type.tp_dict;
    for(method=oaFloatAppDef_oaParasiticNetwork_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaPin
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaPin_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaPin_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaPinObject* self = (PyoaFloatAppDef_oaPinObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaPin)
    {
        PyParamoaFloatAppDef_oaPin p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaPin_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaPin, Choices are:\n"
        "    (oaFloatAppDef_oaPin)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaPin_tp_dealloc(PyoaFloatAppDef_oaPinObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaPin_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaPin value;
    int convert_status=PyoaFloatAppDef_oaPin_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaFloatAppDef_oaPin::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaPin_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaPin v1;
    PyParamoaFloatAppDef_oaPin v2;
    int convert_status1=PyoaFloatAppDef_oaPin_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaPin_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaPin_Convert(PyObject* ob,PyParamoaFloatAppDef_oaPin* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaPin_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaPin**) ((PyoaFloatAppDef_oaPinObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaPin Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(oaFloatAppDef_oaPin** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaPin* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaPin_Type.tp_alloc(&PyoaFloatAppDef_oaPin_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaPinObject* self = (PyoaFloatAppDef_oaPinObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(oaFloatAppDef_oaPin* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaPin_Type.tp_alloc(&PyoaFloatAppDef_oaPin_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaPinObject* self = (PyoaFloatAppDef_oaPinObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_get_doc[] = 
"Class: oaFloatAppDef_oaPin, Function: get\n"
"  Paramegers: (oaPin)\n"
"    Calls: oaFloat get(const oaPin* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaPin,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaPin_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPin data;
    int convert_status=PyoaFloatAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPinObject* self=(PyoaFloatAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPin p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPin_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_getDefault_doc[] = 
"Class: oaFloatAppDef_oaPin, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaPin_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPin data;
    int convert_status=PyoaFloatAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPinObject* self=(PyoaFloatAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_set_doc[] = 
"Class: oaFloatAppDef_oaPin, Function: set\n"
"  Paramegers: (oaPin,oaFloat)\n"
"    Calls: void set(oaPin* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaPin,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaPin_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPin data;
    int convert_status=PyoaFloatAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPinObject* self=(PyoaFloatAppDef_oaPinObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPin p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPin_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_isNull_doc[] =
"Class: oaFloatAppDef_oaPin, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaPin_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaPin data;
    int convert_status=PyoaFloatAppDef_oaPin_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaPin_assign_doc[] = 
"Class: oaFloatAppDef_oaPin, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaPin_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaPin data;
  int convert_status=PyoaFloatAppDef_oaPin_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaPin p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaPin_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaPin_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaPin_get,METH_VARARGS,oaFloatAppDef_oaPin_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaPin_getDefault,METH_VARARGS,oaFloatAppDef_oaPin_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaPin_set,METH_VARARGS,oaFloatAppDef_oaPin_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaPin_tp_isNull,METH_VARARGS,oaFloatAppDef_oaPin_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaPin_tp_assign,METH_VARARGS,oaFloatAppDef_oaPin_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_doc[] = 
"Class: oaFloatAppDef_oaPin\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaPin)\n"
"    Calls: (const oaFloatAppDef_oaPin&)\n"
"    Signature: oaFloatAppDef_oaPin||cref-oaFloatAppDef_oaPin,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaPin_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaPin",
    sizeof(PyoaFloatAppDef_oaPinObject),
    0,
    (destructor)oaFloatAppDef_oaPin_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaPin_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaPin_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaPin_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaPin_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaPin_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_static_find_doc[] = 
"Class: oaFloatAppDef_oaPin, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaPin* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaPin|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaPin* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaPin|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaPin_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::find(p1.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaPin, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPin_static_get_doc[] = 
"Class: oaFloatAppDef_oaPin, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaPin* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPin|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaPin* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPin|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaPin* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPin|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaPin* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPin|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaPin* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPin|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaPin* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPin|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaPin_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::get(p1.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPinp result= (oaFloatAppDef_oaPin::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaPin_FromoaFloatAppDef_oaPin(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaPin, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaPin_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaPin_static_find,METH_VARARGS,oaFloatAppDef_oaPin_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaPin_static_get,METH_VARARGS,oaFloatAppDef_oaPin_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaPin_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaPin_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaPin\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaPin",
           (PyObject*)(&PyoaFloatAppDef_oaPin_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaPin\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaPin_Type.tp_dict;
    for(method=oaFloatAppDef_oaPin_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaPoleResidue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaPoleResidue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaPoleResidue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaPoleResidueObject* self = (PyoaFloatAppDef_oaPoleResidueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaPoleResidue)
    {
        PyParamoaFloatAppDef_oaPoleResidue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaPoleResidue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaPoleResidue, Choices are:\n"
        "    (oaFloatAppDef_oaPoleResidue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaPoleResidue_tp_dealloc(PyoaFloatAppDef_oaPoleResidueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaPoleResidue_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaPoleResidue value;
    int convert_status=PyoaFloatAppDef_oaPoleResidue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[49];
    sprintf(buffer,"<oaFloatAppDef_oaPoleResidue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaPoleResidue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaPoleResidue v1;
    PyParamoaFloatAppDef_oaPoleResidue v2;
    int convert_status1=PyoaFloatAppDef_oaPoleResidue_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaPoleResidue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaPoleResidue_Convert(PyObject* ob,PyParamoaFloatAppDef_oaPoleResidue* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaPoleResidue_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaPoleResidue**) ((PyoaFloatAppDef_oaPoleResidueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaPoleResidue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(oaFloatAppDef_oaPoleResidue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaPoleResidue* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaPoleResidue_Type.tp_alloc(&PyoaFloatAppDef_oaPoleResidue_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaPoleResidueObject* self = (PyoaFloatAppDef_oaPoleResidueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(oaFloatAppDef_oaPoleResidue* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaPoleResidue_Type.tp_alloc(&PyoaFloatAppDef_oaPoleResidue_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaPoleResidueObject* self = (PyoaFloatAppDef_oaPoleResidueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_get_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue, Function: get\n"
"  Paramegers: (oaPoleResidue)\n"
"    Calls: oaFloat get(const oaPoleResidue* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaPoleResidue,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPoleResidue data;
    int convert_status=PyoaFloatAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPoleResidueObject* self=(PyoaFloatAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoleResidue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoleResidue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_getDefault_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPoleResidue data;
    int convert_status=PyoaFloatAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPoleResidueObject* self=(PyoaFloatAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_set_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue, Function: set\n"
"  Paramegers: (oaPoleResidue,oaFloat)\n"
"    Calls: void set(oaPoleResidue* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaPoleResidue,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPoleResidue data;
    int convert_status=PyoaFloatAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPoleResidueObject* self=(PyoaFloatAppDef_oaPoleResidueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoleResidue p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPoleResidue_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_isNull_doc[] =
"Class: oaFloatAppDef_oaPoleResidue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaPoleResidue data;
    int convert_status=PyoaFloatAppDef_oaPoleResidue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaPoleResidue_assign_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaPoleResidue data;
  int convert_status=PyoaFloatAppDef_oaPoleResidue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaPoleResidue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaPoleResidue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaPoleResidue_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaPoleResidue_get,METH_VARARGS,oaFloatAppDef_oaPoleResidue_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaPoleResidue_getDefault,METH_VARARGS,oaFloatAppDef_oaPoleResidue_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaPoleResidue_set,METH_VARARGS,oaFloatAppDef_oaPoleResidue_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaPoleResidue_tp_isNull,METH_VARARGS,oaFloatAppDef_oaPoleResidue_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaPoleResidue_tp_assign,METH_VARARGS,oaFloatAppDef_oaPoleResidue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaPoleResidue)\n"
"    Calls: (const oaFloatAppDef_oaPoleResidue&)\n"
"    Signature: oaFloatAppDef_oaPoleResidue||cref-oaFloatAppDef_oaPoleResidue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaPoleResidue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaPoleResidue",
    sizeof(PyoaFloatAppDef_oaPoleResidueObject),
    0,
    (destructor)oaFloatAppDef_oaPoleResidue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaPoleResidue_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaPoleResidue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaPoleResidue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaPoleResidue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaPoleResidue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_static_find_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::find(p1.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaPoleResidue, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPoleResidue_static_get_doc[] = 
"Class: oaFloatAppDef_oaPoleResidue, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaPoleResidue* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPoleResidue|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaPoleResidue_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::get(p1.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPoleResiduep result= (oaFloatAppDef_oaPoleResidue::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaPoleResidue_FromoaFloatAppDef_oaPoleResidue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaPoleResidue, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaPoleResidue_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaPoleResidue_static_find,METH_VARARGS,oaFloatAppDef_oaPoleResidue_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaPoleResidue_static_get,METH_VARARGS,oaFloatAppDef_oaPoleResidue_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaPoleResidue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaPoleResidue_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaPoleResidue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaPoleResidue",
           (PyObject*)(&PyoaFloatAppDef_oaPoleResidue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaPoleResidue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaPoleResidue_Type.tp_dict;
    for(method=oaFloatAppDef_oaPoleResidue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaProp
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaProp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaProp_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaPropObject* self = (PyoaFloatAppDef_oaPropObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaProp)
    {
        PyParamoaFloatAppDef_oaProp p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaProp_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaProp, Choices are:\n"
        "    (oaFloatAppDef_oaProp)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaProp_tp_dealloc(PyoaFloatAppDef_oaPropObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaProp_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaProp value;
    int convert_status=PyoaFloatAppDef_oaProp_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaProp::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaProp_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaProp v1;
    PyParamoaFloatAppDef_oaProp v2;
    int convert_status1=PyoaFloatAppDef_oaProp_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaProp_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaProp_Convert(PyObject* ob,PyParamoaFloatAppDef_oaProp* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaProp_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaProp**) ((PyoaFloatAppDef_oaPropObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaProp Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(oaFloatAppDef_oaProp** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaProp* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaProp_Type.tp_alloc(&PyoaFloatAppDef_oaProp_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaPropObject* self = (PyoaFloatAppDef_oaPropObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(oaFloatAppDef_oaProp* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaProp_Type.tp_alloc(&PyoaFloatAppDef_oaProp_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaPropObject* self = (PyoaFloatAppDef_oaPropObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_get_doc[] = 
"Class: oaFloatAppDef_oaProp, Function: get\n"
"  Paramegers: (oaProp)\n"
"    Calls: oaFloat get(const oaProp* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaProp,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaProp_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaProp data;
    int convert_status=PyoaFloatAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPropObject* self=(PyoaFloatAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaProp p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaProp_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_getDefault_doc[] = 
"Class: oaFloatAppDef_oaProp, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaProp_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaProp data;
    int convert_status=PyoaFloatAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPropObject* self=(PyoaFloatAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_set_doc[] = 
"Class: oaFloatAppDef_oaProp, Function: set\n"
"  Paramegers: (oaProp,oaFloat)\n"
"    Calls: void set(oaProp* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaProp,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaProp_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaProp data;
    int convert_status=PyoaFloatAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPropObject* self=(PyoaFloatAppDef_oaPropObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaProp p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaProp_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_isNull_doc[] =
"Class: oaFloatAppDef_oaProp, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaProp_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaProp data;
    int convert_status=PyoaFloatAppDef_oaProp_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaProp_assign_doc[] = 
"Class: oaFloatAppDef_oaProp, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaProp_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaProp data;
  int convert_status=PyoaFloatAppDef_oaProp_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaProp p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaProp_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaProp_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaProp_get,METH_VARARGS,oaFloatAppDef_oaProp_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaProp_getDefault,METH_VARARGS,oaFloatAppDef_oaProp_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaProp_set,METH_VARARGS,oaFloatAppDef_oaProp_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaProp_tp_isNull,METH_VARARGS,oaFloatAppDef_oaProp_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaProp_tp_assign,METH_VARARGS,oaFloatAppDef_oaProp_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_doc[] = 
"Class: oaFloatAppDef_oaProp\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaProp)\n"
"    Calls: (const oaFloatAppDef_oaProp&)\n"
"    Signature: oaFloatAppDef_oaProp||cref-oaFloatAppDef_oaProp,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaProp_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaProp",
    sizeof(PyoaFloatAppDef_oaPropObject),
    0,
    (destructor)oaFloatAppDef_oaProp_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaProp_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaProp_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaProp_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaProp_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaProp_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_static_find_doc[] = 
"Class: oaFloatAppDef_oaProp, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaProp* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaProp|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaProp* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaProp|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaProp_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::find(p1.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaProp, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaProp_static_get_doc[] = 
"Class: oaFloatAppDef_oaProp, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaProp* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaProp|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaProp* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaProp|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaProp* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaProp|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaProp* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaProp|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaProp* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaProp|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaProp* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaProp|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaProp_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::get(p1.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPropp result= (oaFloatAppDef_oaProp::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaProp_FromoaFloatAppDef_oaProp(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaProp, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaProp_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaProp_static_find,METH_VARARGS,oaFloatAppDef_oaProp_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaProp_static_get,METH_VARARGS,oaFloatAppDef_oaProp_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaProp_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaProp_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaProp\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaProp",
           (PyObject*)(&PyoaFloatAppDef_oaProp_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaProp\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaProp_Type.tp_dict;
    for(method=oaFloatAppDef_oaProp_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaPurpose
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaPurpose_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaPurpose_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaPurposeObject* self = (PyoaFloatAppDef_oaPurposeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaPurpose)
    {
        PyParamoaFloatAppDef_oaPurpose p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaPurpose_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaPurpose, Choices are:\n"
        "    (oaFloatAppDef_oaPurpose)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaPurpose_tp_dealloc(PyoaFloatAppDef_oaPurposeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaPurpose_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaPurpose value;
    int convert_status=PyoaFloatAppDef_oaPurpose_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaPurpose::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaPurpose_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaPurpose v1;
    PyParamoaFloatAppDef_oaPurpose v2;
    int convert_status1=PyoaFloatAppDef_oaPurpose_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaPurpose_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaPurpose_Convert(PyObject* ob,PyParamoaFloatAppDef_oaPurpose* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaPurpose_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaPurpose**) ((PyoaFloatAppDef_oaPurposeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaPurpose Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(oaFloatAppDef_oaPurpose** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaPurpose* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaPurpose_Type.tp_alloc(&PyoaFloatAppDef_oaPurpose_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaPurposeObject* self = (PyoaFloatAppDef_oaPurposeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(oaFloatAppDef_oaPurpose* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaPurpose_Type.tp_alloc(&PyoaFloatAppDef_oaPurpose_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaPurposeObject* self = (PyoaFloatAppDef_oaPurposeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_get_doc[] = 
"Class: oaFloatAppDef_oaPurpose, Function: get\n"
"  Paramegers: (oaPurpose)\n"
"    Calls: oaFloat get(const oaPurpose* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaPurpose,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPurpose data;
    int convert_status=PyoaFloatAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPurposeObject* self=(PyoaFloatAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPurpose p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPurpose_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_getDefault_doc[] = 
"Class: oaFloatAppDef_oaPurpose, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPurpose data;
    int convert_status=PyoaFloatAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPurposeObject* self=(PyoaFloatAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_set_doc[] = 
"Class: oaFloatAppDef_oaPurpose, Function: set\n"
"  Paramegers: (oaPurpose,oaFloat)\n"
"    Calls: void set(oaPurpose* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaPurpose,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaPurpose data;
    int convert_status=PyoaFloatAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaPurposeObject* self=(PyoaFloatAppDef_oaPurposeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPurpose p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaPurpose_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_isNull_doc[] =
"Class: oaFloatAppDef_oaPurpose, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaPurpose data;
    int convert_status=PyoaFloatAppDef_oaPurpose_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaPurpose_assign_doc[] = 
"Class: oaFloatAppDef_oaPurpose, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaPurpose data;
  int convert_status=PyoaFloatAppDef_oaPurpose_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaPurpose p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaPurpose_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaPurpose_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaPurpose_get,METH_VARARGS,oaFloatAppDef_oaPurpose_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaPurpose_getDefault,METH_VARARGS,oaFloatAppDef_oaPurpose_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaPurpose_set,METH_VARARGS,oaFloatAppDef_oaPurpose_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaPurpose_tp_isNull,METH_VARARGS,oaFloatAppDef_oaPurpose_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaPurpose_tp_assign,METH_VARARGS,oaFloatAppDef_oaPurpose_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_doc[] = 
"Class: oaFloatAppDef_oaPurpose\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaPurpose)\n"
"    Calls: (const oaFloatAppDef_oaPurpose&)\n"
"    Signature: oaFloatAppDef_oaPurpose||cref-oaFloatAppDef_oaPurpose,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaPurpose_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaPurpose",
    sizeof(PyoaFloatAppDef_oaPurposeObject),
    0,
    (destructor)oaFloatAppDef_oaPurpose_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaPurpose_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaPurpose_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaPurpose_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaPurpose_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaPurpose_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_static_find_doc[] = 
"Class: oaFloatAppDef_oaPurpose, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaPurpose* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaPurpose|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaPurpose* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaPurpose|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::find(p1.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaPurpose, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaPurpose_static_get_doc[] = 
"Class: oaFloatAppDef_oaPurpose, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaPurpose* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPurpose|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaPurpose* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPurpose|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaPurpose* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPurpose|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaPurpose* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPurpose|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaPurpose* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPurpose|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaPurpose* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaPurpose|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaPurpose_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::get(p1.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaPurposep result= (oaFloatAppDef_oaPurpose::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaPurpose_FromoaFloatAppDef_oaPurpose(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaPurpose, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaPurpose_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaPurpose_static_find,METH_VARARGS,oaFloatAppDef_oaPurpose_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaPurpose_static_get,METH_VARARGS,oaFloatAppDef_oaPurpose_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaPurpose_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaPurpose_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaPurpose\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaPurpose",
           (PyObject*)(&PyoaFloatAppDef_oaPurpose_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaPurpose\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaPurpose_Type.tp_dict;
    for(method=oaFloatAppDef_oaPurpose_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaReducedModel
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaReducedModel_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaReducedModel_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaReducedModelObject* self = (PyoaFloatAppDef_oaReducedModelObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaReducedModel)
    {
        PyParamoaFloatAppDef_oaReducedModel p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaReducedModel_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaReducedModel, Choices are:\n"
        "    (oaFloatAppDef_oaReducedModel)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaReducedModel_tp_dealloc(PyoaFloatAppDef_oaReducedModelObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaReducedModel_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaReducedModel value;
    int convert_status=PyoaFloatAppDef_oaReducedModel_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaFloatAppDef_oaReducedModel::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaReducedModel_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaReducedModel v1;
    PyParamoaFloatAppDef_oaReducedModel v2;
    int convert_status1=PyoaFloatAppDef_oaReducedModel_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaReducedModel_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaReducedModel_Convert(PyObject* ob,PyParamoaFloatAppDef_oaReducedModel* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaReducedModel_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaReducedModel**) ((PyoaFloatAppDef_oaReducedModelObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaReducedModel Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(oaFloatAppDef_oaReducedModel** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaReducedModel* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaReducedModel_Type.tp_alloc(&PyoaFloatAppDef_oaReducedModel_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaReducedModelObject* self = (PyoaFloatAppDef_oaReducedModelObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(oaFloatAppDef_oaReducedModel* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaReducedModel_Type.tp_alloc(&PyoaFloatAppDef_oaReducedModel_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaReducedModelObject* self = (PyoaFloatAppDef_oaReducedModelObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_get_doc[] = 
"Class: oaFloatAppDef_oaReducedModel, Function: get\n"
"  Paramegers: (oaReducedModel)\n"
"    Calls: oaFloat get(const oaReducedModel* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaReducedModel,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReducedModel data;
    int convert_status=PyoaFloatAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReducedModelObject* self=(PyoaFloatAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReducedModel p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaReducedModel_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_getDefault_doc[] = 
"Class: oaFloatAppDef_oaReducedModel, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReducedModel data;
    int convert_status=PyoaFloatAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReducedModelObject* self=(PyoaFloatAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_set_doc[] = 
"Class: oaFloatAppDef_oaReducedModel, Function: set\n"
"  Paramegers: (oaReducedModel,oaFloat)\n"
"    Calls: void set(oaReducedModel* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaReducedModel,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReducedModel data;
    int convert_status=PyoaFloatAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReducedModelObject* self=(PyoaFloatAppDef_oaReducedModelObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReducedModel p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReducedModel_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_isNull_doc[] =
"Class: oaFloatAppDef_oaReducedModel, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaReducedModel data;
    int convert_status=PyoaFloatAppDef_oaReducedModel_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaReducedModel_assign_doc[] = 
"Class: oaFloatAppDef_oaReducedModel, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaReducedModel data;
  int convert_status=PyoaFloatAppDef_oaReducedModel_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaReducedModel p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaReducedModel_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaReducedModel_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaReducedModel_get,METH_VARARGS,oaFloatAppDef_oaReducedModel_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaReducedModel_getDefault,METH_VARARGS,oaFloatAppDef_oaReducedModel_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaReducedModel_set,METH_VARARGS,oaFloatAppDef_oaReducedModel_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaReducedModel_tp_isNull,METH_VARARGS,oaFloatAppDef_oaReducedModel_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaReducedModel_tp_assign,METH_VARARGS,oaFloatAppDef_oaReducedModel_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_doc[] = 
"Class: oaFloatAppDef_oaReducedModel\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaReducedModel)\n"
"    Calls: (const oaFloatAppDef_oaReducedModel&)\n"
"    Signature: oaFloatAppDef_oaReducedModel||cref-oaFloatAppDef_oaReducedModel,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaReducedModel_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaReducedModel",
    sizeof(PyoaFloatAppDef_oaReducedModelObject),
    0,
    (destructor)oaFloatAppDef_oaReducedModel_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaReducedModel_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaReducedModel_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaReducedModel_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaReducedModel_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaReducedModel_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_static_find_doc[] = 
"Class: oaFloatAppDef_oaReducedModel, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaReducedModel* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaReducedModel* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::find(p1.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaReducedModel, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReducedModel_static_get_doc[] = 
"Class: oaFloatAppDef_oaReducedModel, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaReducedModel* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaReducedModel* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaReducedModel* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaReducedModel* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaReducedModel* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaReducedModel* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReducedModel|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaReducedModel_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::get(p1.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReducedModelp result= (oaFloatAppDef_oaReducedModel::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaReducedModel_FromoaFloatAppDef_oaReducedModel(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaReducedModel, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaReducedModel_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaReducedModel_static_find,METH_VARARGS,oaFloatAppDef_oaReducedModel_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaReducedModel_static_get,METH_VARARGS,oaFloatAppDef_oaReducedModel_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaReducedModel_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaReducedModel_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaReducedModel\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaReducedModel",
           (PyObject*)(&PyoaFloatAppDef_oaReducedModel_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaReducedModel\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaReducedModel_Type.tp_dict;
    for(method=oaFloatAppDef_oaReducedModel_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaReticle
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaReticle_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaReticle_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaReticleObject* self = (PyoaFloatAppDef_oaReticleObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaReticle)
    {
        PyParamoaFloatAppDef_oaReticle p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaReticle_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaReticle, Choices are:\n"
        "    (oaFloatAppDef_oaReticle)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaReticle_tp_dealloc(PyoaFloatAppDef_oaReticleObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaReticle_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaReticle value;
    int convert_status=PyoaFloatAppDef_oaReticle_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaReticle::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaReticle_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaReticle v1;
    PyParamoaFloatAppDef_oaReticle v2;
    int convert_status1=PyoaFloatAppDef_oaReticle_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaReticle_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaReticle_Convert(PyObject* ob,PyParamoaFloatAppDef_oaReticle* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaReticle_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaReticle**) ((PyoaFloatAppDef_oaReticleObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaReticle Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(oaFloatAppDef_oaReticle** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaReticle* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaReticle_Type.tp_alloc(&PyoaFloatAppDef_oaReticle_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaReticleObject* self = (PyoaFloatAppDef_oaReticleObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(oaFloatAppDef_oaReticle* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaReticle_Type.tp_alloc(&PyoaFloatAppDef_oaReticle_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaReticleObject* self = (PyoaFloatAppDef_oaReticleObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_get_doc[] = 
"Class: oaFloatAppDef_oaReticle, Function: get\n"
"  Paramegers: (oaReticle)\n"
"    Calls: oaFloat get(const oaReticle* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaReticle,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaReticle_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReticle data;
    int convert_status=PyoaFloatAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReticleObject* self=(PyoaFloatAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticle p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaReticle_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_getDefault_doc[] = 
"Class: oaFloatAppDef_oaReticle, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaReticle_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReticle data;
    int convert_status=PyoaFloatAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReticleObject* self=(PyoaFloatAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_set_doc[] = 
"Class: oaFloatAppDef_oaReticle, Function: set\n"
"  Paramegers: (oaReticle,oaFloat)\n"
"    Calls: void set(oaReticle* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaReticle,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaReticle_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReticle data;
    int convert_status=PyoaFloatAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReticleObject* self=(PyoaFloatAppDef_oaReticleObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticle p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticle_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_isNull_doc[] =
"Class: oaFloatAppDef_oaReticle, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaReticle_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaReticle data;
    int convert_status=PyoaFloatAppDef_oaReticle_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaReticle_assign_doc[] = 
"Class: oaFloatAppDef_oaReticle, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaReticle_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaReticle data;
  int convert_status=PyoaFloatAppDef_oaReticle_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaReticle p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaReticle_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaReticle_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaReticle_get,METH_VARARGS,oaFloatAppDef_oaReticle_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaReticle_getDefault,METH_VARARGS,oaFloatAppDef_oaReticle_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaReticle_set,METH_VARARGS,oaFloatAppDef_oaReticle_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaReticle_tp_isNull,METH_VARARGS,oaFloatAppDef_oaReticle_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaReticle_tp_assign,METH_VARARGS,oaFloatAppDef_oaReticle_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_doc[] = 
"Class: oaFloatAppDef_oaReticle\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaReticle)\n"
"    Calls: (const oaFloatAppDef_oaReticle&)\n"
"    Signature: oaFloatAppDef_oaReticle||cref-oaFloatAppDef_oaReticle,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaReticle_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaReticle",
    sizeof(PyoaFloatAppDef_oaReticleObject),
    0,
    (destructor)oaFloatAppDef_oaReticle_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaReticle_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaReticle_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaReticle_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaReticle_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaReticle_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_static_find_doc[] = 
"Class: oaFloatAppDef_oaReticle, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaReticle* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaReticle|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaReticle* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaReticle_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::find(p1.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaReticle, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticle_static_get_doc[] = 
"Class: oaFloatAppDef_oaReticle, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaReticle* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticle|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaReticle* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticle|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaReticle* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticle|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaReticle* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticle|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaReticle_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::get(p1.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticlep result= (oaFloatAppDef_oaReticle::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaReticle_FromoaFloatAppDef_oaReticle(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaReticle, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaReticle_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaReticle_static_find,METH_VARARGS,oaFloatAppDef_oaReticle_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaReticle_static_get,METH_VARARGS,oaFloatAppDef_oaReticle_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaReticle_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaReticle_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaReticle\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaReticle",
           (PyObject*)(&PyoaFloatAppDef_oaReticle_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaReticle\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaReticle_Type.tp_dict;
    for(method=oaFloatAppDef_oaReticle_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaReticleRef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaReticleRef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaReticleRef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaReticleRefObject* self = (PyoaFloatAppDef_oaReticleRefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaReticleRef)
    {
        PyParamoaFloatAppDef_oaReticleRef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaReticleRef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaReticleRef, Choices are:\n"
        "    (oaFloatAppDef_oaReticleRef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaReticleRef_tp_dealloc(PyoaFloatAppDef_oaReticleRefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaReticleRef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaReticleRef value;
    int convert_status=PyoaFloatAppDef_oaReticleRef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaReticleRef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaReticleRef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaReticleRef v1;
    PyParamoaFloatAppDef_oaReticleRef v2;
    int convert_status1=PyoaFloatAppDef_oaReticleRef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaReticleRef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaReticleRef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaReticleRef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaReticleRef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaReticleRef**) ((PyoaFloatAppDef_oaReticleRefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaReticleRef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(oaFloatAppDef_oaReticleRef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaReticleRef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaReticleRef_Type.tp_alloc(&PyoaFloatAppDef_oaReticleRef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaReticleRefObject* self = (PyoaFloatAppDef_oaReticleRefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(oaFloatAppDef_oaReticleRef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaReticleRef_Type.tp_alloc(&PyoaFloatAppDef_oaReticleRef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaReticleRefObject* self = (PyoaFloatAppDef_oaReticleRefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_get_doc[] = 
"Class: oaFloatAppDef_oaReticleRef, Function: get\n"
"  Paramegers: (oaReticleRef)\n"
"    Calls: oaFloat get(const oaReticleRef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaReticleRef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReticleRef data;
    int convert_status=PyoaFloatAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReticleRefObject* self=(PyoaFloatAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticleRef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaReticleRef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaReticleRef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReticleRef data;
    int convert_status=PyoaFloatAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReticleRefObject* self=(PyoaFloatAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_set_doc[] = 
"Class: oaFloatAppDef_oaReticleRef, Function: set\n"
"  Paramegers: (oaReticleRef,oaFloat)\n"
"    Calls: void set(oaReticleRef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaReticleRef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaReticleRef data;
    int convert_status=PyoaFloatAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaReticleRefObject* self=(PyoaFloatAppDef_oaReticleRefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaReticleRef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaReticleRef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_isNull_doc[] =
"Class: oaFloatAppDef_oaReticleRef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaReticleRef data;
    int convert_status=PyoaFloatAppDef_oaReticleRef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaReticleRef_assign_doc[] = 
"Class: oaFloatAppDef_oaReticleRef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaReticleRef data;
  int convert_status=PyoaFloatAppDef_oaReticleRef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaReticleRef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaReticleRef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaReticleRef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaReticleRef_get,METH_VARARGS,oaFloatAppDef_oaReticleRef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaReticleRef_getDefault,METH_VARARGS,oaFloatAppDef_oaReticleRef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaReticleRef_set,METH_VARARGS,oaFloatAppDef_oaReticleRef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaReticleRef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaReticleRef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaReticleRef_tp_assign,METH_VARARGS,oaFloatAppDef_oaReticleRef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_doc[] = 
"Class: oaFloatAppDef_oaReticleRef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaReticleRef)\n"
"    Calls: (const oaFloatAppDef_oaReticleRef&)\n"
"    Signature: oaFloatAppDef_oaReticleRef||cref-oaFloatAppDef_oaReticleRef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaReticleRef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaReticleRef",
    sizeof(PyoaFloatAppDef_oaReticleRefObject),
    0,
    (destructor)oaFloatAppDef_oaReticleRef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaReticleRef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaReticleRef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaReticleRef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaReticleRef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaReticleRef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_static_find_doc[] = 
"Class: oaFloatAppDef_oaReticleRef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaReticleRef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaReticleRef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::find(p1.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaReticleRef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaReticleRef_static_get_doc[] = 
"Class: oaFloatAppDef_oaReticleRef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaReticleRef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaReticleRef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaReticleRef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaReticleRef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaReticleRef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaReticleRef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::get(p1.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaReticleRefp result= (oaFloatAppDef_oaReticleRef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaReticleRef_FromoaFloatAppDef_oaReticleRef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaReticleRef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaReticleRef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaReticleRef_static_find,METH_VARARGS,oaFloatAppDef_oaReticleRef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaReticleRef_static_get,METH_VARARGS,oaFloatAppDef_oaReticleRef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaReticleRef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaReticleRef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaReticleRef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaReticleRef",
           (PyObject*)(&PyoaFloatAppDef_oaReticleRef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaReticleRef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaReticleRef_Type.tp_dict;
    for(method=oaFloatAppDef_oaReticleRef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaRoute
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaRoute_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaRoute_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaRouteObject* self = (PyoaFloatAppDef_oaRouteObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaRoute)
    {
        PyParamoaFloatAppDef_oaRoute p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaRoute_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaRoute, Choices are:\n"
        "    (oaFloatAppDef_oaRoute)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaRoute_tp_dealloc(PyoaFloatAppDef_oaRouteObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaRoute_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaRoute value;
    int convert_status=PyoaFloatAppDef_oaRoute_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaRoute::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaRoute_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaRoute v1;
    PyParamoaFloatAppDef_oaRoute v2;
    int convert_status1=PyoaFloatAppDef_oaRoute_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaRoute_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaRoute_Convert(PyObject* ob,PyParamoaFloatAppDef_oaRoute* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaRoute_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaRoute**) ((PyoaFloatAppDef_oaRouteObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaRoute Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(oaFloatAppDef_oaRoute** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaRoute* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaRoute_Type.tp_alloc(&PyoaFloatAppDef_oaRoute_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaRouteObject* self = (PyoaFloatAppDef_oaRouteObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(oaFloatAppDef_oaRoute* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaRoute_Type.tp_alloc(&PyoaFloatAppDef_oaRoute_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaRouteObject* self = (PyoaFloatAppDef_oaRouteObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_get_doc[] = 
"Class: oaFloatAppDef_oaRoute, Function: get\n"
"  Paramegers: (oaRoute)\n"
"    Calls: oaFloat get(const oaRoute* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaRoute,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaRoute_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRoute data;
    int convert_status=PyoaFloatAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRouteObject* self=(PyoaFloatAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRoute p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRoute_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_getDefault_doc[] = 
"Class: oaFloatAppDef_oaRoute, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaRoute_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRoute data;
    int convert_status=PyoaFloatAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRouteObject* self=(PyoaFloatAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_set_doc[] = 
"Class: oaFloatAppDef_oaRoute, Function: set\n"
"  Paramegers: (oaRoute,oaFloat)\n"
"    Calls: void set(oaRoute* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaRoute,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaRoute_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRoute data;
    int convert_status=PyoaFloatAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRouteObject* self=(PyoaFloatAppDef_oaRouteObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRoute p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRoute_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_isNull_doc[] =
"Class: oaFloatAppDef_oaRoute, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaRoute_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaRoute data;
    int convert_status=PyoaFloatAppDef_oaRoute_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaRoute_assign_doc[] = 
"Class: oaFloatAppDef_oaRoute, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaRoute_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaRoute data;
  int convert_status=PyoaFloatAppDef_oaRoute_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaRoute p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaRoute_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaRoute_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaRoute_get,METH_VARARGS,oaFloatAppDef_oaRoute_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaRoute_getDefault,METH_VARARGS,oaFloatAppDef_oaRoute_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaRoute_set,METH_VARARGS,oaFloatAppDef_oaRoute_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaRoute_tp_isNull,METH_VARARGS,oaFloatAppDef_oaRoute_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaRoute_tp_assign,METH_VARARGS,oaFloatAppDef_oaRoute_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_doc[] = 
"Class: oaFloatAppDef_oaRoute\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaRoute)\n"
"    Calls: (const oaFloatAppDef_oaRoute&)\n"
"    Signature: oaFloatAppDef_oaRoute||cref-oaFloatAppDef_oaRoute,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaRoute_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaRoute",
    sizeof(PyoaFloatAppDef_oaRouteObject),
    0,
    (destructor)oaFloatAppDef_oaRoute_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaRoute_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaRoute_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaRoute_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaRoute_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaRoute_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_static_find_doc[] = 
"Class: oaFloatAppDef_oaRoute, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaRoute* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaRoute|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaRoute* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaRoute_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::find(p1.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaRoute, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRoute_static_get_doc[] = 
"Class: oaFloatAppDef_oaRoute, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaRoute* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRoute|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaRoute* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRoute|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaRoute* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRoute|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaRoute* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRoute|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaRoute_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::get(p1.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRoutep result= (oaFloatAppDef_oaRoute::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaRoute_FromoaFloatAppDef_oaRoute(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaRoute, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaRoute_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaRoute_static_find,METH_VARARGS,oaFloatAppDef_oaRoute_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaRoute_static_get,METH_VARARGS,oaFloatAppDef_oaRoute_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaRoute_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaRoute_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaRoute\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaRoute",
           (PyObject*)(&PyoaFloatAppDef_oaRoute_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaRoute\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaRoute_Type.tp_dict;
    for(method=oaFloatAppDef_oaRoute_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaRow
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaRow_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaRow_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaRowObject* self = (PyoaFloatAppDef_oaRowObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaRow)
    {
        PyParamoaFloatAppDef_oaRow p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaRow_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaRow, Choices are:\n"
        "    (oaFloatAppDef_oaRow)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaRow_tp_dealloc(PyoaFloatAppDef_oaRowObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaRow_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaRow value;
    int convert_status=PyoaFloatAppDef_oaRow_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaFloatAppDef_oaRow::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaRow_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaRow v1;
    PyParamoaFloatAppDef_oaRow v2;
    int convert_status1=PyoaFloatAppDef_oaRow_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaRow_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaRow_Convert(PyObject* ob,PyParamoaFloatAppDef_oaRow* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaRow_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaRow**) ((PyoaFloatAppDef_oaRowObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaRow Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(oaFloatAppDef_oaRow** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaRow* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaRow_Type.tp_alloc(&PyoaFloatAppDef_oaRow_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaRowObject* self = (PyoaFloatAppDef_oaRowObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(oaFloatAppDef_oaRow* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaRow_Type.tp_alloc(&PyoaFloatAppDef_oaRow_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaRowObject* self = (PyoaFloatAppDef_oaRowObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_get_doc[] = 
"Class: oaFloatAppDef_oaRow, Function: get\n"
"  Paramegers: (oaRow)\n"
"    Calls: oaFloat get(const oaRow* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaRow,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaRow_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRow data;
    int convert_status=PyoaFloatAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRowObject* self=(PyoaFloatAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRow_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_getDefault_doc[] = 
"Class: oaFloatAppDef_oaRow, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaRow_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRow data;
    int convert_status=PyoaFloatAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRowObject* self=(PyoaFloatAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_set_doc[] = 
"Class: oaFloatAppDef_oaRow, Function: set\n"
"  Paramegers: (oaRow,oaFloat)\n"
"    Calls: void set(oaRow* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaRow,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaRow_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRow data;
    int convert_status=PyoaFloatAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRowObject* self=(PyoaFloatAppDef_oaRowObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRow p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRow_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_isNull_doc[] =
"Class: oaFloatAppDef_oaRow, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaRow_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaRow data;
    int convert_status=PyoaFloatAppDef_oaRow_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaRow_assign_doc[] = 
"Class: oaFloatAppDef_oaRow, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaRow_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaRow data;
  int convert_status=PyoaFloatAppDef_oaRow_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaRow p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaRow_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaRow_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaRow_get,METH_VARARGS,oaFloatAppDef_oaRow_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaRow_getDefault,METH_VARARGS,oaFloatAppDef_oaRow_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaRow_set,METH_VARARGS,oaFloatAppDef_oaRow_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaRow_tp_isNull,METH_VARARGS,oaFloatAppDef_oaRow_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaRow_tp_assign,METH_VARARGS,oaFloatAppDef_oaRow_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_doc[] = 
"Class: oaFloatAppDef_oaRow\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaRow)\n"
"    Calls: (const oaFloatAppDef_oaRow&)\n"
"    Signature: oaFloatAppDef_oaRow||cref-oaFloatAppDef_oaRow,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaRow_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaRow",
    sizeof(PyoaFloatAppDef_oaRowObject),
    0,
    (destructor)oaFloatAppDef_oaRow_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaRow_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaRow_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaRow_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaRow_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaRow_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_static_find_doc[] = 
"Class: oaFloatAppDef_oaRow, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaRow* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaRow|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaRow* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaRow_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::find(p1.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaRow, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRow_static_get_doc[] = 
"Class: oaFloatAppDef_oaRow, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaRow* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRow|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaRow* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRow|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaRow* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRow|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaRow* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRow|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaRow_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::get(p1.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowp result= (oaFloatAppDef_oaRow::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaRow_FromoaFloatAppDef_oaRow(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaRow, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaRow_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaRow_static_find,METH_VARARGS,oaFloatAppDef_oaRow_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaRow_static_get,METH_VARARGS,oaFloatAppDef_oaRow_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaRow_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaRow_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaRow\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaRow",
           (PyObject*)(&PyoaFloatAppDef_oaRow_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaRow\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaRow_Type.tp_dict;
    for(method=oaFloatAppDef_oaRow_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaRowHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaRowHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaRowHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaRowHeaderObject* self = (PyoaFloatAppDef_oaRowHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaRowHeader)
    {
        PyParamoaFloatAppDef_oaRowHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaRowHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaRowHeader, Choices are:\n"
        "    (oaFloatAppDef_oaRowHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaRowHeader_tp_dealloc(PyoaFloatAppDef_oaRowHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaRowHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaRowHeader value;
    int convert_status=PyoaFloatAppDef_oaRowHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaFloatAppDef_oaRowHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaRowHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaRowHeader v1;
    PyParamoaFloatAppDef_oaRowHeader v2;
    int convert_status1=PyoaFloatAppDef_oaRowHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaRowHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaRowHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaRowHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaRowHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaRowHeader**) ((PyoaFloatAppDef_oaRowHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaRowHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(oaFloatAppDef_oaRowHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaRowHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaRowHeader_Type.tp_alloc(&PyoaFloatAppDef_oaRowHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaRowHeaderObject* self = (PyoaFloatAppDef_oaRowHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(oaFloatAppDef_oaRowHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaRowHeader_Type.tp_alloc(&PyoaFloatAppDef_oaRowHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaRowHeaderObject* self = (PyoaFloatAppDef_oaRowHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_get_doc[] = 
"Class: oaFloatAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaRowHeader)\n"
"    Calls: oaFloat get(const oaRowHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaRowHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRowHeader data;
    int convert_status=PyoaFloatAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRowHeaderObject* self=(PyoaFloatAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaRowHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaRowHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRowHeader data;
    int convert_status=PyoaFloatAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRowHeaderObject* self=(PyoaFloatAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_set_doc[] = 
"Class: oaFloatAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaRowHeader,oaFloat)\n"
"    Calls: void set(oaRowHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaRowHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaRowHeader data;
    int convert_status=PyoaFloatAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaRowHeaderObject* self=(PyoaFloatAppDef_oaRowHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaRowHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaRowHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaRowHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaRowHeader data;
    int convert_status=PyoaFloatAppDef_oaRowHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaRowHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaRowHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaRowHeader data;
  int convert_status=PyoaFloatAppDef_oaRowHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaRowHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaRowHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaRowHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaRowHeader_get,METH_VARARGS,oaFloatAppDef_oaRowHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaRowHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaRowHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaRowHeader_set,METH_VARARGS,oaFloatAppDef_oaRowHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaRowHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaRowHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaRowHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaRowHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_doc[] = 
"Class: oaFloatAppDef_oaRowHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaRowHeader)\n"
"    Calls: (const oaFloatAppDef_oaRowHeader&)\n"
"    Signature: oaFloatAppDef_oaRowHeader||cref-oaFloatAppDef_oaRowHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaRowHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaRowHeader",
    sizeof(PyoaFloatAppDef_oaRowHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaRowHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaRowHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaRowHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaRowHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaRowHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaRowHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaRowHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaRowHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaRowHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaRowHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaRowHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaRowHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaRowHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaRowHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaRowHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaRowHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaRowHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaRowHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaRowHeaderp result= (oaFloatAppDef_oaRowHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaRowHeader_FromoaFloatAppDef_oaRowHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaRowHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaRowHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaRowHeader_static_find,METH_VARARGS,oaFloatAppDef_oaRowHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaRowHeader_static_get,METH_VARARGS,oaFloatAppDef_oaRowHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaRowHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaRowHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaRowHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaRowHeader",
           (PyObject*)(&PyoaFloatAppDef_oaRowHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaRowHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaRowHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaRowHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaScanChain
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaScanChain_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaScanChain_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaScanChainObject* self = (PyoaFloatAppDef_oaScanChainObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaScanChain)
    {
        PyParamoaFloatAppDef_oaScanChain p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaScanChain_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaScanChain, Choices are:\n"
        "    (oaFloatAppDef_oaScanChain)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaScanChain_tp_dealloc(PyoaFloatAppDef_oaScanChainObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaScanChain_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaScanChain value;
    int convert_status=PyoaFloatAppDef_oaScanChain_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaFloatAppDef_oaScanChain::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaScanChain_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaScanChain v1;
    PyParamoaFloatAppDef_oaScanChain v2;
    int convert_status1=PyoaFloatAppDef_oaScanChain_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaScanChain_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaScanChain_Convert(PyObject* ob,PyParamoaFloatAppDef_oaScanChain* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaScanChain_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaScanChain**) ((PyoaFloatAppDef_oaScanChainObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaScanChain Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(oaFloatAppDef_oaScanChain** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaScanChain* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaScanChain_Type.tp_alloc(&PyoaFloatAppDef_oaScanChain_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaScanChainObject* self = (PyoaFloatAppDef_oaScanChainObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(oaFloatAppDef_oaScanChain* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaScanChain_Type.tp_alloc(&PyoaFloatAppDef_oaScanChain_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaScanChainObject* self = (PyoaFloatAppDef_oaScanChainObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_get_doc[] = 
"Class: oaFloatAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaScanChain)\n"
"    Calls: oaFloat get(const oaScanChain* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaScanChain,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChain data;
    int convert_status=PyoaFloatAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainObject* self=(PyoaFloatAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChain_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_getDefault_doc[] = 
"Class: oaFloatAppDef_oaScanChain, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChain data;
    int convert_status=PyoaFloatAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainObject* self=(PyoaFloatAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_set_doc[] = 
"Class: oaFloatAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaScanChain,oaFloat)\n"
"    Calls: void set(oaScanChain* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaScanChain,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChain data;
    int convert_status=PyoaFloatAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainObject* self=(PyoaFloatAppDef_oaScanChainObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChain p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChain_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_isNull_doc[] =
"Class: oaFloatAppDef_oaScanChain, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaScanChain data;
    int convert_status=PyoaFloatAppDef_oaScanChain_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaScanChain_assign_doc[] = 
"Class: oaFloatAppDef_oaScanChain, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaScanChain data;
  int convert_status=PyoaFloatAppDef_oaScanChain_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaScanChain p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaScanChain_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaScanChain_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaScanChain_get,METH_VARARGS,oaFloatAppDef_oaScanChain_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaScanChain_getDefault,METH_VARARGS,oaFloatAppDef_oaScanChain_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaScanChain_set,METH_VARARGS,oaFloatAppDef_oaScanChain_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaScanChain_tp_isNull,METH_VARARGS,oaFloatAppDef_oaScanChain_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaScanChain_tp_assign,METH_VARARGS,oaFloatAppDef_oaScanChain_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_doc[] = 
"Class: oaFloatAppDef_oaScanChain\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaScanChain)\n"
"    Calls: (const oaFloatAppDef_oaScanChain&)\n"
"    Signature: oaFloatAppDef_oaScanChain||cref-oaFloatAppDef_oaScanChain,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaScanChain_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaScanChain",
    sizeof(PyoaFloatAppDef_oaScanChainObject),
    0,
    (destructor)oaFloatAppDef_oaScanChain_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaScanChain_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaScanChain_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaScanChain_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaScanChain_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaScanChain_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_static_find_doc[] = 
"Class: oaFloatAppDef_oaScanChain, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaScanChain* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaScanChain|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaScanChain* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::find(p1.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaScanChain, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChain_static_get_doc[] = 
"Class: oaFloatAppDef_oaScanChain, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaScanChain* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChain|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaScanChain* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChain|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaScanChain* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChain|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaScanChain* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChain|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaScanChain_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::get(p1.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainp result= (oaFloatAppDef_oaScanChain::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaScanChain_FromoaFloatAppDef_oaScanChain(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaScanChain, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaScanChain_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaScanChain_static_find,METH_VARARGS,oaFloatAppDef_oaScanChain_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaScanChain_static_get,METH_VARARGS,oaFloatAppDef_oaScanChain_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaScanChain_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaScanChain_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaScanChain\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaScanChain",
           (PyObject*)(&PyoaFloatAppDef_oaScanChain_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaScanChain\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaScanChain_Type.tp_dict;
    for(method=oaFloatAppDef_oaScanChain_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaScanChainInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaScanChainInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaScanChainInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaScanChainInstObject* self = (PyoaFloatAppDef_oaScanChainInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaScanChainInst)
    {
        PyParamoaFloatAppDef_oaScanChainInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaScanChainInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaScanChainInst, Choices are:\n"
        "    (oaFloatAppDef_oaScanChainInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaScanChainInst_tp_dealloc(PyoaFloatAppDef_oaScanChainInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaScanChainInst_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaScanChainInst value;
    int convert_status=PyoaFloatAppDef_oaScanChainInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaScanChainInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaScanChainInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaScanChainInst v1;
    PyParamoaFloatAppDef_oaScanChainInst v2;
    int convert_status1=PyoaFloatAppDef_oaScanChainInst_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaScanChainInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaScanChainInst_Convert(PyObject* ob,PyParamoaFloatAppDef_oaScanChainInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaScanChainInst_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaScanChainInst**) ((PyoaFloatAppDef_oaScanChainInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaScanChainInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(oaFloatAppDef_oaScanChainInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaScanChainInst* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaScanChainInst_Type.tp_alloc(&PyoaFloatAppDef_oaScanChainInst_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaScanChainInstObject* self = (PyoaFloatAppDef_oaScanChainInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(oaFloatAppDef_oaScanChainInst* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaScanChainInst_Type.tp_alloc(&PyoaFloatAppDef_oaScanChainInst_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaScanChainInstObject* self = (PyoaFloatAppDef_oaScanChainInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_get_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaScanChainInst)\n"
"    Calls: oaFloat get(const oaScanChainInst* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaScanChainInst,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChainInst data;
    int convert_status=PyoaFloatAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainInstObject* self=(PyoaFloatAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChainInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_getDefault_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChainInst data;
    int convert_status=PyoaFloatAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainInstObject* self=(PyoaFloatAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_set_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaScanChainInst,oaFloat)\n"
"    Calls: void set(oaScanChainInst* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaScanChainInst,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChainInst data;
    int convert_status=PyoaFloatAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainInstObject* self=(PyoaFloatAppDef_oaScanChainInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainInst p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainInst_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_isNull_doc[] =
"Class: oaFloatAppDef_oaScanChainInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaScanChainInst data;
    int convert_status=PyoaFloatAppDef_oaScanChainInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaScanChainInst_assign_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaScanChainInst data;
  int convert_status=PyoaFloatAppDef_oaScanChainInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaScanChainInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaScanChainInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaScanChainInst_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaScanChainInst_get,METH_VARARGS,oaFloatAppDef_oaScanChainInst_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaScanChainInst_getDefault,METH_VARARGS,oaFloatAppDef_oaScanChainInst_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaScanChainInst_set,METH_VARARGS,oaFloatAppDef_oaScanChainInst_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaScanChainInst_tp_isNull,METH_VARARGS,oaFloatAppDef_oaScanChainInst_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaScanChainInst_tp_assign,METH_VARARGS,oaFloatAppDef_oaScanChainInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaScanChainInst)\n"
"    Calls: (const oaFloatAppDef_oaScanChainInst&)\n"
"    Signature: oaFloatAppDef_oaScanChainInst||cref-oaFloatAppDef_oaScanChainInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaScanChainInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaScanChainInst",
    sizeof(PyoaFloatAppDef_oaScanChainInstObject),
    0,
    (destructor)oaFloatAppDef_oaScanChainInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaScanChainInst_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaScanChainInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaScanChainInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaScanChainInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaScanChainInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_static_find_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::find(p1.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaScanChainInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainInst_static_get_doc[] = 
"Class: oaFloatAppDef_oaScanChainInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaScanChainInst* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainInst|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaScanChainInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::get(p1.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainInstp result= (oaFloatAppDef_oaScanChainInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaScanChainInst_FromoaFloatAppDef_oaScanChainInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaScanChainInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaScanChainInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaScanChainInst_static_find,METH_VARARGS,oaFloatAppDef_oaScanChainInst_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaScanChainInst_static_get,METH_VARARGS,oaFloatAppDef_oaScanChainInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaScanChainInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaScanChainInst_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaScanChainInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaScanChainInst",
           (PyObject*)(&PyoaFloatAppDef_oaScanChainInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaScanChainInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaScanChainInst_Type.tp_dict;
    for(method=oaFloatAppDef_oaScanChainInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaScanChainSet
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaScanChainSet_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaScanChainSet_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaScanChainSetObject* self = (PyoaFloatAppDef_oaScanChainSetObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaScanChainSet)
    {
        PyParamoaFloatAppDef_oaScanChainSet p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaScanChainSet_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaScanChainSet, Choices are:\n"
        "    (oaFloatAppDef_oaScanChainSet)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaScanChainSet_tp_dealloc(PyoaFloatAppDef_oaScanChainSetObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaScanChainSet_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaScanChainSet value;
    int convert_status=PyoaFloatAppDef_oaScanChainSet_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaFloatAppDef_oaScanChainSet::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaScanChainSet_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaScanChainSet v1;
    PyParamoaFloatAppDef_oaScanChainSet v2;
    int convert_status1=PyoaFloatAppDef_oaScanChainSet_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaScanChainSet_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaScanChainSet_Convert(PyObject* ob,PyParamoaFloatAppDef_oaScanChainSet* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaScanChainSet_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaScanChainSet**) ((PyoaFloatAppDef_oaScanChainSetObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaScanChainSet Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(oaFloatAppDef_oaScanChainSet** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaScanChainSet* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaScanChainSet_Type.tp_alloc(&PyoaFloatAppDef_oaScanChainSet_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaScanChainSetObject* self = (PyoaFloatAppDef_oaScanChainSetObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(oaFloatAppDef_oaScanChainSet* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaScanChainSet_Type.tp_alloc(&PyoaFloatAppDef_oaScanChainSet_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaScanChainSetObject* self = (PyoaFloatAppDef_oaScanChainSetObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_get_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaScanChainSet)\n"
"    Calls: oaFloat get(const oaScanChainSet* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaScanChainSet,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChainSet data;
    int convert_status=PyoaFloatAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainSetObject* self=(PyoaFloatAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaScanChainSet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_getDefault_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChainSet data;
    int convert_status=PyoaFloatAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainSetObject* self=(PyoaFloatAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_set_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaScanChainSet,oaFloat)\n"
"    Calls: void set(oaScanChainSet* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaScanChainSet,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaScanChainSet data;
    int convert_status=PyoaFloatAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaScanChainSetObject* self=(PyoaFloatAppDef_oaScanChainSetObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaScanChainSet p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaScanChainSet_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_isNull_doc[] =
"Class: oaFloatAppDef_oaScanChainSet, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaScanChainSet data;
    int convert_status=PyoaFloatAppDef_oaScanChainSet_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaScanChainSet_assign_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaScanChainSet data;
  int convert_status=PyoaFloatAppDef_oaScanChainSet_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaScanChainSet p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaScanChainSet_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaScanChainSet_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaScanChainSet_get,METH_VARARGS,oaFloatAppDef_oaScanChainSet_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaScanChainSet_getDefault,METH_VARARGS,oaFloatAppDef_oaScanChainSet_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaScanChainSet_set,METH_VARARGS,oaFloatAppDef_oaScanChainSet_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaScanChainSet_tp_isNull,METH_VARARGS,oaFloatAppDef_oaScanChainSet_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaScanChainSet_tp_assign,METH_VARARGS,oaFloatAppDef_oaScanChainSet_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaScanChainSet)\n"
"    Calls: (const oaFloatAppDef_oaScanChainSet&)\n"
"    Signature: oaFloatAppDef_oaScanChainSet||cref-oaFloatAppDef_oaScanChainSet,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaScanChainSet_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaScanChainSet",
    sizeof(PyoaFloatAppDef_oaScanChainSetObject),
    0,
    (destructor)oaFloatAppDef_oaScanChainSet_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaScanChainSet_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaScanChainSet_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaScanChainSet_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaScanChainSet_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaScanChainSet_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_static_find_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::find(p1.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaScanChainSet, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaScanChainSet_static_get_doc[] = 
"Class: oaFloatAppDef_oaScanChainSet, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaScanChainSet* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaScanChainSet|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaScanChainSet_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::get(p1.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaScanChainSetp result= (oaFloatAppDef_oaScanChainSet::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaScanChainSet_FromoaFloatAppDef_oaScanChainSet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaScanChainSet, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaScanChainSet_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaScanChainSet_static_find,METH_VARARGS,oaFloatAppDef_oaScanChainSet_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaScanChainSet_static_get,METH_VARARGS,oaFloatAppDef_oaScanChainSet_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaScanChainSet_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaScanChainSet_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaScanChainSet\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaScanChainSet",
           (PyObject*)(&PyoaFloatAppDef_oaScanChainSet_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaScanChainSet\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaScanChainSet_Type.tp_dict;
    for(method=oaFloatAppDef_oaScanChainSet_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaShape
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaShape_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaShape_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaShapeObject* self = (PyoaFloatAppDef_oaShapeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaShape)
    {
        PyParamoaFloatAppDef_oaShape p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaShape_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaShape, Choices are:\n"
        "    (oaFloatAppDef_oaShape)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaShape_tp_dealloc(PyoaFloatAppDef_oaShapeObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaShape_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaShape value;
    int convert_status=PyoaFloatAppDef_oaShape_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaShape::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaShape_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaShape v1;
    PyParamoaFloatAppDef_oaShape v2;
    int convert_status1=PyoaFloatAppDef_oaShape_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaShape_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaShape_Convert(PyObject* ob,PyParamoaFloatAppDef_oaShape* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaShape_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaShape**) ((PyoaFloatAppDef_oaShapeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaShape Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(oaFloatAppDef_oaShape** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaShape* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaShape_Type.tp_alloc(&PyoaFloatAppDef_oaShape_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaShapeObject* self = (PyoaFloatAppDef_oaShapeObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(oaFloatAppDef_oaShape* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaShape_Type.tp_alloc(&PyoaFloatAppDef_oaShape_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaShapeObject* self = (PyoaFloatAppDef_oaShapeObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_get_doc[] = 
"Class: oaFloatAppDef_oaShape, Function: get\n"
"  Paramegers: (oaShape)\n"
"    Calls: oaFloat get(const oaShape* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaShape,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaShape_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaShape data;
    int convert_status=PyoaFloatAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaShapeObject* self=(PyoaFloatAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaShape_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_getDefault_doc[] = 
"Class: oaFloatAppDef_oaShape, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaShape_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaShape data;
    int convert_status=PyoaFloatAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaShapeObject* self=(PyoaFloatAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_set_doc[] = 
"Class: oaFloatAppDef_oaShape, Function: set\n"
"  Paramegers: (oaShape,oaFloat)\n"
"    Calls: void set(oaShape* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaShape,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaShape_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaShape data;
    int convert_status=PyoaFloatAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaShapeObject* self=(PyoaFloatAppDef_oaShapeObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaShape p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaShape_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_isNull_doc[] =
"Class: oaFloatAppDef_oaShape, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaShape_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaShape data;
    int convert_status=PyoaFloatAppDef_oaShape_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaShape_assign_doc[] = 
"Class: oaFloatAppDef_oaShape, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaShape_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaShape data;
  int convert_status=PyoaFloatAppDef_oaShape_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaShape p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaShape_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaShape_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaShape_get,METH_VARARGS,oaFloatAppDef_oaShape_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaShape_getDefault,METH_VARARGS,oaFloatAppDef_oaShape_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaShape_set,METH_VARARGS,oaFloatAppDef_oaShape_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaShape_tp_isNull,METH_VARARGS,oaFloatAppDef_oaShape_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaShape_tp_assign,METH_VARARGS,oaFloatAppDef_oaShape_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_doc[] = 
"Class: oaFloatAppDef_oaShape\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaShape)\n"
"    Calls: (const oaFloatAppDef_oaShape&)\n"
"    Signature: oaFloatAppDef_oaShape||cref-oaFloatAppDef_oaShape,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaShape_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaShape",
    sizeof(PyoaFloatAppDef_oaShapeObject),
    0,
    (destructor)oaFloatAppDef_oaShape_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaShape_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaShape_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaShape_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaShape_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaShape_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_static_find_doc[] = 
"Class: oaFloatAppDef_oaShape, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaShape* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaShape|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaShape* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaShape_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::find(p1.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaShape, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaShape_static_get_doc[] = 
"Class: oaFloatAppDef_oaShape, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaShape* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaShape|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaShape* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaShape|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaShape* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaShape|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaShape* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaShape|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaShape_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::get(p1.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaShapep result= (oaFloatAppDef_oaShape::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaShape_FromoaFloatAppDef_oaShape(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaShape, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaShape_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaShape_static_find,METH_VARARGS,oaFloatAppDef_oaShape_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaShape_static_get,METH_VARARGS,oaFloatAppDef_oaShape_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaShape_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaShape_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaShape\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaShape",
           (PyObject*)(&PyoaFloatAppDef_oaShape_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaShape\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaShape_Type.tp_dict;
    for(method=oaFloatAppDef_oaShape_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaSiteDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaSiteDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaSiteDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaSiteDefObject* self = (PyoaFloatAppDef_oaSiteDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaSiteDef)
    {
        PyParamoaFloatAppDef_oaSiteDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaSiteDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaSiteDef, Choices are:\n"
        "    (oaFloatAppDef_oaSiteDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaSiteDef_tp_dealloc(PyoaFloatAppDef_oaSiteDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaSiteDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaSiteDef value;
    int convert_status=PyoaFloatAppDef_oaSiteDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaSiteDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaSiteDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaSiteDef v1;
    PyParamoaFloatAppDef_oaSiteDef v2;
    int convert_status1=PyoaFloatAppDef_oaSiteDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaSiteDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaSiteDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaSiteDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaSiteDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaSiteDef**) ((PyoaFloatAppDef_oaSiteDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaSiteDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(oaFloatAppDef_oaSiteDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaSiteDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaSiteDef_Type.tp_alloc(&PyoaFloatAppDef_oaSiteDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaSiteDefObject* self = (PyoaFloatAppDef_oaSiteDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(oaFloatAppDef_oaSiteDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaSiteDef_Type.tp_alloc(&PyoaFloatAppDef_oaSiteDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaSiteDefObject* self = (PyoaFloatAppDef_oaSiteDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_get_doc[] = 
"Class: oaFloatAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaSiteDef)\n"
"    Calls: oaFloat get(const oaSiteDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaSiteDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaSiteDef data;
    int convert_status=PyoaFloatAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaSiteDefObject* self=(PyoaFloatAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSiteDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaSiteDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaSiteDef data;
    int convert_status=PyoaFloatAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaSiteDefObject* self=(PyoaFloatAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_set_doc[] = 
"Class: oaFloatAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaSiteDef,oaFloat)\n"
"    Calls: void set(oaSiteDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaSiteDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaSiteDef data;
    int convert_status=PyoaFloatAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaSiteDefObject* self=(PyoaFloatAppDef_oaSiteDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSiteDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSiteDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_isNull_doc[] =
"Class: oaFloatAppDef_oaSiteDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaSiteDef data;
    int convert_status=PyoaFloatAppDef_oaSiteDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaSiteDef_assign_doc[] = 
"Class: oaFloatAppDef_oaSiteDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaSiteDef data;
  int convert_status=PyoaFloatAppDef_oaSiteDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaSiteDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaSiteDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaSiteDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaSiteDef_get,METH_VARARGS,oaFloatAppDef_oaSiteDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaSiteDef_getDefault,METH_VARARGS,oaFloatAppDef_oaSiteDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaSiteDef_set,METH_VARARGS,oaFloatAppDef_oaSiteDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaSiteDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaSiteDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaSiteDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaSiteDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_doc[] = 
"Class: oaFloatAppDef_oaSiteDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaSiteDef)\n"
"    Calls: (const oaFloatAppDef_oaSiteDef&)\n"
"    Signature: oaFloatAppDef_oaSiteDef||cref-oaFloatAppDef_oaSiteDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaSiteDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaSiteDef",
    sizeof(PyoaFloatAppDef_oaSiteDefObject),
    0,
    (destructor)oaFloatAppDef_oaSiteDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaSiteDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaSiteDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaSiteDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaSiteDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaSiteDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaSiteDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaSiteDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaSiteDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::find(p1.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaSiteDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSiteDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaSiteDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaSiteDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaSiteDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaSiteDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaSiteDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSiteDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaSiteDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::get(p1.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSiteDefp result= (oaFloatAppDef_oaSiteDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaSiteDef_FromoaFloatAppDef_oaSiteDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaSiteDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaSiteDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaSiteDef_static_find,METH_VARARGS,oaFloatAppDef_oaSiteDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaSiteDef_static_get,METH_VARARGS,oaFloatAppDef_oaSiteDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaSiteDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaSiteDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaSiteDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaSiteDef",
           (PyObject*)(&PyoaFloatAppDef_oaSiteDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaSiteDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaSiteDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaSiteDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaSteiner
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaSteiner_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaSteiner_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaSteinerObject* self = (PyoaFloatAppDef_oaSteinerObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaSteiner)
    {
        PyParamoaFloatAppDef_oaSteiner p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaSteiner_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaSteiner, Choices are:\n"
        "    (oaFloatAppDef_oaSteiner)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaSteiner_tp_dealloc(PyoaFloatAppDef_oaSteinerObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaSteiner_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaSteiner value;
    int convert_status=PyoaFloatAppDef_oaSteiner_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaFloatAppDef_oaSteiner::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaSteiner_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaSteiner v1;
    PyParamoaFloatAppDef_oaSteiner v2;
    int convert_status1=PyoaFloatAppDef_oaSteiner_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaSteiner_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaSteiner_Convert(PyObject* ob,PyParamoaFloatAppDef_oaSteiner* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaSteiner_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaSteiner**) ((PyoaFloatAppDef_oaSteinerObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaSteiner Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(oaFloatAppDef_oaSteiner** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaSteiner* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaSteiner_Type.tp_alloc(&PyoaFloatAppDef_oaSteiner_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaSteinerObject* self = (PyoaFloatAppDef_oaSteinerObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(oaFloatAppDef_oaSteiner* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaSteiner_Type.tp_alloc(&PyoaFloatAppDef_oaSteiner_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaSteinerObject* self = (PyoaFloatAppDef_oaSteinerObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_get_doc[] = 
"Class: oaFloatAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaSteiner)\n"
"    Calls: oaFloat get(const oaSteiner* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaSteiner,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaSteiner data;
    int convert_status=PyoaFloatAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaSteinerObject* self=(PyoaFloatAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaSteiner_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_getDefault_doc[] = 
"Class: oaFloatAppDef_oaSteiner, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaSteiner data;
    int convert_status=PyoaFloatAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaSteinerObject* self=(PyoaFloatAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_set_doc[] = 
"Class: oaFloatAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaSteiner,oaFloat)\n"
"    Calls: void set(oaSteiner* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaSteiner,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaSteiner data;
    int convert_status=PyoaFloatAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaSteinerObject* self=(PyoaFloatAppDef_oaSteinerObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaSteiner p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaSteiner_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_isNull_doc[] =
"Class: oaFloatAppDef_oaSteiner, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaSteiner data;
    int convert_status=PyoaFloatAppDef_oaSteiner_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaSteiner_assign_doc[] = 
"Class: oaFloatAppDef_oaSteiner, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaSteiner data;
  int convert_status=PyoaFloatAppDef_oaSteiner_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaSteiner p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaSteiner_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaSteiner_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaSteiner_get,METH_VARARGS,oaFloatAppDef_oaSteiner_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaSteiner_getDefault,METH_VARARGS,oaFloatAppDef_oaSteiner_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaSteiner_set,METH_VARARGS,oaFloatAppDef_oaSteiner_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaSteiner_tp_isNull,METH_VARARGS,oaFloatAppDef_oaSteiner_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaSteiner_tp_assign,METH_VARARGS,oaFloatAppDef_oaSteiner_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_doc[] = 
"Class: oaFloatAppDef_oaSteiner\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaSteiner)\n"
"    Calls: (const oaFloatAppDef_oaSteiner&)\n"
"    Signature: oaFloatAppDef_oaSteiner||cref-oaFloatAppDef_oaSteiner,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaSteiner_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaSteiner",
    sizeof(PyoaFloatAppDef_oaSteinerObject),
    0,
    (destructor)oaFloatAppDef_oaSteiner_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaSteiner_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaSteiner_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaSteiner_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaSteiner_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaSteiner_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_static_find_doc[] = 
"Class: oaFloatAppDef_oaSteiner, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaSteiner* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaSteiner|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaSteiner* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::find(p1.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaSteiner, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaSteiner_static_get_doc[] = 
"Class: oaFloatAppDef_oaSteiner, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaSteiner* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSteiner|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaSteiner* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSteiner|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaSteiner* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSteiner|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaSteiner* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaSteiner|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaSteiner_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::get(p1.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaSteinerp result= (oaFloatAppDef_oaSteiner::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaSteiner_FromoaFloatAppDef_oaSteiner(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaSteiner, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaSteiner_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaSteiner_static_find,METH_VARARGS,oaFloatAppDef_oaSteiner_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaSteiner_static_get,METH_VARARGS,oaFloatAppDef_oaSteiner_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaSteiner_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaSteiner_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaSteiner\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaSteiner",
           (PyObject*)(&PyoaFloatAppDef_oaSteiner_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaSteiner\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaSteiner_Type.tp_dict;
    for(method=oaFloatAppDef_oaSteiner_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaStepperMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaStepperMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaStepperMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaStepperMapObject* self = (PyoaFloatAppDef_oaStepperMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaStepperMap)
    {
        PyParamoaFloatAppDef_oaStepperMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaStepperMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaStepperMap, Choices are:\n"
        "    (oaFloatAppDef_oaStepperMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaStepperMap_tp_dealloc(PyoaFloatAppDef_oaStepperMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaStepperMap_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaStepperMap value;
    int convert_status=PyoaFloatAppDef_oaStepperMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaStepperMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaStepperMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaStepperMap v1;
    PyParamoaFloatAppDef_oaStepperMap v2;
    int convert_status1=PyoaFloatAppDef_oaStepperMap_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaStepperMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaStepperMap_Convert(PyObject* ob,PyParamoaFloatAppDef_oaStepperMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaStepperMap_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaStepperMap**) ((PyoaFloatAppDef_oaStepperMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaStepperMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(oaFloatAppDef_oaStepperMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaStepperMap* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaStepperMap_Type.tp_alloc(&PyoaFloatAppDef_oaStepperMap_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaStepperMapObject* self = (PyoaFloatAppDef_oaStepperMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(oaFloatAppDef_oaStepperMap* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaStepperMap_Type.tp_alloc(&PyoaFloatAppDef_oaStepperMap_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaStepperMapObject* self = (PyoaFloatAppDef_oaStepperMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_get_doc[] = 
"Class: oaFloatAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaStepperMap)\n"
"    Calls: oaFloat get(const oaStepperMap* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaStepperMap,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaStepperMap data;
    int convert_status=PyoaFloatAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaStepperMapObject* self=(PyoaFloatAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaStepperMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_getDefault_doc[] = 
"Class: oaFloatAppDef_oaStepperMap, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaStepperMap data;
    int convert_status=PyoaFloatAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaStepperMapObject* self=(PyoaFloatAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_set_doc[] = 
"Class: oaFloatAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaStepperMap,oaFloat)\n"
"    Calls: void set(oaStepperMap* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaStepperMap,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaStepperMap data;
    int convert_status=PyoaFloatAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaStepperMapObject* self=(PyoaFloatAppDef_oaStepperMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaStepperMap p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaStepperMap_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_isNull_doc[] =
"Class: oaFloatAppDef_oaStepperMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaStepperMap data;
    int convert_status=PyoaFloatAppDef_oaStepperMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaStepperMap_assign_doc[] = 
"Class: oaFloatAppDef_oaStepperMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaStepperMap data;
  int convert_status=PyoaFloatAppDef_oaStepperMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaStepperMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaStepperMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaStepperMap_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaStepperMap_get,METH_VARARGS,oaFloatAppDef_oaStepperMap_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaStepperMap_getDefault,METH_VARARGS,oaFloatAppDef_oaStepperMap_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaStepperMap_set,METH_VARARGS,oaFloatAppDef_oaStepperMap_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaStepperMap_tp_isNull,METH_VARARGS,oaFloatAppDef_oaStepperMap_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaStepperMap_tp_assign,METH_VARARGS,oaFloatAppDef_oaStepperMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_doc[] = 
"Class: oaFloatAppDef_oaStepperMap\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaStepperMap)\n"
"    Calls: (const oaFloatAppDef_oaStepperMap&)\n"
"    Signature: oaFloatAppDef_oaStepperMap||cref-oaFloatAppDef_oaStepperMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaStepperMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaStepperMap",
    sizeof(PyoaFloatAppDef_oaStepperMapObject),
    0,
    (destructor)oaFloatAppDef_oaStepperMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaStepperMap_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaStepperMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaStepperMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaStepperMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaStepperMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_static_find_doc[] = 
"Class: oaFloatAppDef_oaStepperMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaStepperMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaStepperMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::find(p1.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaStepperMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaStepperMap_static_get_doc[] = 
"Class: oaFloatAppDef_oaStepperMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaStepperMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaStepperMap* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaStepperMap* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaStepperMap* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaStepperMap|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaStepperMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::get(p1.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaStepperMapp result= (oaFloatAppDef_oaStepperMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaStepperMap_FromoaFloatAppDef_oaStepperMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaStepperMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaStepperMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaStepperMap_static_find,METH_VARARGS,oaFloatAppDef_oaStepperMap_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaStepperMap_static_get,METH_VARARGS,oaFloatAppDef_oaStepperMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaStepperMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaStepperMap_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaStepperMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaStepperMap",
           (PyObject*)(&PyoaFloatAppDef_oaStepperMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaStepperMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaStepperMap_Type.tp_dict;
    for(method=oaFloatAppDef_oaStepperMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaTech
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTech_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaTech_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaTechObject* self = (PyoaFloatAppDef_oaTechObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaTech)
    {
        PyParamoaFloatAppDef_oaTech p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaTech_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaTech, Choices are:\n"
        "    (oaFloatAppDef_oaTech)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaTech_tp_dealloc(PyoaFloatAppDef_oaTechObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTech_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaTech value;
    int convert_status=PyoaFloatAppDef_oaTech_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaTech::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaTech_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaTech v1;
    PyParamoaFloatAppDef_oaTech v2;
    int convert_status1=PyoaFloatAppDef_oaTech_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaTech_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaTech_Convert(PyObject* ob,PyParamoaFloatAppDef_oaTech* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaTech_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaTech**) ((PyoaFloatAppDef_oaTechObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaTech Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(oaFloatAppDef_oaTech** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaTech* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaTech_Type.tp_alloc(&PyoaFloatAppDef_oaTech_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaTechObject* self = (PyoaFloatAppDef_oaTechObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(oaFloatAppDef_oaTech* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaTech_Type.tp_alloc(&PyoaFloatAppDef_oaTech_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaTechObject* self = (PyoaFloatAppDef_oaTechObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_get_doc[] = 
"Class: oaFloatAppDef_oaTech, Function: get\n"
"  Paramegers: (oaTech)\n"
"    Calls: oaFloat get(const oaTech* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaTech,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTech_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTech data;
    int convert_status=PyoaFloatAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechObject* self=(PyoaFloatAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTech_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_getDefault_doc[] = 
"Class: oaFloatAppDef_oaTech, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTech_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTech data;
    int convert_status=PyoaFloatAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechObject* self=(PyoaFloatAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_set_doc[] = 
"Class: oaFloatAppDef_oaTech, Function: set\n"
"  Paramegers: (oaTech,oaFloat)\n"
"    Calls: void set(oaTech* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaTech,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaTech_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTech data;
    int convert_status=PyoaFloatAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechObject* self=(PyoaFloatAppDef_oaTechObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTech p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTech_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_isNull_doc[] =
"Class: oaFloatAppDef_oaTech, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaTech_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaTech data;
    int convert_status=PyoaFloatAppDef_oaTech_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaTech_assign_doc[] = 
"Class: oaFloatAppDef_oaTech, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaTech_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaTech data;
  int convert_status=PyoaFloatAppDef_oaTech_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaTech p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaTech_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaTech_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaTech_get,METH_VARARGS,oaFloatAppDef_oaTech_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaTech_getDefault,METH_VARARGS,oaFloatAppDef_oaTech_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaTech_set,METH_VARARGS,oaFloatAppDef_oaTech_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaTech_tp_isNull,METH_VARARGS,oaFloatAppDef_oaTech_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaTech_tp_assign,METH_VARARGS,oaFloatAppDef_oaTech_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_doc[] = 
"Class: oaFloatAppDef_oaTech\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaTech)\n"
"    Calls: (const oaFloatAppDef_oaTech&)\n"
"    Signature: oaFloatAppDef_oaTech||cref-oaFloatAppDef_oaTech,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaTech_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaTech",
    sizeof(PyoaFloatAppDef_oaTechObject),
    0,
    (destructor)oaFloatAppDef_oaTech_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaTech_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaTech_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaTech_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaTech_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaTech_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_static_find_doc[] = 
"Class: oaFloatAppDef_oaTech, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTech* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTech|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTech* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaTech_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::find(p1.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTech, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTech_static_get_doc[] = 
"Class: oaFloatAppDef_oaTech, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTech* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTech|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTech* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTech|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTech* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTech|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTech* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTech|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaTech_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::get(p1.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechp result= (oaFloatAppDef_oaTech::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaTech_FromoaFloatAppDef_oaTech(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTech, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaTech_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaTech_static_find,METH_VARARGS,oaFloatAppDef_oaTech_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaTech_static_get,METH_VARARGS,oaFloatAppDef_oaTech_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaTech_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaTech_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaTech\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaTech",
           (PyObject*)(&PyoaFloatAppDef_oaTech_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaTech\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaTech_Type.tp_dict;
    for(method=oaFloatAppDef_oaTech_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaTechHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTechHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaTechHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaTechHeaderObject* self = (PyoaFloatAppDef_oaTechHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaTechHeader)
    {
        PyParamoaFloatAppDef_oaTechHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaTechHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaTechHeader, Choices are:\n"
        "    (oaFloatAppDef_oaTechHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaTechHeader_tp_dealloc(PyoaFloatAppDef_oaTechHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTechHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaTechHeader value;
    int convert_status=PyoaFloatAppDef_oaTechHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[48];
    sprintf(buffer,"<oaFloatAppDef_oaTechHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaTechHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaTechHeader v1;
    PyParamoaFloatAppDef_oaTechHeader v2;
    int convert_status1=PyoaFloatAppDef_oaTechHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaTechHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaTechHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaTechHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaTechHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaTechHeader**) ((PyoaFloatAppDef_oaTechHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaTechHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(oaFloatAppDef_oaTechHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaTechHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaTechHeader_Type.tp_alloc(&PyoaFloatAppDef_oaTechHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaTechHeaderObject* self = (PyoaFloatAppDef_oaTechHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(oaFloatAppDef_oaTechHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaTechHeader_Type.tp_alloc(&PyoaFloatAppDef_oaTechHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaTechHeaderObject* self = (PyoaFloatAppDef_oaTechHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_get_doc[] = 
"Class: oaFloatAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaTechHeader)\n"
"    Calls: oaFloat get(const oaTechHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaTechHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechHeader data;
    int convert_status=PyoaFloatAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechHeaderObject* self=(PyoaFloatAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaTechHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechHeader data;
    int convert_status=PyoaFloatAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechHeaderObject* self=(PyoaFloatAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_set_doc[] = 
"Class: oaFloatAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaTechHeader,oaFloat)\n"
"    Calls: void set(oaTechHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaTechHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechHeader data;
    int convert_status=PyoaFloatAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechHeaderObject* self=(PyoaFloatAppDef_oaTechHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaTechHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaTechHeader data;
    int convert_status=PyoaFloatAppDef_oaTechHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaTechHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaTechHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaTechHeader data;
  int convert_status=PyoaFloatAppDef_oaTechHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaTechHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaTechHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaTechHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaTechHeader_get,METH_VARARGS,oaFloatAppDef_oaTechHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaTechHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaTechHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaTechHeader_set,METH_VARARGS,oaFloatAppDef_oaTechHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaTechHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaTechHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaTechHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaTechHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_doc[] = 
"Class: oaFloatAppDef_oaTechHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaTechHeader)\n"
"    Calls: (const oaFloatAppDef_oaTechHeader&)\n"
"    Signature: oaFloatAppDef_oaTechHeader||cref-oaFloatAppDef_oaTechHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaTechHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaTechHeader",
    sizeof(PyoaFloatAppDef_oaTechHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaTechHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaTechHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaTechHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaTechHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaTechHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaTechHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaTechHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTechHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTechHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTechHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaTechHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTechHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTechHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTechHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTechHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaTechHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechHeaderp result= (oaFloatAppDef_oaTechHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaTechHeader_FromoaFloatAppDef_oaTechHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTechHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaTechHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaTechHeader_static_find,METH_VARARGS,oaFloatAppDef_oaTechHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaTechHeader_static_get,METH_VARARGS,oaFloatAppDef_oaTechHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaTechHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaTechHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaTechHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaTechHeader",
           (PyObject*)(&PyoaFloatAppDef_oaTechHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaTechHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaTechHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaTechHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaTechLayerHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTechLayerHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaTechLayerHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaTechLayerHeaderObject* self = (PyoaFloatAppDef_oaTechLayerHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaTechLayerHeader)
    {
        PyParamoaFloatAppDef_oaTechLayerHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaTechLayerHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaTechLayerHeader, Choices are:\n"
        "    (oaFloatAppDef_oaTechLayerHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaTechLayerHeader_tp_dealloc(PyoaFloatAppDef_oaTechLayerHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTechLayerHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaTechLayerHeader value;
    int convert_status=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[53];
    sprintf(buffer,"<oaFloatAppDef_oaTechLayerHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaTechLayerHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaTechLayerHeader v1;
    PyParamoaFloatAppDef_oaTechLayerHeader v2;
    int convert_status1=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaTechLayerHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaTechLayerHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaTechLayerHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaTechLayerHeader**) ((PyoaFloatAppDef_oaTechLayerHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaTechLayerHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(oaFloatAppDef_oaTechLayerHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaTechLayerHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaTechLayerHeader_Type.tp_alloc(&PyoaFloatAppDef_oaTechLayerHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaTechLayerHeaderObject* self = (PyoaFloatAppDef_oaTechLayerHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(oaFloatAppDef_oaTechLayerHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaTechLayerHeader_Type.tp_alloc(&PyoaFloatAppDef_oaTechLayerHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaTechLayerHeaderObject* self = (PyoaFloatAppDef_oaTechLayerHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_get_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader, Function: get\n"
"  Paramegers: (oaTechLayerHeader)\n"
"    Calls: oaFloat get(const oaTechLayerHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaTechLayerHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechLayerHeaderObject* self=(PyoaFloatAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechLayerHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechLayerHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechLayerHeaderObject* self=(PyoaFloatAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_set_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader, Function: set\n"
"  Paramegers: (oaTechLayerHeader,oaFloat)\n"
"    Calls: void set(oaTechLayerHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaTechLayerHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechLayerHeaderObject* self=(PyoaFloatAppDef_oaTechLayerHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechLayerHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechLayerHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaTechLayerHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaTechLayerHeader data;
    int convert_status=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaTechLayerHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaTechLayerHeader data;
  int convert_status=PyoaFloatAppDef_oaTechLayerHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaTechLayerHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaTechLayerHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaTechLayerHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_get,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_set,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaTechLayerHeader)\n"
"    Calls: (const oaFloatAppDef_oaTechLayerHeader&)\n"
"    Signature: oaFloatAppDef_oaTechLayerHeader||cref-oaFloatAppDef_oaTechLayerHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaTechLayerHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaTechLayerHeader",
    sizeof(PyoaFloatAppDef_oaTechLayerHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaTechLayerHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaTechLayerHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaTechLayerHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaTechLayerHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaTechLayerHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaTechLayerHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTechLayerHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechLayerHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaTechLayerHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTechLayerHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechLayerHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaTechLayerHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechLayerHeaderp result= (oaFloatAppDef_oaTechLayerHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaTechLayerHeader_FromoaFloatAppDef_oaTechLayerHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTechLayerHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaTechLayerHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_static_find,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaTechLayerHeader_static_get,METH_VARARGS,oaFloatAppDef_oaTechLayerHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaTechLayerHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaTechLayerHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaTechLayerHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaTechLayerHeader",
           (PyObject*)(&PyoaFloatAppDef_oaTechLayerHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaTechLayerHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaTechLayerHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaTechLayerHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaTechViaDefHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTechViaDefHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaTechViaDefHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaTechViaDefHeaderObject* self = (PyoaFloatAppDef_oaTechViaDefHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaTechViaDefHeader)
    {
        PyParamoaFloatAppDef_oaTechViaDefHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaTechViaDefHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaTechViaDefHeader, Choices are:\n"
        "    (oaFloatAppDef_oaTechViaDefHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaTechViaDefHeader_tp_dealloc(PyoaFloatAppDef_oaTechViaDefHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTechViaDefHeader_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaTechViaDefHeader value;
    int convert_status=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaFloatAppDef_oaTechViaDefHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaTechViaDefHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaTechViaDefHeader v1;
    PyParamoaFloatAppDef_oaTechViaDefHeader v2;
    int convert_status1=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaTechViaDefHeader_Convert(PyObject* ob,PyParamoaFloatAppDef_oaTechViaDefHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaTechViaDefHeader_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaTechViaDefHeader**) ((PyoaFloatAppDef_oaTechViaDefHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaTechViaDefHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(oaFloatAppDef_oaTechViaDefHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaTechViaDefHeader* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaTechViaDefHeader_Type.tp_alloc(&PyoaFloatAppDef_oaTechViaDefHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaTechViaDefHeaderObject* self = (PyoaFloatAppDef_oaTechViaDefHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(oaFloatAppDef_oaTechViaDefHeader* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaTechViaDefHeader_Type.tp_alloc(&PyoaFloatAppDef_oaTechViaDefHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaTechViaDefHeaderObject* self = (PyoaFloatAppDef_oaTechViaDefHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_get_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: get\n"
"  Paramegers: (oaTechViaDefHeader)\n"
"    Calls: oaFloat get(const oaTechViaDefHeader* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaTechViaDefHeader,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechViaDefHeaderObject* self=(PyoaFloatAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTechViaDefHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_getDefault_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechViaDefHeaderObject* self=(PyoaFloatAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_set_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaTechViaDefHeader,oaFloat)\n"
"    Calls: void set(oaTechViaDefHeader* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaTechViaDefHeader,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTechViaDefHeaderObject* self=(PyoaFloatAppDef_oaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTechViaDefHeader p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTechViaDefHeader_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_isNull_doc[] =
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaTechViaDefHeader data;
    int convert_status=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaTechViaDefHeader_assign_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaTechViaDefHeader data;
  int convert_status=PyoaFloatAppDef_oaTechViaDefHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaTechViaDefHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaTechViaDefHeader_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_get,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_getDefault,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_set,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_tp_isNull,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_tp_assign,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaTechViaDefHeader)\n"
"    Calls: (const oaFloatAppDef_oaTechViaDefHeader&)\n"
"    Signature: oaFloatAppDef_oaTechViaDefHeader||cref-oaFloatAppDef_oaTechViaDefHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaTechViaDefHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaTechViaDefHeader",
    sizeof(PyoaFloatAppDef_oaTechViaDefHeaderObject),
    0,
    (destructor)oaFloatAppDef_oaTechViaDefHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaTechViaDefHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaTechViaDefHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaTechViaDefHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaTechViaDefHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaTechViaDefHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_static_find_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::find(p1.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTechViaDefHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTechViaDefHeader_static_get_doc[] = 
"Class: oaFloatAppDef_oaTechViaDefHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTechViaDefHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTechViaDefHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaTechViaDefHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::get(p1.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTechViaDefHeaderp result= (oaFloatAppDef_oaTechViaDefHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaTechViaDefHeader_FromoaFloatAppDef_oaTechViaDefHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTechViaDefHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaTechViaDefHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_static_find,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaTechViaDefHeader_static_get,METH_VARARGS,oaFloatAppDef_oaTechViaDefHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaTechViaDefHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaTechViaDefHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaTechViaDefHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaTechViaDefHeader",
           (PyObject*)(&PyoaFloatAppDef_oaTechViaDefHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaTechViaDefHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaTechViaDefHeader_Type.tp_dict;
    for(method=oaFloatAppDef_oaTechViaDefHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaTermObject* self = (PyoaFloatAppDef_oaTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaTerm)
    {
        PyParamoaFloatAppDef_oaTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaTerm, Choices are:\n"
        "    (oaFloatAppDef_oaTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaTerm_tp_dealloc(PyoaFloatAppDef_oaTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTerm_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaTerm value;
    int convert_status=PyoaFloatAppDef_oaTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaFloatAppDef_oaTerm::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaTerm v1;
    PyParamoaFloatAppDef_oaTerm v2;
    int convert_status1=PyoaFloatAppDef_oaTerm_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaTerm_Convert(PyObject* ob,PyParamoaFloatAppDef_oaTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaTerm_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaTerm**) ((PyoaFloatAppDef_oaTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(oaFloatAppDef_oaTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaTerm* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaTerm_Type.tp_alloc(&PyoaFloatAppDef_oaTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaTermObject* self = (PyoaFloatAppDef_oaTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(oaFloatAppDef_oaTerm* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaTerm_Type.tp_alloc(&PyoaFloatAppDef_oaTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaTermObject* self = (PyoaFloatAppDef_oaTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_get_doc[] = 
"Class: oaFloatAppDef_oaTerm, Function: get\n"
"  Paramegers: (oaTerm)\n"
"    Calls: oaFloat get(const oaTerm* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaTerm,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTerm_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTerm data;
    int convert_status=PyoaFloatAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTermObject* self=(PyoaFloatAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTerm p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTerm_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_getDefault_doc[] = 
"Class: oaFloatAppDef_oaTerm, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTerm_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTerm data;
    int convert_status=PyoaFloatAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTermObject* self=(PyoaFloatAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_set_doc[] = 
"Class: oaFloatAppDef_oaTerm, Function: set\n"
"  Paramegers: (oaTerm,oaFloat)\n"
"    Calls: void set(oaTerm* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaTerm,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaTerm_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTerm data;
    int convert_status=PyoaFloatAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTermObject* self=(PyoaFloatAppDef_oaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTerm p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTerm_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_isNull_doc[] =
"Class: oaFloatAppDef_oaTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaTerm data;
    int convert_status=PyoaFloatAppDef_oaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaTerm_assign_doc[] = 
"Class: oaFloatAppDef_oaTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaTerm data;
  int convert_status=PyoaFloatAppDef_oaTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaTerm_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaTerm_get,METH_VARARGS,oaFloatAppDef_oaTerm_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaTerm_getDefault,METH_VARARGS,oaFloatAppDef_oaTerm_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaTerm_set,METH_VARARGS,oaFloatAppDef_oaTerm_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaTerm_tp_isNull,METH_VARARGS,oaFloatAppDef_oaTerm_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaTerm_tp_assign,METH_VARARGS,oaFloatAppDef_oaTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_doc[] = 
"Class: oaFloatAppDef_oaTerm\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaTerm)\n"
"    Calls: (const oaFloatAppDef_oaTerm&)\n"
"    Signature: oaFloatAppDef_oaTerm||cref-oaFloatAppDef_oaTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaTerm",
    sizeof(PyoaFloatAppDef_oaTermObject),
    0,
    (destructor)oaFloatAppDef_oaTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_static_find_doc[] = 
"Class: oaFloatAppDef_oaTerm, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTerm* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTerm|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTerm* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::find(p1.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTerm, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTerm_static_get_doc[] = 
"Class: oaFloatAppDef_oaTerm, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTerm* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTerm* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTerm* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTerm|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTerm* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTerm|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaTerm_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::get(p1.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTermp result= (oaFloatAppDef_oaTerm::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaTerm_FromoaFloatAppDef_oaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTerm, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaTerm_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaTerm_static_find,METH_VARARGS,oaFloatAppDef_oaTerm_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaTerm_static_get,METH_VARARGS,oaFloatAppDef_oaTerm_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaTerm",
           (PyObject*)(&PyoaFloatAppDef_oaTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaTerm_Type.tp_dict;
    for(method=oaFloatAppDef_oaTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaTrackPattern
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTrackPattern_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaTrackPattern_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaTrackPatternObject* self = (PyoaFloatAppDef_oaTrackPatternObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaTrackPattern)
    {
        PyParamoaFloatAppDef_oaTrackPattern p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaTrackPattern_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaTrackPattern, Choices are:\n"
        "    (oaFloatAppDef_oaTrackPattern)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaTrackPattern_tp_dealloc(PyoaFloatAppDef_oaTrackPatternObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaTrackPattern_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaTrackPattern value;
    int convert_status=PyoaFloatAppDef_oaTrackPattern_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaFloatAppDef_oaTrackPattern::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaTrackPattern_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaTrackPattern v1;
    PyParamoaFloatAppDef_oaTrackPattern v2;
    int convert_status1=PyoaFloatAppDef_oaTrackPattern_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaTrackPattern_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaTrackPattern_Convert(PyObject* ob,PyParamoaFloatAppDef_oaTrackPattern* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaTrackPattern_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaTrackPattern**) ((PyoaFloatAppDef_oaTrackPatternObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaTrackPattern Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(oaFloatAppDef_oaTrackPattern** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaTrackPattern* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaTrackPattern_Type.tp_alloc(&PyoaFloatAppDef_oaTrackPattern_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaTrackPatternObject* self = (PyoaFloatAppDef_oaTrackPatternObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(oaFloatAppDef_oaTrackPattern* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaTrackPattern_Type.tp_alloc(&PyoaFloatAppDef_oaTrackPattern_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaTrackPatternObject* self = (PyoaFloatAppDef_oaTrackPatternObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_get_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern, Function: get\n"
"  Paramegers: (oaTrackPattern)\n"
"    Calls: oaFloat get(const oaTrackPattern* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaTrackPattern,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTrackPattern data;
    int convert_status=PyoaFloatAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTrackPatternObject* self=(PyoaFloatAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTrackPattern p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTrackPattern_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_getDefault_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTrackPattern data;
    int convert_status=PyoaFloatAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTrackPatternObject* self=(PyoaFloatAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_set_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern, Function: set\n"
"  Paramegers: (oaTrackPattern,oaFloat)\n"
"    Calls: void set(oaTrackPattern* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaTrackPattern,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaTrackPattern data;
    int convert_status=PyoaFloatAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaTrackPatternObject* self=(PyoaFloatAppDef_oaTrackPatternObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTrackPattern p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTrackPattern_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_isNull_doc[] =
"Class: oaFloatAppDef_oaTrackPattern, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaTrackPattern data;
    int convert_status=PyoaFloatAppDef_oaTrackPattern_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaTrackPattern_assign_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaTrackPattern data;
  int convert_status=PyoaFloatAppDef_oaTrackPattern_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaTrackPattern p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaTrackPattern_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaTrackPattern_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaTrackPattern_get,METH_VARARGS,oaFloatAppDef_oaTrackPattern_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaTrackPattern_getDefault,METH_VARARGS,oaFloatAppDef_oaTrackPattern_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaTrackPattern_set,METH_VARARGS,oaFloatAppDef_oaTrackPattern_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaTrackPattern_tp_isNull,METH_VARARGS,oaFloatAppDef_oaTrackPattern_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaTrackPattern_tp_assign,METH_VARARGS,oaFloatAppDef_oaTrackPattern_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaTrackPattern)\n"
"    Calls: (const oaFloatAppDef_oaTrackPattern&)\n"
"    Signature: oaFloatAppDef_oaTrackPattern||cref-oaFloatAppDef_oaTrackPattern,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaTrackPattern_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaTrackPattern",
    sizeof(PyoaFloatAppDef_oaTrackPatternObject),
    0,
    (destructor)oaFloatAppDef_oaTrackPattern_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaTrackPattern_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaTrackPattern_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaTrackPattern_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaTrackPattern_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaTrackPattern_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_static_find_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::find(p1.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTrackPattern, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaTrackPattern_static_get_doc[] = 
"Class: oaFloatAppDef_oaTrackPattern, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaTrackPattern* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaTrackPattern|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaTrackPattern_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::get(p1.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaTrackPatternp result= (oaFloatAppDef_oaTrackPattern::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaTrackPattern_FromoaFloatAppDef_oaTrackPattern(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaTrackPattern, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaTrackPattern_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaTrackPattern_static_find,METH_VARARGS,oaFloatAppDef_oaTrackPattern_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaTrackPattern_static_get,METH_VARARGS,oaFloatAppDef_oaTrackPattern_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaTrackPattern_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaTrackPattern_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaTrackPattern\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaTrackPattern",
           (PyObject*)(&PyoaFloatAppDef_oaTrackPattern_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaTrackPattern\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaTrackPattern_Type.tp_dict;
    for(method=oaFloatAppDef_oaTrackPattern_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaValue
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaValue_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaValue_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaValueObject* self = (PyoaFloatAppDef_oaValueObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaValue)
    {
        PyParamoaFloatAppDef_oaValue p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaValue_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaValue, Choices are:\n"
        "    (oaFloatAppDef_oaValue)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaValue_tp_dealloc(PyoaFloatAppDef_oaValueObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaValue_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaValue value;
    int convert_status=PyoaFloatAppDef_oaValue_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaFloatAppDef_oaValue::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaValue_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaValue v1;
    PyParamoaFloatAppDef_oaValue v2;
    int convert_status1=PyoaFloatAppDef_oaValue_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaValue_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaValue_Convert(PyObject* ob,PyParamoaFloatAppDef_oaValue* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaValue_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaValue**) ((PyoaFloatAppDef_oaValueObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaValue Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(oaFloatAppDef_oaValue** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaValue* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaValue_Type.tp_alloc(&PyoaFloatAppDef_oaValue_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaValueObject* self = (PyoaFloatAppDef_oaValueObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(oaFloatAppDef_oaValue* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaValue_Type.tp_alloc(&PyoaFloatAppDef_oaValue_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaValueObject* self = (PyoaFloatAppDef_oaValueObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_get_doc[] = 
"Class: oaFloatAppDef_oaValue, Function: get\n"
"  Paramegers: (oaValue)\n"
"    Calls: oaFloat get(const oaValue* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaValue,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaValue_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaValue data;
    int convert_status=PyoaFloatAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaValueObject* self=(PyoaFloatAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaValue_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_getDefault_doc[] = 
"Class: oaFloatAppDef_oaValue, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaValue_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaValue data;
    int convert_status=PyoaFloatAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaValueObject* self=(PyoaFloatAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_set_doc[] = 
"Class: oaFloatAppDef_oaValue, Function: set\n"
"  Paramegers: (oaValue,oaFloat)\n"
"    Calls: void set(oaValue* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaValue,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaValue_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaValue data;
    int convert_status=PyoaFloatAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaValueObject* self=(PyoaFloatAppDef_oaValueObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaValue p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaValue_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_isNull_doc[] =
"Class: oaFloatAppDef_oaValue, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaValue_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaValue data;
    int convert_status=PyoaFloatAppDef_oaValue_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaValue_assign_doc[] = 
"Class: oaFloatAppDef_oaValue, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaValue_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaValue data;
  int convert_status=PyoaFloatAppDef_oaValue_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaValue p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaValue_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaValue_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaValue_get,METH_VARARGS,oaFloatAppDef_oaValue_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaValue_getDefault,METH_VARARGS,oaFloatAppDef_oaValue_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaValue_set,METH_VARARGS,oaFloatAppDef_oaValue_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaValue_tp_isNull,METH_VARARGS,oaFloatAppDef_oaValue_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaValue_tp_assign,METH_VARARGS,oaFloatAppDef_oaValue_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_doc[] = 
"Class: oaFloatAppDef_oaValue\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaValue)\n"
"    Calls: (const oaFloatAppDef_oaValue&)\n"
"    Signature: oaFloatAppDef_oaValue||cref-oaFloatAppDef_oaValue,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaValue_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaValue",
    sizeof(PyoaFloatAppDef_oaValueObject),
    0,
    (destructor)oaFloatAppDef_oaValue_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaValue_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaValue_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaValue_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaValue_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaValue_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_static_find_doc[] = 
"Class: oaFloatAppDef_oaValue, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaValue* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaValue|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaValue* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaValue_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::find(p1.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaValue, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaValue_static_get_doc[] = 
"Class: oaFloatAppDef_oaValue, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaValue* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaValue|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaValue* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaValue|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaValue* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaValue|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaValue* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaValue|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaValue_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::get(p1.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaValuep result= (oaFloatAppDef_oaValue::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaValue_FromoaFloatAppDef_oaValue(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaValue, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaValue_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaValue_static_find,METH_VARARGS,oaFloatAppDef_oaValue_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaValue_static_get,METH_VARARGS,oaFloatAppDef_oaValue_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaValue_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaValue_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaValue\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaValue",
           (PyObject*)(&PyoaFloatAppDef_oaValue_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaValue\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaValue_Type.tp_dict;
    for(method=oaFloatAppDef_oaValue_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaVectorInstDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaVectorInstDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaVectorInstDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaVectorInstDefObject* self = (PyoaFloatAppDef_oaVectorInstDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaVectorInstDef)
    {
        PyParamoaFloatAppDef_oaVectorInstDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaVectorInstDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaVectorInstDef, Choices are:\n"
        "    (oaFloatAppDef_oaVectorInstDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaVectorInstDef_tp_dealloc(PyoaFloatAppDef_oaVectorInstDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaVectorInstDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaVectorInstDef value;
    int convert_status=PyoaFloatAppDef_oaVectorInstDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[51];
    sprintf(buffer,"<oaFloatAppDef_oaVectorInstDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaVectorInstDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaVectorInstDef v1;
    PyParamoaFloatAppDef_oaVectorInstDef v2;
    int convert_status1=PyoaFloatAppDef_oaVectorInstDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaVectorInstDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaVectorInstDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaVectorInstDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaVectorInstDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaVectorInstDef**) ((PyoaFloatAppDef_oaVectorInstDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaVectorInstDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(oaFloatAppDef_oaVectorInstDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaVectorInstDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaVectorInstDef_Type.tp_alloc(&PyoaFloatAppDef_oaVectorInstDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaVectorInstDefObject* self = (PyoaFloatAppDef_oaVectorInstDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(oaFloatAppDef_oaVectorInstDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaVectorInstDef_Type.tp_alloc(&PyoaFloatAppDef_oaVectorInstDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaVectorInstDefObject* self = (PyoaFloatAppDef_oaVectorInstDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_get_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef, Function: get\n"
"  Paramegers: (oaVectorInstDef)\n"
"    Calls: oaFloat get(const oaVectorInstDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaVectorInstDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaVectorInstDefObject* self=(PyoaFloatAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVectorInstDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVectorInstDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaVectorInstDefObject* self=(PyoaFloatAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_set_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef, Function: set\n"
"  Paramegers: (oaVectorInstDef,oaFloat)\n"
"    Calls: void set(oaVectorInstDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaVectorInstDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaVectorInstDefObject* self=(PyoaFloatAppDef_oaVectorInstDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVectorInstDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVectorInstDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_isNull_doc[] =
"Class: oaFloatAppDef_oaVectorInstDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaVectorInstDef data;
    int convert_status=PyoaFloatAppDef_oaVectorInstDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaVectorInstDef_assign_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaVectorInstDef data;
  int convert_status=PyoaFloatAppDef_oaVectorInstDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaVectorInstDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaVectorInstDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaVectorInstDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaVectorInstDef_get,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaVectorInstDef_getDefault,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaVectorInstDef_set,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaVectorInstDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaVectorInstDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaVectorInstDef)\n"
"    Calls: (const oaFloatAppDef_oaVectorInstDef&)\n"
"    Signature: oaFloatAppDef_oaVectorInstDef||cref-oaFloatAppDef_oaVectorInstDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaVectorInstDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaVectorInstDef",
    sizeof(PyoaFloatAppDef_oaVectorInstDefObject),
    0,
    (destructor)oaFloatAppDef_oaVectorInstDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaVectorInstDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaVectorInstDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaVectorInstDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaVectorInstDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaVectorInstDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::find(p1.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaVectorInstDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVectorInstDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaVectorInstDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaVectorInstDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVectorInstDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaVectorInstDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::get(p1.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaVectorInstDefp result= (oaFloatAppDef_oaVectorInstDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaVectorInstDef_FromoaFloatAppDef_oaVectorInstDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaVectorInstDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaVectorInstDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaVectorInstDef_static_find,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaVectorInstDef_static_get,METH_VARARGS,oaFloatAppDef_oaVectorInstDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaVectorInstDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaVectorInstDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaVectorInstDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaVectorInstDef",
           (PyObject*)(&PyoaFloatAppDef_oaVectorInstDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaVectorInstDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaVectorInstDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaVectorInstDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaVia
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaVia_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaVia_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaViaObject* self = (PyoaFloatAppDef_oaViaObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaVia)
    {
        PyParamoaFloatAppDef_oaVia p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaVia_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaVia, Choices are:\n"
        "    (oaFloatAppDef_oaVia)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaVia_tp_dealloc(PyoaFloatAppDef_oaViaObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaVia_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaVia value;
    int convert_status=PyoaFloatAppDef_oaVia_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaFloatAppDef_oaVia::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaVia_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaVia v1;
    PyParamoaFloatAppDef_oaVia v2;
    int convert_status1=PyoaFloatAppDef_oaVia_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaVia_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaVia_Convert(PyObject* ob,PyParamoaFloatAppDef_oaVia* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaVia_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaVia**) ((PyoaFloatAppDef_oaViaObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaVia Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(oaFloatAppDef_oaVia** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaVia* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaVia_Type.tp_alloc(&PyoaFloatAppDef_oaVia_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaViaObject* self = (PyoaFloatAppDef_oaViaObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(oaFloatAppDef_oaVia* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaVia_Type.tp_alloc(&PyoaFloatAppDef_oaVia_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaViaObject* self = (PyoaFloatAppDef_oaViaObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_get_doc[] = 
"Class: oaFloatAppDef_oaVia, Function: get\n"
"  Paramegers: (oaVia)\n"
"    Calls: oaFloat get(const oaVia* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaVia,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaVia_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaVia data;
    int convert_status=PyoaFloatAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaViaObject* self=(PyoaFloatAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVia p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaVia_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_getDefault_doc[] = 
"Class: oaFloatAppDef_oaVia, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaVia_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaVia data;
    int convert_status=PyoaFloatAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaViaObject* self=(PyoaFloatAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_set_doc[] = 
"Class: oaFloatAppDef_oaVia, Function: set\n"
"  Paramegers: (oaVia,oaFloat)\n"
"    Calls: void set(oaVia* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaVia,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaVia_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaVia data;
    int convert_status=PyoaFloatAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaViaObject* self=(PyoaFloatAppDef_oaViaObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaVia p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaVia_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_isNull_doc[] =
"Class: oaFloatAppDef_oaVia, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaVia_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaVia data;
    int convert_status=PyoaFloatAppDef_oaVia_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaVia_assign_doc[] = 
"Class: oaFloatAppDef_oaVia, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaVia_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaVia data;
  int convert_status=PyoaFloatAppDef_oaVia_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaVia p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaVia_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaVia_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaVia_get,METH_VARARGS,oaFloatAppDef_oaVia_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaVia_getDefault,METH_VARARGS,oaFloatAppDef_oaVia_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaVia_set,METH_VARARGS,oaFloatAppDef_oaVia_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaVia_tp_isNull,METH_VARARGS,oaFloatAppDef_oaVia_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaVia_tp_assign,METH_VARARGS,oaFloatAppDef_oaVia_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_doc[] = 
"Class: oaFloatAppDef_oaVia\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaVia)\n"
"    Calls: (const oaFloatAppDef_oaVia&)\n"
"    Signature: oaFloatAppDef_oaVia||cref-oaFloatAppDef_oaVia,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaVia_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaVia",
    sizeof(PyoaFloatAppDef_oaViaObject),
    0,
    (destructor)oaFloatAppDef_oaVia_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaVia_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaVia_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaVia_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaVia_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaVia_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_static_find_doc[] = 
"Class: oaFloatAppDef_oaVia, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaVia* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaVia|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaVia* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaVia_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::find(p1.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaVia, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaVia_static_get_doc[] = 
"Class: oaFloatAppDef_oaVia, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaVia* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVia|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaVia* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVia|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaVia* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVia|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaVia* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaVia|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaVia_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::get(p1.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViap result= (oaFloatAppDef_oaVia::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaVia_FromoaFloatAppDef_oaVia(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaVia, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaVia_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaVia_static_find,METH_VARARGS,oaFloatAppDef_oaVia_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaVia_static_get,METH_VARARGS,oaFloatAppDef_oaVia_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaVia_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaVia_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaVia\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaVia",
           (PyObject*)(&PyoaFloatAppDef_oaVia_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaVia\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaVia_Type.tp_dict;
    for(method=oaFloatAppDef_oaVia_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaFloatAppDef_oaViaDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaViaDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaFloatAppDef_oaViaDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaFloatAppDef_oaViaDefObject* self = (PyoaFloatAppDef_oaViaDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaFloatAppDef_oaViaDef)
    {
        PyParamoaFloatAppDef_oaViaDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaFloatAppDef_oaViaDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaFloatAppDef_oaViaDef, Choices are:\n"
        "    (oaFloatAppDef_oaViaDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaFloatAppDef_oaViaDef_tp_dealloc(PyoaFloatAppDef_oaViaDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaFloatAppDef_oaViaDef_tp_repr(PyObject *ob)
{
    PyParamoaFloatAppDef_oaViaDef value;
    int convert_status=PyoaFloatAppDef_oaViaDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaFloatAppDef_oaViaDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaFloatAppDef_oaViaDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaFloatAppDef_oaViaDef v1;
    PyParamoaFloatAppDef_oaViaDef v2;
    int convert_status1=PyoaFloatAppDef_oaViaDef_Convert(ob1,&v1);
    int convert_status2=PyoaFloatAppDef_oaViaDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaFloatAppDef_oaViaDef_Convert(PyObject* ob,PyParamoaFloatAppDef_oaViaDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaFloatAppDef_oaViaDef_Check(ob)) {
        result->SetData( (oaFloatAppDef_oaViaDef**) ((PyoaFloatAppDef_oaViaDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaFloatAppDef_oaViaDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(oaFloatAppDef_oaViaDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaFloatAppDef_oaViaDef* data=*value;
        PyObject* bself = PyoaFloatAppDef_oaViaDef_Type.tp_alloc(&PyoaFloatAppDef_oaViaDef_Type,0);
        if (bself == NULL) return bself;
        PyoaFloatAppDef_oaViaDefObject* self = (PyoaFloatAppDef_oaViaDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(oaFloatAppDef_oaViaDef* data)
{
    if (data) {
       PyObject* bself = PyoaFloatAppDef_oaViaDef_Type.tp_alloc(&PyoaFloatAppDef_oaViaDef_Type,0);
       if (bself == NULL) return bself;
       PyoaFloatAppDef_oaViaDefObject* self = (PyoaFloatAppDef_oaViaDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_get_doc[] = 
"Class: oaFloatAppDef_oaViaDef, Function: get\n"
"  Paramegers: (oaViaDef)\n"
"    Calls: oaFloat get(const oaViaDef* object)\n"
"    Signature: get|simple-oaFloat|cptr-oaViaDef,\n"
"    This function returns the value of this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaViaDef data;
    int convert_status=PyoaFloatAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaViaDefObject* self=(PyoaFloatAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaViaDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaFloat result= (data.DataCall()->get(p1.Data()));
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_getDefault_doc[] = 
"Class: oaFloatAppDef_oaViaDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaFloat getDefault() const\n"
"    Signature: getDefault|simple-oaFloat|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this float extension.\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaViaDef data;
    int convert_status=PyoaFloatAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaViaDefObject* self=(PyoaFloatAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFloat result= (data.DataCall()->getDefault());
        return PyoaFloat_FromoaFloat(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_set_doc[] = 
"Class: oaFloatAppDef_oaViaDef, Function: set\n"
"  Paramegers: (oaViaDef,oaFloat)\n"
"    Calls: void set(oaViaDef* object,oaFloat value)\n"
"    Signature: set|void-void|ptr-oaViaDef,simple-oaFloat,\n"
"    This function sets the value of this string extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaFloatAppDef_oaViaDef data;
    int convert_status=PyoaFloatAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaFloatAppDef_oaViaDefObject* self=(PyoaFloatAppDef_oaViaDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaViaDef p1;
    PyParamoaFloat p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaViaDef_Convert,&p1,
          &PyoaFloat_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_isNull_doc[] =
"Class: oaFloatAppDef_oaViaDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaFloatAppDef_oaViaDef data;
    int convert_status=PyoaFloatAppDef_oaViaDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaFloatAppDef_oaViaDef_assign_doc[] = 
"Class: oaFloatAppDef_oaViaDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaFloatAppDef_oaViaDef data;
  int convert_status=PyoaFloatAppDef_oaViaDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaFloatAppDef_oaViaDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaFloatAppDef_oaViaDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaFloatAppDef_oaViaDef_methodlist[] = {
    {"get",(PyCFunction)oaFloatAppDef_oaViaDef_get,METH_VARARGS,oaFloatAppDef_oaViaDef_get_doc},
    {"getDefault",(PyCFunction)oaFloatAppDef_oaViaDef_getDefault,METH_VARARGS,oaFloatAppDef_oaViaDef_getDefault_doc},
    {"set",(PyCFunction)oaFloatAppDef_oaViaDef_set,METH_VARARGS,oaFloatAppDef_oaViaDef_set_doc},
    {"isNull",(PyCFunction)oaFloatAppDef_oaViaDef_tp_isNull,METH_VARARGS,oaFloatAppDef_oaViaDef_isNull_doc},
    {"assign",(PyCFunction)oaFloatAppDef_oaViaDef_tp_assign,METH_VARARGS,oaFloatAppDef_oaViaDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_doc[] = 
"Class: oaFloatAppDef_oaViaDef\n"
"  The oaFloatAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once created, a float field is added to each object of the specified dataType. The default value for this extension is FLT_MAX. Applications can use the new field for whatever purpose is necessary.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaFloatAppDef_oaViaDef)\n"
"    Calls: (const oaFloatAppDef_oaViaDef&)\n"
"    Signature: oaFloatAppDef_oaViaDef||cref-oaFloatAppDef_oaViaDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaFloatAppDef_oaViaDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaFloatAppDef_oaViaDef",
    sizeof(PyoaFloatAppDef_oaViaDefObject),
    0,
    (destructor)oaFloatAppDef_oaViaDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaFloatAppDef_oaViaDef_tp_compare,	/* tp_compare */
    (reprfunc)oaFloatAppDef_oaViaDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaFloatAppDef_oaViaDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaFloatAppDef_oaViaDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaFloatAppDef_oaViaDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_static_find_doc[] = 
"Class: oaFloatAppDef_oaViaDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaViaDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaFloatAppDef_oaViaDef|cref-oaString,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaViaDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaFloatAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaFloatAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::find(p1.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::find(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaViaDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaFloatAppDef_oaViaDef_static_get_doc[] = 
"Class: oaFloatAppDef_oaViaDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaFloatAppDef_oaViaDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaFloatAppDef_oaViaDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat)\n"
"    Calls: oaFloatAppDef_oaViaDef* get(const oaString& name,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaViaDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaViaDef* get(const oaString& name,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaViaDef|cref-oaString,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name . You can create a float extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaFloatAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaFloatAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat)\n"
"    Calls: oaFloatAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue)\n"
"    Signature: get|ptr-oaFloatAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
"    Calls: oaFloatAppDef_oaViaDef* get(const oaString& name,const oaAppObjectDef* objDef,oaFloat defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaFloatAppDef_oaViaDef|cref-oaString,cptr-oaAppObjectDef,simple-oaFloat,simple-oaBoolean,\n"
"    This function constructs an oaFloatAppDef object, creating a float extension with the specified name for an object extension.\n"
"    name\n"
"    The name given to the oaFloatAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaFloatAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaFloatAppDef_oaViaDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::get(p1.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2)) {
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaFloat p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaFloat_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::get(p1.Data(),p2.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaFloat,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaFloat p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaFloat_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaFloatAppDef_oaViaDefp result= (oaFloatAppDef_oaViaDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaFloatAppDef_oaViaDef_FromoaFloatAppDef_oaViaDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaFloatAppDef_oaViaDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaFloat)\n"
        "    (oaString,oaFloat,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaFloat)\n"
        "    (oaString,oaAppObjectDef,oaFloat,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaFloatAppDef_oaViaDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaFloatAppDef_oaViaDef_static_find,METH_VARARGS,oaFloatAppDef_oaViaDef_static_find_doc},
    {"static_get",(PyCFunction)oaFloatAppDef_oaViaDef_static_get,METH_VARARGS,oaFloatAppDef_oaViaDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaFloatAppDef_oaViaDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaFloatAppDef_oaViaDef_Type)<0) {
      printf("** PyType_Ready failed for: oaFloatAppDef_oaViaDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaFloatAppDef_oaViaDef",
           (PyObject*)(&PyoaFloatAppDef_oaViaDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaFloatAppDef_oaViaDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaFloatAppDef_oaViaDef_Type.tp_dict;
    for(method=oaFloatAppDef_oaViaDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

