
/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTechObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTechObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTechObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTechObjectObject* self = (PyoaTechObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTechObject)
    {
        PyParamoaTechObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTechObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTechObject, Choices are:\n"
        "    (oaTechObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTechObject_tp_dealloc(PyoaTechObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTechObject_tp_repr(PyObject *ob)
{
    PyParamoaTechObject value;
    int convert_status=PyoaTechObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[34];
    sprintf(buffer,"<oaTechObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTechObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTechObject v1;
    PyParamoaTechObject v2;
    int convert_status1=PyoaTechObject_Convert(ob1,&v1);
    int convert_status2=PyoaTechObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTechObject_Convert(PyObject* ob,PyParamoaTechObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaTechObject_Check(ob)) {
        result->SetData( (oaTechObject**) ((PyoaTechObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTechObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTechObject_FromoaTechObject(oaTechObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTechObject* data=*value;
        if (data->getType()==oacOpPointType) return PyoaOpPoint_FromoaOpPoint((oaOpPoint**)value,borrow,lock);
        if (data->getType()==oacTechHeaderType) return PyoaTechHeader_FromoaTechHeader((oaTechHeader**)value,borrow,lock);
        if (data->getType()==oacAnalysisLibType) return PyoaAnalysisLib_FromoaAnalysisLib((oaAnalysisLib**)value,borrow,lock);
        if (data->getType()==oacPurposeType) return PyoaPurpose_FromoaPurpose((oaPurpose**)value,borrow,lock);
        if (data->isLayer()) return PyoaLayer_FromoaLayer((oaLayer**)value,borrow,lock);
        if (data->getType()==oacDerivedLayerParamType) return PyoaDerivedLayerParam_FromoaDerivedLayerParam((oaDerivedLayerParam**)value,borrow,lock);
        if (data->isViaDef()) return PyoaViaDef_FromoaViaDef((oaViaDef**)value,borrow,lock);
        if (data->isSiteDef()) return PyoaSiteDef_FromoaSiteDef((oaSiteDef**)value,borrow,lock);
        if (data->getType()==oacViaSpecType) return PyoaViaSpec_FromoaViaSpec((oaViaSpec**)value,borrow,lock);
        if (data->getType()==oacTechType) return PyoaTech_FromoaTech((oaTech**)value,borrow,lock);
        if (data->getType()==oacTechViaDefHeaderType) return PyoaTechViaDefHeader_FromoaTechViaDefHeader((oaTechViaDefHeader**)value,borrow,lock);
        if (data->getType()==oacTechLayerHeaderType) return PyoaTechLayerHeader_FromoaTechLayerHeader((oaTechLayerHeader**)value,borrow,lock);
        PyObject* bself = PyoaTechObject_Type.tp_alloc(&PyoaTechObject_Type,0);
        if (bself == NULL) return bself;
        PyoaTechObjectObject* self = (PyoaTechObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTechObject_FromoaTechObject(oaTechObject* data)
{
    if (data) {
        if (data->getType()==oacOpPointType) return PyoaOpPoint_FromoaOpPoint((oaOpPoint*)data);
        if (data->getType()==oacTechHeaderType) return PyoaTechHeader_FromoaTechHeader((oaTechHeader*)data);
        if (data->getType()==oacAnalysisLibType) return PyoaAnalysisLib_FromoaAnalysisLib((oaAnalysisLib*)data);
        if (data->getType()==oacPurposeType) return PyoaPurpose_FromoaPurpose((oaPurpose*)data);
        if (data->isLayer()) return PyoaLayer_FromoaLayer((oaLayer*)data);
        if (data->getType()==oacDerivedLayerParamType) return PyoaDerivedLayerParam_FromoaDerivedLayerParam((oaDerivedLayerParam*)data);
        if (data->isViaDef()) return PyoaViaDef_FromoaViaDef((oaViaDef*)data);
        if (data->isSiteDef()) return PyoaSiteDef_FromoaSiteDef((oaSiteDef*)data);
        if (data->getType()==oacViaSpecType) return PyoaViaSpec_FromoaViaSpec((oaViaSpec*)data);
        if (data->getType()==oacTechType) return PyoaTech_FromoaTech((oaTech*)data);
        if (data->getType()==oacTechViaDefHeaderType) return PyoaTechViaDefHeader_FromoaTechViaDefHeader((oaTechViaDefHeader*)data);
        if (data->getType()==oacTechLayerHeaderType) return PyoaTechLayerHeader_FromoaTechLayerHeader((oaTechLayerHeader*)data);
       PyObject* bself = PyoaTechObject_Type.tp_alloc(&PyoaTechObject_Type,0);
       if (bself == NULL) return bself;
       PyoaTechObjectObject* self = (PyoaTechObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTechObject_getTech_doc[] = 
"Class: oaTechObject, Function: getTech\n"
"  Paramegers: ()\n"
"    Calls: oaTech* getTech() const\n"
"    Signature: getTech|ptr-oaTech|\n"
"    BrowseData: 1\n"
"    This function returns the technology database associated with this object.\n"
;

static PyObject*
oaTechObject_getTech(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechObject data;
    int convert_status=PyoaTechObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechObjectObject* self=(PyoaTechObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTechp result= (data.DataCall()->getTech());
        return PyoaTech_FromoaTech(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechObject_isLayer_doc[] = 
"Class: oaTechObject, Function: isLayer\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isLayer() const\n"
"    Signature: isLayer|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this object is a layer object.\n"
;

static PyObject*
oaTechObject_isLayer(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechObject data;
    int convert_status=PyoaTechObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechObjectObject* self=(PyoaTechObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isLayer());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechObject_isSiteDef_doc[] = 
"Class: oaTechObject, Function: isSiteDef\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isSiteDef() const\n"
"    Signature: isSiteDef|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this object is a siteDef object.\n"
;

static PyObject*
oaTechObject_isSiteDef(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechObject data;
    int convert_status=PyoaTechObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechObjectObject* self=(PyoaTechObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isSiteDef());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechObject_isViaDef_doc[] = 
"Class: oaTechObject, Function: isViaDef\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isViaDef() const\n"
"    Signature: isViaDef|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this object is a viaDef object.\n"
;

static PyObject*
oaTechObject_isViaDef(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechObject data;
    int convert_status=PyoaTechObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechObjectObject* self=(PyoaTechObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isViaDef());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechObject_isNull_doc[] =
"Class: oaTechObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTechObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTechObject data;
    int convert_status=PyoaTechObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTechObject_assign_doc[] = 
"Class: oaTechObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTechObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTechObject data;
  int convert_status=PyoaTechObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTechObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTechObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTechObject_methodlist[] = {
    {"getTech",(PyCFunction)oaTechObject_getTech,METH_VARARGS,oaTechObject_getTech_doc},
    {"isLayer",(PyCFunction)oaTechObject_isLayer,METH_VARARGS,oaTechObject_isLayer_doc},
    {"isSiteDef",(PyCFunction)oaTechObject_isSiteDef,METH_VARARGS,oaTechObject_isSiteDef_doc},
    {"isViaDef",(PyCFunction)oaTechObject_isViaDef,METH_VARARGS,oaTechObject_isViaDef_doc},
    {"isNull",(PyCFunction)oaTechObject_tp_isNull,METH_VARARGS,oaTechObject_isNull_doc},
    {"assign",(PyCFunction)oaTechObject_tp_assign,METH_VARARGS,oaTechObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTechObject_doc[] = 
"Class: oaTechObject\n"
"  The oaTechObject class is an abstract base class for all OpenAccess technology database objects. All objects specific to the technology database are oaTechObjects.\n"
"Constructors:\n"
"  Paramegers: (oaTechObject)\n"
"    Calls: (const oaTechObject&)\n"
"    Signature: oaTechObject||cref-oaTechObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTechObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTechObject",
    sizeof(PyoaTechObjectObject),
    0,
    (destructor)oaTechObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTechObject_tp_compare,	/* tp_compare */
    (reprfunc)oaTechObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTechObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTechObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTechObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTechObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTechObject_Type)<0) {
      printf("** PyType_Ready failed for: oaTechObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTechObject",
           (PyObject*)(&PyoaTechObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTechObject\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTechViaDefHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTechViaDefHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTechViaDefHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTechViaDefHeaderObject* self = (PyoaTechViaDefHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTechViaDefHeader)
    {
        PyParamoaTechViaDefHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTechViaDefHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTechViaDefHeader, Choices are:\n"
        "    (oaTechViaDefHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTechViaDefHeader_tp_dealloc(PyoaTechViaDefHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTechViaDefHeader_tp_repr(PyObject *ob)
{
    PyParamoaTechViaDefHeader value;
    int convert_status=PyoaTechViaDefHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[40];
    sprintf(buffer,"<oaTechViaDefHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTechViaDefHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTechViaDefHeader v1;
    PyParamoaTechViaDefHeader v2;
    int convert_status1=PyoaTechViaDefHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTechViaDefHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTechViaDefHeader_Convert(PyObject* ob,PyParamoaTechViaDefHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTechViaDefHeader_Check(ob)) {
        result->SetData( (oaTechViaDefHeader**) ((PyoaTechViaDefHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTechViaDefHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTechViaDefHeader_FromoaTechViaDefHeader(oaTechViaDefHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTechViaDefHeader* data=*value;
        PyObject* bself = PyoaTechViaDefHeader_Type.tp_alloc(&PyoaTechViaDefHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTechViaDefHeaderObject* self = (PyoaTechViaDefHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTechViaDefHeader_FromoaTechViaDefHeader(oaTechViaDefHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTechViaDefHeader_Type.tp_alloc(&PyoaTechViaDefHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTechViaDefHeaderObject* self = (PyoaTechViaDefHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTechViaDefHeader_getViaDef_doc[] = 
"Class: oaTechViaDefHeader, Function: getViaDef\n"
"  Paramegers: ()\n"
"    Calls: oaViaDef* getViaDef() const\n"
"    Signature: getViaDef|ptr-oaViaDef|\n"
"    BrowseData: 1\n"
"    This function returns a pointer to the viaDef that this techHeader references. NULL is returned if the viaDef is unavailable; this may occur if the corresponding technology database is not bound.\n"
;

static PyObject*
oaTechViaDefHeader_getViaDef(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechViaDefHeader data;
    int convert_status=PyoaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechViaDefHeaderObject* self=(PyoaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaViaDefp result= (data.DataCall()->getViaDef());
        return PyoaViaDef_FromoaViaDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechViaDefHeader_getViaDefName_doc[] = 
"Class: oaTechViaDefHeader, Function: getViaDefName\n"
"  Paramegers: (oaString)\n"
"    Calls: void getViaDefName(oaString& name) const\n"
"    Signature: getViaDefName|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function retrieves the name of the viaDef that this techViaDefHeader references.\n"
"    name\n"
"    retrieved viaDef name\n"
;

static PyObject*
oaTechViaDefHeader_getViaDefName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechViaDefHeader data;
    int convert_status=PyoaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechViaDefHeaderObject* self=(PyoaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getViaDefName(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechViaDefHeader_isBound_doc[] = 
"Class: oaTechViaDefHeader, Function: isBound\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isBound() const\n"
"    Signature: isBound|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean indicating whether this techViaDefHeader is bound or not.\n"
;

static PyObject*
oaTechViaDefHeader_isBound(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTechViaDefHeader data;
    int convert_status=PyoaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTechViaDefHeaderObject* self=(PyoaTechViaDefHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isBound());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTechViaDefHeader_isNull_doc[] =
"Class: oaTechViaDefHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTechViaDefHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTechViaDefHeader data;
    int convert_status=PyoaTechViaDefHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTechViaDefHeader_assign_doc[] = 
"Class: oaTechViaDefHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTechViaDefHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTechViaDefHeader data;
  int convert_status=PyoaTechViaDefHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTechViaDefHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTechViaDefHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTechViaDefHeader_methodlist[] = {
    {"getViaDef",(PyCFunction)oaTechViaDefHeader_getViaDef,METH_VARARGS,oaTechViaDefHeader_getViaDef_doc},
    {"getViaDefName",(PyCFunction)oaTechViaDefHeader_getViaDefName,METH_VARARGS,oaTechViaDefHeader_getViaDefName_doc},
    {"isBound",(PyCFunction)oaTechViaDefHeader_isBound,METH_VARARGS,oaTechViaDefHeader_isBound_doc},
    {"isNull",(PyCFunction)oaTechViaDefHeader_tp_isNull,METH_VARARGS,oaTechViaDefHeader_isNull_doc},
    {"assign",(PyCFunction)oaTechViaDefHeader_tp_assign,METH_VARARGS,oaTechViaDefHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTechViaDefHeader_doc[] = 
"Class: oaTechViaDefHeader\n"
"  The oaTechViaDefHeader class is responsible for managing the binding to a specific viaDef, whether that viaDef exists in the same or in a referenced technology database.\n"
"Constructors:\n"
"  Paramegers: (oaTechViaDefHeader)\n"
"    Calls: (const oaTechViaDefHeader&)\n"
"    Signature: oaTechViaDefHeader||cref-oaTechViaDefHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTechViaDefHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTechViaDefHeader",
    sizeof(PyoaTechViaDefHeaderObject),
    0,
    (destructor)oaTechViaDefHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTechViaDefHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTechViaDefHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTechViaDefHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTechViaDefHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaTechObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTechViaDefHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTechViaDefHeader_static_find_doc[] = 
"Class: oaTechViaDefHeader, Function: find\n"
"  Paramegers: (oaTech,oaString)\n"
"    Calls: oaTechViaDefHeader* find(const oaTech* tech,const oaString& viaDefName)\n"
"    Signature: find|ptr-oaTechViaDefHeader|cptr-oaTech,cref-oaString,\n"
"    This function searches the specified technology database for a techViaDefHeader corresponding to a viaDef with the given name.\n"
"    tech\n"
"    tech database to search\n"
"    viaDefName\n"
"    name of viaDef whose techViaDefHeader is to be found\n"
;

static PyObject*
oaTechViaDefHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTech p1;
    PyParamoaString p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaTech_Convert,&p1,
          &PyoaString_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTechViaDefHeaderp result= (oaTechViaDefHeader::find(p1.Data(),p2.Data()));
        return PyoaTechViaDefHeader_FromoaTechViaDefHeader(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTechViaDefHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTechViaDefHeader_static_find,METH_VARARGS,oaTechViaDefHeader_static_find_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTechViaDefHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTechViaDefHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTechViaDefHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTechViaDefHeader",
           (PyObject*)(&PyoaTechViaDefHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTechViaDefHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTechViaDefHeader_Type.tp_dict;
    for(method=oaTechViaDefHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTechViaDefHeaderModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTechViaDefHeaderModTypeEnum_Convert(PyObject* ob,PyParamoaTechViaDefHeaderModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacBindTechViaDefHeaderModType")==0) { result->SetData(oacBindTechViaDefHeaderModType); return 1;}
        if (strcasecmp(str,"oacUnbindTechViaDefHeaderModType")==0) { result->SetData(oacUnbindTechViaDefHeaderModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTechViaDefHeaderModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTechViaDefHeaderModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTechViaDefHeaderModTypeEnum_FromoaTechViaDefHeaderModTypeEnum(oaTechViaDefHeaderModTypeEnum ob)
{
    if (ob==oacBindTechViaDefHeaderModType) return PyString_FromString("oacBindTechViaDefHeaderModType");
    if (ob==oacUnbindTechViaDefHeaderModType) return PyString_FromString("oacUnbindTechViaDefHeaderModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTechViaDefHeaderModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTechViaDefHeaderModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTechViaDefHeaderModTypeEnum_FromoaTechViaDefHeaderModTypeEnum(oaTechViaDefHeaderModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTechViaDefHeaderModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTechViaDefHeaderModTypeEnum_doc[] =
"Type convert function for enum: oaTechViaDefHeaderModTypeEnum";
                               
static PyMethodDef PyoaTechViaDefHeaderModTypeEnum_method =
  {"oaTechViaDefHeaderModTypeEnum",(PyCFunction)PyoaTechViaDefHeaderModTypeEnum_TypeFunction,METH_VARARGS,oaTechViaDefHeaderModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTechViaDefHeaderModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacBindTechViaDefHeaderModType");
    PyDict_SetItemString(mod_dict,"oacBindTechViaDefHeaderModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUnbindTechViaDefHeaderModType");
    PyDict_SetItemString(mod_dict,"oacUnbindTechViaDefHeaderModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTechViaDefHeaderModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTechViaDefHeaderModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTechViaDefHeaderModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTerm
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTerm_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTerm_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTermObject* self = (PyoaTermObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTerm)
    {
        PyParamoaTerm p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTerm_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTerm, Choices are:\n"
        "    (oaTerm)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTerm_tp_dealloc(PyoaTermObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTerm_tp_repr(PyObject *ob)
{
    PyParamoaTerm value;
    int convert_status=PyoaTerm_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    if (!value.Data()) {
        oaString buffer("<oaTerm::NULL>");
        result=PyString_FromString((char*)(const char*)buffer);
    }
    else {
        oaName name;
        oaString sresult;
        value.DataCall()->getName(name);
        name.get(sresult);
    
        char addr[28];
        sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
        oaString buffer;
        buffer+=oaString("<oaTerm::");
        buffer+=oaString(addr);
        buffer+=oaString("::");
        buffer+=oaString(sresult);
        buffer+=oaString(">");
        result=PyString_FromString((char*)(const char*)buffer);
    
    }
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTerm_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTerm v1;
    PyParamoaTerm v2;
    int convert_status1=PyoaTerm_Convert(ob1,&v1);
    int convert_status2=PyoaTerm_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTerm_Convert(PyObject* ob,PyParamoaTerm* result)
{
    if (ob == NULL) return 1;
    if (PyoaTerm_Check(ob)) {
        result->SetData( (oaTerm**) ((PyoaTermObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTerm Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTerm_FromoaTerm(oaTerm** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTerm* data=*value;
        if (data->getType()==oacBusTermType) return PyoaBusTerm_FromoaBusTerm((oaBusTerm**)value,borrow,lock);
        if (data->isBitTerm()) return PyoaBitTerm_FromoaBitTerm((oaBitTerm**)value,borrow,lock);
        if (data->getType()==oacBundleTermType) return PyoaBundleTerm_FromoaBundleTerm((oaBundleTerm**)value,borrow,lock);
        PyObject* bself = PyoaTerm_Type.tp_alloc(&PyoaTerm_Type,0);
        if (bself == NULL) return bself;
        PyoaTermObject* self = (PyoaTermObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTerm_FromoaTerm(oaTerm* data)
{
    if (data) {
        if (data->getType()==oacBusTermType) return PyoaBusTerm_FromoaBusTerm((oaBusTerm*)data);
        if (data->isBitTerm()) return PyoaBitTerm_FromoaBitTerm((oaBitTerm*)data);
        if (data->getType()==oacBundleTermType) return PyoaBundleTerm_FromoaBundleTerm((oaBundleTerm*)data);
       PyObject* bself = PyoaTerm_Type.tp_alloc(&PyoaTerm_Type,0);
       if (bself == NULL) return bself;
       PyoaTermObject* self = (PyoaTermObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTerm_destroy_doc[] = 
"Class: oaTerm, Function: destroy\n"
"  Paramegers: ()\n"
"    Calls: void destroy()\n"
"    Signature: destroy|void-void|\n"
"    BrowseData: 0\n"
"    This function destroys this terminal, removing it from the database.\n"
;

static PyObject*
oaTerm_destroy(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->destroy();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getBit_doc[] = 
"Class: oaTerm, Function: getBit\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaBitTerm* getBit(oaUInt4 bitIndex) const\n"
"    Signature: getBit|ptr-oaBitTerm|simple-oaUInt4,\n"
"    This function returns a pointer to the terminal that corresponds to the specified bitIndex bit of this terminal. For single-bit terminals, this function returns this terminal. For multi-bit terminals, a busTermBit is returned if this terminal is a busTerm, or a single-bit terminal is returned if this terminal is a bundleTerm.\n"
"    oacInvalidTermIndex\n"
;

static PyObject*
oaTerm_getBit(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        oaBitTermp result= (data.DataCall()->getBit(p1.Data()));
        return PyoaBitTerm_FromoaBitTerm(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getConnRoutes_doc[] = 
"Class: oaTerm, Function: getConnRoutes\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaRoute_oaTerm getConnRoutes() const\n"
"    Signature: getConnRoutes|simple-oaCollection_oaRoute_oaTerm|\n"
"    BrowseData: 1\n"
"    This function returns a collection of routes that are connected to this terminal. Each route in the collection has this terminal as either its startConn, endConn, or both.\n"
;

static PyObject*
oaTerm_getConnRoutes(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaRoute_oaTerm* result= new oaCollection_oaRoute_oaTerm(data.DataCall()->getConnRoutes());
        return PyoaCollection_oaRoute_oaTerm_FromoaCollection_oaRoute_oaTerm(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getConnRoutesIter_doc[] = 
"Class: oaTerm, Function: getConnRoutesIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaRoute getConnRoutesIter() const\n"
"    Signature: getConnRoutesIter|simple-oaIter_oaRoute|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns a collection of routes that are connected to this terminal. Each route in the collection has this terminal as either its startConn, endConn, or both.\n"
;

static PyObject*
oaTerm_getConnRoutesIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaRoute* result= new oaIter_oaRoute(data.DataCall()->getConnRoutes());
        return PyoaIter_oaRoute_FromoaIter_oaRoute(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getName_doc[] = 
"Class: oaTerm, Function: getName\n"
"  Paramegers: (oaName)\n"
"    Calls: void getName(oaName& name) const\n"
"    Signature: getName|void-void|ref-oaName,\n"
"    BrowseData: 0,oaName\n"
"    This function fills out name with the name of this terminal.\n"
"  Paramegers: (oaNameSpace,oaString)\n"
"    Calls: void getName(const oaNameSpace& ns,oaString& name) const\n"
"    Signature: getName|void-void|cref-oaNameSpace,ref-oaString,\n"
"    This function fills in name with the name of this terminal mapped to the specified nameSpace.\n"
;

static PyObject*
oaTerm_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    // Case: (oaName)
    {
        PyParamoaName p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaName_Convert,&p1)) {
            data.DataCall()->getName(p1.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    // Case: (oaNameSpace,oaString)
    {
        PyParamoaNameSpace p1;
        PyParamoaString p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaNameSpace_Convert,&p1,
              &PyoaString_Convert,&p2)) {
            data.DataCall()->getName(p1.Data(),p2.Data());
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTerm, function: getName, Choices are:\n"
        "    (oaName)\n"
        "    (oaNameSpace,oaString)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getNet_doc[] = 
"Class: oaTerm, Function: getNet\n"
"  Paramegers: ()\n"
"    Calls: oaNet* getNet() const\n"
"    Signature: getNet|ptr-oaNet|simple-oaBoolean,\n"
"    BrowseData: 1\n"
"    oaTerm::getNet\n"
"    This function returns the net to which this terminal is attached. If preferred is true , the preferred equivalent net associated with the net will be returned instead.\n"
"    preferred\n"
"    indicates whether to return the preferred equivalent\n"
"    A pointer to an oaNet\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: oaNet* getNet(oaBoolean preferred) const\n"
"    Signature: getNet|ptr-oaNet|simple-oaBoolean,\n"
"    oaTerm::getNet\n"
"    This function returns the net to which this terminal is attached. If preferred is true , the preferred equivalent net associated with the net will be returned instead.\n"
"    preferred\n"
"    indicates whether to return the preferred equivalent\n"
"    A pointer to an oaNet\n"
;

static PyObject*
oaTerm_getNet(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            oaNetp result= (data.DataCall()->getNet());
            return PyoaNet_FromoaNet(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBoolean)
    {
        PyParamoaBoolean p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaBoolean_Convert,&p1)) {
            oaNetp result= (data.DataCall()->getNet(p1.Data()));
            return PyoaNet_FromoaNet(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTerm, function: getNet, Choices are:\n"
        "    ()\n"
        "    (oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getNumBits_doc[] = 
"Class: oaTerm, Function: getNumBits\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getNumBits() const\n"
"    Signature: getNumBits|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of bits in this terminal.\n"
;

static PyObject*
oaTerm_getNumBits(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getNumBits());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getOccTerm_doc[] = 
"Class: oaTerm, Function: getOccTerm\n"
"  Paramegers: ()\n"
"    Calls: oaOccTerm* getOccTerm() const\n"
"    Signature: getOccTerm|ptr-oaOccTerm|\n"
"    BrowseData: 1\n"
"    This function returns the occurrence term that is the reflection of this block term in the context of the top occurrence of the design that contains the term.\n"
;

static PyObject*
oaTerm_getOccTerm(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaOccTermp result= (data.DataCall()->getOccTerm());
        return PyoaOccTerm_FromoaOccTerm(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getOccTerms_doc[] = 
"Class: oaTerm, Function: getOccTerms\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: oaCollection_oaOccTerm_oaTerm getOccTerms(const oaOccurrence* top) const\n"
"    Signature: getOccTerms|simple-oaCollection_oaOccTerm_oaTerm|cptr-oaOccurrence,\n"
"    This function returns a collection of occTerms on this term in the given top occurrence.\n"
"    top\n"
"    The top occurrence\n"
;

static PyObject*
oaTerm_getOccTerms(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaCollection_oaOccTerm_oaTerm* result= new oaCollection_oaOccTerm_oaTerm(data.DataCall()->getOccTerms(p1.Data()));
        return PyoaCollection_oaOccTerm_oaTerm_FromoaCollection_oaOccTerm_oaTerm(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getOccTermsIter_doc[] = 
"Class: oaTerm, Function: getOccTermsIter\n"
"  Paramegers: (oaOccurrence)\n"
"    Calls: oaIter_oaOccTerm getOccTermsIter(const oaOccurrence* top) const\n"
"    Signature: getOccTermsIter|simple-oaIter_oaOccTerm|cptr-oaOccurrence,\n"
"    This function returns an Iterator over the following collection: This function returns a collection of occTerms on this term in the given top occurrence.\n"
"    top\n"
"    The top occurrence\n"
;

static PyObject*
oaTerm_getOccTermsIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOccurrence p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOccurrence_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaIter_oaOccTerm* result= new oaIter_oaOccTerm(data.DataCall()->getOccTerms(p1.Data()));
        return PyoaIter_oaOccTerm_FromoaIter_oaOccTerm(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getPins_doc[] = 
"Class: oaTerm, Function: getPins\n"
"  Paramegers: ()\n"
"    Calls: oaCollection_oaPin_oaTerm getPins() const\n"
"    Signature: getPins|simple-oaCollection_oaPin_oaTerm|\n"
"    BrowseData: 1\n"
"    This function returns the collection of pins associated with this terminal.\n"
;

static PyObject*
oaTerm_getPins(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaCollection_oaPin_oaTerm* result= new oaCollection_oaPin_oaTerm(data.DataCall()->getPins());
        return PyoaCollection_oaPin_oaTerm_FromoaCollection_oaPin_oaTerm(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getPinsIter_doc[] = 
"Class: oaTerm, Function: getPinsIter\n"
"  Paramegers: ()\n"
"    Calls: oaIter_oaPin getPinsIter() const\n"
"    Signature: getPinsIter|simple-oaIter_oaPin|\n"
"    BrowseData: 1\n"
"    This function returns an Iterator over the following collection: This function returns the collection of pins associated with this terminal.\n"
;

static PyObject*
oaTerm_getPinsIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaIter_oaPin* result= new oaIter_oaPin(data.DataCall()->getPins());
        return PyoaIter_oaPin_FromoaIter_oaPin(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getPosition_doc[] = 
"Class: oaTerm, Function: getPosition\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getPosition() const\n"
"    Signature: getPosition|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the position that this terminal is assigned to. The value oacNullIndex is returned if this terminal has not been assigned to a position.\n"
;

static PyObject*
oaTerm_getPosition(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getPosition());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_getTermType_doc[] = 
"Class: oaTerm, Function: getTermType\n"
"  Paramegers: ()\n"
"    Calls: oaTermType getTermType() const\n"
"    Signature: getTermType|simple-oaTermType|\n"
"    BrowseData: 1\n"
"    This function returns the terminal type of this terminal.\n"
;

static PyObject*
oaTerm_getTermType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTermType* result= new oaTermType(data.DataCall()->getTermType());
        return PyoaTermType_FromoaTermType(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_isImplicit_doc[] = 
"Class: oaTerm, Function: isImplicit\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isImplicit() const\n"
"    Signature: isImplicit|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this terminal is implicit. An implicit terminal is automatically created by the database as part of the explicit creation of a multi-bit terminal.\n"
;

static PyObject*
oaTerm_isImplicit(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isImplicit());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_isInterface_doc[] = 
"Class: oaTerm, Function: isInterface\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isInterface() const\n"
"    Signature: isInterface|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean indicating whether this terminal is an interface terminal. An interface terminal is one that was explicitly created by an application calling one of the create functions on the objects derived from oaTerm. Explicitly created terminals define the interface to the block that contains them.\n"
"    Note that an interface terminal that is scalarized is still considered an interface terminal. Implementation data may be added to the resulting bitTerms after scalarization, but the interface terminal remains as a reference to how the interface was originally defined. Further edits to the block may delete the interface terminal, indicating that the interface to the block has indeed changed.\n"
;

static PyObject*
oaTerm_isInterface(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isInterface());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_moveToNet_doc[] = 
"Class: oaTerm, Function: moveToNet\n"
"  Paramegers: (oaNet)\n"
"    Calls: void moveToNet(oaNet* net)\n"
"    Signature: moveToNet|void-void|ptr-oaNet,\n"
"    This function moves this terminal to the specified net .\n"
"    oacCannotMoveToImplicitNet\n"
"    oacCannotTransferNetWithTerm\n"
"    oacMoveToNetNotInSameBlock\n"
"    oacTermNetMustBeInUniqueOccHier\n"
"    oacTermMustJoinSameNet\n"
;

static PyObject*
oaTerm_moveToNet(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaNet p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaNet_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->moveToNet(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_scalarize_doc[] = 
"Class: oaTerm, Function: scalarize\n"
"  Paramegers: ()\n"
"    Calls: void scalarize()\n"
"    Signature: scalarize|void-void|\n"
"    BrowseData: 0\n"
"    This function insures that the bitTerms associated with this terminal have been promoted to the explicit state so that they can support implementation data such as pins and routes.\n"
"    If this terminal is a multibit terminal, this function insures that all constituent bitTerms are promoted to the explicit state. The multibit terminal is then demoted to the implicit state so that no implementation data can be associated with it. When a terminal is demoted to the implicit state, associated implementation data is removed from it.\n"
"    The demotion of a multi-bit terminal has no affect on whether the terminal is an interface terminal (a terminal that was explicitly created defines the original interface for its corresponding block).\n"
"    oacCannotScalarizeImplicitTerm\n"
;

static PyObject*
oaTerm_scalarize(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->scalarize();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_setIsInterface_doc[] = 
"Class: oaTerm, Function: setIsInterface\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setIsInterface(oaBoolean isInterface)\n"
"    Signature: setIsInterface|void-void|simple-oaBoolean,\n"
"    This function changes the isInterface value for this terminal. For more information, see oaTerm::isInterface .\n"
"    isInterface\n"
"    true or false to set un unset isInterface value\n"
"    oacCannotSetIsInterfaceOfImplicitTerm\n"
;

static PyObject*
oaTerm_setIsInterface(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setIsInterface(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_setPosition_doc[] = 
"Class: oaTerm, Function: setPosition\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: void setPosition(oaUInt4 position)\n"
"    Signature: setPosition|void-void|simple-oaUInt4,\n"
"    This function assigns or changes the position of this terminal to the specified position. It is an error to assign a position to an implicit terminal or to a terminal that is visible only to the block domain. It is also an error to specify a position that is assigned to another terminal.\n"
"    position\n"
"    The position to assign the terminal to.\n"
"    oacCannotSetPositionOfImplicitTerm\n"
"    oacCannotSetPositionOfBlockOnlyTerm\n"
"    oacTermPositionAlreadyTaken\n"
;

static PyObject*
oaTerm_setPosition(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaUInt4 p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaUInt4_Convert,&p1)) {
        data.DataCall()->setPosition(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_setTermType_doc[] = 
"Class: oaTerm, Function: setTermType\n"
"  Paramegers: (oaTermType)\n"
"    Calls: void setTermType(oaTermType termType)\n"
"    Signature: setTermType|void-void|simple-oaTermType,\n"
"    This function changes the terminal type for this terminal.\n"
"    oacCannotSetBusTermBitTermType\n"
;

static PyObject*
oaTerm_setTermType(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTermType p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTermType_Convert,&p1)) {
        data.DataCall()->setTermType(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_unsetPosition_doc[] = 
"Class: oaTerm, Function: unsetPosition\n"
"  Paramegers: ()\n"
"    Calls: void unsetPosition()\n"
"    Signature: unsetPosition|void-void|\n"
"    BrowseData: 0\n"
"    This function clears the position this terminal is assigned to, freeing the position so that another terminal can be assigned to it. Nothing is done if this terminal is not currently assigned a position.\n"
;

static PyObject*
oaTerm_unsetPosition(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermObject* self=(PyoaTermObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->unsetPosition();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_isNull_doc[] =
"Class: oaTerm, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTerm_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTerm data;
    int convert_status=PyoaTerm_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTerm_assign_doc[] = 
"Class: oaTerm, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTerm_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTerm data;
  int convert_status=PyoaTerm_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTerm p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTerm_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTerm_methodlist[] = {
    {"destroy",(PyCFunction)oaTerm_destroy,METH_VARARGS,oaTerm_destroy_doc},
    {"getBit",(PyCFunction)oaTerm_getBit,METH_VARARGS,oaTerm_getBit_doc},
    {"getConnRoutes",(PyCFunction)oaTerm_getConnRoutes,METH_VARARGS,oaTerm_getConnRoutes_doc},
    {"getConnRoutesIter",(PyCFunction)oaTerm_getConnRoutesIter,METH_VARARGS,oaTerm_getConnRoutesIter_doc},
    {"getName",(PyCFunction)oaTerm_getName,METH_VARARGS,oaTerm_getName_doc},
    {"getNet",(PyCFunction)oaTerm_getNet,METH_VARARGS,oaTerm_getNet_doc},
    {"getNumBits",(PyCFunction)oaTerm_getNumBits,METH_VARARGS,oaTerm_getNumBits_doc},
    {"getOccTerm",(PyCFunction)oaTerm_getOccTerm,METH_VARARGS,oaTerm_getOccTerm_doc},
    {"getOccTerms",(PyCFunction)oaTerm_getOccTerms,METH_VARARGS,oaTerm_getOccTerms_doc},
    {"getOccTermsIter",(PyCFunction)oaTerm_getOccTermsIter,METH_VARARGS,oaTerm_getOccTermsIter_doc},
    {"getPins",(PyCFunction)oaTerm_getPins,METH_VARARGS,oaTerm_getPins_doc},
    {"getPinsIter",(PyCFunction)oaTerm_getPinsIter,METH_VARARGS,oaTerm_getPinsIter_doc},
    {"getPosition",(PyCFunction)oaTerm_getPosition,METH_VARARGS,oaTerm_getPosition_doc},
    {"getTermType",(PyCFunction)oaTerm_getTermType,METH_VARARGS,oaTerm_getTermType_doc},
    {"isImplicit",(PyCFunction)oaTerm_isImplicit,METH_VARARGS,oaTerm_isImplicit_doc},
    {"isInterface",(PyCFunction)oaTerm_isInterface,METH_VARARGS,oaTerm_isInterface_doc},
    {"moveToNet",(PyCFunction)oaTerm_moveToNet,METH_VARARGS,oaTerm_moveToNet_doc},
    {"scalarize",(PyCFunction)oaTerm_scalarize,METH_VARARGS,oaTerm_scalarize_doc},
    {"setIsInterface",(PyCFunction)oaTerm_setIsInterface,METH_VARARGS,oaTerm_setIsInterface_doc},
    {"setPosition",(PyCFunction)oaTerm_setPosition,METH_VARARGS,oaTerm_setPosition_doc},
    {"setTermType",(PyCFunction)oaTerm_setTermType,METH_VARARGS,oaTerm_setTermType_doc},
    {"unsetPosition",(PyCFunction)oaTerm_unsetPosition,METH_VARARGS,oaTerm_unsetPosition_doc},
    {"isNull",(PyCFunction)oaTerm_tp_isNull,METH_VARARGS,oaTerm_isNull_doc},
    {"assign",(PyCFunction)oaTerm_tp_assign,METH_VARARGS,oaTerm_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTerm_doc[] = 
"Class: oaTerm\n"
"  The oaTerm class is an abstract base class for all scalar and multi-bit terminals. Terminals represent the logical connection points for a block. The pins associated with terminals represent the physical connection points. The nets associated with the terminals are logically exported through the terminals to the next higher level in a design hierarchy.\n"
"  All terminals are required to have a net even if there is nothing else attached to that net.\n"
"  Multi-bit terminals represent a group of logical connections to import or export from the block. The terminals can consist of busTerms having a single root name with an index range, or they can include bundleTerms that are a more complex grouping of terminals. Multi-bit terminals can have overlapping names. For example, you can have the busTerms \"addr<7:0>\" and \"addr<3:0>\" as long as the overlapping bits are connected to the same nets.\n"
"  All busTerms with the same root name are managed by a busTermDef. The busTermDef tracks the least significant and most significant bits of all the associated busTerms, all of the busTerms with the same base name, and all of the associated busTermBits.\n"
"  BusTermBits are automatically created for each bit of a busTerm, if they do not already exist. BusTermBits are available for those applications performing scalarized connectivity traversal of the data.\n"
"  BundleTerms can contain scalarTerms and busTerms. When a bundleTerm is created, the constituent scalarTerms and busTermBits are automatically created in addition to the bundleTerm itself. All automatically created terminal objects are considered implicit .\n"
"  Names are associated with terminals. The various terminal objects take and return names through the general oaName object but also use the oaScalarName , oaVectorBitName , oaVectorName , and oaBundleName objects. These name objects manage the mapping of names from one nameSpace to another. For example, you can create a terminal using a name in the CDBA nameSpace. Another application can retrieve the terminal name in the Verilog nameSpace directly from the database.\n"
"  oaTerm objects are always in the block domain. oaTerms may be physical-only terminals that are only in the block hierarchy, or they can be cross-domain terminals that directly correspond to an oaModTerm in the module domain and an oaOccTerm in the occurrence domain.\n"
"  The oaTerm class can be observed by deriving from\n"
"Constructors:\n"
"  Paramegers: (oaTerm)\n"
"    Calls: (const oaTerm&)\n"
"    Signature: oaTerm||cref-oaTerm,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTerm_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTerm",
    sizeof(PyoaTermObject),
    0,
    (destructor)oaTerm_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTerm_tp_compare,	/* tp_compare */
    (reprfunc)oaTerm_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTerm_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTerm_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaBlockObject_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTerm_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTerm_static_create_doc[] = 
"Class: oaTerm, Function: create\n"
"  Paramegers: (oaNet,oaName)\n"
"    Calls: oaTerm* create(oaNet* net,const oaName& name)\n"
"    Signature: create|ptr-oaTerm|ptr-oaNet,cref-oaName,simple-oaTermType,simple-oaBlockDomainVisibility,\n"
"    This function creates a terminal for the specified net. This function accepts a name object and creates the corresponding terminal.\n"
"    net\n"
"    The net to connect to the terminal\n"
"    name\n"
"    The name of the terminal to create\n"
"    type\n"
"    The type of terminal to create\n"
"    view\n"
"    Specifies whether this term is visible in the module domain\n"
"    A pointer to an oaTerm\n"
"    oacTermExists\n"
"    oacScalarTermNameMatchesBusBaseName\n"
"    oacBusTermBaseNameMatchesScalarName\n"
"    oacNetTermWidthMismatch\n"
"    oacTermMemberExists\n"
"    oacCannotCreateTermWithImplicitNet\n"
"    oacImplicitModuleTermExists\n"
"    oacInvalidHierTermName\n"
"    oacInvalidTermName\n"
"    oacTermNetMustBeInUniqueOccHier\n"
"  Paramegers: (oaNet,oaName,oaTermType)\n"
"    Calls: oaTerm* create(oaNet* net,const oaName& name,oaTermType termType)\n"
"    Signature: create|ptr-oaTerm|ptr-oaNet,cref-oaName,simple-oaTermType,simple-oaBlockDomainVisibility,\n"
"    This function creates a terminal for the specified net. This function accepts a name object and creates the corresponding terminal.\n"
"    net\n"
"    The net to connect to the terminal\n"
"    name\n"
"    The name of the terminal to create\n"
"    type\n"
"    The type of terminal to create\n"
"    view\n"
"    Specifies whether this term is visible in the module domain\n"
"    A pointer to an oaTerm\n"
"    oacTermExists\n"
"    oacScalarTermNameMatchesBusBaseName\n"
"    oacBusTermBaseNameMatchesScalarName\n"
"    oacNetTermWidthMismatch\n"
"    oacTermMemberExists\n"
"    oacCannotCreateTermWithImplicitNet\n"
"    oacImplicitModuleTermExists\n"
"    oacInvalidHierTermName\n"
"    oacInvalidTermName\n"
"    oacTermNetMustBeInUniqueOccHier\n"
"  Paramegers: (oaNet,oaName,oaTermType,oaBlockDomainVisibility)\n"
"    Calls: oaTerm* create(oaNet* net,const oaName& name,oaTermType termType,oaBlockDomainVisibility view)\n"
"    Signature: create|ptr-oaTerm|ptr-oaNet,cref-oaName,simple-oaTermType,simple-oaBlockDomainVisibility,\n"
"    This function creates a terminal for the specified net. This function accepts a name object and creates the corresponding terminal.\n"
"    net\n"
"    The net to connect to the terminal\n"
"    name\n"
"    The name of the terminal to create\n"
"    type\n"
"    The type of terminal to create\n"
"    view\n"
"    Specifies whether this term is visible in the module domain\n"
"    A pointer to an oaTerm\n"
"    oacTermExists\n"
"    oacScalarTermNameMatchesBusBaseName\n"
"    oacBusTermBaseNameMatchesScalarName\n"
"    oacNetTermWidthMismatch\n"
"    oacTermMemberExists\n"
"    oacCannotCreateTermWithImplicitNet\n"
"    oacImplicitModuleTermExists\n"
"    oacInvalidHierTermName\n"
"    oacInvalidTermName\n"
"    oacTermNetMustBeInUniqueOccHier\n"
;

static PyObject*
oaTerm_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaNet,oaName)
    {
        PyParamoaNet p1;
        PyParamoaName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaNet_Convert,&p1,
              &PyoaName_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTermp result= (oaTerm::create(p1.Data(),p2.Data()));
            return PyoaTerm_FromoaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaNet,oaName,oaTermType)
    {
        PyParamoaNet p1;
        PyParamoaName p2;
        PyParamoaTermType p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaNet_Convert,&p1,
              &PyoaName_Convert,&p2,
              &PyoaTermType_Convert,&p3)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTermp result= (oaTerm::create(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTerm_FromoaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaNet,oaName,oaTermType,oaBlockDomainVisibility)
    {
        PyParamoaNet p1;
        PyParamoaName p2;
        PyParamoaTermType p3;
        PyParamoaBlockDomainVisibility p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaNet_Convert,&p1,
              &PyoaName_Convert,&p2,
              &PyoaTermType_Convert,&p3,
              &PyoaBlockDomainVisibility_Convert,&p4)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTermp result= (oaTerm::create(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTerm_FromoaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTerm, function: create, Choices are:\n"
        "    (oaNet,oaName)\n"
        "    (oaNet,oaName,oaTermType)\n"
        "    (oaNet,oaName,oaTermType,oaBlockDomainVisibility)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_static_find_doc[] = 
"Class: oaTerm, Function: find\n"
"  Paramegers: (oaBlock,oaName)\n"
"    Calls: oaTerm* find(const oaBlock* block,const oaName& name)\n"
"    Signature: find|ptr-oaTerm|cptr-oaBlock,cref-oaName,\n"
"    This function searches the specified block for a terminal with the specified name . The terminal is returned if found. Otherwise, NULL is returned.\n"
"    block\n"
"    The block to search for the terminal\n"
"    name\n"
"    The name of the terminal to match\n"
"    A pointer to an oaTerm\n"
"  Paramegers: (oaBlock,oaUInt4)\n"
"    Calls: oaTerm* find(const oaBlock* block,oaUInt4 position)\n"
"    Signature: find|ptr-oaTerm|cptr-oaBlock,simple-oaUInt4,\n"
"    This function searches the specified block for a terminal assigned to the specified position . The terminal is returned if found. Otherwise, NULL is returned.\n"
"    block\n"
"    The block to search for the terminal\n"
"    position\n"
"    The position of the terminal to match\n"
"    A pointer to an oaTerm\n"
;

static PyObject*
oaTerm_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaName)
    {
        PyParamoaBlock p1;
        PyParamoaName p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaName_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTermp result= (oaTerm::find(p1.Data(),p2.Data()));
            return PyoaTerm_FromoaTerm(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaUInt4)
    {
        PyParamoaBlock p1;
        PyParamoaUInt4 p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaUInt4_Convert,&p2)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTermp result= (oaTerm::find(p1.Data(),p2.Data()));
            return PyoaTerm_FromoaTerm(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTerm, function: find, Choices are:\n"
        "    (oaBlock,oaName)\n"
        "    (oaBlock,oaUInt4)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_static_getMaxPosition_doc[] = 
"Class: oaTerm, Function: getMaxPosition\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaUInt4 getMaxPosition(const oaBlock* block)\n"
"    Signature: getMaxPosition|simple-oaUInt4|cptr-oaBlock,\n"
"    This function returns the highest position occupied by a terminal in the specified block . If there are no terminals in the block or no position has been assigned a terminal, the value oacNullIndex is returned.\n"
"    block\n"
"    The block to report the highest assigned terminal position from\n"
;

static PyObject*
oaTerm_static_getMaxPosition(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaUInt4 result= (oaTerm::getMaxPosition(p1.Data()));
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTerm_static_isValidName_doc[] = 
"Class: oaTerm, Function: isValidName\n"
"  Paramegers: (oaNet,oaName)\n"
"    Calls: oaBoolean isValidName(const oaNet* net,const oaName& name)\n"
"    Signature: isValidName|simple-oaBoolean|cptr-oaNet,cref-oaName,\n"
"    This function returns a boolean value that indicates if the specified name , associated with the specified net , is valid for a new oaTerm object.\n"
;

static PyObject*
oaTerm_static_isValidName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaNet p1;
    PyParamoaName p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaNet_Convert,&p1,
          &PyoaName_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBoolean result= (oaTerm::isValidName(p1.Data(),p2.Data()));
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTerm_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaTerm_static_create,METH_VARARGS,oaTerm_static_create_doc},
    {"static_find",(PyCFunction)oaTerm_static_find,METH_VARARGS,oaTerm_static_find_doc},
    {"static_getMaxPosition",(PyCFunction)oaTerm_static_getMaxPosition,METH_VARARGS,oaTerm_static_getMaxPosition_doc},
    {"static_isValidName",(PyCFunction)oaTerm_static_isValidName,METH_VARARGS,oaTerm_static_isValidName_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTerm_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTerm_Type)<0) {
      printf("** PyType_Ready failed for: oaTerm\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTerm",
           (PyObject*)(&PyoaTerm_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTerm\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTerm_Type.tp_dict;
    for(method=oaTerm_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


// ==================================================================
// Array for class: oaTerm
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTerm_Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTerm_Array_Type);
    PyObject* gself = type->tp_alloc(type,0);
    if (gself == NULL) return gself;
    PyoaTerm_ArrayObject* self = (PyoaTerm_ArrayObject*)gself;
    self->borrow = 0;
    self->locks=NULL;
    static char *kwlist [] = { NULL } ;
    /* Case: () */ 
    {
        if (PyArg_ParseTuple(args,"")) {
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (int) */
    {
        int p1;
        if (PyArg_ParseTuple(args,(char*)"i",&p1)) {
            self->data.SetLen(p1);
            return gself;
        }
    }
    PyErr_Clear();
    /* Case: (oaTerm_Array) */
    {
        PyParamoaTerm_Array p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTerm_Array_Convert,&p1)) {
            self->data.TakeAway(p1);
            return gself;
        }
    }
    /* Error */
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTerm_Array, Choices are:\n"
        "    ()\n"
        "    (int)\n"
        "    (oaTerm_Array)\n"
    );
    Py_DECREF(gself);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTerm_Array_dealloc(PyObject* gself)
{
    PyoaTerm_ArrayObject* self = (PyoaTerm_ArrayObject*)gself;
    Py_XDECREF(self->locks);
    self->ob_type->tp_free(gself);
}

// ------------------------------------------------------------------
static PyObject*
oaTerm_Array_str(PyObject *ob)
{
    PyParamoaTerm_Array value;
    int convert_status=PyoaTerm_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaTerm_Array_CreateList(value);
    PyObject* result=PyObject_Str(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static PyObject*
oaTerm_Array_repr(PyObject *ob)
{
    PyParamoaTerm_Array value;
    int convert_status=PyoaTerm_Array_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* lst=PyoaTerm_Array_CreateList(value);
    PyObject* result=PyObject_Repr(lst);
    Py_DECREF(lst);
    return result;
}

// ------------------------------------------------------------------
static int
oaTerm_Array_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTerm_Array p1;
    PyParamoaTerm_Array p2;
    int s1=PyoaTerm_Array_Convert(ob1,&p1);
    int s2=PyoaTerm_Array_Convert(ob2,&p2);
    assert(s1!=0);
    assert(s2!=0);
    PyObject* l1=PyoaTerm_Array_CreateList(p1);
    PyObject* l2=PyoaTerm_Array_CreateList(p2);
    int result=PyObject_Compare(l1,l2);
    Py_DECREF(l1);
    Py_DECREF(l2);
    return result;
}

// ------------------------------------------------------------------
int
PyoaTerm_Array_Convert(PyObject* ob,PyParamoaTerm_Array* result)
{
  Pyoa_ssize_t len,i;
  if (PyoaTerm_Array_Check(ob)) {
    PyoaTerm_ArrayObject* self = (PyoaTerm_ArrayObject*)ob;
    result->Borrow(self->data);
  }
  else if (PyList_Check(ob)) {
    len=PyList_Size(ob);
    result->SetLen(len);
    PyParamoaTerm data;
    for(i=0;i<len;i++) {
      PyObject* a=PyList_GetItem(ob,i);
      if (!PyoaTerm_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else if (PyTuple_Check(ob)) {
    len=PyTuple_Size(ob);
    result->SetLen(len);
    PyParamoaTerm data;
    for(i=0;i<len;i++) {
      PyObject* a=PyTuple_GetItem(ob,i);
      if (!PyoaTerm_Convert(a,&data)) return 0;
      result->SetItem(i,data.Data());
    }
  }
  else {
    PyErr_SetString(PyExc_TypeError,
      "Convertion of parameter to class: oaTerm_Array Failed");
    return 0;
  }
  return 1;
}

// ------------------------------------------------------------------
PyObject* PyoaTerm_Array_FromoaTerm_Array(const oaTerm_Array& value)
{
  PyObject* gself = PyoaTerm_Array_Type.tp_alloc(&PyoaTerm_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaTerm_ArrayObject* self = (PyoaTerm_ArrayObject*)gself;
  self->data = value;
  self->borrow = 0;
  self->locks=NULL;
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaTerm_Array_FromoaTerm_Array(PyTypeoaTerm* data,Pyoa_ssize_t len,PyObject* lock)
{
  PyObject* gself = PyoaTerm_Array_Type.tp_alloc(&PyoaTerm_Array_Type,0);
  if (gself == NULL) return gself;
  PyoaTerm_ArrayObject* self = (PyoaTerm_ArrayObject*)gself;
  self->data.Borrow(data,len);
  self->borrow = 1;
  self->locks=NULL;
  if (lock) PyoaLockObject(self->locks,lock);
  return gself;
}

// ------------------------------------------------------------------
PyObject* PyoaTerm_Array_CreateList(PyParamoaTerm_Array& value)
{
  Pyoa_ssize_t i;
  PyObject* lst=PyList_New(value.Len());
  for(i=0;i<value.Len();i++) {
    PyObject* ob=PyoaTerm_FromoaTerm(value.Data()[i]);
    PyList_SetItem(lst,i,ob);
  }
  return lst;
}

// ------------------------------------------------------------------
// Methods
// ------------------------------------------------------------------
static char oaTerm_Array_assign_doc[] = 
"Class: oaTerm_Array, Function: assign\n"
"  Paramegers: (oaTerm_Array)\n"
"    This function assigns the current value.\n"
;

static PyObject*
oaTerm_Array_assign(PyObject* ob, PyObject *args)
{
  PyoaTerm_ArrayObject* self=(PyoaTerm_ArrayObject*)ob;
  try {
    PyParamoaTerm_Array p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTerm_Array_Convert,&p1)) {
        self->data=p1;
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
static char oaTerm_Array_list_doc[] = 
"Class: oaTerm_Array, Function: list\n"
"  Paramegers: ()\n"
"    This function returns the current value as a list.\n"
;

static PyObject*
oaTerm_Array_list(PyObject* ob, PyObject *args)
{
  PyoaTerm_ArrayObject* self=(PyoaTerm_ArrayObject*)ob;
  try {
    if (PyArg_ParseTuple(args,(char*)"")) {
      return PyoaTerm_Array_CreateList(self->data);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}
// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------
static PyMethodDef oaTerm_Array_methodlist[] = {
    {"assign",(PyCFunction)oaTerm_Array_assign,METH_VARARGS,oaTerm_Array_assign_doc},
    {"list",(PyCFunction)oaTerm_Array_list,METH_VARARGS,oaTerm_Array_list_doc},
   {NULL,NULL,0,NULL}
};

// ------------------------------------------------------------------
static PyObject*
oaTerm_Array_index_get(PyObject* ob,Pyoa_ssize_t index)
{
  PyoaTerm_ArrayObject* self=(PyoaTerm_ArrayObject*)ob;
  try {
    PyParamoaTerm_Array data;
    int convert_status=PyoaTerm_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return NULL;
    }
    return PyoaTerm_FromoaTerm(data.GetItemPtr(index),1,self->locks);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static Pyoa_ssize_t
oaTerm_Array_index_get_length(PyObject* ob)
{
    PyParamoaTerm_Array data;
    int convert_status=PyoaTerm_Array_Convert(ob,&data);
    assert(convert_status!=0);
    return data.Len();
}

// ------------------------------------------------------------------
static int
oaTerm_Array_index_set(PyObject *ob, Pyoa_ssize_t index, PyObject* value)
{
  try {
    PyParamoaTerm_Array data;
    PyParamoaTerm dataitem;
    int convert_status=PyoaTerm_Array_Convert(ob,&data);
    assert(convert_status!=0);
    if (index<0 || index>=data.Len()) {
        PyObject* err=PyString_FromString("index out of range");
        PyErr_SetObject(PyExc_IndexError, err);
        Py_DECREF(err);
        return -1;
    }
    if (PyoaTerm_Convert(value,&dataitem)==0) return -1;
    data.SetItem(index,dataitem.Data());
    return 0;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return 0;
  }
}

// ------------------------------------------------------------------
static char oaTerm_Array_doc[] =
"Class: oaTerm_Array\n"
"  The oaTerm_Array utility class provides an array of oaTerm.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTerm_Array()\n"
"    Signature: oaTerm_Array||\n"
"    This is the default constructor for the oaTerm_Array class. This constructor creates an empty oaTerm_Array.\n"
"  Paramegers: (oaTerm_Array)\n"
"    Calls: (const oaTerm_Array&)\n"
"    Signature: oaTerm_Array||cref-oaTerm_Array,\n"
;

// ------------------------------------------------------------------
static PySequenceMethods oaTerm_Array_as_sequence = {
    (Pyoa_inquiry)oaTerm_Array_index_get_length, /* sq_length */
    (Pyoa_binaryfunc)0,              /* sq_concat */
    (Pyoa_intargfunc)0,              /* sq_repeat */
    (Pyoa_intargfunc)oaTerm_Array_index_get, /* sq_item */
    (Pyoa_intintargfunc)0,           /* sq_slice */
    (Pyoa_intobjargproc)oaTerm_Array_index_set,      /* sq_ass_item */
};

// ------------------------------------------------------------------
PyTypeObject PyoaTerm_Array_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTerm_Array",
    sizeof(PyoaTerm_ArrayObject),
    0,
    oaTerm_Array_dealloc, /* tp_dealloc */
    0,  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    oaTerm_Array_compare,    /* tp_compare */
    oaTerm_Array_repr,      /* tp_repr */
    0,                                  /* tp_as_number */
    &oaTerm_Array_as_sequence,  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_as_hash */
    0,                                  /* tp_as_call */
    oaTerm_Array_str,               /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTerm_Array_doc, /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompre */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    oaTerm_Array_methodlist, /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0,                                  /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    PyType_GenericAlloc,        /* tp_alloc */
    oaTerm_Array_new, /* tp_new */
    _PyObject_Del,      /* tp_free */
};


// ------------------------------------------------------------------
int
PyoaTerm_Array_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTerm_Array_Type)<0) {
      printf("** PyType_Ready failed for: oaTerm_Array\n");
      return -1;
    }
    if (PyDict_SetItemString(mod_dict,"oaTerm_Array",
           (PyObject*)(&PyoaTerm_Array_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTerm_Array\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermArray
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTermArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTermArray_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTermArrayObject* self = (PyoaTermArrayObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: ()
    {
        if (PyArg_ParseTuple(args,"")) {
            self->value = (oaArrayBase_oaTerm*)  new oaTermArray();
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaUInt4)
    {
        PyParamoaUInt4 p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaUInt4_Convert,&p1)) {
            self->value = (oaArrayBase_oaTerm*)  new oaTermArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTermArray)
    {
        PyParamoaTermArray p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTermArray_Convert,&p1)) {
            self->value=(oaArrayBase_oaTerm*)  new oaTermArray(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTermArray, Choices are:\n"
        "    ()\n"
        "    (oaUInt4)\n"
        "    (oaTermArray)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTermArray_tp_dealloc(PyoaTermArrayObject* self)
{
    if (!self->borrow) {
        delete (oaTermArray*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTermArray_tp_repr(PyObject *ob)
{
    PyParamoaTermArray value;
    int convert_status=PyoaTermArray_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[33];
    sprintf(buffer,"<oaTermArray::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTermArray_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTermArray v1;
    PyParamoaTermArray v2;
    int convert_status1=PyoaTermArray_Convert(ob1,&v1);
    int convert_status2=PyoaTermArray_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTermArray_Convert(PyObject* ob,PyParamoaTermArray* result)
{
    if (ob == NULL) return 1;
    if (PyoaTermArray_Check(ob)) {
        result->SetData( (oaTermArray*) ((PyoaTermArrayObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermArray Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTermArray_FromoaTermArray(oaTermArray* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTermArray_Type.tp_alloc(&PyoaTermArray_Type,0);
        if (bself == NULL) return bself;
        PyoaTermArrayObject* self = (PyoaTermArrayObject*)bself;
        self->value = (oaArrayBase_oaTerm*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermArray_doc[] = 
"Class: oaTermArray\n"
"  The oaTermArray class is a utility class that implements an array of terminal pointers.\n"
"Constructors:\n"
"  Paramegers: ()\n"
"    Calls: oaTermArray()\n"
"    Signature: oaTermArray||simple-oaUInt4,\n"
"    This is the constructor for the oaTermArray class. It constructs an array of oaTerm pointers of the specified size.\n"
"    sizeIn\n"
"    The initial size to give this array\n"
"  Paramegers: (oaUInt4)\n"
"    Calls: oaTermArray(oaUInt4 sizeIn)\n"
"    Signature: oaTermArray||simple-oaUInt4,\n"
"    This is the constructor for the oaTermArray class. It constructs an array of oaTerm pointers of the specified size.\n"
"    sizeIn\n"
"    The initial size to give this array\n"
"  Paramegers: (oaTermArray)\n"
"    Calls: (const oaTermArray&)\n"
"    Signature: oaTermArray||cref-oaTermArray,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTermArray_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTermArray",
    sizeof(PyoaTermArrayObject),
    0,
    (destructor)oaTermArray_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTermArray_tp_compare,	/* tp_compare */
    (reprfunc)oaTermArray_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTermArray_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    0,					/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaArray_oaTerm_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTermArray_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTermArray_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTermArray_Type)<0) {
      printf("** PyType_Ready failed for: oaTermArray\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTermArray",
           (PyObject*)(&PyoaTermArray_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTermArray\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermAttrType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTermAttrType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTermAttrType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTermAttrTypeObject* self = (PyoaTermAttrTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTermAttrTypeEnum)
    {
        PyParamoaTermAttrTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTermAttrTypeEnum_Convert,&p1)) {
            self->value = (oaAttrType*)  new oaTermAttrType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value = (oaAttrType*)  new oaTermAttrType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaAttrType)
    {
        PyParamoaAttrType p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaAttrType_Convert,&p1)) {
            self->value = (oaAttrType*)  new oaTermAttrType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTermAttrType)
    {
        PyParamoaTermAttrType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTermAttrType_Convert,&p1)) {
            self->value=(oaAttrType*)  new oaTermAttrType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTermAttrType, Choices are:\n"
        "    (oaTermAttrTypeEnum)\n"
        "    (oaString)\n"
        "    (oaAttrType)\n"
        "    (oaTermAttrType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTermAttrType_tp_dealloc(PyoaTermAttrTypeObject* self)
{
    if (!self->borrow) {
        delete (oaTermAttrType*)(self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTermAttrType_tp_repr(PyObject *ob)
{
    PyParamoaTermAttrType value;
    int convert_status=PyoaTermAttrType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[36];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaTermAttrType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTermAttrType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTermAttrType v1;
    PyParamoaTermAttrType v2;
    int convert_status1=PyoaTermAttrType_Convert(ob1,&v1);
    int convert_status2=PyoaTermAttrType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTermAttrType_Convert(PyObject* ob,PyParamoaTermAttrType* result)
{
    if (ob == NULL) return 1;
    if (PyoaTermAttrType_Check(ob)) {
        result->SetData( (oaTermAttrType*) ((PyoaTermAttrTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermAttrType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTermAttrType_FromoaTermAttrType(oaTermAttrType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTermAttrType_Type.tp_alloc(&PyoaTermAttrType_Type,0);
        if (bself == NULL) return bself;
        PyoaTermAttrTypeObject* self = (PyoaTermAttrTypeObject*)bself;
        self->value = (oaAttrType*)  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermAttrType_getName_doc[] = 
"Class: oaTermAttrType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaTermAttrTypeEnum object.\n"
;

static PyObject*
oaTermAttrType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTermAttrType data;
    int convert_status=PyoaTermAttrType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermAttrTypeObject* self=(PyoaTermAttrTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTermAttrType_getValue_doc[] = 
"Class: oaTermAttrType, Function: getValue\n"
"  Paramegers: ()\n"
"    Calls: oaTermAttrTypeEnum getValue() const\n"
"    Signature: getValue|simple-oaTermAttrTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaTermAttrType object into the corresponding #oaTermAttrTypeEnum value.\n"
;

static PyObject*
oaTermAttrType_getValue(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTermAttrType data;
    int convert_status=PyoaTermAttrType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermAttrTypeObject* self=(PyoaTermAttrTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTermAttrTypeEnum result= (data.DataCall()->getValue());
        return PyoaTermAttrTypeEnum_FromoaTermAttrTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTermAttrType_assign_doc[] = 
"Class: oaTermAttrType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTermAttrType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTermAttrType data;
  int convert_status=PyoaTermAttrType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTermAttrType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTermAttrType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTermAttrType_methodlist[] = {
    {"getName",(PyCFunction)oaTermAttrType_getName,METH_VARARGS,oaTermAttrType_getName_doc},
    {"getValue",(PyCFunction)oaTermAttrType_getValue,METH_VARARGS,oaTermAttrType_getValue_doc},
    {"assign",(PyCFunction)oaTermAttrType_tp_assign,METH_VARARGS,oaTermAttrType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermAttrType_doc[] = 
"Class: oaTermAttrType\n"
"  The oaTermAttrType class encapsulates the enumerated values that represent the different attributes of an oaTerm object.\n"
"  oaTermAttrTypeEnum\n"
"Constructors:\n"
"  Paramegers: (oaTermAttrTypeEnum)\n"
"    Calls: oaTermAttrType(oaTermAttrTypeEnum valueIn)\n"
"    Signature: oaTermAttrType||simple-oaTermAttrTypeEnum,\n"
"    This function constructs an instance of an oaTermAttrType class using the specified #oaTermAttrTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTermAttrType(const oaString& name)\n"
"    Signature: oaTermAttrType||cref-oaString,\n"
"    This function constructs an instance of an oaTermAttrType class using the #oaTermAttrTypeEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaTermAttrTypeEnum.\n"
"    oacInvalidTermAttrTypeName\n"
"  Paramegers: (oaAttrType)\n"
"    Calls: oaTermAttrType(oaAttrType attr)\n"
"    Signature: oaTermAttrType||simple-oaAttrType,\n"
"    This function constructs an oaTermAttrType class using the oaAttrType as input to support the class down-cast.\n"
"    attr\n"
"    The attribute value to use\n"
"  Paramegers: (oaTermAttrType)\n"
"    Calls: (const oaTermAttrType&)\n"
"    Signature: oaTermAttrType||cref-oaTermAttrType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTermAttrType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTermAttrType",
    sizeof(PyoaTermAttrTypeObject),
    0,
    (destructor)oaTermAttrType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTermAttrType_tp_compare,	/* tp_compare */
    (reprfunc)oaTermAttrType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTermAttrType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTermAttrType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAttrType_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTermAttrType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTermAttrType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTermAttrType_Type)<0) {
      printf("** PyType_Ready failed for: oaTermAttrType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTermAttrType",
           (PyObject*)(&PyoaTermAttrType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTermAttrType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermAttrTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTermAttrTypeEnum_Convert(PyObject* ob,PyParamoaTermAttrTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacNameTermAttrType")==0) { result->SetData(oacNameTermAttrType); return 1;}
        if (strcasecmp(str,"oacHasPinsTermAttrType")==0) { result->SetData(oacHasPinsTermAttrType); return 1;}
        if (strcasecmp(str,"oacNumBitsTermAttrType")==0) { result->SetData(oacNumBitsTermAttrType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTermAttrTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermAttrTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTermAttrTypeEnum_FromoaTermAttrTypeEnum(oaTermAttrTypeEnum ob)
{
    if (ob==oacNameTermAttrType) return PyString_FromString("oacNameTermAttrType");
    if (ob==oacHasPinsTermAttrType) return PyString_FromString("oacHasPinsTermAttrType");
    if (ob==oacNumBitsTermAttrType) return PyString_FromString("oacNumBitsTermAttrType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTermAttrTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTermAttrTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTermAttrTypeEnum_FromoaTermAttrTypeEnum(oaTermAttrTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTermAttrTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTermAttrTypeEnum_doc[] =
"Type convert function for enum: oaTermAttrTypeEnum";
                               
static PyMethodDef PyoaTermAttrTypeEnum_method =
  {"oaTermAttrTypeEnum",(PyCFunction)PyoaTermAttrTypeEnum_TypeFunction,METH_VARARGS,oaTermAttrTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTermAttrTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacNameTermAttrType");
    PyDict_SetItemString(mod_dict,"oacNameTermAttrType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacHasPinsTermAttrType");
    PyDict_SetItemString(mod_dict,"oacHasPinsTermAttrType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacNumBitsTermAttrType");
    PyDict_SetItemString(mod_dict,"oacNumBitsTermAttrType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTermAttrTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTermAttrTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTermAttrTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTermConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTermConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTermConnectDefObject* self = (PyoaTermConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTermConnectDef)
    {
        PyParamoaTermConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTermConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTermConnectDef, Choices are:\n"
        "    (oaTermConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTermConnectDef_tp_dealloc(PyoaTermConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTermConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaTermConnectDef value;
    int convert_status=PyoaTermConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[38];
    sprintf(buffer,"<oaTermConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTermConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTermConnectDef v1;
    PyParamoaTermConnectDef v2;
    int convert_status1=PyoaTermConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaTermConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTermConnectDef_Convert(PyObject* ob,PyParamoaTermConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTermConnectDef_Check(ob)) {
        result->SetData( (oaTermConnectDef**) ((PyoaTermConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTermConnectDef_FromoaTermConnectDef(oaTermConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTermConnectDef* data=*value;
        PyObject* bself = PyoaTermConnectDef_Type.tp_alloc(&PyoaTermConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTermConnectDefObject* self = (PyoaTermConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTermConnectDef_FromoaTermConnectDef(oaTermConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaTermConnectDef_Type.tp_alloc(&PyoaTermConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTermConnectDefObject* self = (PyoaTermConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermConnectDef_getTerm_doc[] = 
"Class: oaTermConnectDef, Function: getTerm\n"
"  Paramegers: ()\n"
"    Calls: oaBitTerm* getTerm() const\n"
"    Signature: getTerm|ptr-oaBitTerm|\n"
"    BrowseData: 1\n"
"    This function returns a pointer to the bitTerm associated with this connection definition.\n"
;

static PyObject*
oaTermConnectDef_getTerm(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTermConnectDef data;
    int convert_status=PyoaTermConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermConnectDefObject* self=(PyoaTermConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBitTermp result= (data.DataCall()->getTerm());
        return PyoaBitTerm_FromoaBitTerm(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTermConnectDef_isNull_doc[] =
"Class: oaTermConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTermConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTermConnectDef data;
    int convert_status=PyoaTermConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTermConnectDef_assign_doc[] = 
"Class: oaTermConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTermConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTermConnectDef data;
  int convert_status=PyoaTermConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTermConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTermConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTermConnectDef_methodlist[] = {
    {"getTerm",(PyCFunction)oaTermConnectDef_getTerm,METH_VARARGS,oaTermConnectDef_getTerm_doc},
    {"isNull",(PyCFunction)oaTermConnectDef_tp_isNull,METH_VARARGS,oaTermConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaTermConnectDef_tp_assign,METH_VARARGS,oaTermConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermConnectDef_doc[] = 
"Class: oaTermConnectDef\n"
"  The oaTermConnectDef class implements a connection definition that associates an oaAssignmentDef with a single-bit terminal. The oaAssignmentDef used to create the oaTermConnectDef specifies the name of an oaAssignment and a default net name.\n"
"  Applications that analyze design connectivity must resolve the name of the net to externally connect to the terminal associated with the oaTermConnectDef. The application searches up the design hierarchy for an oaAssignment that matches the assignment name specified in the oaTermConnectDef. If the assignment is found, the application uses the net name it specifies as the name of the net to externally connect to the terminal that is associated with the oaTermConnectDef. If an assignment is not found, the application uses the default net name specified in the oaTermConnectDef.\n"
"  An oaTermConnectDef is often used\n"
"  as part of parameterized power and ground symbols\n"
"  to specify substrate connections\n"
"  For example, you want to use a 4 terminal transistor device but aren't sure what the bulk node connection will connect to yet. You can create an oaTermConnectDef on the bulk terminal that specifies the name of an assignment called \"bulk_override\" and has a default name name \"gnd\".\n"
"  Once you've determined what you want the bulk nodes connected to, you can create a matching oaAssignValue on an instance representing that part of the design where you want to make the assignment. You would name the oaAssignValue \"bulk_override\" and its value would be the name of the net you want to connect the bulk nodes to. If you didn't create an oaAssignment named \"bulk_override\", the default net name \"gnd\" would be used.\n"
"  Note: Not all applications support resolving connectivity specified with connection definitions and assignments. You should verify that downstream consumers of the data are able to resolve such connectivity.\n"
"Constructors:\n"
"  Paramegers: (oaTermConnectDef)\n"
"    Calls: (const oaTermConnectDef&)\n"
"    Signature: oaTermConnectDef||cref-oaTermConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTermConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTermConnectDef",
    sizeof(PyoaTermConnectDefObject),
    0,
    (destructor)oaTermConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTermConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTermConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTermConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTermConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaConnectDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTermConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermConnectDef_static_create_doc[] = 
"Class: oaTermConnectDef, Function: create\n"
"  Paramegers: (oaBitTerm,oaAssignmentDef)\n"
"    Calls: oaTermConnectDef* create(const oaBitTerm* term,const oaAssignmentDef& assignmentDef)\n"
"    Signature: create|ptr-oaTermConnectDef|cptr-oaBitTerm,cref-oaAssignmentDef,\n"
"    This function creates a connection definition on the specified term using the information in the given assignmentDef .\n"
"    term\n"
"    The single-bit terminal for which to define the connection\n"
"    assignmentDef\n"
"    The assignment definition that specifies the name of an oaAssignment to search for in order to resolve the connectivity and a default net name to use if a matching assignment is not found\n"
"    A pointer to an oaTermConnectDef\n"
"    oacTermAlreadyHasConnectDef\n"
;

static PyObject*
oaTermConnectDef_static_create(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaBitTerm p1;
    PyParamoaAssignmentDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBitTerm_Convert,&p1,
          &PyoaAssignmentDef_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTermConnectDefp result= (oaTermConnectDef::create(p1.Data(),p2.Data()));
        return PyoaTermConnectDef_FromoaTermConnectDef(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTermConnectDef_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaTermConnectDef_static_create,METH_VARARGS,oaTermConnectDef_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTermConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTermConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTermConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTermConnectDef",
           (PyObject*)(&PyoaTermConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTermConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTermConnectDef_Type.tp_dict;
    for(method=oaTermConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermModTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTermModTypeEnum_Convert(PyObject* ob,PyParamoaTermModTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacSetImplicitTermModType")==0) { result->SetData(oacSetImplicitTermModType); return 1;}
        if (strcasecmp(str,"oacSetTermTypeTermModType")==0) { result->SetData(oacSetTermTypeTermModType); return 1;}
        if (strcasecmp(str,"oacMoveToNetTermModType")==0) { result->SetData(oacMoveToNetTermModType); return 1;}
        if (strcasecmp(str,"oacSetAntennaDataTermModType")==0) { result->SetData(oacSetAntennaDataTermModType); return 1;}
        if (strcasecmp(str,"oacUnsetAntennaDataTermModType")==0) { result->SetData(oacUnsetAntennaDataTermModType); return 1;}
        if (strcasecmp(str,"oacSetPinConnectMethodTermModType")==0) { result->SetData(oacSetPinConnectMethodTermModType); return 1;}
        if (strcasecmp(str,"oacSetPositionTermModType")==0) { result->SetData(oacSetPositionTermModType); return 1;}
        if (strcasecmp(str,"oacUnsetPositionTermModType")==0) { result->SetData(oacUnsetPositionTermModType); return 1;}
        if (strcasecmp(str,"oacSetRouteMethodTermModType")==0) { result->SetData(oacSetRouteMethodTermModType); return 1;}
        if (strcasecmp(str,"oacSetInterfaceTermModType")==0) { result->SetData(oacSetInterfaceTermModType); return 1;}
        if (strcasecmp(str,"oacSetMustJoinTermModType")==0) { result->SetData(oacSetMustJoinTermModType); return 1;}
        if (strcasecmp(str,"oacUnsetMustJoinTermModType")==0) { result->SetData(oacUnsetMustJoinTermModType); return 1;}
        if (strcasecmp(str,"oacSetSupplySensitivityTermModType")==0) { result->SetData(oacSetSupplySensitivityTermModType); return 1;}
        if (strcasecmp(str,"oacSetGroundSensitivityTermModType")==0) { result->SetData(oacSetGroundSensitivityTermModType); return 1;}
        if (strcasecmp(str,"oacScalarizeTermModType")==0) { result->SetData(oacScalarizeTermModType); return 1;}
        if (strcasecmp(str,"oacScalarTermSetNameTermModType")==0) { result->SetData(oacScalarTermSetNameTermModType); return 1;}
        if (strcasecmp(str,"oacBusTermSetBaseNameTermModType")==0) { result->SetData(oacBusTermSetBaseNameTermModType); return 1;}
        if (strcasecmp(str,"oacBusTermSetRangeTermModType")==0) { result->SetData(oacBusTermSetRangeTermModType); return 1;}
        if (strcasecmp(str,"oacResetBusBitToBusTermModType")==0) { result->SetData(oacResetBusBitToBusTermModType); return 1;}
        if (strcasecmp(str,"oacResetBusToBusBitTermModType")==0) { result->SetData(oacResetBusToBusBitTermModType); return 1;}
        if (strcasecmp(str,"oacBusTermBitSetNameTermModType")==0) { result->SetData(oacBusTermBitSetNameTermModType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTermModTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermModTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTermModTypeEnum_FromoaTermModTypeEnum(oaTermModTypeEnum ob)
{
    if (ob==oacSetImplicitTermModType) return PyString_FromString("oacSetImplicitTermModType");
    if (ob==oacSetTermTypeTermModType) return PyString_FromString("oacSetTermTypeTermModType");
    if (ob==oacMoveToNetTermModType) return PyString_FromString("oacMoveToNetTermModType");
    if (ob==oacSetAntennaDataTermModType) return PyString_FromString("oacSetAntennaDataTermModType");
    if (ob==oacUnsetAntennaDataTermModType) return PyString_FromString("oacUnsetAntennaDataTermModType");
    if (ob==oacSetPinConnectMethodTermModType) return PyString_FromString("oacSetPinConnectMethodTermModType");
    if (ob==oacSetPositionTermModType) return PyString_FromString("oacSetPositionTermModType");
    if (ob==oacUnsetPositionTermModType) return PyString_FromString("oacUnsetPositionTermModType");
    if (ob==oacSetRouteMethodTermModType) return PyString_FromString("oacSetRouteMethodTermModType");
    if (ob==oacSetInterfaceTermModType) return PyString_FromString("oacSetInterfaceTermModType");
    if (ob==oacSetMustJoinTermModType) return PyString_FromString("oacSetMustJoinTermModType");
    if (ob==oacUnsetMustJoinTermModType) return PyString_FromString("oacUnsetMustJoinTermModType");
    if (ob==oacSetSupplySensitivityTermModType) return PyString_FromString("oacSetSupplySensitivityTermModType");
    if (ob==oacSetGroundSensitivityTermModType) return PyString_FromString("oacSetGroundSensitivityTermModType");
    if (ob==oacScalarizeTermModType) return PyString_FromString("oacScalarizeTermModType");
    if (ob==oacScalarTermSetNameTermModType) return PyString_FromString("oacScalarTermSetNameTermModType");
    if (ob==oacBusTermSetBaseNameTermModType) return PyString_FromString("oacBusTermSetBaseNameTermModType");
    if (ob==oacBusTermSetRangeTermModType) return PyString_FromString("oacBusTermSetRangeTermModType");
    if (ob==oacResetBusBitToBusTermModType) return PyString_FromString("oacResetBusBitToBusTermModType");
    if (ob==oacResetBusToBusBitTermModType) return PyString_FromString("oacResetBusToBusBitTermModType");
    if (ob==oacBusTermBitSetNameTermModType) return PyString_FromString("oacBusTermBitSetNameTermModType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTermModTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTermModTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTermModTypeEnum_FromoaTermModTypeEnum(oaTermModTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTermModTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTermModTypeEnum_doc[] =
"Type convert function for enum: oaTermModTypeEnum";
                               
static PyMethodDef PyoaTermModTypeEnum_method =
  {"oaTermModTypeEnum",(PyCFunction)PyoaTermModTypeEnum_TypeFunction,METH_VARARGS,oaTermModTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTermModTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacSetImplicitTermModType");
    PyDict_SetItemString(mod_dict,"oacSetImplicitTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetTermTypeTermModType");
    PyDict_SetItemString(mod_dict,"oacSetTermTypeTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMoveToNetTermModType");
    PyDict_SetItemString(mod_dict,"oacMoveToNetTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetAntennaDataTermModType");
    PyDict_SetItemString(mod_dict,"oacSetAntennaDataTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUnsetAntennaDataTermModType");
    PyDict_SetItemString(mod_dict,"oacUnsetAntennaDataTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetPinConnectMethodTermModType");
    PyDict_SetItemString(mod_dict,"oacSetPinConnectMethodTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetPositionTermModType");
    PyDict_SetItemString(mod_dict,"oacSetPositionTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUnsetPositionTermModType");
    PyDict_SetItemString(mod_dict,"oacUnsetPositionTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetRouteMethodTermModType");
    PyDict_SetItemString(mod_dict,"oacSetRouteMethodTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetInterfaceTermModType");
    PyDict_SetItemString(mod_dict,"oacSetInterfaceTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetMustJoinTermModType");
    PyDict_SetItemString(mod_dict,"oacSetMustJoinTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUnsetMustJoinTermModType");
    PyDict_SetItemString(mod_dict,"oacUnsetMustJoinTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetSupplySensitivityTermModType");
    PyDict_SetItemString(mod_dict,"oacSetSupplySensitivityTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSetGroundSensitivityTermModType");
    PyDict_SetItemString(mod_dict,"oacSetGroundSensitivityTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarizeTermModType");
    PyDict_SetItemString(mod_dict,"oacScalarizeTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacScalarTermSetNameTermModType");
    PyDict_SetItemString(mod_dict,"oacScalarTermSetNameTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusTermSetBaseNameTermModType");
    PyDict_SetItemString(mod_dict,"oacBusTermSetBaseNameTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusTermSetRangeTermModType");
    PyDict_SetItemString(mod_dict,"oacBusTermSetRangeTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacResetBusBitToBusTermModType");
    PyDict_SetItemString(mod_dict,"oacResetBusBitToBusTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacResetBusToBusBitTermModType");
    PyDict_SetItemString(mod_dict,"oacResetBusToBusBitTermModType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacBusTermBitSetNameTermModType");
    PyDict_SetItemString(mod_dict,"oacBusTermBitSetNameTermModType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTermModTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTermModTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTermModTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermTermCollTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTermTermCollTypeEnum_Convert(PyObject* ob,PyParamoaTermTermCollTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacBundleMemTermCollType")==0) { result->SetData(oacBundleMemTermCollType); return 1;}
        if (strcasecmp(str,"oacMustJoinTermCollType")==0) { result->SetData(oacMustJoinTermCollType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTermTermCollTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermTermCollTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTermTermCollTypeEnum_FromoaTermTermCollTypeEnum(oaTermTermCollTypeEnum ob)
{
    if (ob==oacBundleMemTermCollType) return PyString_FromString("oacBundleMemTermCollType");
    if (ob==oacMustJoinTermCollType) return PyString_FromString("oacMustJoinTermCollType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTermTermCollTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTermTermCollTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTermTermCollTypeEnum_FromoaTermTermCollTypeEnum(oaTermTermCollTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTermTermCollTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTermTermCollTypeEnum_doc[] =
"Type convert function for enum: oaTermTermCollTypeEnum";
                               
static PyMethodDef PyoaTermTermCollTypeEnum_method =
  {"oaTermTermCollTypeEnum",(PyCFunction)PyoaTermTermCollTypeEnum_TypeFunction,METH_VARARGS,oaTermTermCollTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTermTermCollTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacBundleMemTermCollType");
    PyDict_SetItemString(mod_dict,"oacBundleMemTermCollType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacMustJoinTermCollType");
    PyDict_SetItemString(mod_dict,"oacMustJoinTermCollType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTermTermCollTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTermTermCollTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTermTermCollTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermType
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTermType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTermType_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTermTypeObject* self = (PyoaTermTypeObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTermTypeEnum)
    {
        PyParamoaTermTypeEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTermTypeEnum_Convert,&p1)) {
            self->value =  new oaTermType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaTermType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTermType)
    {
        PyParamoaTermType p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTermType_Convert,&p1)) {
            self->value= new oaTermType(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTermType, Choices are:\n"
        "    (oaTermTypeEnum)\n"
        "    (oaString)\n"
        "    (oaTermType)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTermType_tp_dealloc(PyoaTermTypeObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTermType_tp_repr(PyObject *ob)
{
    PyParamoaTermType value;
    int convert_status=PyoaTermType_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[32];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaTermType::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTermType_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTermType v1;
    PyParamoaTermType v2;
    int convert_status1=PyoaTermType_Convert(ob1,&v1);
    int convert_status2=PyoaTermType_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTermType_Convert(PyObject* ob,PyParamoaTermType* result)
{
    if (ob == NULL) return 1;
    if (PyoaTermType_Check(ob)) {
        result->SetData(  ((PyoaTermTypeObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermType Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTermType_FromoaTermType(oaTermType* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTermType_Type.tp_alloc(&PyoaTermType_Type,0);
        if (bself == NULL) return bself;
        PyoaTermTypeObject* self = (PyoaTermTypeObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermType_getName_doc[] = 
"Class: oaTermType, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName()\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaTermTypeEnum object.\n"
;

static PyObject*
oaTermType_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTermType data;
    int convert_status=PyoaTermType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermTypeObject* self=(PyoaTermTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTermType_oaTermTypeEnum_doc[] = 
"Class: oaTermType, Function: oaTermTypeEnum\n"
"  Paramegers: ()\n"
"    Calls: oaTermTypeEnum oaTermTypeEnum() const\n"
"    Signature: operator oaTermTypeEnum|simple-oaTermTypeEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaTermType object into the corresponding #oaTermTypeEnum value.\n"
;

static PyObject*
oaTermType_oaTermTypeEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTermType data;
    int convert_status=PyoaTermType_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTermTypeObject* self=(PyoaTermTypeObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTermTypeEnum result= (data.DataCall()->operator oaTermTypeEnum());
        return PyoaTermTypeEnum_FromoaTermTypeEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTermType_assign_doc[] = 
"Class: oaTermType, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTermType_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTermType data;
  int convert_status=PyoaTermType_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTermType p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTermType_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTermType_methodlist[] = {
    {"getName",(PyCFunction)oaTermType_getName,METH_VARARGS,oaTermType_getName_doc},
    {"oaTermTypeEnum",(PyCFunction)oaTermType_oaTermTypeEnum,METH_VARARGS,oaTermType_oaTermTypeEnum_doc},
    {"assign",(PyCFunction)oaTermType_tp_assign,METH_VARARGS,oaTermType_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTermType_doc[] = 
"Class: oaTermType\n"
"  The oaTermType class encapsulates the enumerated values that describe the different uses of an oaTerm object.\n"
"  oaTermTypeEnum\n"
"Constructors:\n"
"  Paramegers: (oaTermTypeEnum)\n"
"    Calls: oaTermType(oaTermTypeEnum valueIn)\n"
"    Signature: oaTermType||simple-oaTermTypeEnum,\n"
"    This function constructs an instance of an oaTermType class using the specified #oaTermTypeEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTermType(const oaString& name)\n"
"    Signature: oaTermType||cref-oaString,\n"
"    This function constructs an instance of an oaTermType class using the #oaTermTypeEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaTermTypeEnum.\n"
"    oacInvalidTermTypeName\n"
"    This exception is thrown if no matching name is found\n"
"  Paramegers: (oaTermType)\n"
"    Calls: (const oaTermType&)\n"
"    Signature: oaTermType||cref-oaTermType,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTermType_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTermType",
    sizeof(PyoaTermTypeObject),
    0,
    (destructor)oaTermType_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTermType_tp_compare,	/* tp_compare */
    (reprfunc)oaTermType_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTermType_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTermType_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTermType_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTermType_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTermType_Type)<0) {
      printf("** PyType_Ready failed for: oaTermType\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTermType",
           (PyObject*)(&PyoaTermType_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTermType\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTermTypeEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTermTypeEnum_Convert(PyObject* ob,PyParamoaTermTypeEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacInputTermType")==0) { result->SetData(oacInputTermType); return 1;}
        if (strcasecmp(str,"oacOutputTermType")==0) { result->SetData(oacOutputTermType); return 1;}
        if (strcasecmp(str,"oacInputOutputTermType")==0) { result->SetData(oacInputOutputTermType); return 1;}
        if (strcasecmp(str,"oacSwitchTermType")==0) { result->SetData(oacSwitchTermType); return 1;}
        if (strcasecmp(str,"oacJumperTermType")==0) { result->SetData(oacJumperTermType); return 1;}
        if (strcasecmp(str,"oacUnusedTermType")==0) { result->SetData(oacUnusedTermType); return 1;}
        if (strcasecmp(str,"oacTristateTermType")==0) { result->SetData(oacTristateTermType); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTermTypeEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTermTypeEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTermTypeEnum_FromoaTermTypeEnum(oaTermTypeEnum ob)
{
    if (ob==oacInputTermType) return PyString_FromString("oacInputTermType");
    if (ob==oacOutputTermType) return PyString_FromString("oacOutputTermType");
    if (ob==oacInputOutputTermType) return PyString_FromString("oacInputOutputTermType");
    if (ob==oacSwitchTermType) return PyString_FromString("oacSwitchTermType");
    if (ob==oacJumperTermType) return PyString_FromString("oacJumperTermType");
    if (ob==oacUnusedTermType) return PyString_FromString("oacUnusedTermType");
    if (ob==oacTristateTermType) return PyString_FromString("oacTristateTermType");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTermTypeEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTermTypeEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTermTypeEnum_FromoaTermTypeEnum(oaTermTypeEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTermTypeEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTermTypeEnum_doc[] =
"Type convert function for enum: oaTermTypeEnum";
                               
static PyMethodDef PyoaTermTypeEnum_method =
  {"oaTermTypeEnum",(PyCFunction)PyoaTermTypeEnum_TypeFunction,METH_VARARGS,oaTermTypeEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTermTypeEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacInputTermType");
    PyDict_SetItemString(mod_dict,"oacInputTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacOutputTermType");
    PyDict_SetItemString(mod_dict,"oacOutputTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacInputOutputTermType");
    PyDict_SetItemString(mod_dict,"oacInputOutputTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacSwitchTermType");
    PyDict_SetItemString(mod_dict,"oacSwitchTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacJumperTermType");
    PyDict_SetItemString(mod_dict,"oacJumperTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUnusedTermType");
    PyDict_SetItemString(mod_dict,"oacUnusedTermType",value);
    Py_DECREF(value);
    value=PyString_FromString("oacTristateTermType");
    PyDict_SetItemString(mod_dict,"oacTristateTermType",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTermTypeEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTermTypeEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTermTypeEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaText
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaText_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaText_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextObject* self = (PyoaTextObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaText)
    {
        PyParamoaText p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaText_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaText, Choices are:\n"
        "    (oaText)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaText_tp_dealloc(PyoaTextObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaText_tp_repr(PyObject *ob)
{
    PyParamoaText value;
    int convert_status=PyoaText_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[28];
    sprintf(buffer,"<oaText::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaText_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaText v1;
    PyParamoaText v2;
    int convert_status1=PyoaText_Convert(ob1,&v1);
    int convert_status2=PyoaText_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaText_Convert(PyObject* ob,PyParamoaText* result)
{
    if (ob == NULL) return 1;
    if (PyoaText_Check(ob)) {
        result->SetData( (oaText**) ((PyoaTextObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaText Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaText_FromoaText(oaText** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaText* data=*value;
        if (data->getType()==oacEvalTextType) return PyoaEvalText_FromoaEvalText((oaEvalText**)value,borrow,lock);
        PyObject* bself = PyoaText_Type.tp_alloc(&PyoaText_Type,0);
        if (bself == NULL) return bself;
        PyoaTextObject* self = (PyoaTextObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaText_FromoaText(oaText* data)
{
    if (data) {
        if (data->getType()==oacEvalTextType) return PyoaEvalText_FromoaEvalText((oaEvalText*)data);
       PyObject* bself = PyoaText_Type.tp_alloc(&PyoaText_Type,0);
       if (bself == NULL) return bself;
       PyoaTextObject* self = (PyoaTextObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaText_getAlignment_doc[] = 
"Class: oaText, Function: getAlignment\n"
"  Paramegers: ()\n"
"    Calls: oaTextAlign getAlignment() const\n"
"    Signature: getAlignment|simple-oaTextAlign|\n"
"    BrowseData: 1\n"
"    This function returns the alignment of this text object.\n"
;

static PyObject*
oaText_getAlignment(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTextAlign* result= new oaTextAlign(data.DataCall()->getAlignment());
        return PyoaTextAlign_FromoaTextAlign(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_getFont_doc[] = 
"Class: oaText, Function: getFont\n"
"  Paramegers: ()\n"
"    Calls: oaFont getFont() const\n"
"    Signature: getFont|simple-oaFont|\n"
"    BrowseData: 1\n"
"    This function returns the font of this text object.\n"
;

static PyObject*
oaText_getFont(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFont* result= new oaFont(data.DataCall()->getFont());
        return PyoaFont_FromoaFont(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_getHeight_doc[] = 
"Class: oaText, Function: getHeight\n"
"  Paramegers: ()\n"
"    Calls: oaDist getHeight() const\n"
"    Signature: getHeight|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the height of this text object.\n"
;

static PyObject*
oaText_getHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getHeight());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_getOrient_doc[] = 
"Class: oaText, Function: getOrient\n"
"  Paramegers: ()\n"
"    Calls: oaOrient getOrient() const\n"
"    Signature: getOrient|simple-oaOrient|\n"
"    BrowseData: 1\n"
"    This function returns the orientation of this text object.\n"
;

static PyObject*
oaText_getOrient(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaOrient* result= new oaOrient(data.DataCall()->getOrient());
        return PyoaOrient_FromoaOrient(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_getOrigin_doc[] = 
"Class: oaText, Function: getOrigin\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void getOrigin(oaPoint& origin) const\n"
"    Signature: getOrigin|void-void|ref-oaPoint,\n"
"    BrowseData: 0,oaPoint\n"
"    This function returns the origin of this text object.\n"
;

static PyObject*
oaText_getOrigin(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->getOrigin(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_getText_doc[] = 
"Class: oaText, Function: getText\n"
"  Paramegers: (oaString)\n"
"    Calls: void getText(oaString& text) const\n"
"    Signature: getText|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the value or text of this text object.\n"
;

static PyObject*
oaText_getText(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getText(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_hasOverbar_doc[] = 
"Class: oaText, Function: hasOverbar\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasOverbar() const\n"
"    Signature: hasOverbar|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this text has an overbar on it.\n"
"    true or false\n"
;

static PyObject*
oaText_hasOverbar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasOverbar());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_isDrafting_doc[] = 
"Class: oaText, Function: isDrafting\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isDrafting() const\n"
"    Signature: isDrafting|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this text is displayed in drafting style.\n"
"    true or false\n"
;

static PyObject*
oaText_isDrafting(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isDrafting());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_isVisible_doc[] = 
"Class: oaText, Function: isVisible\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isVisible() const\n"
"    Signature: isVisible|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this text is displayed.\n"
"    true or false\n"
;

static PyObject*
oaText_isVisible(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isVisible());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setAlignment_doc[] = 
"Class: oaText, Function: setAlignment\n"
"  Paramegers: (oaTextAlign)\n"
"    Calls: void setAlignment(oaTextAlign alignment)\n"
"    Signature: setAlignment|void-void|simple-oaTextAlign,\n"
"    This function sets the alignment for this text object.\n"
;

static PyObject*
oaText_setAlignment(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTextAlign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTextAlign_Convert,&p1)) {
        data.DataCall()->setAlignment(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setDrafting_doc[] = 
"Class: oaText, Function: setDrafting\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setDrafting(oaBoolean drafting)\n"
"    Signature: setDrafting|void-void|simple-oaBoolean,\n"
"    This function sets the flag that indicates if this text object is displayed in drafting mode.\n"
;

static PyObject*
oaText_setDrafting(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setDrafting(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setFont_doc[] = 
"Class: oaText, Function: setFont\n"
"  Paramegers: (oaFont)\n"
"    Calls: void setFont(oaFont font)\n"
"    Signature: setFont|void-void|simple-oaFont,\n"
"    This function sets the font used by this text object.\n"
;

static PyObject*
oaText_setFont(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFont p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFont_Convert,&p1)) {
        data.DataCall()->setFont(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setHeight_doc[] = 
"Class: oaText, Function: setHeight\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setHeight(oaDist height)\n"
"    Signature: setHeight|void-void|simple-oaDist,\n"
"    oaText::setHeight\n"
"    This function sets the height of this text object.\n"
;

static PyObject*
oaText_setHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setHeight(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setOrient_doc[] = 
"Class: oaText, Function: setOrient\n"
"  Paramegers: (oaOrient)\n"
"    Calls: void setOrient(oaOrient orient)\n"
"    Signature: setOrient|void-void|simple-oaOrient,\n"
"    This function sets the orientation for this text object.\n"
;

static PyObject*
oaText_setOrient(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOrient p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOrient_Convert,&p1)) {
        data.DataCall()->setOrient(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setOrigin_doc[] = 
"Class: oaText, Function: setOrigin\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void setOrigin(const oaPoint& origin)\n"
"    Signature: setOrigin|void-void|cref-oaPoint,\n"
"    This function sets the origin for this text object.\n"
;

static PyObject*
oaText_setOrigin(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->setOrigin(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setOverbar_doc[] = 
"Class: oaText, Function: setOverbar\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setOverbar(oaBoolean overbar)\n"
"    Signature: setOverbar|void-void|simple-oaBoolean,\n"
"    This function sets the flag that indicates if this text object is displayed with an overbar.\n"
;

static PyObject*
oaText_setOverbar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setOverbar(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setText_doc[] = 
"Class: oaText, Function: setText\n"
"  Paramegers: (oaString)\n"
"    Calls: void setText(const oaString& text)\n"
"    Signature: setText|void-void|cref-oaString,\n"
"    This function sets the text string for this text object.\n"
;

static PyObject*
oaText_setText(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->setText(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_setVisible_doc[] = 
"Class: oaText, Function: setVisible\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setVisible(oaBoolean visible)\n"
"    Signature: setVisible|void-void|simple-oaBoolean,\n"
"    This function sets the flag that indicates if this text object is visible.\n"
;

static PyObject*
oaText_setVisible(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextObject* self=(PyoaTextObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setVisible(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaText_isNull_doc[] =
"Class: oaText, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaText_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaText data;
    int convert_status=PyoaText_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaText_assign_doc[] = 
"Class: oaText, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaText_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaText data;
  int convert_status=PyoaText_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaText p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaText_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaText_methodlist[] = {
    {"getAlignment",(PyCFunction)oaText_getAlignment,METH_VARARGS,oaText_getAlignment_doc},
    {"getFont",(PyCFunction)oaText_getFont,METH_VARARGS,oaText_getFont_doc},
    {"getHeight",(PyCFunction)oaText_getHeight,METH_VARARGS,oaText_getHeight_doc},
    {"getOrient",(PyCFunction)oaText_getOrient,METH_VARARGS,oaText_getOrient_doc},
    {"getOrigin",(PyCFunction)oaText_getOrigin,METH_VARARGS,oaText_getOrigin_doc},
    {"getText",(PyCFunction)oaText_getText,METH_VARARGS,oaText_getText_doc},
    {"hasOverbar",(PyCFunction)oaText_hasOverbar,METH_VARARGS,oaText_hasOverbar_doc},
    {"isDrafting",(PyCFunction)oaText_isDrafting,METH_VARARGS,oaText_isDrafting_doc},
    {"isVisible",(PyCFunction)oaText_isVisible,METH_VARARGS,oaText_isVisible_doc},
    {"setAlignment",(PyCFunction)oaText_setAlignment,METH_VARARGS,oaText_setAlignment_doc},
    {"setDrafting",(PyCFunction)oaText_setDrafting,METH_VARARGS,oaText_setDrafting_doc},
    {"setFont",(PyCFunction)oaText_setFont,METH_VARARGS,oaText_setFont_doc},
    {"setHeight",(PyCFunction)oaText_setHeight,METH_VARARGS,oaText_setHeight_doc},
    {"setOrient",(PyCFunction)oaText_setOrient,METH_VARARGS,oaText_setOrient_doc},
    {"setOrigin",(PyCFunction)oaText_setOrigin,METH_VARARGS,oaText_setOrigin_doc},
    {"setOverbar",(PyCFunction)oaText_setOverbar,METH_VARARGS,oaText_setOverbar_doc},
    {"setText",(PyCFunction)oaText_setText,METH_VARARGS,oaText_setText_doc},
    {"setVisible",(PyCFunction)oaText_setVisible,METH_VARARGS,oaText_setVisible_doc},
    {"isNull",(PyCFunction)oaText_tp_isNull,METH_VARARGS,oaText_isNull_doc},
    {"assign",(PyCFunction)oaText_tp_assign,METH_VARARGS,oaText_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaText_doc[] = 
"Class: oaText\n"
"  The oaText class implements a text shape. The class is contained in a block and is used to display text strings.\n"
"  The origin of the text and its orientation define a line used for the bottom of normal characters, and the height defines the top of the normal characters. Characters with descenders or ascenders may extend outside of this range. The bBox of the oaText will enclose such descenders and ascenders. For example, an oaText created at (0,0) with an orientation of oacR0 and the string  jackal  will descend below a y-value of 0 because of the  j . It s bBox will have a bottom() value < 0.\n"
"Constructors:\n"
"  Paramegers: (oaText)\n"
"    Calls: (const oaText&)\n"
"    Signature: oaText||cref-oaText,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaText_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaText",
    sizeof(PyoaTextObject),
    0,
    (destructor)oaText_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaText_tp_compare,	/* tp_compare */
    (reprfunc)oaText_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaText_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaText_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaShape_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaText_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaText_static_create_doc[] = 
"Class: oaText, Function: create\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist)\n"
"    Calls: oaText* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaString& text,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height)\n"
"    Signature: create|ptr-oaText|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaString,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a text shape object in the design with the specified attributes.\n"
"    block\n"
"    The block on which to create the text object\n"
"    layerNum\n"
"    The number of the layer on which to create the text object\n"
"    purposeNum\n"
"    The number of the layer purpose on which to create the text object\n"
"    text\n"
"    The text string of this shape text\n"
"    origin\n"
"    The location of the origin of this text shape\n"
"    alignment\n"
"    The horizontal and vertical alignment of the display text with respect to the origin\n"
"    orient\n"
"    The orientation of the text\n"
"    font\n"
"    The font style with which the text is displayed\n"
"    height\n"
"    The height of the display text in user-units\n"
"    overbar\n"
"    Indicates if an overbar is used in the text string display; the default is false\n"
"    visible\n"
"    Indicates if this text shape is displayed; the default is true (this allows applications to turn on or off the display of text shapes without having to delete them from the database)\n"
"    drafting\n"
"    Indicates if the text for this text shape should always be drawn left-to-right or top-to-bottom; the default is true (if drafting is true and the orientation of this text is mirrored, text is drawn backwards)\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean)\n"
"    Calls: oaText* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaString& text,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaBoolean overbar)\n"
"    Signature: create|ptr-oaText|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaString,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a text shape object in the design with the specified attributes.\n"
"    block\n"
"    The block on which to create the text object\n"
"    layerNum\n"
"    The number of the layer on which to create the text object\n"
"    purposeNum\n"
"    The number of the layer purpose on which to create the text object\n"
"    text\n"
"    The text string of this shape text\n"
"    origin\n"
"    The location of the origin of this text shape\n"
"    alignment\n"
"    The horizontal and vertical alignment of the display text with respect to the origin\n"
"    orient\n"
"    The orientation of the text\n"
"    font\n"
"    The font style with which the text is displayed\n"
"    height\n"
"    The height of the display text in user-units\n"
"    overbar\n"
"    Indicates if an overbar is used in the text string display; the default is false\n"
"    visible\n"
"    Indicates if this text shape is displayed; the default is true (this allows applications to turn on or off the display of text shapes without having to delete them from the database)\n"
"    drafting\n"
"    Indicates if the text for this text shape should always be drawn left-to-right or top-to-bottom; the default is true (if drafting is true and the orientation of this text is mirrored, text is drawn backwards)\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean,oaBoolean)\n"
"    Calls: oaText* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaString& text,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaBoolean overbar,oaBoolean visible)\n"
"    Signature: create|ptr-oaText|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaString,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a text shape object in the design with the specified attributes.\n"
"    block\n"
"    The block on which to create the text object\n"
"    layerNum\n"
"    The number of the layer on which to create the text object\n"
"    purposeNum\n"
"    The number of the layer purpose on which to create the text object\n"
"    text\n"
"    The text string of this shape text\n"
"    origin\n"
"    The location of the origin of this text shape\n"
"    alignment\n"
"    The horizontal and vertical alignment of the display text with respect to the origin\n"
"    orient\n"
"    The orientation of the text\n"
"    font\n"
"    The font style with which the text is displayed\n"
"    height\n"
"    The height of the display text in user-units\n"
"    overbar\n"
"    Indicates if an overbar is used in the text string display; the default is false\n"
"    visible\n"
"    Indicates if this text shape is displayed; the default is true (this allows applications to turn on or off the display of text shapes without having to delete them from the database)\n"
"    drafting\n"
"    Indicates if the text for this text shape should always be drawn left-to-right or top-to-bottom; the default is true (if drafting is true and the orientation of this text is mirrored, text is drawn backwards)\n"
"  Paramegers: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean,oaBoolean,oaBoolean)\n"
"    Calls: oaText* create(oaBlock* block,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaString& text,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaBoolean overbar,oaBoolean visible,oaBoolean drafting)\n"
"    Signature: create|ptr-oaText|ptr-oaBlock,simple-oaLayerNum,simple-oaPurposeNum,cref-oaString,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a text shape object in the design with the specified attributes.\n"
"    block\n"
"    The block on which to create the text object\n"
"    layerNum\n"
"    The number of the layer on which to create the text object\n"
"    purposeNum\n"
"    The number of the layer purpose on which to create the text object\n"
"    text\n"
"    The text string of this shape text\n"
"    origin\n"
"    The location of the origin of this text shape\n"
"    alignment\n"
"    The horizontal and vertical alignment of the display text with respect to the origin\n"
"    orient\n"
"    The orientation of the text\n"
"    font\n"
"    The font style with which the text is displayed\n"
"    height\n"
"    The height of the display text in user-units\n"
"    overbar\n"
"    Indicates if an overbar is used in the text string display; the default is false\n"
"    visible\n"
"    Indicates if this text shape is displayed; the default is true (this allows applications to turn on or off the display of text shapes without having to delete them from the database)\n"
"    drafting\n"
"    Indicates if the text for this text shape should always be drawn left-to-right or top-to-bottom; the default is true (if drafting is true and the orientation of this text is mirrored, text is drawn backwards)\n"
;

static PyObject*
oaText_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaString p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTextp result= (oaText::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data()));
            return PyoaText_FromoaText(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaString p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaBoolean p10;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaBoolean_Convert,&p10)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTextp result= (oaText::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data()));
            return PyoaText_FromoaText(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean,oaBoolean)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaString p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaBoolean p10;
        PyParamoaBoolean p11;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaBoolean_Convert,&p10,
              &PyoaBoolean_Convert,&p11)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTextp result= (oaText::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data()));
            return PyoaText_FromoaText(result);
        }
    }
    PyErr_Clear();
    // Case: (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean,oaBoolean,oaBoolean)
    {
        PyParamoaBlock p1;
        PyParamoaLayerNum p2;
        PyParamoaPurposeNum p3;
        PyParamoaString p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaBoolean p10;
        PyParamoaBoolean p11;
        PyParamoaBoolean p12;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaBlock_Convert,&p1,
              &PyoaLayerNum_Convert,&p2,
              &PyoaPurposeNum_Convert,&p3,
              &PyoaString_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaBoolean_Convert,&p10,
              &PyoaBoolean_Convert,&p11,
              &PyoaBoolean_Convert,&p12)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            oaTextp result= (oaText::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data(),p12.Data()));
            return PyoaText_FromoaText(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaText, function: create, Choices are:\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist)\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean)\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean,oaBoolean)\n"
        "    (oaBlock,oaLayerNum,oaPurposeNum,oaString,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaBoolean,oaBoolean,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaText_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaText_static_create,METH_VARARGS,oaText_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaText_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaText_Type)<0) {
      printf("** PyType_Ready failed for: oaText\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaText",
           (PyObject*)(&PyoaText_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaText\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaText_Type.tp_dict;
    for(method=oaText_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextAlign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTextAlign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTextAlign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextAlignObject* self = (PyoaTextAlignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTextAlignEnum)
    {
        PyParamoaTextAlignEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTextAlignEnum_Convert,&p1)) {
            self->value =  new oaTextAlign(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaTextAlign(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTextAlign)
    {
        PyParamoaTextAlign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTextAlign_Convert,&p1)) {
            self->value= new oaTextAlign(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTextAlign, Choices are:\n"
        "    (oaTextAlignEnum)\n"
        "    (oaString)\n"
        "    (oaTextAlign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTextAlign_tp_dealloc(PyoaTextAlignObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTextAlign_tp_repr(PyObject *ob)
{
    PyParamoaTextAlign value;
    int convert_status=PyoaTextAlign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[33];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaTextAlign::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTextAlign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTextAlign v1;
    PyParamoaTextAlign v2;
    int convert_status1=PyoaTextAlign_Convert(ob1,&v1);
    int convert_status2=PyoaTextAlign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTextAlign_Convert(PyObject* ob,PyParamoaTextAlign* result)
{
    if (ob == NULL) return 1;
    if (PyoaTextAlign_Check(ob)) {
        result->SetData(  ((PyoaTextAlignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextAlign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTextAlign_FromoaTextAlign(oaTextAlign* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTextAlign_Type.tp_alloc(&PyoaTextAlign_Type,0);
        if (bself == NULL) return bself;
        PyoaTextAlignObject* self = (PyoaTextAlignObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextAlign_getName_doc[] = 
"Class: oaTextAlign, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaTextAlignEnum object.\n"
;

static PyObject*
oaTextAlign_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextAlign data;
    int convert_status=PyoaTextAlign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextAlignObject* self=(PyoaTextAlignObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextAlign_oaTextAlignEnum_doc[] = 
"Class: oaTextAlign, Function: oaTextAlignEnum\n"
"  Paramegers: ()\n"
"    Calls: oaTextAlignEnum oaTextAlignEnum() const\n"
"    Signature: operator oaTextAlignEnum|simple-oaTextAlignEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaTextAlign object into the corresponding #oaTextAlignEnum value.\n"
;

static PyObject*
oaTextAlign_oaTextAlignEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextAlign data;
    int convert_status=PyoaTextAlign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextAlignObject* self=(PyoaTextAlignObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTextAlignEnum result= (data.DataCall()->operator oaTextAlignEnum());
        return PyoaTextAlignEnum_FromoaTextAlignEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTextAlign_assign_doc[] = 
"Class: oaTextAlign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTextAlign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTextAlign data;
  int convert_status=PyoaTextAlign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTextAlign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTextAlign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTextAlign_methodlist[] = {
    {"getName",(PyCFunction)oaTextAlign_getName,METH_VARARGS,oaTextAlign_getName_doc},
    {"oaTextAlignEnum",(PyCFunction)oaTextAlign_oaTextAlignEnum,METH_VARARGS,oaTextAlign_oaTextAlignEnum_doc},
    {"assign",(PyCFunction)oaTextAlign_tp_assign,METH_VARARGS,oaTextAlign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextAlign_doc[] = 
"Class: oaTextAlign\n"
"  The oaTextAlign class encapsulates the enumerated values that describe the different types of text alignment for oaText objects.\n"
"  oaTextAlignEnum\n"
"Constructors:\n"
"  Paramegers: (oaTextAlignEnum)\n"
"    Calls: oaTextAlign(oaTextAlignEnum valueIn)\n"
"    Signature: oaTextAlign||simple-oaTextAlignEnum,\n"
"    This function constructs an instance of an oaTextAlign class using the specified #oaTextAlignEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTextAlign(const oaString& name)\n"
"    Signature: oaTextAlign||cref-oaString,\n"
"    This function constructs an instance of an oaTextAlign class using the #oaTextAlignEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaTextAlignEnum.\n"
"    oacInvalidTextAlignName\n"
"  Paramegers: (oaTextAlign)\n"
"    Calls: (const oaTextAlign&)\n"
"    Signature: oaTextAlign||cref-oaTextAlign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTextAlign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTextAlign",
    sizeof(PyoaTextAlignObject),
    0,
    (destructor)oaTextAlign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTextAlign_tp_compare,	/* tp_compare */
    (reprfunc)oaTextAlign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTextAlign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTextAlign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTextAlign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTextAlign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTextAlign_Type)<0) {
      printf("** PyType_Ready failed for: oaTextAlign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTextAlign",
           (PyObject*)(&PyoaTextAlign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTextAlign\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextAlignEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTextAlignEnum_Convert(PyObject* ob,PyParamoaTextAlignEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacUpperLeftTextAlign")==0) { result->SetData(oacUpperLeftTextAlign); return 1;}
        if (strcasecmp(str,"oacCenterLeftTextAlign")==0) { result->SetData(oacCenterLeftTextAlign); return 1;}
        if (strcasecmp(str,"oacLowerLeftTextAlign")==0) { result->SetData(oacLowerLeftTextAlign); return 1;}
        if (strcasecmp(str,"oacUpperCenterTextAlign")==0) { result->SetData(oacUpperCenterTextAlign); return 1;}
        if (strcasecmp(str,"oacCenterCenterTextAlign")==0) { result->SetData(oacCenterCenterTextAlign); return 1;}
        if (strcasecmp(str,"oacLowerCenterTextAlign")==0) { result->SetData(oacLowerCenterTextAlign); return 1;}
        if (strcasecmp(str,"oacUpperRightTextAlign")==0) { result->SetData(oacUpperRightTextAlign); return 1;}
        if (strcasecmp(str,"oacCenterRightTextAlign")==0) { result->SetData(oacCenterRightTextAlign); return 1;}
        if (strcasecmp(str,"oacLowerRightTextAlign")==0) { result->SetData(oacLowerRightTextAlign); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTextAlignEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextAlignEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTextAlignEnum_FromoaTextAlignEnum(oaTextAlignEnum ob)
{
    if (ob==oacUpperLeftTextAlign) return PyString_FromString("oacUpperLeftTextAlign");
    if (ob==oacCenterLeftTextAlign) return PyString_FromString("oacCenterLeftTextAlign");
    if (ob==oacLowerLeftTextAlign) return PyString_FromString("oacLowerLeftTextAlign");
    if (ob==oacUpperCenterTextAlign) return PyString_FromString("oacUpperCenterTextAlign");
    if (ob==oacCenterCenterTextAlign) return PyString_FromString("oacCenterCenterTextAlign");
    if (ob==oacLowerCenterTextAlign) return PyString_FromString("oacLowerCenterTextAlign");
    if (ob==oacUpperRightTextAlign) return PyString_FromString("oacUpperRightTextAlign");
    if (ob==oacCenterRightTextAlign) return PyString_FromString("oacCenterRightTextAlign");
    if (ob==oacLowerRightTextAlign) return PyString_FromString("oacLowerRightTextAlign");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTextAlignEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTextAlignEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTextAlignEnum_FromoaTextAlignEnum(oaTextAlignEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTextAlignEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTextAlignEnum_doc[] =
"Type convert function for enum: oaTextAlignEnum";
                               
static PyMethodDef PyoaTextAlignEnum_method =
  {"oaTextAlignEnum",(PyCFunction)PyoaTextAlignEnum_TypeFunction,METH_VARARGS,oaTextAlignEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTextAlignEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacUpperLeftTextAlign");
    PyDict_SetItemString(mod_dict,"oacUpperLeftTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCenterLeftTextAlign");
    PyDict_SetItemString(mod_dict,"oacCenterLeftTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLowerLeftTextAlign");
    PyDict_SetItemString(mod_dict,"oacLowerLeftTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUpperCenterTextAlign");
    PyDict_SetItemString(mod_dict,"oacUpperCenterTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCenterCenterTextAlign");
    PyDict_SetItemString(mod_dict,"oacCenterCenterTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLowerCenterTextAlign");
    PyDict_SetItemString(mod_dict,"oacLowerCenterTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacUpperRightTextAlign");
    PyDict_SetItemString(mod_dict,"oacUpperRightTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacCenterRightTextAlign");
    PyDict_SetItemString(mod_dict,"oacCenterRightTextAlign",value);
    Py_DECREF(value);
    value=PyString_FromString("oacLowerRightTextAlign");
    PyDict_SetItemString(mod_dict,"oacLowerRightTextAlign",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTextAlignEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTextAlignEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTextAlignEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextDisplay
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTextDisplay_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTextDisplay_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextDisplayObject* self = (PyoaTextDisplayObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTextDisplay)
    {
        PyParamoaTextDisplay p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTextDisplay_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTextDisplay, Choices are:\n"
        "    (oaTextDisplay)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTextDisplay_tp_dealloc(PyoaTextDisplayObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTextDisplay_tp_repr(PyObject *ob)
{
    PyParamoaTextDisplay value;
    int convert_status=PyoaTextDisplay_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[35];
    sprintf(buffer,"<oaTextDisplay::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTextDisplay_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTextDisplay v1;
    PyParamoaTextDisplay v2;
    int convert_status1=PyoaTextDisplay_Convert(ob1,&v1);
    int convert_status2=PyoaTextDisplay_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTextDisplay_Convert(PyObject* ob,PyParamoaTextDisplay* result)
{
    if (ob == NULL) return 1;
    if (PyoaTextDisplay_Check(ob)) {
        result->SetData( (oaTextDisplay**) ((PyoaTextDisplayObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextDisplay Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTextDisplay_FromoaTextDisplay(oaTextDisplay** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTextDisplay* data=*value;
        if (data->getType()==oacAttrDisplayType) return PyoaAttrDisplay_FromoaAttrDisplay((oaAttrDisplay**)value,borrow,lock);
        if (data->getType()==oacPropDisplayType) return PyoaPropDisplay_FromoaPropDisplay((oaPropDisplay**)value,borrow,lock);
        if (data->getType()==oacInstAttrDisplayType) return PyoaInstAttrDisplay_FromoaInstAttrDisplay((oaInstAttrDisplay**)value,borrow,lock);
        if (data->getType()==oacInstPropDisplayType) return PyoaInstPropDisplay_FromoaInstPropDisplay((oaInstPropDisplay**)value,borrow,lock);
        if (data->getType()==oacTextOverrideType) return PyoaTextOverride_FromoaTextOverride((oaTextOverride**)value,borrow,lock);
        PyObject* bself = PyoaTextDisplay_Type.tp_alloc(&PyoaTextDisplay_Type,0);
        if (bself == NULL) return bself;
        PyoaTextDisplayObject* self = (PyoaTextDisplayObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTextDisplay_FromoaTextDisplay(oaTextDisplay* data)
{
    if (data) {
        if (data->getType()==oacAttrDisplayType) return PyoaAttrDisplay_FromoaAttrDisplay((oaAttrDisplay*)data);
        if (data->getType()==oacPropDisplayType) return PyoaPropDisplay_FromoaPropDisplay((oaPropDisplay*)data);
        if (data->getType()==oacInstAttrDisplayType) return PyoaInstAttrDisplay_FromoaInstAttrDisplay((oaInstAttrDisplay*)data);
        if (data->getType()==oacInstPropDisplayType) return PyoaInstPropDisplay_FromoaInstPropDisplay((oaInstPropDisplay*)data);
        if (data->getType()==oacTextOverrideType) return PyoaTextOverride_FromoaTextOverride((oaTextOverride*)data);
       PyObject* bself = PyoaTextDisplay_Type.tp_alloc(&PyoaTextDisplay_Type,0);
       if (bself == NULL) return bself;
       PyoaTextDisplayObject* self = (PyoaTextDisplayObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplay_getAlignment_doc[] = 
"Class: oaTextDisplay, Function: getAlignment\n"
"  Paramegers: ()\n"
"    Calls: oaTextAlign getAlignment() const\n"
"    Signature: getAlignment|simple-oaTextAlign|\n"
"    BrowseData: 1\n"
"    This function returns the alignment of this textDisplay object.\n"
;

static PyObject*
oaTextDisplay_getAlignment(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTextAlign* result= new oaTextAlign(data.DataCall()->getAlignment());
        return PyoaTextAlign_FromoaTextAlign(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_getFont_doc[] = 
"Class: oaTextDisplay, Function: getFont\n"
"  Paramegers: ()\n"
"    Calls: oaFont getFont() const\n"
"    Signature: getFont|simple-oaFont|\n"
"    BrowseData: 1\n"
"    This function returns the font of this textDisplay object.\n"
;

static PyObject*
oaTextDisplay_getFont(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaFont* result= new oaFont(data.DataCall()->getFont());
        return PyoaFont_FromoaFont(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_getFormat_doc[] = 
"Class: oaTextDisplay, Function: getFormat\n"
"  Paramegers: ()\n"
"    Calls: oaTextDisplayFormat getFormat() const\n"
"    Signature: getFormat|simple-oaTextDisplayFormat|\n"
"    BrowseData: 1\n"
"    This function returns the format of this textDisplay object. The format determines the value (the text string) this textDisplay presents upon request.\n"
;

static PyObject*
oaTextDisplay_getFormat(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTextDisplayFormat* result= new oaTextDisplayFormat(data.DataCall()->getFormat());
        return PyoaTextDisplayFormat_FromoaTextDisplayFormat(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_getHeight_doc[] = 
"Class: oaTextDisplay, Function: getHeight\n"
"  Paramegers: ()\n"
"    Calls: oaDist getHeight() const\n"
"    Signature: getHeight|simple-oaDist|\n"
"    BrowseData: 1\n"
"    This function returns the height of this textDisplay object.\n"
;

static PyObject*
oaTextDisplay_getHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaDist result= (data.DataCall()->getHeight());
        return PyoaDist_FromoaDist(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_getOrient_doc[] = 
"Class: oaTextDisplay, Function: getOrient\n"
"  Paramegers: ()\n"
"    Calls: oaOrient getOrient() const\n"
"    Signature: getOrient|simple-oaOrient|\n"
"    BrowseData: 1\n"
"    This function returns the orientation of this textDisplay object.\n"
;

static PyObject*
oaTextDisplay_getOrient(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaOrient* result= new oaOrient(data.DataCall()->getOrient());
        return PyoaOrient_FromoaOrient(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_getOrigin_doc[] = 
"Class: oaTextDisplay, Function: getOrigin\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void getOrigin(oaPoint& origin) const\n"
"    Signature: getOrigin|void-void|ref-oaPoint,\n"
"    BrowseData: 0,oaPoint\n"
"    This function returns the origin of this textDisplay object.\n"
;

static PyObject*
oaTextDisplay_getOrigin(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->getOrigin(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_getText_doc[] = 
"Class: oaTextDisplay, Function: getText\n"
"  Paramegers: (oaString)\n"
"    Calls: void getText(oaString& text) const\n"
"    Signature: getText|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the value of this textDisplay object. The text String is evaluated if necessary.\n"
;

static PyObject*
oaTextDisplay_getText(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getText(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_hasOverbar_doc[] = 
"Class: oaTextDisplay, Function: hasOverbar\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean hasOverbar() const\n"
"    Signature: hasOverbar|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this textDisplay has an overbar on it.\n"
;

static PyObject*
oaTextDisplay_hasOverbar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->hasOverbar());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_isDrafting_doc[] = 
"Class: oaTextDisplay, Function: isDrafting\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isDrafting() const\n"
"    Signature: isDrafting|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this textDisplay displays in drafting style.\n"
;

static PyObject*
oaTextDisplay_isDrafting(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isDrafting());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_isVisible_doc[] = 
"Class: oaTextDisplay, Function: isVisible\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isVisible() const\n"
"    Signature: isVisible|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean value that indicates if this textDisplay displays.\n"
;

static PyObject*
oaTextDisplay_isVisible(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isVisible());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setAlignment_doc[] = 
"Class: oaTextDisplay, Function: setAlignment\n"
"  Paramegers: (oaTextAlign)\n"
"    Calls: void setAlignment(oaTextAlign alignment)\n"
"    Signature: setAlignment|void-void|simple-oaTextAlign,\n"
"    This function sets the alignment for this textDisplay object to the specified value.\n"
;

static PyObject*
oaTextDisplay_setAlignment(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTextAlign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTextAlign_Convert,&p1)) {
        data.DataCall()->setAlignment(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setDrafting_doc[] = 
"Class: oaTextDisplay, Function: setDrafting\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setDrafting(oaBoolean drafting)\n"
"    Signature: setDrafting|void-void|simple-oaBoolean,\n"
"    This function sets the flag that indicates if this textDisplay object displays in drafting mode.\n"
;

static PyObject*
oaTextDisplay_setDrafting(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setDrafting(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setFont_doc[] = 
"Class: oaTextDisplay, Function: setFont\n"
"  Paramegers: (oaFont)\n"
"    Calls: void setFont(oaFont font)\n"
"    Signature: setFont|void-void|simple-oaFont,\n"
"    This function sets the font used by this textDisplay object.\n"
;

static PyObject*
oaTextDisplay_setFont(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFont p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFont_Convert,&p1)) {
        data.DataCall()->setFont(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setFormat_doc[] = 
"Class: oaTextDisplay, Function: setFormat\n"
"  Paramegers: (oaTextDisplayFormat)\n"
"    Calls: void setFormat(oaTextDisplayFormat format)\n"
"    Signature: setFormat|void-void|simple-oaTextDisplayFormat,\n"
"    This function sets the format of this textDisplay object to the specified value.\n"
;

static PyObject*
oaTextDisplay_setFormat(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaTextDisplayFormat p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTextDisplayFormat_Convert,&p1)) {
        data.DataCall()->setFormat(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setHeight_doc[] = 
"Class: oaTextDisplay, Function: setHeight\n"
"  Paramegers: (oaDist)\n"
"    Calls: void setHeight(oaDist height)\n"
"    Signature: setHeight|void-void|simple-oaDist,\n"
"    This function sets the height of this textDisplay object to the specified value.\n"
;

static PyObject*
oaTextDisplay_setHeight(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDist p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDist_Convert,&p1)) {
        data.DataCall()->setHeight(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setOrient_doc[] = 
"Class: oaTextDisplay, Function: setOrient\n"
"  Paramegers: (oaOrient)\n"
"    Calls: void setOrient(oaOrient orient)\n"
"    Signature: setOrient|void-void|simple-oaOrient,\n"
"    This function sets the orientation for this textDisplay object to the specified value.\n"
;

static PyObject*
oaTextDisplay_setOrient(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaOrient p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaOrient_Convert,&p1)) {
        data.DataCall()->setOrient(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setOrigin_doc[] = 
"Class: oaTextDisplay, Function: setOrigin\n"
"  Paramegers: (oaPoint)\n"
"    Calls: void setOrigin(const oaPoint& origin)\n"
"    Signature: setOrigin|void-void|cref-oaPoint,\n"
"    This function sets the origin for this textDisplay object to the specified value.\n"
;

static PyObject*
oaTextDisplay_setOrigin(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaPoint_Convert,&p1)) {
        data.DataCall()->setOrigin(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setOverbar_doc[] = 
"Class: oaTextDisplay, Function: setOverbar\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setOverbar(oaBoolean overbar)\n"
"    Signature: setOverbar|void-void|simple-oaBoolean,\n"
"    This function sets the flag that indicates if this textDisplay object displays with an overbar.\n"
;

static PyObject*
oaTextDisplay_setOverbar(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setOverbar(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_setVisible_doc[] = 
"Class: oaTextDisplay, Function: setVisible\n"
"  Paramegers: (oaBoolean)\n"
"    Calls: void setVisible(oaBoolean visible)\n"
"    Signature: setVisible|void-void|simple-oaBoolean,\n"
"    This function sets the flag that indicates if this textDisplay object is visible.\n"
;

static PyObject*
oaTextDisplay_setVisible(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayObject* self=(PyoaTextDisplayObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoolean p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoolean_Convert,&p1)) {
        data.DataCall()->setVisible(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_isNull_doc[] =
"Class: oaTextDisplay, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTextDisplay_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTextDisplay data;
    int convert_status=PyoaTextDisplay_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTextDisplay_assign_doc[] = 
"Class: oaTextDisplay, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTextDisplay_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTextDisplay data;
  int convert_status=PyoaTextDisplay_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTextDisplay p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTextDisplay_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTextDisplay_methodlist[] = {
    {"getAlignment",(PyCFunction)oaTextDisplay_getAlignment,METH_VARARGS,oaTextDisplay_getAlignment_doc},
    {"getFont",(PyCFunction)oaTextDisplay_getFont,METH_VARARGS,oaTextDisplay_getFont_doc},
    {"getFormat",(PyCFunction)oaTextDisplay_getFormat,METH_VARARGS,oaTextDisplay_getFormat_doc},
    {"getHeight",(PyCFunction)oaTextDisplay_getHeight,METH_VARARGS,oaTextDisplay_getHeight_doc},
    {"getOrient",(PyCFunction)oaTextDisplay_getOrient,METH_VARARGS,oaTextDisplay_getOrient_doc},
    {"getOrigin",(PyCFunction)oaTextDisplay_getOrigin,METH_VARARGS,oaTextDisplay_getOrigin_doc},
    {"getText",(PyCFunction)oaTextDisplay_getText,METH_VARARGS,oaTextDisplay_getText_doc},
    {"hasOverbar",(PyCFunction)oaTextDisplay_hasOverbar,METH_VARARGS,oaTextDisplay_hasOverbar_doc},
    {"isDrafting",(PyCFunction)oaTextDisplay_isDrafting,METH_VARARGS,oaTextDisplay_isDrafting_doc},
    {"isVisible",(PyCFunction)oaTextDisplay_isVisible,METH_VARARGS,oaTextDisplay_isVisible_doc},
    {"setAlignment",(PyCFunction)oaTextDisplay_setAlignment,METH_VARARGS,oaTextDisplay_setAlignment_doc},
    {"setDrafting",(PyCFunction)oaTextDisplay_setDrafting,METH_VARARGS,oaTextDisplay_setDrafting_doc},
    {"setFont",(PyCFunction)oaTextDisplay_setFont,METH_VARARGS,oaTextDisplay_setFont_doc},
    {"setFormat",(PyCFunction)oaTextDisplay_setFormat,METH_VARARGS,oaTextDisplay_setFormat_doc},
    {"setHeight",(PyCFunction)oaTextDisplay_setHeight,METH_VARARGS,oaTextDisplay_setHeight_doc},
    {"setOrient",(PyCFunction)oaTextDisplay_setOrient,METH_VARARGS,oaTextDisplay_setOrient_doc},
    {"setOrigin",(PyCFunction)oaTextDisplay_setOrigin,METH_VARARGS,oaTextDisplay_setOrigin_doc},
    {"setOverbar",(PyCFunction)oaTextDisplay_setOverbar,METH_VARARGS,oaTextDisplay_setOverbar_doc},
    {"setVisible",(PyCFunction)oaTextDisplay_setVisible,METH_VARARGS,oaTextDisplay_setVisible_doc},
    {"isNull",(PyCFunction)oaTextDisplay_tp_isNull,METH_VARARGS,oaTextDisplay_isNull_doc},
    {"assign",(PyCFunction)oaTextDisplay_tp_assign,METH_VARARGS,oaTextDisplay_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplay_doc[] = 
"Class: oaTextDisplay\n"
"  This class is the base class for all types of textDisplay shapes. The textDisplay shapes are associated with other design objects so that graphical applications can display text strings representing attributes and properties of the associated object.\n"
"Constructors:\n"
"  Paramegers: (oaTextDisplay)\n"
"    Calls: (const oaTextDisplay&)\n"
"    Signature: oaTextDisplay||cref-oaTextDisplay,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTextDisplay_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTextDisplay",
    sizeof(PyoaTextDisplayObject),
    0,
    (destructor)oaTextDisplay_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTextDisplay_tp_compare,	/* tp_compare */
    (reprfunc)oaTextDisplay_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTextDisplay_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTextDisplay_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaShape_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTextDisplay_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplay_static_getTextDisplays_doc[] = 
"Class: oaTextDisplay, Function: getTextDisplays\n"
"  Paramegers: (oaObject)\n"
"    Calls: oaTextDisplayCollection getTextDisplays(const oaObject* object)\n"
"    Signature: getTextDisplays|simple-oaTextDisplayCollection|cptr-oaObject,\n"
"    This function returns a collection of textDisplays for the specified object.\n"
;

static PyObject*
oaTextDisplay_static_getTextDisplays(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTextDisplayCollection* result= new oaTextDisplayCollection(oaTextDisplay::getTextDisplays(p1.Data()));
        return PyoaTextDisplayCollection_FromoaTextDisplayCollection(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplay_static_getTextDisplaysIter_doc[] = 
"Class: oaTextDisplay, Function: getTextDisplaysIter\n"
"  Paramegers: (oaObject)\n"
"    Calls: oaTextDisplayIter getTextDisplaysIter(const oaObject* object)\n"
"    Signature: getTextDisplaysIter|simple-oaTextDisplayIter|cptr-oaObject,\n"
"    This function returns an Iterator over the following collection: This function returns a collection of textDisplays for the specified object.\n"
;

static PyObject*
oaTextDisplay_static_getTextDisplaysIter(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTextDisplayIter* result= new oaTextDisplayIter(oaTextDisplay::getTextDisplays(p1.Data()));
        return PyoaTextDisplayIter_FromoaTextDisplayIter(result,0,NULL);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTextDisplay_staticmethodlist[] = {
    {"static_getTextDisplays",(PyCFunction)oaTextDisplay_static_getTextDisplays,METH_VARARGS,oaTextDisplay_static_getTextDisplays_doc},
    {"static_getTextDisplaysIter",(PyCFunction)oaTextDisplay_static_getTextDisplaysIter,METH_VARARGS,oaTextDisplay_static_getTextDisplaysIter_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTextDisplay_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTextDisplay_Type)<0) {
      printf("** PyType_Ready failed for: oaTextDisplay\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTextDisplay",
           (PyObject*)(&PyoaTextDisplay_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTextDisplay\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTextDisplay_Type.tp_dict;
    for(method=oaTextDisplay_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextDisplayCollection
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayCollection_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTextDisplayCollection_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextDisplayCollectionObject* self = (PyoaTextDisplayCollectionObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaObject)
    {
        PyParamoaObject p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaObject_Convert,&p1)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            self->value =  new oaTextDisplayCollection(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTextDisplayCollection)
    {
        PyParamoaTextDisplayCollection p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTextDisplayCollection_Convert,&p1)) {
            self->value= new oaTextDisplayCollection(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTextDisplayCollection, Choices are:\n"
        "    (oaObject)\n"
        "    (oaTextDisplayCollection)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTextDisplayCollection_tp_dealloc(PyoaTextDisplayCollectionObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayCollection_tp_repr(PyObject *ob)
{
    PyParamoaTextDisplayCollection value;
    int convert_status=PyoaTextDisplayCollection_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaTextDisplayCollection::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTextDisplayCollection_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTextDisplayCollection v1;
    PyParamoaTextDisplayCollection v2;
    int convert_status1=PyoaTextDisplayCollection_Convert(ob1,&v1);
    int convert_status2=PyoaTextDisplayCollection_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTextDisplayCollection_Convert(PyObject* ob,PyParamoaTextDisplayCollection* result)
{
    if (ob == NULL) return 1;
    if (PyoaTextDisplayCollection_Check(ob)) {
        result->SetData(  ((PyoaTextDisplayCollectionObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextDisplayCollection Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTextDisplayCollection_FromoaTextDisplayCollection(oaTextDisplayCollection* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTextDisplayCollection_Type.tp_alloc(&PyoaTextDisplayCollection_Type,0);
        if (bself == NULL) return bself;
        PyoaTextDisplayCollectionObject* self = (PyoaTextDisplayCollectionObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplayCollection_getCount_doc[] = 
"Class: oaTextDisplayCollection, Function: getCount\n"
"  Paramegers: ()\n"
"    Calls: oaUInt4 getCount()\n"
"    Signature: getCount|simple-oaUInt4|\n"
"    BrowseData: 1\n"
"    This function returns the number of textDisplays in the object.\n"
;

static PyObject*
oaTextDisplayCollection_getCount(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayCollection data;
    int convert_status=PyoaTextDisplayCollection_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayCollectionObject* self=(PyoaTextDisplayCollectionObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaUInt4 result= (data.DataCall()->getCount());
        return PyoaUInt4_FromoaUInt4(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplayCollection_includes_doc[] = 
"Class: oaTextDisplayCollection, Function: includes\n"
"  Paramegers: (oaTextDisplay)\n"
"    Calls: oaBoolean includes(const oaTextDisplay* td)\n"
"    Signature: includes|simple-oaBoolean|cptr-oaTextDisplay,\n"
"    This function returns true if the specified object is in the collection.\n"
;

static PyObject*
oaTextDisplayCollection_includes(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayCollection data;
    int convert_status=PyoaTextDisplayCollection_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayCollectionObject* self=(PyoaTextDisplayCollectionObject*)ob;

    PyParamoaTextDisplay p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaTextDisplay_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaBoolean result= (data.DataCall()->includes(p1.Data()));
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplayCollection_isEmpty_doc[] = 
"Class: oaTextDisplayCollection, Function: isEmpty\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isEmpty()\n"
"    Signature: isEmpty|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns true if this is an empty collection.\n"
;

static PyObject*
oaTextDisplayCollection_isEmpty(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayCollection data;
    int convert_status=PyoaTextDisplayCollection_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayCollectionObject* self=(PyoaTextDisplayCollectionObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isEmpty());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTextDisplayCollection_assign_doc[] = 
"Class: oaTextDisplayCollection, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTextDisplayCollection_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTextDisplayCollection data;
  int convert_status=PyoaTextDisplayCollection_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTextDisplayCollection p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTextDisplayCollection_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTextDisplayCollection_methodlist[] = {
    {"getCount",(PyCFunction)oaTextDisplayCollection_getCount,METH_VARARGS,oaTextDisplayCollection_getCount_doc},
    {"includes",(PyCFunction)oaTextDisplayCollection_includes,METH_VARARGS,oaTextDisplayCollection_includes_doc},
    {"isEmpty",(PyCFunction)oaTextDisplayCollection_isEmpty,METH_VARARGS,oaTextDisplayCollection_isEmpty_doc},
    {"assign",(PyCFunction)oaTextDisplayCollection_tp_assign,METH_VARARGS,oaTextDisplayCollection_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplayCollection_doc[] = 
"Class: oaTextDisplayCollection\n"
"  The oaTextDisplayCollection class implements a set of textDisplays to traverse. Collections are primarily used to initialize oaIters so the members of the collection can be accessed.\n"
"Constructors:\n"
"  Paramegers: (oaObject)\n"
"    Calls: oaTextDisplayCollection(const oaObject* objIn)\n"
"    Signature: oaTextDisplayCollection||cptr-oaObject,\n"
"    This function constructs an oaTextDisplayCollection instance.\n"
"  Paramegers: (oaTextDisplayCollection)\n"
"    Calls: (const oaTextDisplayCollection&)\n"
"    Signature: oaTextDisplayCollection||cref-oaTextDisplayCollection,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTextDisplayCollection_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTextDisplayCollection",
    sizeof(PyoaTextDisplayCollectionObject),
    0,
    (destructor)oaTextDisplayCollection_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTextDisplayCollection_tp_compare,	/* tp_compare */
    (reprfunc)oaTextDisplayCollection_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTextDisplayCollection_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTextDisplayCollection_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTextDisplayCollection_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTextDisplayCollection_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTextDisplayCollection_Type)<0) {
      printf("** PyType_Ready failed for: oaTextDisplayCollection\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTextDisplayCollection",
           (PyObject*)(&PyoaTextDisplayCollection_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTextDisplayCollection\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextDisplayFormat
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayFormat_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTextDisplayFormat_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextDisplayFormatObject* self = (PyoaTextDisplayFormatObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTextDisplayFormatEnum)
    {
        PyParamoaTextDisplayFormatEnum p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTextDisplayFormatEnum_Convert,&p1)) {
            self->value =  new oaTextDisplayFormat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            self->value =  new oaTextDisplayFormat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    // Case: (oaTextDisplayFormat)
    {
        PyParamoaTextDisplayFormat p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTextDisplayFormat_Convert,&p1)) {
            self->value= new oaTextDisplayFormat(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTextDisplayFormat, Choices are:\n"
        "    (oaTextDisplayFormatEnum)\n"
        "    (oaString)\n"
        "    (oaTextDisplayFormat)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTextDisplayFormat_tp_dealloc(PyoaTextDisplayFormatObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayFormat_tp_repr(PyObject *ob)
{
    PyParamoaTextDisplayFormat value;
    int convert_status=PyoaTextDisplayFormat_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;
    oaString sresult(value.DataCall()->getName());

    char addr[41];
    sprintf(addr,DISPLAY_FORMAT,POINTER_AS_DISPLAY(value.DataCall()));
    oaString buffer;
    buffer+=oaString("<oaTextDisplayFormat::");
    buffer+=oaString(addr);
    buffer+=oaString("::");
    buffer+=oaString(sresult);
    buffer+=oaString(">");
    result=PyString_FromString((char*)(const char*)buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTextDisplayFormat_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTextDisplayFormat v1;
    PyParamoaTextDisplayFormat v2;
    int convert_status1=PyoaTextDisplayFormat_Convert(ob1,&v1);
    int convert_status2=PyoaTextDisplayFormat_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTextDisplayFormat_Convert(PyObject* ob,PyParamoaTextDisplayFormat* result)
{
    if (ob == NULL) return 1;
    if (PyoaTextDisplayFormat_Check(ob)) {
        result->SetData(  ((PyoaTextDisplayFormatObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextDisplayFormat Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTextDisplayFormat_FromoaTextDisplayFormat(oaTextDisplayFormat* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTextDisplayFormat_Type.tp_alloc(&PyoaTextDisplayFormat_Type,0);
        if (bself == NULL) return bself;
        PyoaTextDisplayFormatObject* self = (PyoaTextDisplayFormatObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplayFormat_getName_doc[] = 
"Class: oaTextDisplayFormat, Function: getName\n"
"  Paramegers: ()\n"
"    Calls: const oaString& getName() const\n"
"    Signature: getName|cref-oaString|\n"
"    BrowseData: 1\n"
"    This function returns the name string associated with the encapsulated #oaTextDisplayFormatEnum object.\n"
;

static PyObject*
oaTextDisplayFormat_getName(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayFormat data;
    int convert_status=PyoaTextDisplayFormat_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayFormatObject* self=(PyoaTextDisplayFormatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaString result= (data.DataCall()->getName());
        return PyoaString_FromoaString(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplayFormat_oaTextDisplayFormatEnum_doc[] = 
"Class: oaTextDisplayFormat, Function: oaTextDisplayFormatEnum\n"
"  Paramegers: ()\n"
"    Calls: oaTextDisplayFormatEnum oaTextDisplayFormatEnum() const\n"
"    Signature: operator oaTextDisplayFormatEnum|simple-oaTextDisplayFormatEnum|\n"
"    BrowseData: 1\n"
"    This operator casts this oaTextDisplayFormat object into the corresponding #oaTextDisplayFormatEnum value.\n"
;

static PyObject*
oaTextDisplayFormat_oaTextDisplayFormatEnum(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayFormat data;
    int convert_status=PyoaTextDisplayFormat_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayFormatObject* self=(PyoaTextDisplayFormatObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTextDisplayFormatEnum result= (data.DataCall()->operator oaTextDisplayFormatEnum());
        return PyoaTextDisplayFormatEnum_FromoaTextDisplayFormatEnum(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTextDisplayFormat_assign_doc[] = 
"Class: oaTextDisplayFormat, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTextDisplayFormat_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTextDisplayFormat data;
  int convert_status=PyoaTextDisplayFormat_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTextDisplayFormat p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTextDisplayFormat_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTextDisplayFormat_methodlist[] = {
    {"getName",(PyCFunction)oaTextDisplayFormat_getName,METH_VARARGS,oaTextDisplayFormat_getName_doc},
    {"oaTextDisplayFormatEnum",(PyCFunction)oaTextDisplayFormat_oaTextDisplayFormatEnum,METH_VARARGS,oaTextDisplayFormat_oaTextDisplayFormatEnum_doc},
    {"assign",(PyCFunction)oaTextDisplayFormat_tp_assign,METH_VARARGS,oaTextDisplayFormat_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplayFormat_doc[] = 
"Class: oaTextDisplayFormat\n"
"  The oaTextDisplayFormat class encapsulates the enumerated values that describe the different formats used by oaTextDisplay objects. The format indicates whether the oaTextDisplay object uses the name, the value, or both the name and value of the associated object.\n"
"  oaTextDisplayFormatEnum\n"
"Constructors:\n"
"  Paramegers: (oaTextDisplayFormatEnum)\n"
"    Calls: oaTextDisplayFormat(oaTextDisplayFormatEnum valueIn)\n"
"    Signature: oaTextDisplayFormat||simple-oaTextDisplayFormatEnum,\n"
"    This function constructs an instance of an oaTextDisplayFormat class using the specified #oaTextDisplayFormatEnum value.\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTextDisplayFormat(const oaString& name)\n"
"    Signature: oaTextDisplayFormat||cref-oaString,\n"
"    This function constructs an instance of an oaTextDisplayFormat class using the #oaTextDisplayFormatEnum associated with the specified string name . This name must be defined in the legal set of names associated with #oaTextDisplayFormatEnum.\n"
"    oacInvalidTextDisplayFormatName\n"
"  Paramegers: (oaTextDisplayFormat)\n"
"    Calls: (const oaTextDisplayFormat&)\n"
"    Signature: oaTextDisplayFormat||cref-oaTextDisplayFormat,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTextDisplayFormat_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTextDisplayFormat",
    sizeof(PyoaTextDisplayFormatObject),
    0,
    (destructor)oaTextDisplayFormat_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTextDisplayFormat_tp_compare,	/* tp_compare */
    (reprfunc)oaTextDisplayFormat_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTextDisplayFormat_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTextDisplayFormat_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTextDisplayFormat_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTextDisplayFormat_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTextDisplayFormat_Type)<0) {
      printf("** PyType_Ready failed for: oaTextDisplayFormat\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTextDisplayFormat",
           (PyObject*)(&PyoaTextDisplayFormat_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTextDisplayFormat\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextDisplayFormatEnum
// ==================================================================

// ------------------------------------------------------------------

int
PyoaTextDisplayFormatEnum_Convert(PyObject* ob,PyParamoaTextDisplayFormatEnum* result)
{
    if (ob == NULL) return 1;
    if (PyString_Check(ob)) {
        char* str=PyString_AsString(ob);
        if (strcasecmp(str,"oacNameTextDisplayFormat")==0) { result->SetData(oacNameTextDisplayFormat); return 1;}
        if (strcasecmp(str,"oacValueTextDisplayFormat")==0) { result->SetData(oacValueTextDisplayFormat); return 1;}
        if (strcasecmp(str,"oacNameValueTextDisplayFormat")==0) { result->SetData(oacNameValueTextDisplayFormat); return 1;}
    }            
    if (PyInt_Check(ob)) {
        long val=PyInt_AsLong(ob);
        result->SetData((oaTextDisplayFormatEnum)val);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextDisplayFormatEnum Failed");
    return 0;
}
// ------------------------------------------------------------------

PyObject* PyoaTextDisplayFormatEnum_FromoaTextDisplayFormatEnum(oaTextDisplayFormatEnum ob)
{
    if (ob==oacNameTextDisplayFormat) return PyString_FromString("oacNameTextDisplayFormat");
    if (ob==oacValueTextDisplayFormat) return PyString_FromString("oacValueTextDisplayFormat");
    if (ob==oacNameValueTextDisplayFormat) return PyString_FromString("oacNameValueTextDisplayFormat");

    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
//  Enum Typecast function:
// ------------------------------------------------------------------

static PyObject*
PyoaTextDisplayFormatEnum_TypeFunction(PyObject* mod,PyObject* args)
{
    int v;
    oaTextDisplayFormatEnum e;
    if (PyArg_ParseTuple(args,(char*)"i",&v)) {
       return PyoaTextDisplayFormatEnum_FromoaTextDisplayFormatEnum(oaTextDisplayFormatEnum(v));
    }
    PyErr_Clear();
    if (PyArg_ParseTuple(args,(char*)"O&",&PyoaTextDisplayFormatEnum_Convert,&e)) {
       return PyInt_FromLong(long(e));
    }
    return NULL;
}
static char oaTextDisplayFormatEnum_doc[] =
"Type convert function for enum: oaTextDisplayFormatEnum";
                               
static PyMethodDef PyoaTextDisplayFormatEnum_method =
  {"oaTextDisplayFormatEnum",(PyCFunction)PyoaTextDisplayFormatEnum_TypeFunction,METH_VARARGS,oaTextDisplayFormatEnum_doc};
  

// ------------------------------------------------------------------
//  Enum Init:
// ------------------------------------------------------------------

int
PyoaTextDisplayFormatEnum_TypeInit(PyObject* mod_dict)
{
    // Put Enum values in Dictionary
    PyObject* value;
    value=PyString_FromString("oacNameTextDisplayFormat");
    PyDict_SetItemString(mod_dict,"oacNameTextDisplayFormat",value);
    Py_DECREF(value);
    value=PyString_FromString("oacValueTextDisplayFormat");
    PyDict_SetItemString(mod_dict,"oacValueTextDisplayFormat",value);
    Py_DECREF(value);
    value=PyString_FromString("oacNameValueTextDisplayFormat");
    PyDict_SetItemString(mod_dict,"oacNameValueTextDisplayFormat",value);
    Py_DECREF(value);

    // Put Enum name function in Dictionary
    value=PyCFunction_New(&PyoaTextDisplayFormatEnum_method,NULL);
    if (PyDict_SetItemString(mod_dict,"oaTextDisplayFormatEnum",value)!=0) {
    Py_DECREF(value);
        printf("** Failed to add enum function to module dictionary for: oaTextDisplayFormatEnum\n");
        return -1;
    }
    Py_DECREF(value);
    return 0;
}

/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextDisplayIter
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayIter_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTextDisplayIter_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextDisplayIterObject* self = (PyoaTextDisplayIterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTextDisplayIter)
    {
        PyParamoaTextDisplayIter p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaTextDisplayIter_Convert,&p1)) {
            self->value =  new oaTextDisplayIter(p1.Data());
            return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTextDisplayIter, Choices are:\n"
        "    (oaTextDisplayIter)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTextDisplayIter_tp_dealloc(PyoaTextDisplayIterObject* self)
{
    if (!self->borrow) {
        delete (self->value);
    }
    Py_XDECREF(self->locks);
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayIter_tp_repr(PyObject *ob)
{
    PyParamoaTextDisplayIter value;
    int convert_status=PyoaTextDisplayIter_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[39];
    sprintf(buffer,"<oaTextDisplayIter::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTextDisplayIter_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTextDisplayIter v1;
    PyParamoaTextDisplayIter v2;
    int convert_status1=PyoaTextDisplayIter_Convert(ob1,&v1);
    int convert_status2=PyoaTextDisplayIter_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
static PyObject*
oaTextDisplayIter_getiter(PyObject *self)
{
    Py_INCREF(self);
    return self;
}

// ------------------------------------------------------------------
static PyObject*
oaTextDisplayIter_iternext(PyObject *self)
{
  try {
    PyParamoaTextDisplayIter ob;
    int convert_status=PyoaTextDisplayIter_Convert(self,&ob);
    assert(convert_status!=0);
    oaTextDisplay* result;
    result=ob.DataCall()->getNext();
    if (result==NULL) {
       PyErr_SetObject(PyExc_StopIteration,Py_None);
       return NULL;
    }
    return PyoaTextDisplay_FromoaTextDisplay(result);
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
int
PyoaTextDisplayIter_Convert(PyObject* ob,PyParamoaTextDisplayIter* result)
{
    if (ob == NULL) return 1;
    if (PyoaTextDisplayIter_Check(ob)) {
        result->SetData(  ((PyoaTextDisplayIterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextDisplayIter Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTextDisplayIter_FromoaTextDisplayIter(oaTextDisplayIter* data,int borrow,PyObject* lock)
{
    if (data) {
        PyObject* bself = PyoaTextDisplayIter_Type.tp_alloc(&PyoaTextDisplayIter_Type,0);
        if (bself == NULL) return bself;
        PyoaTextDisplayIterObject* self = (PyoaTextDisplayIterObject*)bself;
        self->value =  data;
        self->locks = NULL;
        self->borrow = borrow;
        if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplayIter_getNext_doc[] = 
"Class: oaTextDisplayIter, Function: getNext\n"
"  Paramegers: ()\n"
"    Calls: oaTextDisplay* getNext()\n"
"    Signature: getNext|ptr-oaTextDisplay|\n"
"    BrowseData: 1\n"
"    This function returns a pointer to the next object in the collection that is being iterated. The function switches on the iterator type to determine which function to call on the container. This function returns NULL when there are no more objects to return.\n"
;

static PyObject*
oaTextDisplayIter_getNext(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayIter data;
    int convert_status=PyoaTextDisplayIter_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayIterObject* self=(PyoaTextDisplayIterObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTextDisplayp result= (data.DataCall()->getNext());
        return PyoaTextDisplay_FromoaTextDisplay(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplayIter_next_doc[] = 
"Class: oaTextDisplayIter, Function: next\n"
"  Paramegers: ()\n"
"    Calls: oaTextDisplay* next()\n"
"    Signature: next|ptr-oaTextDisplay|,\n"
"    BrowseData: 1\n"
"    get next value or raise StopIteration\n"
;

static PyObject*
oaTextDisplayIter_next(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayIter data;
    int convert_status=PyoaTextDisplayIter_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayIterObject* self=(PyoaTextDisplayIterObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        oaTextDisplayp result= (data.DataCall()->getNext());
        if (result==NULL) {
            PyErr_SetObject(PyExc_StopIteration,Py_None);
            return NULL;
        }
        return PyoaTextDisplay_FromoaTextDisplay(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextDisplayIter_reset_doc[] = 
"Class: oaTextDisplayIter, Function: reset\n"
"  Paramegers: ()\n"
"    Calls: void reset()\n"
"    Signature: reset|void-void|\n"
"    BrowseData: 0\n"
"    This function restarts the iterator. The function switches on the iterator type to determine which function to call on the container. The next call to getNext() for this oaTextDisplayIter returns the first object in the collection.\n"
;

static PyObject*
oaTextDisplayIter_reset(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextDisplayIter data;
    int convert_status=PyoaTextDisplayIter_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextDisplayIterObject* self=(PyoaTextDisplayIterObject*)ob;

    if (PyArg_ParseTuple(args,"")) {
        data.DataCall()->reset();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

static char oaTextDisplayIter_assign_doc[] = 
"Class: oaTextDisplayIter, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTextDisplayIter_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTextDisplayIter data;
  int convert_status=PyoaTextDisplayIter_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTextDisplayIter p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTextDisplayIter_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTextDisplayIter_methodlist[] = {
    {"getNext",(PyCFunction)oaTextDisplayIter_getNext,METH_VARARGS,oaTextDisplayIter_getNext_doc},
    {"next",(PyCFunction)oaTextDisplayIter_next,METH_VARARGS,oaTextDisplayIter_next_doc},
    {"reset",(PyCFunction)oaTextDisplayIter_reset,METH_VARARGS,oaTextDisplayIter_reset_doc},
    {"assign",(PyCFunction)oaTextDisplayIter_tp_assign,METH_VARARGS,oaTextDisplayIter_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextDisplayIter_doc[] = 
"Class: oaTextDisplayIter\n"
"  The oaTextDisplayIter class implements a special case iterator. This class returns textDisplays of an oaTextDisplayCollection .\n"
"  The following example shows the suggested usage of oaTextDisplayIter:\n"
"  oaTextDisplayIter iter(textDisplay->getTextDisplays()); oaTextDisplay *td; while (td = iter.getNext()) { ... }\n"
"Constructors:\n"
"  Paramegers: (oaTextDisplayIter)\n"
"    Calls: oaTextDisplayIter(oaTextDisplayIter& iterIn)\n"
"    Signature: oaTextDisplayIter||ref-oaTextDisplayIter,\n"
"    This function constructs a new oaTextDisplayIter class and iterates over the same set of objects as the specified oaTextDisplayIter iterator. The new iterator starts at the beginning of the collection.\n"
"    iterIn\n"
"    The iterator value to use\n"
"  Paramegers: (oaTextDisplayIter)\n"
"    Calls: (const oaTextDisplayIter&)\n"
"    Signature: oaTextDisplayIter||cref-oaTextDisplayIter,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTextDisplayIter_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTextDisplayIter",
    sizeof(PyoaTextDisplayIterObject),
    0,
    (destructor)oaTextDisplayIter_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTextDisplayIter_tp_compare,	/* tp_compare */
    (reprfunc)oaTextDisplayIter_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTextDisplayIter_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    (getiterfunc)oaTextDisplayIter_getiter,	/* tp_iter */
    (iternextfunc)oaTextDisplayIter_iternext,	/* tp_iternext */
    oaTextDisplayIter_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    0,					/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTextDisplayIter_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTextDisplayIter_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTextDisplayIter_Type)<0) {
      printf("** PyType_Ready failed for: oaTextDisplayIter\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTextDisplayIter",
           (PyObject*)(&PyoaTextDisplayIter_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTextDisplayIter\n");
       return -1;
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTextOverride
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTextOverride_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTextOverride_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTextOverrideObject* self = (PyoaTextOverrideObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTextOverride)
    {
        PyParamoaTextOverride p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTextOverride_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTextOverride, Choices are:\n"
        "    (oaTextOverride)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTextOverride_tp_dealloc(PyoaTextOverrideObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTextOverride_tp_repr(PyObject *ob)
{
    PyParamoaTextOverride value;
    int convert_status=PyoaTextOverride_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[36];
    sprintf(buffer,"<oaTextOverride::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTextOverride_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTextOverride v1;
    PyParamoaTextOverride v2;
    int convert_status1=PyoaTextOverride_Convert(ob1,&v1);
    int convert_status2=PyoaTextOverride_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTextOverride_Convert(PyObject* ob,PyParamoaTextOverride* result)
{
    if (ob == NULL) return 1;
    if (PyoaTextOverride_Check(ob)) {
        result->SetData( (oaTextOverride**) ((PyoaTextOverrideObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTextOverride Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTextOverride_FromoaTextOverride(oaTextOverride** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTextOverride* data=*value;
        PyObject* bself = PyoaTextOverride_Type.tp_alloc(&PyoaTextOverride_Type,0);
        if (bself == NULL) return bself;
        PyoaTextOverrideObject* self = (PyoaTextOverrideObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTextOverride_FromoaTextOverride(oaTextOverride* data)
{
    if (data) {
       PyObject* bself = PyoaTextOverride_Type.tp_alloc(&PyoaTextOverride_Type,0);
       if (bself == NULL) return bself;
       PyoaTextOverrideObject* self = (PyoaTextOverrideObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextOverride_getInst_doc[] = 
"Class: oaTextOverride, Function: getInst\n"
"  Paramegers: ()\n"
"    Calls: oaInst* getInst() const\n"
"    Signature: getInst|ptr-oaInst|\n"
"    BrowseData: 1\n"
"    This function returns the instance associated with this textOverride object.\n"
;

static PyObject*
oaTextOverride_getInst(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextOverride data;
    int convert_status=PyoaTextOverride_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextOverrideObject* self=(PyoaTextOverrideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaInstp result= (data.DataCall()->getInst());
        return PyoaInst_FromoaInst(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextOverride_getMasterText_doc[] = 
"Class: oaTextOverride, Function: getMasterText\n"
"  Paramegers: ()\n"
"    Calls: oaText* getMasterText() const\n"
"    Signature: getMasterText|ptr-oaText|\n"
"    BrowseData: 1\n"
"    This function returns the text object contained in the instance master associated with this textOverride object. This function returns NULL if the associated instance is not bound.\n"
;

static PyObject*
oaTextOverride_getMasterText(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextOverride data;
    int convert_status=PyoaTextOverride_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextOverrideObject* self=(PyoaTextOverrideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTextp result= (data.DataCall()->getMasterText());
        return PyoaText_FromoaText(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextOverride_getMasterTextText_doc[] = 
"Class: oaTextOverride, Function: getMasterTextText\n"
"  Paramegers: (oaString)\n"
"    Calls: void getMasterTextText(oaString& text) const\n"
"    Signature: getMasterTextText|void-void|ref-oaString,\n"
"    BrowseData: 0,oaString\n"
"    This function returns the master text associated with this textOverride object. This text is used when attempting to bind to the masterText object.\n"
;

static PyObject*
oaTextOverride_getMasterTextText(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextOverride data;
    int convert_status=PyoaTextOverride_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextOverrideObject* self=(PyoaTextOverrideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaString p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaString_Convert,&p1)) {
        data.DataCall()->getMasterTextText(p1.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextOverride_isBound_doc[] = 
"Class: oaTextOverride, Function: isBound\n"
"  Paramegers: ()\n"
"    Calls: oaBoolean isBound() const\n"
"    Signature: isBound|simple-oaBoolean|\n"
"    BrowseData: 1\n"
"    This function returns a boolean, which indicates whether this text display is currently bound to the cross design master text object.\n"
;

static PyObject*
oaTextOverride_isBound(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTextOverride data;
    int convert_status=PyoaTextOverride_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTextOverrideObject* self=(PyoaTextOverrideObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaBoolean result= (data.DataCall()->isBound());
        return PyoaBoolean_FromoaBoolean(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTextOverride_isNull_doc[] =
"Class: oaTextOverride, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTextOverride_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTextOverride data;
    int convert_status=PyoaTextOverride_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTextOverride_assign_doc[] = 
"Class: oaTextOverride, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTextOverride_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTextOverride data;
  int convert_status=PyoaTextOverride_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTextOverride p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTextOverride_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTextOverride_methodlist[] = {
    {"getInst",(PyCFunction)oaTextOverride_getInst,METH_VARARGS,oaTextOverride_getInst_doc},
    {"getMasterText",(PyCFunction)oaTextOverride_getMasterText,METH_VARARGS,oaTextOverride_getMasterText_doc},
    {"getMasterTextText",(PyCFunction)oaTextOverride_getMasterTextText,METH_VARARGS,oaTextOverride_getMasterTextText_doc},
    {"isBound",(PyCFunction)oaTextOverride_isBound,METH_VARARGS,oaTextOverride_isBound_doc},
    {"isNull",(PyCFunction)oaTextOverride_tp_isNull,METH_VARARGS,oaTextOverride_isNull_doc},
    {"assign",(PyCFunction)oaTextOverride_tp_assign,METH_VARARGS,oaTextOverride_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextOverride_doc[] = 
"Class: oaTextOverride\n"
"  The oaTextOverride class is a shape associated with an oaInst object and an oaText object in the master design of that instance. The oaTextOverride class supports changing the text attributes that are used to display the oaText object in the master design of that instance.\n"
"  The oaTextOverride display object resides in the same design as the oaInst object it is associated with.\n"
"Constructors:\n"
"  Paramegers: (oaTextOverride)\n"
"    Calls: (const oaTextOverride&)\n"
"    Signature: oaTextOverride||cref-oaTextOverride,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTextOverride_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTextOverride",
    sizeof(PyoaTextOverrideObject),
    0,
    (destructor)oaTextOverride_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTextOverride_tp_compare,	/* tp_compare */
    (reprfunc)oaTextOverride_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTextOverride_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTextOverride_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaTextDisplay_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTextOverride_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTextOverride_static_create_doc[] = 
"Class: oaTextOverride, Function: create\n"
"  Paramegers: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist)\n"
"    Calls: oaTextOverride* create(oaText* masterText,oaInst* inst,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height)\n"
"    Signature: create|ptr-oaTextOverride|ptr-oaText,ptr-oaInst,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaTextDisplayFormat,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a textOverride object for the specified text object in the specified instance master.\n"
"    Note: You must open the instance master for this function to succeed. The oaText must be contained in the master of the instance.\n"
"    masterText\n"
"    The pointer to the oaText object in instance master\n"
"    inst\n"
"    The pointer to the instance\n"
"    layerNum\n"
"    The number of the layer for this textOverride\n"
"    purposeNum\n"
"    The number of the purpose for this textOverride\n"
"    origin\n"
"    The origin point for this textOverride shape\n"
"    alignment\n"
"    The alignments for this textDisplay shape\n"
"    orient\n"
"    The orientation for this textDisplay shape\n"
"    font\n"
"    The font used in the display for this textDisplay\n"
"    height\n"
"    The height for this textDisplay shape\n"
"    format\n"
"    The name or value format for this display shape; the default is oacNameTextDisplayFormat\n"
"    overbar\n"
"    Indicates if the display has an overbar; the default is false\n"
"    visible\n"
"    Indicates if this textOverride is actually displayed; the default is true\n"
"    drafting\n"
"    Indicates the drafting of this textOverride shape; the default is true\n"
"    oacNoMasterForTextDisplay\n"
"    oacTextNotInInstanceMaster\n"
"  Paramegers: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat)\n"
"    Calls: oaTextOverride* create(oaText* masterText,oaInst* inst,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaTextDisplayFormat format)\n"
"    Signature: create|ptr-oaTextOverride|ptr-oaText,ptr-oaInst,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaTextDisplayFormat,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a textOverride object for the specified text object in the specified instance master.\n"
"    Note: You must open the instance master for this function to succeed. The oaText must be contained in the master of the instance.\n"
"    masterText\n"
"    The pointer to the oaText object in instance master\n"
"    inst\n"
"    The pointer to the instance\n"
"    layerNum\n"
"    The number of the layer for this textOverride\n"
"    purposeNum\n"
"    The number of the purpose for this textOverride\n"
"    origin\n"
"    The origin point for this textOverride shape\n"
"    alignment\n"
"    The alignments for this textDisplay shape\n"
"    orient\n"
"    The orientation for this textDisplay shape\n"
"    font\n"
"    The font used in the display for this textDisplay\n"
"    height\n"
"    The height for this textDisplay shape\n"
"    format\n"
"    The name or value format for this display shape; the default is oacNameTextDisplayFormat\n"
"    overbar\n"
"    Indicates if the display has an overbar; the default is false\n"
"    visible\n"
"    Indicates if this textOverride is actually displayed; the default is true\n"
"    drafting\n"
"    Indicates the drafting of this textOverride shape; the default is true\n"
"    oacNoMasterForTextDisplay\n"
"    oacTextNotInInstanceMaster\n"
"  Paramegers: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean)\n"
"    Calls: oaTextOverride* create(oaText* masterText,oaInst* inst,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaTextDisplayFormat format,oaBoolean overbar)\n"
"    Signature: create|ptr-oaTextOverride|ptr-oaText,ptr-oaInst,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaTextDisplayFormat,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a textOverride object for the specified text object in the specified instance master.\n"
"    Note: You must open the instance master for this function to succeed. The oaText must be contained in the master of the instance.\n"
"    masterText\n"
"    The pointer to the oaText object in instance master\n"
"    inst\n"
"    The pointer to the instance\n"
"    layerNum\n"
"    The number of the layer for this textOverride\n"
"    purposeNum\n"
"    The number of the purpose for this textOverride\n"
"    origin\n"
"    The origin point for this textOverride shape\n"
"    alignment\n"
"    The alignments for this textDisplay shape\n"
"    orient\n"
"    The orientation for this textDisplay shape\n"
"    font\n"
"    The font used in the display for this textDisplay\n"
"    height\n"
"    The height for this textDisplay shape\n"
"    format\n"
"    The name or value format for this display shape; the default is oacNameTextDisplayFormat\n"
"    overbar\n"
"    Indicates if the display has an overbar; the default is false\n"
"    visible\n"
"    Indicates if this textOverride is actually displayed; the default is true\n"
"    drafting\n"
"    Indicates the drafting of this textOverride shape; the default is true\n"
"    oacNoMasterForTextDisplay\n"
"    oacTextNotInInstanceMaster\n"
"  Paramegers: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean,oaBoolean)\n"
"    Calls: oaTextOverride* create(oaText* masterText,oaInst* inst,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaTextDisplayFormat format,oaBoolean overbar,oaBoolean visible)\n"
"    Signature: create|ptr-oaTextOverride|ptr-oaText,ptr-oaInst,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaTextDisplayFormat,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a textOverride object for the specified text object in the specified instance master.\n"
"    Note: You must open the instance master for this function to succeed. The oaText must be contained in the master of the instance.\n"
"    masterText\n"
"    The pointer to the oaText object in instance master\n"
"    inst\n"
"    The pointer to the instance\n"
"    layerNum\n"
"    The number of the layer for this textOverride\n"
"    purposeNum\n"
"    The number of the purpose for this textOverride\n"
"    origin\n"
"    The origin point for this textOverride shape\n"
"    alignment\n"
"    The alignments for this textDisplay shape\n"
"    orient\n"
"    The orientation for this textDisplay shape\n"
"    font\n"
"    The font used in the display for this textDisplay\n"
"    height\n"
"    The height for this textDisplay shape\n"
"    format\n"
"    The name or value format for this display shape; the default is oacNameTextDisplayFormat\n"
"    overbar\n"
"    Indicates if the display has an overbar; the default is false\n"
"    visible\n"
"    Indicates if this textOverride is actually displayed; the default is true\n"
"    drafting\n"
"    Indicates the drafting of this textOverride shape; the default is true\n"
"    oacNoMasterForTextDisplay\n"
"    oacTextNotInInstanceMaster\n"
"  Paramegers: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean,oaBoolean,oaBoolean)\n"
"    Calls: oaTextOverride* create(oaText* masterText,oaInst* inst,oaLayerNum layerNum,oaPurposeNum purposeNum,const oaPoint& origin,oaTextAlign alignment,oaOrient orient,oaFont font,oaDist height,oaTextDisplayFormat format,oaBoolean overbar,oaBoolean visible,oaBoolean drafting)\n"
"    Signature: create|ptr-oaTextOverride|ptr-oaText,ptr-oaInst,simple-oaLayerNum,simple-oaPurposeNum,cref-oaPoint,simple-oaTextAlign,simple-oaOrient,simple-oaFont,simple-oaDist,simple-oaTextDisplayFormat,simple-oaBoolean,simple-oaBoolean,simple-oaBoolean,\n"
"    This function creates a textOverride object for the specified text object in the specified instance master.\n"
"    Note: You must open the instance master for this function to succeed. The oaText must be contained in the master of the instance.\n"
"    masterText\n"
"    The pointer to the oaText object in instance master\n"
"    inst\n"
"    The pointer to the instance\n"
"    layerNum\n"
"    The number of the layer for this textOverride\n"
"    purposeNum\n"
"    The number of the purpose for this textOverride\n"
"    origin\n"
"    The origin point for this textOverride shape\n"
"    alignment\n"
"    The alignments for this textDisplay shape\n"
"    orient\n"
"    The orientation for this textDisplay shape\n"
"    font\n"
"    The font used in the display for this textDisplay\n"
"    height\n"
"    The height for this textDisplay shape\n"
"    format\n"
"    The name or value format for this display shape; the default is oacNameTextDisplayFormat\n"
"    overbar\n"
"    Indicates if the display has an overbar; the default is false\n"
"    visible\n"
"    Indicates if this textOverride is actually displayed; the default is true\n"
"    drafting\n"
"    Indicates the drafting of this textOverride shape; the default is true\n"
"    oacNoMasterForTextDisplay\n"
"    oacTextNotInInstanceMaster\n"
;

static PyObject*
oaTextOverride_static_create(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist)
    {
        PyParamoaText p1;
        PyParamoaInst p2;
        PyParamoaLayerNum p3;
        PyParamoaPurposeNum p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&",
              &PyoaText_Convert,&p1,
              &PyoaInst_Convert,&p2,
              &PyoaLayerNum_Convert,&p3,
              &PyoaPurposeNum_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTextOverridep result= (oaTextOverride::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data()));
            return PyoaTextOverride_FromoaTextOverride(result);
        }
    }
    PyErr_Clear();
    // Case: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat)
    {
        PyParamoaText p1;
        PyParamoaInst p2;
        PyParamoaLayerNum p3;
        PyParamoaPurposeNum p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaTextDisplayFormat p10;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&",
              &PyoaText_Convert,&p1,
              &PyoaInst_Convert,&p2,
              &PyoaLayerNum_Convert,&p3,
              &PyoaPurposeNum_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaTextDisplayFormat_Convert,&p10)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTextOverridep result= (oaTextOverride::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data()));
            return PyoaTextOverride_FromoaTextOverride(result);
        }
    }
    PyErr_Clear();
    // Case: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean)
    {
        PyParamoaText p1;
        PyParamoaInst p2;
        PyParamoaLayerNum p3;
        PyParamoaPurposeNum p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaTextDisplayFormat p10;
        PyParamoaBoolean p11;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaText_Convert,&p1,
              &PyoaInst_Convert,&p2,
              &PyoaLayerNum_Convert,&p3,
              &PyoaPurposeNum_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaTextDisplayFormat_Convert,&p10,
              &PyoaBoolean_Convert,&p11)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTextOverridep result= (oaTextOverride::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data()));
            return PyoaTextOverride_FromoaTextOverride(result);
        }
    }
    PyErr_Clear();
    // Case: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean,oaBoolean)
    {
        PyParamoaText p1;
        PyParamoaInst p2;
        PyParamoaLayerNum p3;
        PyParamoaPurposeNum p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaTextDisplayFormat p10;
        PyParamoaBoolean p11;
        PyParamoaBoolean p12;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaText_Convert,&p1,
              &PyoaInst_Convert,&p2,
              &PyoaLayerNum_Convert,&p3,
              &PyoaPurposeNum_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaTextDisplayFormat_Convert,&p10,
              &PyoaBoolean_Convert,&p11,
              &PyoaBoolean_Convert,&p12)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTextOverridep result= (oaTextOverride::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data(),p12.Data()));
            return PyoaTextOverride_FromoaTextOverride(result);
        }
    }
    PyErr_Clear();
    // Case: (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean,oaBoolean,oaBoolean)
    {
        PyParamoaText p1;
        PyParamoaInst p2;
        PyParamoaLayerNum p3;
        PyParamoaPurposeNum p4;
        PyParamoaPoint p5;
        PyParamoaTextAlign p6;
        PyParamoaOrient p7;
        PyParamoaFont p8;
        PyParamoaDist p9;
        PyParamoaTextDisplayFormat p10;
        PyParamoaBoolean p11;
        PyParamoaBoolean p12;
        PyParamoaBoolean p13;
        if (PyArg_ParseTuple(args,"O&O&O&O&O&O&O&O&O&O&O&O&O&",
              &PyoaText_Convert,&p1,
              &PyoaInst_Convert,&p2,
              &PyoaLayerNum_Convert,&p3,
              &PyoaPurposeNum_Convert,&p4,
              &PyoaPoint_Convert,&p5,
              &PyoaTextAlign_Convert,&p6,
              &PyoaOrient_Convert,&p7,
              &PyoaFont_Convert,&p8,
              &PyoaDist_Convert,&p9,
              &PyoaTextDisplayFormat_Convert,&p10,
              &PyoaBoolean_Convert,&p11,
              &PyoaBoolean_Convert,&p12,
              &PyoaBoolean_Convert,&p13)) {
            if (!PyValidateDbObject(p1.Data(),1)) return NULL;
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTextOverridep result= (oaTextOverride::create(p1.Data(),p2.Data(),p3.Data(),p4.Data(),p5.Data(),p6.Data(),p7.Data(),p8.Data(),p9.Data(),p10.Data(),p11.Data(),p12.Data(),p13.Data()));
            return PyoaTextOverride_FromoaTextOverride(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTextOverride, function: create, Choices are:\n"
        "    (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist)\n"
        "    (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat)\n"
        "    (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean)\n"
        "    (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean,oaBoolean)\n"
        "    (oaText,oaInst,oaLayerNum,oaPurposeNum,oaPoint,oaTextAlign,oaOrient,oaFont,oaDist,oaTextDisplayFormat,oaBoolean,oaBoolean,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTextOverride_staticmethodlist[] = {
    {"static_create",(PyCFunction)oaTextOverride_static_create,METH_VARARGS,oaTextOverride_static_create_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTextOverride_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTextOverride_Type)<0) {
      printf("** PyType_Ready failed for: oaTextOverride\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTextOverride",
           (PyObject*)(&PyoaTextOverride_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTextOverride\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTextOverride_Type.tp_dict;
    for(method=oaTextOverride_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaAnalysisOpPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaAnalysisOpPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaAnalysisOpPointObject* self = (PyoaTimeAppDef_oaAnalysisOpPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaAnalysisOpPoint)
    {
        PyParamoaTimeAppDef_oaAnalysisOpPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaAnalysisOpPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaAnalysisOpPoint, Choices are:\n"
        "    (oaTimeAppDef_oaAnalysisOpPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaAnalysisOpPoint_tp_dealloc(PyoaTimeAppDef_oaAnalysisOpPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaAnalysisOpPoint value;
    int convert_status=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaTimeAppDef_oaAnalysisOpPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaAnalysisOpPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaAnalysisOpPoint v1;
    PyParamoaTimeAppDef_oaAnalysisOpPoint v2;
    int convert_status1=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaAnalysisOpPoint_Convert(PyObject* ob,PyParamoaTimeAppDef_oaAnalysisOpPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaAnalysisOpPoint_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaAnalysisOpPoint**) ((PyoaTimeAppDef_oaAnalysisOpPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaAnalysisOpPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(oaTimeAppDef_oaAnalysisOpPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaAnalysisOpPoint* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaTimeAppDef_oaAnalysisOpPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaAnalysisOpPointObject* self = (PyoaTimeAppDef_oaAnalysisOpPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(oaTimeAppDef_oaAnalysisOpPoint* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaAnalysisOpPoint_Type.tp_alloc(&PyoaTimeAppDef_oaAnalysisOpPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaAnalysisOpPointObject* self = (PyoaTimeAppDef_oaAnalysisOpPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_get_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaAnalysisOpPoint)\n"
"    Calls: oaTime get(const oaAnalysisOpPoint* object)\n"
"    Signature: get|simple-oaTime|cptr-oaAnalysisOpPoint,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAnalysisOpPointObject* self=(PyoaTimeAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisOpPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_getDefault_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAnalysisOpPointObject* self=(PyoaTimeAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_set_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaAnalysisOpPoint,oaTime)\n"
"    Calls: void set(oaAnalysisOpPoint* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaAnalysisOpPoint,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAnalysisOpPointObject* self=(PyoaTimeAppDef_oaAnalysisOpPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisOpPoint p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisOpPoint_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_isNull_doc[] =
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaAnalysisOpPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaAnalysisOpPoint_assign_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaAnalysisOpPoint data;
  int convert_status=PyoaTimeAppDef_oaAnalysisOpPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaAnalysisOpPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaAnalysisOpPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaAnalysisOpPoint_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_get,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_getDefault,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_set,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_tp_isNull,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_tp_assign,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaAnalysisOpPoint)\n"
"    Calls: (const oaTimeAppDef_oaAnalysisOpPoint&)\n"
"    Signature: oaTimeAppDef_oaAnalysisOpPoint||cref-oaTimeAppDef_oaAnalysisOpPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaAnalysisOpPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaAnalysisOpPoint",
    sizeof(PyoaTimeAppDef_oaAnalysisOpPointObject),
    0,
    (destructor)oaTimeAppDef_oaAnalysisOpPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaAnalysisOpPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaAnalysisOpPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaAnalysisOpPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaAnalysisOpPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaAnalysisOpPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_static_find_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::find(p1.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAnalysisOpPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisOpPoint_static_get_doc[] = 
"Class: oaTimeAppDef_oaAnalysisOpPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAnalysisOpPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisOpPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisOpPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::get(p1.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisOpPointp result= (oaTimeAppDef_oaAnalysisOpPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaAnalysisOpPoint_FromoaTimeAppDef_oaAnalysisOpPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAnalysisOpPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaAnalysisOpPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_static_find,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaAnalysisOpPoint_static_get,METH_VARARGS,oaTimeAppDef_oaAnalysisOpPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaAnalysisOpPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaAnalysisOpPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaAnalysisOpPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaAnalysisOpPoint",
           (PyObject*)(&PyoaTimeAppDef_oaAnalysisOpPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaAnalysisOpPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaAnalysisOpPoint_Type.tp_dict;
    for(method=oaTimeAppDef_oaAnalysisOpPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaAnalysisPoint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAnalysisPoint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaAnalysisPoint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaAnalysisPointObject* self = (PyoaTimeAppDef_oaAnalysisPointObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaAnalysisPoint)
    {
        PyParamoaTimeAppDef_oaAnalysisPoint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaAnalysisPoint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaAnalysisPoint, Choices are:\n"
        "    (oaTimeAppDef_oaAnalysisPoint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaAnalysisPoint_tp_dealloc(PyoaTimeAppDef_oaAnalysisPointObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAnalysisPoint_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaAnalysisPoint value;
    int convert_status=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaTimeAppDef_oaAnalysisPoint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaAnalysisPoint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaAnalysisPoint v1;
    PyParamoaTimeAppDef_oaAnalysisPoint v2;
    int convert_status1=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaAnalysisPoint_Convert(PyObject* ob,PyParamoaTimeAppDef_oaAnalysisPoint* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaAnalysisPoint_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaAnalysisPoint**) ((PyoaTimeAppDef_oaAnalysisPointObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaAnalysisPoint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(oaTimeAppDef_oaAnalysisPoint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaAnalysisPoint* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaTimeAppDef_oaAnalysisPoint_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaAnalysisPointObject* self = (PyoaTimeAppDef_oaAnalysisPointObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(oaTimeAppDef_oaAnalysisPoint* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaAnalysisPoint_Type.tp_alloc(&PyoaTimeAppDef_oaAnalysisPoint_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaAnalysisPointObject* self = (PyoaTimeAppDef_oaAnalysisPointObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_get_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaAnalysisPoint)\n"
"    Calls: oaTime get(const oaAnalysisPoint* object)\n"
"    Signature: get|simple-oaTime|cptr-oaAnalysisPoint,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAnalysisPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAnalysisPointObject* self=(PyoaTimeAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAnalysisPoint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_getDefault_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAnalysisPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAnalysisPointObject* self=(PyoaTimeAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_set_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaAnalysisPoint,oaTime)\n"
"    Calls: void set(oaAnalysisPoint* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaAnalysisPoint,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAnalysisPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAnalysisPointObject* self=(PyoaTimeAppDef_oaAnalysisPointObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAnalysisPoint p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAnalysisPoint_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_isNull_doc[] =
"Class: oaTimeAppDef_oaAnalysisPoint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaAnalysisPoint data;
    int convert_status=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaAnalysisPoint_assign_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaAnalysisPoint data;
  int convert_status=PyoaTimeAppDef_oaAnalysisPoint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaAnalysisPoint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaAnalysisPoint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaAnalysisPoint_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_get,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_getDefault,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_set,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_tp_isNull,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_tp_assign,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaAnalysisPoint)\n"
"    Calls: (const oaTimeAppDef_oaAnalysisPoint&)\n"
"    Signature: oaTimeAppDef_oaAnalysisPoint||cref-oaTimeAppDef_oaAnalysisPoint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaAnalysisPoint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaAnalysisPoint",
    sizeof(PyoaTimeAppDef_oaAnalysisPointObject),
    0,
    (destructor)oaTimeAppDef_oaAnalysisPoint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaAnalysisPoint_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaAnalysisPoint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaAnalysisPoint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaAnalysisPoint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaAnalysisPoint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_static_find_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::find(p1.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAnalysisPoint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAnalysisPoint_static_get_doc[] = 
"Class: oaTimeAppDef_oaAnalysisPoint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAnalysisPoint* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAnalysisPoint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaAnalysisPoint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::get(p1.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAnalysisPointp result= (oaTimeAppDef_oaAnalysisPoint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaAnalysisPoint_FromoaTimeAppDef_oaAnalysisPoint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAnalysisPoint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaAnalysisPoint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_static_find,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaAnalysisPoint_static_get,METH_VARARGS,oaTimeAppDef_oaAnalysisPoint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaAnalysisPoint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaAnalysisPoint_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaAnalysisPoint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaAnalysisPoint",
           (PyObject*)(&PyoaTimeAppDef_oaAnalysisPoint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaAnalysisPoint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaAnalysisPoint_Type.tp_dict;
    for(method=oaTimeAppDef_oaAnalysisPoint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaAppObject
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAppObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaAppObject_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaAppObjectObject* self = (PyoaTimeAppDef_oaAppObjectObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaAppObject)
    {
        PyParamoaTimeAppDef_oaAppObject p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaAppObject_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaAppObject, Choices are:\n"
        "    (oaTimeAppDef_oaAppObject)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaAppObject_tp_dealloc(PyoaTimeAppDef_oaAppObjectObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAppObject_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaAppObject value;
    int convert_status=PyoaTimeAppDef_oaAppObject_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaTimeAppDef_oaAppObject::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaAppObject_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaAppObject v1;
    PyParamoaTimeAppDef_oaAppObject v2;
    int convert_status1=PyoaTimeAppDef_oaAppObject_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaAppObject_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaAppObject_Convert(PyObject* ob,PyParamoaTimeAppDef_oaAppObject* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaAppObject_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaAppObject**) ((PyoaTimeAppDef_oaAppObjectObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaAppObject Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAppObject_FromoaTimeAppDef_oaAppObject(oaTimeAppDef_oaAppObject** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaAppObject* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaAppObject_Type.tp_alloc(&PyoaTimeAppDef_oaAppObject_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaAppObjectObject* self = (PyoaTimeAppDef_oaAppObjectObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAppObject_FromoaTimeAppDef_oaAppObject(oaTimeAppDef_oaAppObject* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaAppObject_Type.tp_alloc(&PyoaTimeAppDef_oaAppObject_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaAppObjectObject* self = (PyoaTimeAppDef_oaAppObjectObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_get_doc[] = 
"Class: oaTimeAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaAppObject)\n"
"    Calls: oaTime get(const oaAppObject* object)\n"
"    Signature: get|simple-oaTime|cptr-oaAppObject,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAppObject data;
    int convert_status=PyoaTimeAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAppObjectObject* self=(PyoaTimeAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAppObject_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_getDefault_doc[] = 
"Class: oaTimeAppDef_oaAppObject, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAppObject data;
    int convert_status=PyoaTimeAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAppObjectObject* self=(PyoaTimeAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_set_doc[] = 
"Class: oaTimeAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaAppObject,oaTime)\n"
"    Calls: void set(oaAppObject* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaAppObject,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAppObject data;
    int convert_status=PyoaTimeAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAppObjectObject* self=(PyoaTimeAppDef_oaAppObjectObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAppObject p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAppObject_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_isNull_doc[] =
"Class: oaTimeAppDef_oaAppObject, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaAppObject data;
    int convert_status=PyoaTimeAppDef_oaAppObject_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaAppObject_assign_doc[] = 
"Class: oaTimeAppDef_oaAppObject, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaAppObject data;
  int convert_status=PyoaTimeAppDef_oaAppObject_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaAppObject p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaAppObject_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaAppObject_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaAppObject_get,METH_VARARGS,oaTimeAppDef_oaAppObject_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaAppObject_getDefault,METH_VARARGS,oaTimeAppDef_oaAppObject_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaAppObject_set,METH_VARARGS,oaTimeAppDef_oaAppObject_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaAppObject_tp_isNull,METH_VARARGS,oaTimeAppDef_oaAppObject_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaAppObject_tp_assign,METH_VARARGS,oaTimeAppDef_oaAppObject_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_doc[] = 
"Class: oaTimeAppDef_oaAppObject\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaAppObject)\n"
"    Calls: (const oaTimeAppDef_oaAppObject&)\n"
"    Signature: oaTimeAppDef_oaAppObject||cref-oaTimeAppDef_oaAppObject,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaAppObject_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaAppObject",
    sizeof(PyoaTimeAppDef_oaAppObjectObject),
    0,
    (destructor)oaTimeAppDef_oaAppObject_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaAppObject_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaAppObject_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaAppObject_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaAppObject_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaAppObject_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_static_find_doc[] = 
"Class: oaTimeAppDef_oaAppObject, Function: find\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAppObject* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_static_find(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaString p1;
    PyParamoaAppObjectDef p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaString_Convert,&p1,
          &PyoaAppObjectDef_Convert,&p2)) {
        if (!PyValidateDbObject(p2.Data(),2)) return NULL;
        oaTimeAppDef_oaAppObjectp result= (oaTimeAppDef_oaAppObject::find(p1.Data(),p2.Data()));
        return PyoaTimeAppDef_oaAppObject_FromoaTimeAppDef_oaAppObject(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAppObject_static_get_doc[] = 
"Class: oaTimeAppDef_oaAppObject, Function: get\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAppObject* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAppObject|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaAppObject_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAppObjectp result= (oaTimeAppDef_oaAppObject::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAppObject_FromoaTimeAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAppObjectp result= (oaTimeAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAppObject_FromoaTimeAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAppObjectp result= (oaTimeAppDef_oaAppObject::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaAppObject_FromoaTimeAppDef_oaAppObject(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAppObject, function: get, Choices are:\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaAppObject_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaAppObject_static_find,METH_VARARGS,oaTimeAppDef_oaAppObject_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaAppObject_static_get,METH_VARARGS,oaTimeAppDef_oaAppObject_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaAppObject_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaAppObject_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaAppObject\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaAppObject",
           (PyObject*)(&PyoaTimeAppDef_oaAppObject_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaAppObject\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaAppObject_Type.tp_dict;
    for(method=oaTimeAppDef_oaAppObject_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaAssignment
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAssignment_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaAssignment_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaAssignmentObject* self = (PyoaTimeAppDef_oaAssignmentObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaAssignment)
    {
        PyParamoaTimeAppDef_oaAssignment p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaAssignment_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaAssignment, Choices are:\n"
        "    (oaTimeAppDef_oaAssignment)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaAssignment_tp_dealloc(PyoaTimeAppDef_oaAssignmentObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaAssignment_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaAssignment value;
    int convert_status=PyoaTimeAppDef_oaAssignment_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaAssignment::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaAssignment_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaAssignment v1;
    PyParamoaTimeAppDef_oaAssignment v2;
    int convert_status1=PyoaTimeAppDef_oaAssignment_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaAssignment_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaAssignment_Convert(PyObject* ob,PyParamoaTimeAppDef_oaAssignment* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaAssignment_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaAssignment**) ((PyoaTimeAppDef_oaAssignmentObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaAssignment Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(oaTimeAppDef_oaAssignment** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaAssignment* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaAssignment_Type.tp_alloc(&PyoaTimeAppDef_oaAssignment_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaAssignmentObject* self = (PyoaTimeAppDef_oaAssignmentObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(oaTimeAppDef_oaAssignment* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaAssignment_Type.tp_alloc(&PyoaTimeAppDef_oaAssignment_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaAssignmentObject* self = (PyoaTimeAppDef_oaAssignmentObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_get_doc[] = 
"Class: oaTimeAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaAssignment)\n"
"    Calls: oaTime get(const oaAssignment* object)\n"
"    Signature: get|simple-oaTime|cptr-oaAssignment,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAssignment data;
    int convert_status=PyoaTimeAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAssignmentObject* self=(PyoaTimeAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaAssignment_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_getDefault_doc[] = 
"Class: oaTimeAppDef_oaAssignment, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAssignment data;
    int convert_status=PyoaTimeAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAssignmentObject* self=(PyoaTimeAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_set_doc[] = 
"Class: oaTimeAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaAssignment,oaTime)\n"
"    Calls: void set(oaAssignment* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaAssignment,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaAssignment data;
    int convert_status=PyoaTimeAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaAssignmentObject* self=(PyoaTimeAppDef_oaAssignmentObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaAssignment p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaAssignment_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_isNull_doc[] =
"Class: oaTimeAppDef_oaAssignment, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaAssignment data;
    int convert_status=PyoaTimeAppDef_oaAssignment_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaAssignment_assign_doc[] = 
"Class: oaTimeAppDef_oaAssignment, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaAssignment data;
  int convert_status=PyoaTimeAppDef_oaAssignment_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaAssignment p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaAssignment_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaAssignment_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaAssignment_get,METH_VARARGS,oaTimeAppDef_oaAssignment_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaAssignment_getDefault,METH_VARARGS,oaTimeAppDef_oaAssignment_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaAssignment_set,METH_VARARGS,oaTimeAppDef_oaAssignment_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaAssignment_tp_isNull,METH_VARARGS,oaTimeAppDef_oaAssignment_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaAssignment_tp_assign,METH_VARARGS,oaTimeAppDef_oaAssignment_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_doc[] = 
"Class: oaTimeAppDef_oaAssignment\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaAssignment)\n"
"    Calls: (const oaTimeAppDef_oaAssignment&)\n"
"    Signature: oaTimeAppDef_oaAssignment||cref-oaTimeAppDef_oaAssignment,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaAssignment_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaAssignment",
    sizeof(PyoaTimeAppDef_oaAssignmentObject),
    0,
    (destructor)oaTimeAppDef_oaAssignment_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaAssignment_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaAssignment_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaAssignment_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaAssignment_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaAssignment_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_static_find_doc[] = 
"Class: oaTimeAppDef_oaAssignment, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaAssignment* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAssignment|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAssignment* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::find(p1.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAssignment, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaAssignment_static_get_doc[] = 
"Class: oaTimeAppDef_oaAssignment, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaAssignment* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAssignment|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaAssignment* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAssignment|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAssignment* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAssignment|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaAssignment* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaAssignment|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaAssignment_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::get(p1.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaAssignmentp result= (oaTimeAppDef_oaAssignment::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaAssignment_FromoaTimeAppDef_oaAssignment(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaAssignment, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaAssignment_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaAssignment_static_find,METH_VARARGS,oaTimeAppDef_oaAssignment_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaAssignment_static_get,METH_VARARGS,oaTimeAppDef_oaAssignment_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaAssignment_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaAssignment_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaAssignment\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaAssignment",
           (PyObject*)(&PyoaTimeAppDef_oaAssignment_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaAssignment\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaAssignment_Type.tp_dict;
    for(method=oaTimeAppDef_oaAssignment_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaBlock
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBlock_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaBlock_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaBlockObject* self = (PyoaTimeAppDef_oaBlockObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaBlock)
    {
        PyParamoaTimeAppDef_oaBlock p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaBlock_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaBlock, Choices are:\n"
        "    (oaTimeAppDef_oaBlock)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaBlock_tp_dealloc(PyoaTimeAppDef_oaBlockObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBlock_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaBlock value;
    int convert_status=PyoaTimeAppDef_oaBlock_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[42];
    sprintf(buffer,"<oaTimeAppDef_oaBlock::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaBlock_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaBlock v1;
    PyParamoaTimeAppDef_oaBlock v2;
    int convert_status1=PyoaTimeAppDef_oaBlock_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaBlock_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaBlock_Convert(PyObject* ob,PyParamoaTimeAppDef_oaBlock* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaBlock_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaBlock**) ((PyoaTimeAppDef_oaBlockObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaBlock Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(oaTimeAppDef_oaBlock** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaBlock* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaBlock_Type.tp_alloc(&PyoaTimeAppDef_oaBlock_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaBlockObject* self = (PyoaTimeAppDef_oaBlockObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(oaTimeAppDef_oaBlock* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaBlock_Type.tp_alloc(&PyoaTimeAppDef_oaBlock_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaBlockObject* self = (PyoaTimeAppDef_oaBlockObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_get_doc[] = 
"Class: oaTimeAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaBlock)\n"
"    Calls: oaTime get(const oaBlock* object)\n"
"    Signature: get|simple-oaTime|cptr-oaBlock,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBlock_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBlock data;
    int convert_status=PyoaTimeAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBlockObject* self=(PyoaTimeAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlock_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_getDefault_doc[] = 
"Class: oaTimeAppDef_oaBlock, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaBlock_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBlock data;
    int convert_status=PyoaTimeAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBlockObject* self=(PyoaTimeAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_set_doc[] = 
"Class: oaTimeAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaBlock,oaTime)\n"
"    Calls: void set(oaBlock* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaBlock,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBlock_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBlock data;
    int convert_status=PyoaTimeAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBlockObject* self=(PyoaTimeAppDef_oaBlockObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlock p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlock_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_isNull_doc[] =
"Class: oaTimeAppDef_oaBlock, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaBlock_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaBlock data;
    int convert_status=PyoaTimeAppDef_oaBlock_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaBlock_assign_doc[] = 
"Class: oaTimeAppDef_oaBlock, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaBlock_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaBlock data;
  int convert_status=PyoaTimeAppDef_oaBlock_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaBlock p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaBlock_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaBlock_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaBlock_get,METH_VARARGS,oaTimeAppDef_oaBlock_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaBlock_getDefault,METH_VARARGS,oaTimeAppDef_oaBlock_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaBlock_set,METH_VARARGS,oaTimeAppDef_oaBlock_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaBlock_tp_isNull,METH_VARARGS,oaTimeAppDef_oaBlock_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaBlock_tp_assign,METH_VARARGS,oaTimeAppDef_oaBlock_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_doc[] = 
"Class: oaTimeAppDef_oaBlock\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaBlock)\n"
"    Calls: (const oaTimeAppDef_oaBlock&)\n"
"    Signature: oaTimeAppDef_oaBlock||cref-oaTimeAppDef_oaBlock,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaBlock_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaBlock",
    sizeof(PyoaTimeAppDef_oaBlockObject),
    0,
    (destructor)oaTimeAppDef_oaBlock_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaBlock_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaBlock_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaBlock_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaBlock_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaBlock_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_static_find_doc[] = 
"Class: oaTimeAppDef_oaBlock, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBlock* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBlock|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBlock* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaBlock_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::find(p1.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBlock, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlock_static_get_doc[] = 
"Class: oaTimeAppDef_oaBlock, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBlock* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlock|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaBlock* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlock|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBlock* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlock|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBlock* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlock|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaBlock_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::get(p1.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockp result= (oaTimeAppDef_oaBlock::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaBlock_FromoaTimeAppDef_oaBlock(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBlock, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaBlock_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaBlock_static_find,METH_VARARGS,oaTimeAppDef_oaBlock_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaBlock_static_get,METH_VARARGS,oaTimeAppDef_oaBlock_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaBlock_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaBlock_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaBlock\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaBlock",
           (PyObject*)(&PyoaTimeAppDef_oaBlock_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaBlock\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaBlock_Type.tp_dict;
    for(method=oaTimeAppDef_oaBlock_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaBlockage
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBlockage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaBlockage_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaBlockageObject* self = (PyoaTimeAppDef_oaBlockageObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaBlockage)
    {
        PyParamoaTimeAppDef_oaBlockage p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaBlockage_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaBlockage, Choices are:\n"
        "    (oaTimeAppDef_oaBlockage)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaBlockage_tp_dealloc(PyoaTimeAppDef_oaBlockageObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBlockage_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaBlockage value;
    int convert_status=PyoaTimeAppDef_oaBlockage_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaTimeAppDef_oaBlockage::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaBlockage_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaBlockage v1;
    PyParamoaTimeAppDef_oaBlockage v2;
    int convert_status1=PyoaTimeAppDef_oaBlockage_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaBlockage_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaBlockage_Convert(PyObject* ob,PyParamoaTimeAppDef_oaBlockage* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaBlockage_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaBlockage**) ((PyoaTimeAppDef_oaBlockageObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaBlockage Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(oaTimeAppDef_oaBlockage** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaBlockage* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaBlockage_Type.tp_alloc(&PyoaTimeAppDef_oaBlockage_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaBlockageObject* self = (PyoaTimeAppDef_oaBlockageObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(oaTimeAppDef_oaBlockage* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaBlockage_Type.tp_alloc(&PyoaTimeAppDef_oaBlockage_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaBlockageObject* self = (PyoaTimeAppDef_oaBlockageObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_get_doc[] = 
"Class: oaTimeAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaBlockage)\n"
"    Calls: oaTime get(const oaBlockage* object)\n"
"    Signature: get|simple-oaTime|cptr-oaBlockage,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBlockage data;
    int convert_status=PyoaTimeAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBlockageObject* self=(PyoaTimeAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBlockage_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_getDefault_doc[] = 
"Class: oaTimeAppDef_oaBlockage, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBlockage data;
    int convert_status=PyoaTimeAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBlockageObject* self=(PyoaTimeAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_set_doc[] = 
"Class: oaTimeAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaBlockage,oaTime)\n"
"    Calls: void set(oaBlockage* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaBlockage,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBlockage data;
    int convert_status=PyoaTimeAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBlockageObject* self=(PyoaTimeAppDef_oaBlockageObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBlockage p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBlockage_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_isNull_doc[] =
"Class: oaTimeAppDef_oaBlockage, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaBlockage data;
    int convert_status=PyoaTimeAppDef_oaBlockage_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaBlockage_assign_doc[] = 
"Class: oaTimeAppDef_oaBlockage, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaBlockage data;
  int convert_status=PyoaTimeAppDef_oaBlockage_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaBlockage p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaBlockage_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaBlockage_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaBlockage_get,METH_VARARGS,oaTimeAppDef_oaBlockage_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaBlockage_getDefault,METH_VARARGS,oaTimeAppDef_oaBlockage_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaBlockage_set,METH_VARARGS,oaTimeAppDef_oaBlockage_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaBlockage_tp_isNull,METH_VARARGS,oaTimeAppDef_oaBlockage_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaBlockage_tp_assign,METH_VARARGS,oaTimeAppDef_oaBlockage_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_doc[] = 
"Class: oaTimeAppDef_oaBlockage\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaBlockage)\n"
"    Calls: (const oaTimeAppDef_oaBlockage&)\n"
"    Signature: oaTimeAppDef_oaBlockage||cref-oaTimeAppDef_oaBlockage,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaBlockage_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaBlockage",
    sizeof(PyoaTimeAppDef_oaBlockageObject),
    0,
    (destructor)oaTimeAppDef_oaBlockage_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaBlockage_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaBlockage_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaBlockage_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaBlockage_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaBlockage_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_static_find_doc[] = 
"Class: oaTimeAppDef_oaBlockage, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBlockage* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBlockage|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBlockage* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::find(p1.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBlockage, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBlockage_static_get_doc[] = 
"Class: oaTimeAppDef_oaBlockage, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBlockage* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlockage|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaBlockage* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlockage|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBlockage* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlockage|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBlockage* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBlockage|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaBlockage_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::get(p1.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBlockagep result= (oaTimeAppDef_oaBlockage::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaBlockage_FromoaTimeAppDef_oaBlockage(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBlockage, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaBlockage_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaBlockage_static_find,METH_VARARGS,oaTimeAppDef_oaBlockage_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaBlockage_static_get,METH_VARARGS,oaTimeAppDef_oaBlockage_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaBlockage_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaBlockage_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaBlockage\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaBlockage",
           (PyObject*)(&PyoaTimeAppDef_oaBlockage_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaBlockage\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaBlockage_Type.tp_dict;
    for(method=oaTimeAppDef_oaBlockage_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaBoundary
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBoundary_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaBoundary_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaBoundaryObject* self = (PyoaTimeAppDef_oaBoundaryObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaBoundary)
    {
        PyParamoaTimeAppDef_oaBoundary p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaBoundary_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaBoundary, Choices are:\n"
        "    (oaTimeAppDef_oaBoundary)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaBoundary_tp_dealloc(PyoaTimeAppDef_oaBoundaryObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBoundary_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaBoundary value;
    int convert_status=PyoaTimeAppDef_oaBoundary_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaTimeAppDef_oaBoundary::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaBoundary_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaBoundary v1;
    PyParamoaTimeAppDef_oaBoundary v2;
    int convert_status1=PyoaTimeAppDef_oaBoundary_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaBoundary_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaBoundary_Convert(PyObject* ob,PyParamoaTimeAppDef_oaBoundary* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaBoundary_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaBoundary**) ((PyoaTimeAppDef_oaBoundaryObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaBoundary Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(oaTimeAppDef_oaBoundary** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaBoundary* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaBoundary_Type.tp_alloc(&PyoaTimeAppDef_oaBoundary_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaBoundaryObject* self = (PyoaTimeAppDef_oaBoundaryObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(oaTimeAppDef_oaBoundary* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaBoundary_Type.tp_alloc(&PyoaTimeAppDef_oaBoundary_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaBoundaryObject* self = (PyoaTimeAppDef_oaBoundaryObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_get_doc[] = 
"Class: oaTimeAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaBoundary)\n"
"    Calls: oaTime get(const oaBoundary* object)\n"
"    Signature: get|simple-oaTime|cptr-oaBoundary,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBoundary data;
    int convert_status=PyoaTimeAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBoundaryObject* self=(PyoaTimeAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBoundary_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_getDefault_doc[] = 
"Class: oaTimeAppDef_oaBoundary, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBoundary data;
    int convert_status=PyoaTimeAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBoundaryObject* self=(PyoaTimeAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_set_doc[] = 
"Class: oaTimeAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaBoundary,oaTime)\n"
"    Calls: void set(oaBoundary* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaBoundary,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBoundary data;
    int convert_status=PyoaTimeAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBoundaryObject* self=(PyoaTimeAppDef_oaBoundaryObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBoundary p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBoundary_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_isNull_doc[] =
"Class: oaTimeAppDef_oaBoundary, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaBoundary data;
    int convert_status=PyoaTimeAppDef_oaBoundary_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaBoundary_assign_doc[] = 
"Class: oaTimeAppDef_oaBoundary, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaBoundary data;
  int convert_status=PyoaTimeAppDef_oaBoundary_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaBoundary p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaBoundary_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaBoundary_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaBoundary_get,METH_VARARGS,oaTimeAppDef_oaBoundary_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaBoundary_getDefault,METH_VARARGS,oaTimeAppDef_oaBoundary_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaBoundary_set,METH_VARARGS,oaTimeAppDef_oaBoundary_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaBoundary_tp_isNull,METH_VARARGS,oaTimeAppDef_oaBoundary_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaBoundary_tp_assign,METH_VARARGS,oaTimeAppDef_oaBoundary_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_doc[] = 
"Class: oaTimeAppDef_oaBoundary\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaBoundary)\n"
"    Calls: (const oaTimeAppDef_oaBoundary&)\n"
"    Signature: oaTimeAppDef_oaBoundary||cref-oaTimeAppDef_oaBoundary,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaBoundary_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaBoundary",
    sizeof(PyoaTimeAppDef_oaBoundaryObject),
    0,
    (destructor)oaTimeAppDef_oaBoundary_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaBoundary_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaBoundary_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaBoundary_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaBoundary_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaBoundary_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_static_find_doc[] = 
"Class: oaTimeAppDef_oaBoundary, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBoundary* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBoundary|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBoundary* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::find(p1.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBoundary, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBoundary_static_get_doc[] = 
"Class: oaTimeAppDef_oaBoundary, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBoundary* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBoundary|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaBoundary* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBoundary|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBoundary* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBoundary|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBoundary* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBoundary|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaBoundary_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::get(p1.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBoundaryp result= (oaTimeAppDef_oaBoundary::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaBoundary_FromoaTimeAppDef_oaBoundary(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBoundary, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaBoundary_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaBoundary_static_find,METH_VARARGS,oaTimeAppDef_oaBoundary_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaBoundary_static_get,METH_VARARGS,oaTimeAppDef_oaBoundary_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaBoundary_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaBoundary_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaBoundary\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaBoundary",
           (PyObject*)(&PyoaTimeAppDef_oaBoundary_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaBoundary\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaBoundary_Type.tp_dict;
    for(method=oaTimeAppDef_oaBoundary_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaBusNetDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBusNetDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaBusNetDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaBusNetDefObject* self = (PyoaTimeAppDef_oaBusNetDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaBusNetDef)
    {
        PyParamoaTimeAppDef_oaBusNetDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaBusNetDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaBusNetDef, Choices are:\n"
        "    (oaTimeAppDef_oaBusNetDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaBusNetDef_tp_dealloc(PyoaTimeAppDef_oaBusNetDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBusNetDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaBusNetDef value;
    int convert_status=PyoaTimeAppDef_oaBusNetDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[46];
    sprintf(buffer,"<oaTimeAppDef_oaBusNetDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaBusNetDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaBusNetDef v1;
    PyParamoaTimeAppDef_oaBusNetDef v2;
    int convert_status1=PyoaTimeAppDef_oaBusNetDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaBusNetDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaBusNetDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaBusNetDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaBusNetDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaBusNetDef**) ((PyoaTimeAppDef_oaBusNetDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaBusNetDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(oaTimeAppDef_oaBusNetDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaBusNetDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaBusNetDef_Type.tp_alloc(&PyoaTimeAppDef_oaBusNetDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaBusNetDefObject* self = (PyoaTimeAppDef_oaBusNetDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(oaTimeAppDef_oaBusNetDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaBusNetDef_Type.tp_alloc(&PyoaTimeAppDef_oaBusNetDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaBusNetDefObject* self = (PyoaTimeAppDef_oaBusNetDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_get_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaBusNetDef)\n"
"    Calls: oaTime get(const oaBusNetDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaBusNetDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBusNetDef data;
    int convert_status=PyoaTimeAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBusNetDefObject* self=(PyoaTimeAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusNetDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBusNetDef data;
    int convert_status=PyoaTimeAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBusNetDefObject* self=(PyoaTimeAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_set_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaBusNetDef,oaTime)\n"
"    Calls: void set(oaBusNetDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaBusNetDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBusNetDef data;
    int convert_status=PyoaTimeAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBusNetDefObject* self=(PyoaTimeAppDef_oaBusNetDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusNetDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusNetDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_isNull_doc[] =
"Class: oaTimeAppDef_oaBusNetDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaBusNetDef data;
    int convert_status=PyoaTimeAppDef_oaBusNetDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaBusNetDef_assign_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaBusNetDef data;
  int convert_status=PyoaTimeAppDef_oaBusNetDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaBusNetDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaBusNetDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaBusNetDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaBusNetDef_get,METH_VARARGS,oaTimeAppDef_oaBusNetDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaBusNetDef_getDefault,METH_VARARGS,oaTimeAppDef_oaBusNetDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaBusNetDef_set,METH_VARARGS,oaTimeAppDef_oaBusNetDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaBusNetDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaBusNetDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaBusNetDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaBusNetDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaBusNetDef)\n"
"    Calls: (const oaTimeAppDef_oaBusNetDef&)\n"
"    Signature: oaTimeAppDef_oaBusNetDef||cref-oaTimeAppDef_oaBusNetDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaBusNetDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaBusNetDef",
    sizeof(PyoaTimeAppDef_oaBusNetDefObject),
    0,
    (destructor)oaTimeAppDef_oaBusNetDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaBusNetDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaBusNetDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaBusNetDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaBusNetDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaBusNetDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::find(p1.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBusNetDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusNetDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaBusNetDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBusNetDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusNetDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaBusNetDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::get(p1.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusNetDefp result= (oaTimeAppDef_oaBusNetDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaBusNetDef_FromoaTimeAppDef_oaBusNetDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBusNetDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaBusNetDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaBusNetDef_static_find,METH_VARARGS,oaTimeAppDef_oaBusNetDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaBusNetDef_static_get,METH_VARARGS,oaTimeAppDef_oaBusNetDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaBusNetDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaBusNetDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaBusNetDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaBusNetDef",
           (PyObject*)(&PyoaTimeAppDef_oaBusNetDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaBusNetDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaBusNetDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaBusNetDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaBusTermDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBusTermDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaBusTermDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaBusTermDefObject* self = (PyoaTimeAppDef_oaBusTermDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaBusTermDef)
    {
        PyParamoaTimeAppDef_oaBusTermDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaBusTermDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaBusTermDef, Choices are:\n"
        "    (oaTimeAppDef_oaBusTermDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaBusTermDef_tp_dealloc(PyoaTimeAppDef_oaBusTermDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaBusTermDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaBusTermDef value;
    int convert_status=PyoaTimeAppDef_oaBusTermDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaBusTermDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaBusTermDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaBusTermDef v1;
    PyParamoaTimeAppDef_oaBusTermDef v2;
    int convert_status1=PyoaTimeAppDef_oaBusTermDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaBusTermDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaBusTermDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaBusTermDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaBusTermDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaBusTermDef**) ((PyoaTimeAppDef_oaBusTermDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaBusTermDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(oaTimeAppDef_oaBusTermDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaBusTermDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaBusTermDef_Type.tp_alloc(&PyoaTimeAppDef_oaBusTermDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaBusTermDefObject* self = (PyoaTimeAppDef_oaBusTermDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(oaTimeAppDef_oaBusTermDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaBusTermDef_Type.tp_alloc(&PyoaTimeAppDef_oaBusTermDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaBusTermDefObject* self = (PyoaTimeAppDef_oaBusTermDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_get_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaBusTermDef)\n"
"    Calls: oaTime get(const oaBusTermDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaBusTermDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBusTermDef data;
    int convert_status=PyoaTimeAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBusTermDefObject* self=(PyoaTimeAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaBusTermDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBusTermDef data;
    int convert_status=PyoaTimeAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBusTermDefObject* self=(PyoaTimeAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_set_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaBusTermDef,oaTime)\n"
"    Calls: void set(oaBusTermDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaBusTermDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaBusTermDef data;
    int convert_status=PyoaTimeAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaBusTermDefObject* self=(PyoaTimeAppDef_oaBusTermDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaBusTermDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaBusTermDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_isNull_doc[] =
"Class: oaTimeAppDef_oaBusTermDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaBusTermDef data;
    int convert_status=PyoaTimeAppDef_oaBusTermDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaBusTermDef_assign_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaBusTermDef data;
  int convert_status=PyoaTimeAppDef_oaBusTermDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaBusTermDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaBusTermDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaBusTermDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaBusTermDef_get,METH_VARARGS,oaTimeAppDef_oaBusTermDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaBusTermDef_getDefault,METH_VARARGS,oaTimeAppDef_oaBusTermDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaBusTermDef_set,METH_VARARGS,oaTimeAppDef_oaBusTermDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaBusTermDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaBusTermDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaBusTermDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaBusTermDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaBusTermDef)\n"
"    Calls: (const oaTimeAppDef_oaBusTermDef&)\n"
"    Signature: oaTimeAppDef_oaBusTermDef||cref-oaTimeAppDef_oaBusTermDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaBusTermDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaBusTermDef",
    sizeof(PyoaTimeAppDef_oaBusTermDefObject),
    0,
    (destructor)oaTimeAppDef_oaBusTermDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaBusTermDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaBusTermDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaBusTermDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaBusTermDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaBusTermDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::find(p1.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBusTermDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaBusTermDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaBusTermDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaBusTermDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaBusTermDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaBusTermDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::get(p1.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaBusTermDefp result= (oaTimeAppDef_oaBusTermDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaBusTermDef_FromoaTimeAppDef_oaBusTermDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaBusTermDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaBusTermDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaBusTermDef_static_find,METH_VARARGS,oaTimeAppDef_oaBusTermDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaBusTermDef_static_get,METH_VARARGS,oaTimeAppDef_oaBusTermDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaBusTermDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaBusTermDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaBusTermDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaBusTermDef",
           (PyObject*)(&PyoaTimeAppDef_oaBusTermDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaBusTermDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaBusTermDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaBusTermDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaCMap
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaCMap_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaCMapObject* self = (PyoaTimeAppDef_oaCMapObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaCMap)
    {
        PyParamoaTimeAppDef_oaCMap p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaCMap_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaCMap, Choices are:\n"
        "    (oaTimeAppDef_oaCMap)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaCMap_tp_dealloc(PyoaTimeAppDef_oaCMapObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCMap_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaCMap value;
    int convert_status=PyoaTimeAppDef_oaCMap_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaTimeAppDef_oaCMap::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaCMap_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaCMap v1;
    PyParamoaTimeAppDef_oaCMap v2;
    int convert_status1=PyoaTimeAppDef_oaCMap_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaCMap_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaCMap_Convert(PyObject* ob,PyParamoaTimeAppDef_oaCMap* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaCMap_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaCMap**) ((PyoaTimeAppDef_oaCMapObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaCMap Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(oaTimeAppDef_oaCMap** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaCMap* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaCMap_Type.tp_alloc(&PyoaTimeAppDef_oaCMap_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaCMapObject* self = (PyoaTimeAppDef_oaCMapObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(oaTimeAppDef_oaCMap* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaCMap_Type.tp_alloc(&PyoaTimeAppDef_oaCMap_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaCMapObject* self = (PyoaTimeAppDef_oaCMapObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_get_doc[] = 
"Class: oaTimeAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaCMap)\n"
"    Calls: oaTime get(const oaCMap* object)\n"
"    Signature: get|simple-oaTime|cptr-oaCMap,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCMap_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCMap data;
    int convert_status=PyoaTimeAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCMapObject* self=(PyoaTimeAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCMap_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_getDefault_doc[] = 
"Class: oaTimeAppDef_oaCMap, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaCMap_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCMap data;
    int convert_status=PyoaTimeAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCMapObject* self=(PyoaTimeAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_set_doc[] = 
"Class: oaTimeAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaCMap,oaTime)\n"
"    Calls: void set(oaCMap* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaCMap,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCMap_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCMap data;
    int convert_status=PyoaTimeAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCMapObject* self=(PyoaTimeAppDef_oaCMapObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCMap p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCMap_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_isNull_doc[] =
"Class: oaTimeAppDef_oaCMap, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaCMap_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaCMap data;
    int convert_status=PyoaTimeAppDef_oaCMap_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaCMap_assign_doc[] = 
"Class: oaTimeAppDef_oaCMap, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaCMap_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaCMap data;
  int convert_status=PyoaTimeAppDef_oaCMap_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaCMap p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaCMap_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaCMap_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaCMap_get,METH_VARARGS,oaTimeAppDef_oaCMap_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaCMap_getDefault,METH_VARARGS,oaTimeAppDef_oaCMap_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaCMap_set,METH_VARARGS,oaTimeAppDef_oaCMap_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaCMap_tp_isNull,METH_VARARGS,oaTimeAppDef_oaCMap_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaCMap_tp_assign,METH_VARARGS,oaTimeAppDef_oaCMap_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_doc[] = 
"Class: oaTimeAppDef_oaCMap\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaCMap)\n"
"    Calls: (const oaTimeAppDef_oaCMap&)\n"
"    Signature: oaTimeAppDef_oaCMap||cref-oaTimeAppDef_oaCMap,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaCMap_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaCMap",
    sizeof(PyoaTimeAppDef_oaCMapObject),
    0,
    (destructor)oaTimeAppDef_oaCMap_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaCMap_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaCMap_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaCMap_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaCMap_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaCMap_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_static_find_doc[] = 
"Class: oaTimeAppDef_oaCMap, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCMap* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCMap|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCMap* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaCMap_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::find(p1.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCMap, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCMap_static_get_doc[] = 
"Class: oaTimeAppDef_oaCMap, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCMap* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCMap|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaCMap* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCMap|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCMap* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCMap|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCMap* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCMap|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaCMap_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::get(p1.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCMapp result= (oaTimeAppDef_oaCMap::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaCMap_FromoaTimeAppDef_oaCMap(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCMap, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaCMap_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaCMap_static_find,METH_VARARGS,oaTimeAppDef_oaCMap_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaCMap_static_get,METH_VARARGS,oaTimeAppDef_oaCMap_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaCMap_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaCMap_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaCMap\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaCMap",
           (PyObject*)(&PyoaTimeAppDef_oaCMap_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaCMap\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaCMap_Type.tp_dict;
    for(method=oaTimeAppDef_oaCMap_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaCell
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCell_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaCell_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaCellObject* self = (PyoaTimeAppDef_oaCellObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaCell)
    {
        PyParamoaTimeAppDef_oaCell p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaCell_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaCell, Choices are:\n"
        "    (oaTimeAppDef_oaCell)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaCell_tp_dealloc(PyoaTimeAppDef_oaCellObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCell_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaCell value;
    int convert_status=PyoaTimeAppDef_oaCell_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[41];
    sprintf(buffer,"<oaTimeAppDef_oaCell::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaCell_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaCell v1;
    PyParamoaTimeAppDef_oaCell v2;
    int convert_status1=PyoaTimeAppDef_oaCell_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaCell_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaCell_Convert(PyObject* ob,PyParamoaTimeAppDef_oaCell* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaCell_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaCell**) ((PyoaTimeAppDef_oaCellObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaCell Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(oaTimeAppDef_oaCell** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaCell* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaCell_Type.tp_alloc(&PyoaTimeAppDef_oaCell_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaCellObject* self = (PyoaTimeAppDef_oaCellObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(oaTimeAppDef_oaCell* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaCell_Type.tp_alloc(&PyoaTimeAppDef_oaCell_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaCellObject* self = (PyoaTimeAppDef_oaCellObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_get_doc[] = 
"Class: oaTimeAppDef_oaCell, Function: get\n"
"  Paramegers: (oaCell)\n"
"    Calls: oaTime get(const oaCell* object)\n"
"    Signature: get|simple-oaTime|cptr-oaCell,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCell_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCell data;
    int convert_status=PyoaTimeAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCellObject* self=(PyoaTimeAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCell_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_getDefault_doc[] = 
"Class: oaTimeAppDef_oaCell, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaCell_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCell data;
    int convert_status=PyoaTimeAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCellObject* self=(PyoaTimeAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_set_doc[] = 
"Class: oaTimeAppDef_oaCell, Function: set\n"
"  Paramegers: (oaCell,oaTime)\n"
"    Calls: void set(oaCell* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaCell,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCell_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCell data;
    int convert_status=PyoaTimeAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCellObject* self=(PyoaTimeAppDef_oaCellObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCell p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCell_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_isNull_doc[] =
"Class: oaTimeAppDef_oaCell, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaCell_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaCell data;
    int convert_status=PyoaTimeAppDef_oaCell_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaCell_assign_doc[] = 
"Class: oaTimeAppDef_oaCell, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaCell_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaCell data;
  int convert_status=PyoaTimeAppDef_oaCell_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaCell p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaCell_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaCell_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaCell_get,METH_VARARGS,oaTimeAppDef_oaCell_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaCell_getDefault,METH_VARARGS,oaTimeAppDef_oaCell_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaCell_set,METH_VARARGS,oaTimeAppDef_oaCell_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaCell_tp_isNull,METH_VARARGS,oaTimeAppDef_oaCell_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaCell_tp_assign,METH_VARARGS,oaTimeAppDef_oaCell_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_doc[] = 
"Class: oaTimeAppDef_oaCell\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaCell)\n"
"    Calls: (const oaTimeAppDef_oaCell&)\n"
"    Signature: oaTimeAppDef_oaCell||cref-oaTimeAppDef_oaCell,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaCell_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaCell",
    sizeof(PyoaTimeAppDef_oaCellObject),
    0,
    (destructor)oaTimeAppDef_oaCell_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaCell_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaCell_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaCell_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaCell_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaCell_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_static_find_doc[] = 
"Class: oaTimeAppDef_oaCell, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCell* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCell|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCell* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaCell_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::find(p1.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCell, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCell_static_get_doc[] = 
"Class: oaTimeAppDef_oaCell, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCell* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCell|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaCell* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCell|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCell* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCell|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCell* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCell|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaCell_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::get(p1.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellp result= (oaTimeAppDef_oaCell::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaCell_FromoaTimeAppDef_oaCell(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCell, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaCell_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaCell_static_find,METH_VARARGS,oaTimeAppDef_oaCell_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaCell_static_get,METH_VARARGS,oaTimeAppDef_oaCell_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaCell_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaCell_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaCell\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaCell",
           (PyObject*)(&PyoaTimeAppDef_oaCell_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaCell\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaCell_Type.tp_dict;
    for(method=oaTimeAppDef_oaCell_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaCellView
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCellView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaCellView_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaCellViewObject* self = (PyoaTimeAppDef_oaCellViewObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaCellView)
    {
        PyParamoaTimeAppDef_oaCellView p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaCellView_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaCellView, Choices are:\n"
        "    (oaTimeAppDef_oaCellView)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaCellView_tp_dealloc(PyoaTimeAppDef_oaCellViewObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCellView_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaCellView value;
    int convert_status=PyoaTimeAppDef_oaCellView_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaTimeAppDef_oaCellView::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaCellView_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaCellView v1;
    PyParamoaTimeAppDef_oaCellView v2;
    int convert_status1=PyoaTimeAppDef_oaCellView_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaCellView_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaCellView_Convert(PyObject* ob,PyParamoaTimeAppDef_oaCellView* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaCellView_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaCellView**) ((PyoaTimeAppDef_oaCellViewObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaCellView Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(oaTimeAppDef_oaCellView** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaCellView* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaCellView_Type.tp_alloc(&PyoaTimeAppDef_oaCellView_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaCellViewObject* self = (PyoaTimeAppDef_oaCellViewObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(oaTimeAppDef_oaCellView* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaCellView_Type.tp_alloc(&PyoaTimeAppDef_oaCellView_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaCellViewObject* self = (PyoaTimeAppDef_oaCellViewObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_get_doc[] = 
"Class: oaTimeAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaCellView)\n"
"    Calls: oaTime get(const oaCellView* object)\n"
"    Signature: get|simple-oaTime|cptr-oaCellView,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCellView_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCellView data;
    int convert_status=PyoaTimeAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCellViewObject* self=(PyoaTimeAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCellView_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_getDefault_doc[] = 
"Class: oaTimeAppDef_oaCellView, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaCellView_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCellView data;
    int convert_status=PyoaTimeAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCellViewObject* self=(PyoaTimeAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_set_doc[] = 
"Class: oaTimeAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaCellView,oaTime)\n"
"    Calls: void set(oaCellView* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaCellView,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCellView_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCellView data;
    int convert_status=PyoaTimeAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaCellViewObject* self=(PyoaTimeAppDef_oaCellViewObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCellView p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCellView_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_isNull_doc[] =
"Class: oaTimeAppDef_oaCellView, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaCellView_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaCellView data;
    int convert_status=PyoaTimeAppDef_oaCellView_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaCellView_assign_doc[] = 
"Class: oaTimeAppDef_oaCellView, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaCellView_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaCellView data;
  int convert_status=PyoaTimeAppDef_oaCellView_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaCellView p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaCellView_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaCellView_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaCellView_get,METH_VARARGS,oaTimeAppDef_oaCellView_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaCellView_getDefault,METH_VARARGS,oaTimeAppDef_oaCellView_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaCellView_set,METH_VARARGS,oaTimeAppDef_oaCellView_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaCellView_tp_isNull,METH_VARARGS,oaTimeAppDef_oaCellView_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaCellView_tp_assign,METH_VARARGS,oaTimeAppDef_oaCellView_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_doc[] = 
"Class: oaTimeAppDef_oaCellView\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaCellView)\n"
"    Calls: (const oaTimeAppDef_oaCellView&)\n"
"    Signature: oaTimeAppDef_oaCellView||cref-oaTimeAppDef_oaCellView,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaCellView_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaCellView",
    sizeof(PyoaTimeAppDef_oaCellViewObject),
    0,
    (destructor)oaTimeAppDef_oaCellView_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaCellView_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaCellView_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaCellView_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaCellView_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaCellView_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_static_find_doc[] = 
"Class: oaTimeAppDef_oaCellView, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCellView* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCellView|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCellView* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaCellView_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::find(p1.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCellView, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCellView_static_get_doc[] = 
"Class: oaTimeAppDef_oaCellView, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCellView* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCellView|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaCellView* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCellView|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCellView* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCellView|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCellView* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCellView|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaCellView_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::get(p1.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaCellViewp result= (oaTimeAppDef_oaCellView::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaCellView_FromoaTimeAppDef_oaCellView(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCellView, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaCellView_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaCellView_static_find,METH_VARARGS,oaTimeAppDef_oaCellView_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaCellView_static_get,METH_VARARGS,oaTimeAppDef_oaCellView_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaCellView_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaCellView_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaCellView\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaCellView",
           (PyObject*)(&PyoaTimeAppDef_oaCellView_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaCellView\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaCellView_Type.tp_dict;
    for(method=oaTimeAppDef_oaCellView_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaCluster
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCluster_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaCluster_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaClusterObject* self = (PyoaTimeAppDef_oaClusterObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaCluster)
    {
        PyParamoaTimeAppDef_oaCluster p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaCluster_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaCluster, Choices are:\n"
        "    (oaTimeAppDef_oaCluster)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaCluster_tp_dealloc(PyoaTimeAppDef_oaClusterObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaCluster_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaCluster value;
    int convert_status=PyoaTimeAppDef_oaCluster_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[44];
    sprintf(buffer,"<oaTimeAppDef_oaCluster::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaCluster_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaCluster v1;
    PyParamoaTimeAppDef_oaCluster v2;
    int convert_status1=PyoaTimeAppDef_oaCluster_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaCluster_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaCluster_Convert(PyObject* ob,PyParamoaTimeAppDef_oaCluster* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaCluster_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaCluster**) ((PyoaTimeAppDef_oaClusterObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaCluster Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(oaTimeAppDef_oaCluster** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaCluster* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaCluster_Type.tp_alloc(&PyoaTimeAppDef_oaCluster_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaClusterObject* self = (PyoaTimeAppDef_oaClusterObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(oaTimeAppDef_oaCluster* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaCluster_Type.tp_alloc(&PyoaTimeAppDef_oaCluster_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaClusterObject* self = (PyoaTimeAppDef_oaClusterObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_get_doc[] = 
"Class: oaTimeAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaCluster)\n"
"    Calls: oaTime get(const oaCluster* object)\n"
"    Signature: get|simple-oaTime|cptr-oaCluster,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCluster_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCluster data;
    int convert_status=PyoaTimeAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaClusterObject* self=(PyoaTimeAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaCluster_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_getDefault_doc[] = 
"Class: oaTimeAppDef_oaCluster, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaCluster_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCluster data;
    int convert_status=PyoaTimeAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaClusterObject* self=(PyoaTimeAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_set_doc[] = 
"Class: oaTimeAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaCluster,oaTime)\n"
"    Calls: void set(oaCluster* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaCluster,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaCluster_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaCluster data;
    int convert_status=PyoaTimeAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaClusterObject* self=(PyoaTimeAppDef_oaClusterObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaCluster p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaCluster_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_isNull_doc[] =
"Class: oaTimeAppDef_oaCluster, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaCluster_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaCluster data;
    int convert_status=PyoaTimeAppDef_oaCluster_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaCluster_assign_doc[] = 
"Class: oaTimeAppDef_oaCluster, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaCluster_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaCluster data;
  int convert_status=PyoaTimeAppDef_oaCluster_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaCluster p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaCluster_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaCluster_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaCluster_get,METH_VARARGS,oaTimeAppDef_oaCluster_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaCluster_getDefault,METH_VARARGS,oaTimeAppDef_oaCluster_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaCluster_set,METH_VARARGS,oaTimeAppDef_oaCluster_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaCluster_tp_isNull,METH_VARARGS,oaTimeAppDef_oaCluster_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaCluster_tp_assign,METH_VARARGS,oaTimeAppDef_oaCluster_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_doc[] = 
"Class: oaTimeAppDef_oaCluster\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaCluster)\n"
"    Calls: (const oaTimeAppDef_oaCluster&)\n"
"    Signature: oaTimeAppDef_oaCluster||cref-oaTimeAppDef_oaCluster,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaCluster_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaCluster",
    sizeof(PyoaTimeAppDef_oaClusterObject),
    0,
    (destructor)oaTimeAppDef_oaCluster_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaCluster_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaCluster_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaCluster_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaCluster_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaCluster_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_static_find_doc[] = 
"Class: oaTimeAppDef_oaCluster, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCluster* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCluster|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCluster* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaCluster_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::find(p1.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCluster, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaCluster_static_get_doc[] = 
"Class: oaTimeAppDef_oaCluster, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaCluster* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCluster|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaCluster* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCluster|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCluster* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCluster|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaCluster* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaCluster|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaCluster_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::get(p1.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaClusterp result= (oaTimeAppDef_oaCluster::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaCluster_FromoaTimeAppDef_oaCluster(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaCluster, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaCluster_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaCluster_static_find,METH_VARARGS,oaTimeAppDef_oaCluster_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaCluster_static_get,METH_VARARGS,oaTimeAppDef_oaCluster_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaCluster_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaCluster_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaCluster\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaCluster",
           (PyObject*)(&PyoaTimeAppDef_oaCluster_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaCluster\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaCluster_Type.tp_dict;
    for(method=oaTimeAppDef_oaCluster_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConnectDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConnectDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConnectDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConnectDefObject* self = (PyoaTimeAppDef_oaConnectDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConnectDef)
    {
        PyParamoaTimeAppDef_oaConnectDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConnectDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConnectDef, Choices are:\n"
        "    (oaTimeAppDef_oaConnectDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConnectDef_tp_dealloc(PyoaTimeAppDef_oaConnectDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConnectDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConnectDef value;
    int convert_status=PyoaTimeAppDef_oaConnectDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaConnectDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConnectDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConnectDef v1;
    PyParamoaTimeAppDef_oaConnectDef v2;
    int convert_status1=PyoaTimeAppDef_oaConnectDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConnectDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConnectDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConnectDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConnectDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConnectDef**) ((PyoaTimeAppDef_oaConnectDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConnectDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(oaTimeAppDef_oaConnectDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConnectDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConnectDef_Type.tp_alloc(&PyoaTimeAppDef_oaConnectDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConnectDefObject* self = (PyoaTimeAppDef_oaConnectDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(oaTimeAppDef_oaConnectDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConnectDef_Type.tp_alloc(&PyoaTimeAppDef_oaConnectDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConnectDefObject* self = (PyoaTimeAppDef_oaConnectDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_get_doc[] = 
"Class: oaTimeAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaConnectDef)\n"
"    Calls: oaTime get(const oaConnectDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConnectDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConnectDef data;
    int convert_status=PyoaTimeAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConnectDefObject* self=(PyoaTimeAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConnectDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConnectDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConnectDef data;
    int convert_status=PyoaTimeAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConnectDefObject* self=(PyoaTimeAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_set_doc[] = 
"Class: oaTimeAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaConnectDef,oaTime)\n"
"    Calls: void set(oaConnectDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConnectDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConnectDef data;
    int convert_status=PyoaTimeAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConnectDefObject* self=(PyoaTimeAppDef_oaConnectDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConnectDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConnectDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_isNull_doc[] =
"Class: oaTimeAppDef_oaConnectDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConnectDef data;
    int convert_status=PyoaTimeAppDef_oaConnectDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConnectDef_assign_doc[] = 
"Class: oaTimeAppDef_oaConnectDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConnectDef data;
  int convert_status=PyoaTimeAppDef_oaConnectDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConnectDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConnectDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConnectDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConnectDef_get,METH_VARARGS,oaTimeAppDef_oaConnectDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConnectDef_getDefault,METH_VARARGS,oaTimeAppDef_oaConnectDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConnectDef_set,METH_VARARGS,oaTimeAppDef_oaConnectDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConnectDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConnectDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConnectDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaConnectDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_doc[] = 
"Class: oaTimeAppDef_oaConnectDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConnectDef)\n"
"    Calls: (const oaTimeAppDef_oaConnectDef&)\n"
"    Signature: oaTimeAppDef_oaConnectDef||cref-oaTimeAppDef_oaConnectDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConnectDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConnectDef",
    sizeof(PyoaTimeAppDef_oaConnectDefObject),
    0,
    (destructor)oaTimeAppDef_oaConnectDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConnectDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConnectDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConnectDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConnectDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConnectDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaConnectDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConnectDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConnectDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::find(p1.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConnectDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConnectDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaConnectDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConnectDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConnectDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConnectDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConnectDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConnectDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConnectDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::get(p1.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConnectDefp result= (oaTimeAppDef_oaConnectDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConnectDef_FromoaTimeAppDef_oaConnectDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConnectDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConnectDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConnectDef_static_find,METH_VARARGS,oaTimeAppDef_oaConnectDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConnectDef_static_get,METH_VARARGS,oaTimeAppDef_oaConnectDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConnectDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConnectDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConnectDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConnectDef",
           (PyObject*)(&PyoaTimeAppDef_oaConnectDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConnectDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConnectDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaConnectDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraint
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraint_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraint_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintObject* self = (PyoaTimeAppDef_oaConstraintObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraint)
    {
        PyParamoaTimeAppDef_oaConstraint p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraint_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraint, Choices are:\n"
        "    (oaTimeAppDef_oaConstraint)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraint_tp_dealloc(PyoaTimeAppDef_oaConstraintObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraint_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraint value;
    int convert_status=PyoaTimeAppDef_oaConstraint_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaConstraint::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraint_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraint v1;
    PyParamoaTimeAppDef_oaConstraint v2;
    int convert_status1=PyoaTimeAppDef_oaConstraint_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraint_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraint_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraint* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraint_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraint**) ((PyoaTimeAppDef_oaConstraintObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraint Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(oaTimeAppDef_oaConstraint** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraint* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraint_Type.tp_alloc(&PyoaTimeAppDef_oaConstraint_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintObject* self = (PyoaTimeAppDef_oaConstraintObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(oaTimeAppDef_oaConstraint* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraint_Type.tp_alloc(&PyoaTimeAppDef_oaConstraint_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintObject* self = (PyoaTimeAppDef_oaConstraintObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_get_doc[] = 
"Class: oaTimeAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaConstraint)\n"
"    Calls: oaTime get(const oaConstraint* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraint,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraint data;
    int convert_status=PyoaTimeAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintObject* self=(PyoaTimeAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraint_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraint, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraint data;
    int convert_status=PyoaTimeAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintObject* self=(PyoaTimeAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_set_doc[] = 
"Class: oaTimeAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaConstraint,oaTime)\n"
"    Calls: void set(oaConstraint* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraint,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraint data;
    int convert_status=PyoaTimeAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintObject* self=(PyoaTimeAppDef_oaConstraintObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraint p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraint_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraint, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraint data;
    int convert_status=PyoaTimeAppDef_oaConstraint_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraint_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraint, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraint data;
  int convert_status=PyoaTimeAppDef_oaConstraint_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraint p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraint_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraint_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraint_get,METH_VARARGS,oaTimeAppDef_oaConstraint_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraint_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraint_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraint_set,METH_VARARGS,oaTimeAppDef_oaConstraint_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraint_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraint_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraint_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraint_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_doc[] = 
"Class: oaTimeAppDef_oaConstraint\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraint)\n"
"    Calls: (const oaTimeAppDef_oaConstraint&)\n"
"    Signature: oaTimeAppDef_oaConstraint||cref-oaTimeAppDef_oaConstraint,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraint_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraint",
    sizeof(PyoaTimeAppDef_oaConstraintObject),
    0,
    (destructor)oaTimeAppDef_oaConstraint_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraint_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraint_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraint_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraint_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraint_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraint, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraint* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraint|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraint* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraint, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraint_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraint, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraint* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraint* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraint* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraint|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraint* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraint|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraint_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintp result= (oaTimeAppDef_oaConstraint::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraint_FromoaTimeAppDef_oaConstraint(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraint, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraint_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraint_static_find,METH_VARARGS,oaTimeAppDef_oaConstraint_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraint_static_get,METH_VARARGS,oaTimeAppDef_oaConstraint_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraint_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraint_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraint\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraint",
           (PyObject*)(&PyoaTimeAppDef_oaConstraint_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraint\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraint_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraint_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraintDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraintDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintDefObject* self = (PyoaTimeAppDef_oaConstraintDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraintDef)
    {
        PyParamoaTimeAppDef_oaConstraintDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraintDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraintDef, Choices are:\n"
        "    (oaTimeAppDef_oaConstraintDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraintDef_tp_dealloc(PyoaTimeAppDef_oaConstraintDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraintDef value;
    int convert_status=PyoaTimeAppDef_oaConstraintDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[50];
    sprintf(buffer,"<oaTimeAppDef_oaConstraintDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraintDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraintDef v1;
    PyParamoaTimeAppDef_oaConstraintDef v2;
    int convert_status1=PyoaTimeAppDef_oaConstraintDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraintDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraintDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraintDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraintDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraintDef**) ((PyoaTimeAppDef_oaConstraintDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraintDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(oaTimeAppDef_oaConstraintDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraintDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraintDef_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintDefObject* self = (PyoaTimeAppDef_oaConstraintDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(oaTimeAppDef_oaConstraintDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraintDef_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintDefObject* self = (PyoaTimeAppDef_oaConstraintDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaConstraintDef)\n"
"    Calls: oaTime get(const oaConstraintDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraintDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintDefObject* self=(PyoaTimeAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintDefObject* self=(PyoaTimeAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_set_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaConstraintDef,oaTime)\n"
"    Calls: void set(oaConstraintDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraintDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintDefObject* self=(PyoaTimeAppDef_oaConstraintDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraintDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraintDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraintDef_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraintDef data;
  int convert_status=PyoaTimeAppDef_oaConstraintDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraintDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraintDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraintDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraintDef_get,METH_VARARGS,oaTimeAppDef_oaConstraintDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraintDef_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraintDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraintDef_set,METH_VARARGS,oaTimeAppDef_oaConstraintDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraintDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraintDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraintDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraintDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraintDef)\n"
"    Calls: (const oaTimeAppDef_oaConstraintDef&)\n"
"    Signature: oaTimeAppDef_oaConstraintDef||cref-oaTimeAppDef_oaConstraintDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraintDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraintDef",
    sizeof(PyoaTimeAppDef_oaConstraintDefObject),
    0,
    (destructor)oaTimeAppDef_oaConstraintDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraintDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraintDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraintDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraintDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraintDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraintDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintDefp result= (oaTimeAppDef_oaConstraintDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraintDef_FromoaTimeAppDef_oaConstraintDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraintDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraintDef_static_find,METH_VARARGS,oaTimeAppDef_oaConstraintDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraintDef_static_get,METH_VARARGS,oaTimeAppDef_oaConstraintDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraintDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraintDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraintDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraintDef",
           (PyObject*)(&PyoaTimeAppDef_oaConstraintDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraintDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraintDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraintDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraintGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraintGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintGroupObject* self = (PyoaTimeAppDef_oaConstraintGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraintGroup)
    {
        PyParamoaTimeAppDef_oaConstraintGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraintGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraintGroup, Choices are:\n"
        "    (oaTimeAppDef_oaConstraintGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraintGroup_tp_dealloc(PyoaTimeAppDef_oaConstraintGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintGroup_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraintGroup value;
    int convert_status=PyoaTimeAppDef_oaConstraintGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaTimeAppDef_oaConstraintGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraintGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraintGroup v1;
    PyParamoaTimeAppDef_oaConstraintGroup v2;
    int convert_status1=PyoaTimeAppDef_oaConstraintGroup_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraintGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraintGroup_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraintGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraintGroup_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraintGroup**) ((PyoaTimeAppDef_oaConstraintGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraintGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(oaTimeAppDef_oaConstraintGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraintGroup* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintGroupObject* self = (PyoaTimeAppDef_oaConstraintGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(oaTimeAppDef_oaConstraintGroup* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraintGroup_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintGroupObject* self = (PyoaTimeAppDef_oaConstraintGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaConstraintGroup)\n"
"    Calls: oaTime get(const oaConstraintGroup* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraintGroup,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroup data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupObject* self=(PyoaTimeAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroup data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupObject* self=(PyoaTimeAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_set_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaConstraintGroup,oaTime)\n"
"    Calls: void set(oaConstraintGroup* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroup,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroup data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupObject* self=(PyoaTimeAppDef_oaConstraintGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroup p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroup_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraintGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraintGroup data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraintGroup_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraintGroup data;
  int convert_status=PyoaTimeAppDef_oaConstraintGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraintGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraintGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraintGroup_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraintGroup_get,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraintGroup_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraintGroup_set,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraintGroup_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraintGroup_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraintGroup)\n"
"    Calls: (const oaTimeAppDef_oaConstraintGroup&)\n"
"    Signature: oaTimeAppDef_oaConstraintGroup||cref-oaTimeAppDef_oaConstraintGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraintGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraintGroup",
    sizeof(PyoaTimeAppDef_oaConstraintGroupObject),
    0,
    (destructor)oaTimeAppDef_oaConstraintGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraintGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraintGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraintGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraintGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraintGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroup_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupp result= (oaTimeAppDef_oaConstraintGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraintGroup_FromoaTimeAppDef_oaConstraintGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraintGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraintGroup_static_find,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraintGroup_static_get,METH_VARARGS,oaTimeAppDef_oaConstraintGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraintGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraintGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraintGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraintGroup",
           (PyObject*)(&PyoaTimeAppDef_oaConstraintGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraintGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraintGroup_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraintGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraintGroupHeader
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraintGroupHeader_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintGroupHeaderObject* self = (PyoaTimeAppDef_oaConstraintGroupHeaderObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraintGroupHeader)
    {
        PyParamoaTimeAppDef_oaConstraintGroupHeader p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraintGroupHeader_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraintGroupHeader, Choices are:\n"
        "    (oaTimeAppDef_oaConstraintGroupHeader)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraintGroupHeader_tp_dealloc(PyoaTimeAppDef_oaConstraintGroupHeaderObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraintGroupHeader value;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[58];
    sprintf(buffer,"<oaTimeAppDef_oaConstraintGroupHeader::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraintGroupHeader_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraintGroupHeader v1;
    PyParamoaTimeAppDef_oaConstraintGroupHeader v2;
    int convert_status1=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraintGroupHeader_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraintGroupHeader* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraintGroupHeader_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraintGroupHeader**) ((PyoaTimeAppDef_oaConstraintGroupHeaderObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraintGroupHeader Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(oaTimeAppDef_oaConstraintGroupHeader** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraintGroupHeader* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintGroupHeader_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintGroupHeaderObject* self = (PyoaTimeAppDef_oaConstraintGroupHeaderObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(oaTimeAppDef_oaConstraintGroupHeader* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraintGroupHeader_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintGroupHeader_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintGroupHeaderObject* self = (PyoaTimeAppDef_oaConstraintGroupHeaderObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaConstraintGroupHeader)\n"
"    Calls: oaTime get(const oaConstraintGroupHeader* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraintGroupHeader,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupHeaderObject* self=(PyoaTimeAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupHeader_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupHeaderObject* self=(PyoaTimeAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_set_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaConstraintGroupHeader,oaTime)\n"
"    Calls: void set(oaConstraintGroupHeader* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupHeader,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupHeaderObject* self=(PyoaTimeAppDef_oaConstraintGroupHeaderObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupHeader p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupHeader_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraintGroupHeader data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraintGroupHeader_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraintGroupHeader data;
  int convert_status=PyoaTimeAppDef_oaConstraintGroupHeader_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraintGroupHeader p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraintGroupHeader_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraintGroupHeader_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_get,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_set,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraintGroupHeader)\n"
"    Calls: (const oaTimeAppDef_oaConstraintGroupHeader&)\n"
"    Signature: oaTimeAppDef_oaConstraintGroupHeader||cref-oaTimeAppDef_oaConstraintGroupHeader,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraintGroupHeader_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraintGroupHeader",
    sizeof(PyoaTimeAppDef_oaConstraintGroupHeaderObject),
    0,
    (destructor)oaTimeAppDef_oaConstraintGroupHeader_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraintGroupHeader_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraintGroupHeader_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraintGroupHeader_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraintGroupHeader_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraintGroupHeader_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintGroupHeader, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupHeader_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupHeader, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupHeader* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupHeader|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupHeader_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupHeaderp result= (oaTimeAppDef_oaConstraintGroupHeader::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraintGroupHeader_FromoaTimeAppDef_oaConstraintGroupHeader(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintGroupHeader, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraintGroupHeader_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_static_find,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraintGroupHeader_static_get,METH_VARARGS,oaTimeAppDef_oaConstraintGroupHeader_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraintGroupHeader_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraintGroupHeader_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraintGroupHeader\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraintGroupHeader",
           (PyObject*)(&PyoaTimeAppDef_oaConstraintGroupHeader_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraintGroupHeader\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraintGroupHeader_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraintGroupHeader_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraintGroupMem
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintGroupMem_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraintGroupMem_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintGroupMemObject* self = (PyoaTimeAppDef_oaConstraintGroupMemObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraintGroupMem)
    {
        PyParamoaTimeAppDef_oaConstraintGroupMem p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraintGroupMem_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraintGroupMem, Choices are:\n"
        "    (oaTimeAppDef_oaConstraintGroupMem)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraintGroupMem_tp_dealloc(PyoaTimeAppDef_oaConstraintGroupMemObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintGroupMem_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraintGroupMem value;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaTimeAppDef_oaConstraintGroupMem::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraintGroupMem_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraintGroupMem v1;
    PyParamoaTimeAppDef_oaConstraintGroupMem v2;
    int convert_status1=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraintGroupMem_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraintGroupMem* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraintGroupMem_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraintGroupMem**) ((PyoaTimeAppDef_oaConstraintGroupMemObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraintGroupMem Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(oaTimeAppDef_oaConstraintGroupMem** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraintGroupMem* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintGroupMem_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintGroupMemObject* self = (PyoaTimeAppDef_oaConstraintGroupMemObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(oaTimeAppDef_oaConstraintGroupMem* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraintGroupMem_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintGroupMem_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintGroupMemObject* self = (PyoaTimeAppDef_oaConstraintGroupMemObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaConstraintGroupMem)\n"
"    Calls: oaTime get(const oaConstraintGroupMem* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraintGroupMem,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupMemObject* self=(PyoaTimeAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintGroupMem_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupMemObject* self=(PyoaTimeAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_set_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaConstraintGroupMem,oaTime)\n"
"    Calls: void set(oaConstraintGroupMem* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraintGroupMem,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintGroupMemObject* self=(PyoaTimeAppDef_oaConstraintGroupMemObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintGroupMem p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintGroupMem_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraintGroupMem data;
    int convert_status=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraintGroupMem_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraintGroupMem data;
  int convert_status=PyoaTimeAppDef_oaConstraintGroupMem_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraintGroupMem p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraintGroupMem_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraintGroupMem_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_get,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_set,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraintGroupMem)\n"
"    Calls: (const oaTimeAppDef_oaConstraintGroupMem&)\n"
"    Signature: oaTimeAppDef_oaConstraintGroupMem||cref-oaTimeAppDef_oaConstraintGroupMem,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraintGroupMem_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraintGroupMem",
    sizeof(PyoaTimeAppDef_oaConstraintGroupMemObject),
    0,
    (destructor)oaTimeAppDef_oaConstraintGroupMem_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraintGroupMem_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraintGroupMem_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraintGroupMem_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraintGroupMem_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraintGroupMem_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintGroupMem, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintGroupMem_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintGroupMem, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintGroupMem* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintGroupMem|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraintGroupMem_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintGroupMemp result= (oaTimeAppDef_oaConstraintGroupMem::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraintGroupMem_FromoaTimeAppDef_oaConstraintGroupMem(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintGroupMem, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraintGroupMem_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_static_find,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraintGroupMem_static_get,METH_VARARGS,oaTimeAppDef_oaConstraintGroupMem_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraintGroupMem_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraintGroupMem_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraintGroupMem\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraintGroupMem",
           (PyObject*)(&PyoaTimeAppDef_oaConstraintGroupMem_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraintGroupMem\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraintGroupMem_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraintGroupMem_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraintParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraintParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintParamObject* self = (PyoaTimeAppDef_oaConstraintParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraintParam)
    {
        PyParamoaTimeAppDef_oaConstraintParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraintParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraintParam, Choices are:\n"
        "    (oaTimeAppDef_oaConstraintParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraintParam_tp_dealloc(PyoaTimeAppDef_oaConstraintParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintParam_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraintParam value;
    int convert_status=PyoaTimeAppDef_oaConstraintParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[52];
    sprintf(buffer,"<oaTimeAppDef_oaConstraintParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraintParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraintParam v1;
    PyParamoaTimeAppDef_oaConstraintParam v2;
    int convert_status1=PyoaTimeAppDef_oaConstraintParam_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraintParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraintParam_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraintParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraintParam_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraintParam**) ((PyoaTimeAppDef_oaConstraintParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraintParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(oaTimeAppDef_oaConstraintParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraintParam* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraintParam_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintParam_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintParamObject* self = (PyoaTimeAppDef_oaConstraintParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(oaTimeAppDef_oaConstraintParam* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraintParam_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintParam_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintParamObject* self = (PyoaTimeAppDef_oaConstraintParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaConstraintParam)\n"
"    Calls: oaTime get(const oaConstraintParam* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraintParam,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintParam data;
    int convert_status=PyoaTimeAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintParamObject* self=(PyoaTimeAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintParam data;
    int convert_status=PyoaTimeAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintParamObject* self=(PyoaTimeAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_set_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaConstraintParam,oaTime)\n"
"    Calls: void set(oaConstraintParam* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraintParam,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintParam data;
    int convert_status=PyoaTimeAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintParamObject* self=(PyoaTimeAppDef_oaConstraintParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParam p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParam_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraintParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraintParam data;
    int convert_status=PyoaTimeAppDef_oaConstraintParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraintParam_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraintParam data;
  int convert_status=PyoaTimeAppDef_oaConstraintParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraintParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraintParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraintParam_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraintParam_get,METH_VARARGS,oaTimeAppDef_oaConstraintParam_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraintParam_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraintParam_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraintParam_set,METH_VARARGS,oaTimeAppDef_oaConstraintParam_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraintParam_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraintParam_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraintParam_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraintParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraintParam)\n"
"    Calls: (const oaTimeAppDef_oaConstraintParam&)\n"
"    Signature: oaTimeAppDef_oaConstraintParam||cref-oaTimeAppDef_oaConstraintParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraintParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraintParam",
    sizeof(PyoaTimeAppDef_oaConstraintParamObject),
    0,
    (destructor)oaTimeAppDef_oaConstraintParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraintParam_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraintParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraintParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraintParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraintParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParam_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintParam* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParam|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamp result= (oaTimeAppDef_oaConstraintParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraintParam_FromoaTimeAppDef_oaConstraintParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraintParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraintParam_static_find,METH_VARARGS,oaTimeAppDef_oaConstraintParam_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraintParam_static_get,METH_VARARGS,oaTimeAppDef_oaConstraintParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraintParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraintParam_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraintParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraintParam",
           (PyObject*)(&PyoaTimeAppDef_oaConstraintParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraintParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraintParam_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraintParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaConstraintParamDef
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintParamDef_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaConstraintParamDef_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaConstraintParamDefObject* self = (PyoaTimeAppDef_oaConstraintParamDefObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaConstraintParamDef)
    {
        PyParamoaTimeAppDef_oaConstraintParamDef p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaConstraintParamDef_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaConstraintParamDef, Choices are:\n"
        "    (oaTimeAppDef_oaConstraintParamDef)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaConstraintParamDef_tp_dealloc(PyoaTimeAppDef_oaConstraintParamDefObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaConstraintParamDef_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaConstraintParamDef value;
    int convert_status=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[55];
    sprintf(buffer,"<oaTimeAppDef_oaConstraintParamDef::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaConstraintParamDef_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaConstraintParamDef v1;
    PyParamoaTimeAppDef_oaConstraintParamDef v2;
    int convert_status1=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaConstraintParamDef_Convert(PyObject* ob,PyParamoaTimeAppDef_oaConstraintParamDef* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaConstraintParamDef_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaConstraintParamDef**) ((PyoaTimeAppDef_oaConstraintParamDefObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaConstraintParamDef Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(oaTimeAppDef_oaConstraintParamDef** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaConstraintParamDef* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintParamDef_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaConstraintParamDefObject* self = (PyoaTimeAppDef_oaConstraintParamDefObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(oaTimeAppDef_oaConstraintParamDef* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaConstraintParamDef_Type.tp_alloc(&PyoaTimeAppDef_oaConstraintParamDef_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaConstraintParamDefObject* self = (PyoaTimeAppDef_oaConstraintParamDefObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaConstraintParamDef)\n"
"    Calls: oaTime get(const oaConstraintParamDef* object)\n"
"    Signature: get|simple-oaTime|cptr-oaConstraintParamDef,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintParamDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintParamDefObject* self=(PyoaTimeAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaConstraintParamDef_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_getDefault_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintParamDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintParamDefObject* self=(PyoaTimeAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_set_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaConstraintParamDef,oaTime)\n"
"    Calls: void set(oaConstraintParamDef* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaConstraintParamDef,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaConstraintParamDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaConstraintParamDefObject* self=(PyoaTimeAppDef_oaConstraintParamDefObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaConstraintParamDef p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaConstraintParamDef_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_isNull_doc[] =
"Class: oaTimeAppDef_oaConstraintParamDef, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaConstraintParamDef data;
    int convert_status=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaConstraintParamDef_assign_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaConstraintParamDef data;
  int convert_status=PyoaTimeAppDef_oaConstraintParamDef_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaConstraintParamDef p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaConstraintParamDef_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaConstraintParamDef_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_get,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_getDefault,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_set,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_tp_isNull,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_tp_assign,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaConstraintParamDef)\n"
"    Calls: (const oaTimeAppDef_oaConstraintParamDef&)\n"
"    Signature: oaTimeAppDef_oaConstraintParamDef||cref-oaTimeAppDef_oaConstraintParamDef,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaConstraintParamDef_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaConstraintParamDef",
    sizeof(PyoaTimeAppDef_oaConstraintParamDefObject),
    0,
    (destructor)oaTimeAppDef_oaConstraintParamDef_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaConstraintParamDef_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaConstraintParamDef_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaConstraintParamDef_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaConstraintParamDef_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaConstraintParamDef_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_static_find_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::find(p1.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintParamDef, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaConstraintParamDef_static_get_doc[] = 
"Class: oaTimeAppDef_oaConstraintParamDef, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaConstraintParamDef* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaConstraintParamDef|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaConstraintParamDef_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::get(p1.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaConstraintParamDefp result= (oaTimeAppDef_oaConstraintParamDef::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaConstraintParamDef_FromoaTimeAppDef_oaConstraintParamDef(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaConstraintParamDef, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaConstraintParamDef_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_static_find,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaConstraintParamDef_static_get,METH_VARARGS,oaTimeAppDef_oaConstraintParamDef_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaConstraintParamDef_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaConstraintParamDef_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaConstraintParamDef\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaConstraintParamDef",
           (PyObject*)(&PyoaTimeAppDef_oaConstraintParamDef_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaConstraintParamDef\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaConstraintParamDef_Type.tp_dict;
    for(method=oaTimeAppDef_oaConstraintParamDef_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaDMData
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDMData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaDMData_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaDMDataObject* self = (PyoaTimeAppDef_oaDMDataObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaDMData)
    {
        PyParamoaTimeAppDef_oaDMData p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaDMData_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaDMData, Choices are:\n"
        "    (oaTimeAppDef_oaDMData)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaDMData_tp_dealloc(PyoaTimeAppDef_oaDMDataObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDMData_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaDMData value;
    int convert_status=PyoaTimeAppDef_oaDMData_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaTimeAppDef_oaDMData::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaDMData_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaDMData v1;
    PyParamoaTimeAppDef_oaDMData v2;
    int convert_status1=PyoaTimeAppDef_oaDMData_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaDMData_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaDMData_Convert(PyObject* ob,PyParamoaTimeAppDef_oaDMData* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaDMData_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaDMData**) ((PyoaTimeAppDef_oaDMDataObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaDMData Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(oaTimeAppDef_oaDMData** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaDMData* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaDMData_Type.tp_alloc(&PyoaTimeAppDef_oaDMData_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaDMDataObject* self = (PyoaTimeAppDef_oaDMDataObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(oaTimeAppDef_oaDMData* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaDMData_Type.tp_alloc(&PyoaTimeAppDef_oaDMData_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaDMDataObject* self = (PyoaTimeAppDef_oaDMDataObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_get_doc[] = 
"Class: oaTimeAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaDMData)\n"
"    Calls: oaTime get(const oaDMData* object)\n"
"    Signature: get|simple-oaTime|cptr-oaDMData,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDMData_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDMData data;
    int convert_status=PyoaTimeAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDMDataObject* self=(PyoaTimeAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMData_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_getDefault_doc[] = 
"Class: oaTimeAppDef_oaDMData, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaDMData_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDMData data;
    int convert_status=PyoaTimeAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDMDataObject* self=(PyoaTimeAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_set_doc[] = 
"Class: oaTimeAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDMData,oaTime)\n"
"    Calls: void set(oaDMData* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaDMData,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDMData_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDMData data;
    int convert_status=PyoaTimeAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDMDataObject* self=(PyoaTimeAppDef_oaDMDataObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMData p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMData_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_isNull_doc[] =
"Class: oaTimeAppDef_oaDMData, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaDMData_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaDMData data;
    int convert_status=PyoaTimeAppDef_oaDMData_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaDMData_assign_doc[] = 
"Class: oaTimeAppDef_oaDMData, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaDMData_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaDMData data;
  int convert_status=PyoaTimeAppDef_oaDMData_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaDMData p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaDMData_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaDMData_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaDMData_get,METH_VARARGS,oaTimeAppDef_oaDMData_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaDMData_getDefault,METH_VARARGS,oaTimeAppDef_oaDMData_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaDMData_set,METH_VARARGS,oaTimeAppDef_oaDMData_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaDMData_tp_isNull,METH_VARARGS,oaTimeAppDef_oaDMData_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaDMData_tp_assign,METH_VARARGS,oaTimeAppDef_oaDMData_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_doc[] = 
"Class: oaTimeAppDef_oaDMData\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaDMData)\n"
"    Calls: (const oaTimeAppDef_oaDMData&)\n"
"    Signature: oaTimeAppDef_oaDMData||cref-oaTimeAppDef_oaDMData,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaDMData_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaDMData",
    sizeof(PyoaTimeAppDef_oaDMDataObject),
    0,
    (destructor)oaTimeAppDef_oaDMData_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaDMData_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaDMData_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaDMData_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaDMData_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaDMData_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_static_find_doc[] = 
"Class: oaTimeAppDef_oaDMData, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDMData* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDMData|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDMData* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaDMData_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::find(p1.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDMData, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMData_static_get_doc[] = 
"Class: oaTimeAppDef_oaDMData, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDMData* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMData|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaDMData* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMData|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDMData* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMData|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDMData* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMData|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaDMData_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::get(p1.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMDatap result= (oaTimeAppDef_oaDMData::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaDMData_FromoaTimeAppDef_oaDMData(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDMData, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaDMData_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaDMData_static_find,METH_VARARGS,oaTimeAppDef_oaDMData_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaDMData_static_get,METH_VARARGS,oaTimeAppDef_oaDMData_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaDMData_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaDMData_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaDMData\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaDMData",
           (PyObject*)(&PyoaTimeAppDef_oaDMData_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaDMData\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaDMData_Type.tp_dict;
    for(method=oaTimeAppDef_oaDMData_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaDMFile
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDMFile_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaDMFile_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaDMFileObject* self = (PyoaTimeAppDef_oaDMFileObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaDMFile)
    {
        PyParamoaTimeAppDef_oaDMFile p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaDMFile_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaDMFile, Choices are:\n"
        "    (oaTimeAppDef_oaDMFile)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaDMFile_tp_dealloc(PyoaTimeAppDef_oaDMFileObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDMFile_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaDMFile value;
    int convert_status=PyoaTimeAppDef_oaDMFile_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaTimeAppDef_oaDMFile::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaDMFile_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaDMFile v1;
    PyParamoaTimeAppDef_oaDMFile v2;
    int convert_status1=PyoaTimeAppDef_oaDMFile_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaDMFile_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaDMFile_Convert(PyObject* ob,PyParamoaTimeAppDef_oaDMFile* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaDMFile_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaDMFile**) ((PyoaTimeAppDef_oaDMFileObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaDMFile Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(oaTimeAppDef_oaDMFile** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaDMFile* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaDMFile_Type.tp_alloc(&PyoaTimeAppDef_oaDMFile_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaDMFileObject* self = (PyoaTimeAppDef_oaDMFileObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(oaTimeAppDef_oaDMFile* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaDMFile_Type.tp_alloc(&PyoaTimeAppDef_oaDMFile_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaDMFileObject* self = (PyoaTimeAppDef_oaDMFileObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_get_doc[] = 
"Class: oaTimeAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaDMFile)\n"
"    Calls: oaTime get(const oaDMFile* object)\n"
"    Signature: get|simple-oaTime|cptr-oaDMFile,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDMFile data;
    int convert_status=PyoaTimeAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDMFileObject* self=(PyoaTimeAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDMFile_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_getDefault_doc[] = 
"Class: oaTimeAppDef_oaDMFile, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDMFile data;
    int convert_status=PyoaTimeAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDMFileObject* self=(PyoaTimeAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_set_doc[] = 
"Class: oaTimeAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDMFile,oaTime)\n"
"    Calls: void set(oaDMFile* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaDMFile,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDMFile data;
    int convert_status=PyoaTimeAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDMFileObject* self=(PyoaTimeAppDef_oaDMFileObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDMFile p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDMFile_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_isNull_doc[] =
"Class: oaTimeAppDef_oaDMFile, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaDMFile data;
    int convert_status=PyoaTimeAppDef_oaDMFile_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaDMFile_assign_doc[] = 
"Class: oaTimeAppDef_oaDMFile, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaDMFile data;
  int convert_status=PyoaTimeAppDef_oaDMFile_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaDMFile p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaDMFile_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaDMFile_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaDMFile_get,METH_VARARGS,oaTimeAppDef_oaDMFile_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaDMFile_getDefault,METH_VARARGS,oaTimeAppDef_oaDMFile_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaDMFile_set,METH_VARARGS,oaTimeAppDef_oaDMFile_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaDMFile_tp_isNull,METH_VARARGS,oaTimeAppDef_oaDMFile_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaDMFile_tp_assign,METH_VARARGS,oaTimeAppDef_oaDMFile_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_doc[] = 
"Class: oaTimeAppDef_oaDMFile\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaDMFile)\n"
"    Calls: (const oaTimeAppDef_oaDMFile&)\n"
"    Signature: oaTimeAppDef_oaDMFile||cref-oaTimeAppDef_oaDMFile,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaDMFile_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaDMFile",
    sizeof(PyoaTimeAppDef_oaDMFileObject),
    0,
    (destructor)oaTimeAppDef_oaDMFile_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaDMFile_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaDMFile_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaDMFile_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaDMFile_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaDMFile_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_static_find_doc[] = 
"Class: oaTimeAppDef_oaDMFile, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDMFile* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDMFile|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDMFile* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::find(p1.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDMFile, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDMFile_static_get_doc[] = 
"Class: oaTimeAppDef_oaDMFile, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDMFile* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMFile|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaDMFile* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMFile|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDMFile* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMFile|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDMFile* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDMFile|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaDMFile_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::get(p1.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDMFilep result= (oaTimeAppDef_oaDMFile::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaDMFile_FromoaTimeAppDef_oaDMFile(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDMFile, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaDMFile_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaDMFile_static_find,METH_VARARGS,oaTimeAppDef_oaDMFile_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaDMFile_static_get,METH_VARARGS,oaTimeAppDef_oaDMFile_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaDMFile_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaDMFile_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaDMFile\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaDMFile",
           (PyObject*)(&PyoaTimeAppDef_oaDMFile_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaDMFile\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaDMFile_Type.tp_dict;
    for(method=oaTimeAppDef_oaDMFile_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaDerivedLayerParam
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDerivedLayerParam_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaDerivedLayerParam_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaDerivedLayerParamObject* self = (PyoaTimeAppDef_oaDerivedLayerParamObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaDerivedLayerParam)
    {
        PyParamoaTimeAppDef_oaDerivedLayerParam p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaDerivedLayerParam_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaDerivedLayerParam, Choices are:\n"
        "    (oaTimeAppDef_oaDerivedLayerParam)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaDerivedLayerParam_tp_dealloc(PyoaTimeAppDef_oaDerivedLayerParamObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDerivedLayerParam_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaDerivedLayerParam value;
    int convert_status=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[54];
    sprintf(buffer,"<oaTimeAppDef_oaDerivedLayerParam::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaDerivedLayerParam_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaDerivedLayerParam v1;
    PyParamoaTimeAppDef_oaDerivedLayerParam v2;
    int convert_status1=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaDerivedLayerParam_Convert(PyObject* ob,PyParamoaTimeAppDef_oaDerivedLayerParam* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaDerivedLayerParam_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaDerivedLayerParam**) ((PyoaTimeAppDef_oaDerivedLayerParamObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaDerivedLayerParam Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(oaTimeAppDef_oaDerivedLayerParam** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaDerivedLayerParam* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaTimeAppDef_oaDerivedLayerParam_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaDerivedLayerParamObject* self = (PyoaTimeAppDef_oaDerivedLayerParamObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(oaTimeAppDef_oaDerivedLayerParam* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaDerivedLayerParam_Type.tp_alloc(&PyoaTimeAppDef_oaDerivedLayerParam_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaDerivedLayerParamObject* self = (PyoaTimeAppDef_oaDerivedLayerParamObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_get_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaDerivedLayerParam)\n"
"    Calls: oaTime get(const oaDerivedLayerParam* object)\n"
"    Signature: get|simple-oaTime|cptr-oaDerivedLayerParam,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDerivedLayerParamObject* self=(PyoaTimeAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDerivedLayerParam_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_getDefault_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDerivedLayerParamObject* self=(PyoaTimeAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_set_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDerivedLayerParam,oaTime)\n"
"    Calls: void set(oaDerivedLayerParam* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaDerivedLayerParam,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDerivedLayerParamObject* self=(PyoaTimeAppDef_oaDerivedLayerParamObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDerivedLayerParam p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDerivedLayerParam_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_isNull_doc[] =
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaDerivedLayerParam data;
    int convert_status=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaDerivedLayerParam_assign_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaDerivedLayerParam data;
  int convert_status=PyoaTimeAppDef_oaDerivedLayerParam_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaDerivedLayerParam p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaDerivedLayerParam_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaDerivedLayerParam_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_get,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_getDefault,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_set,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_tp_isNull,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_tp_assign,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaDerivedLayerParam)\n"
"    Calls: (const oaTimeAppDef_oaDerivedLayerParam&)\n"
"    Signature: oaTimeAppDef_oaDerivedLayerParam||cref-oaTimeAppDef_oaDerivedLayerParam,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaDerivedLayerParam_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaDerivedLayerParam",
    sizeof(PyoaTimeAppDef_oaDerivedLayerParamObject),
    0,
    (destructor)oaTimeAppDef_oaDerivedLayerParam_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaDerivedLayerParam_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaDerivedLayerParam_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaDerivedLayerParam_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaDerivedLayerParam_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaDerivedLayerParam_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_static_find_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::find(p1.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDerivedLayerParam, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDerivedLayerParam_static_get_doc[] = 
"Class: oaTimeAppDef_oaDerivedLayerParam, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDerivedLayerParam* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDerivedLayerParam|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaDerivedLayerParam_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::get(p1.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDerivedLayerParamp result= (oaTimeAppDef_oaDerivedLayerParam::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaDerivedLayerParam_FromoaTimeAppDef_oaDerivedLayerParam(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDerivedLayerParam, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaDerivedLayerParam_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_static_find,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaDerivedLayerParam_static_get,METH_VARARGS,oaTimeAppDef_oaDerivedLayerParam_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaDerivedLayerParam_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaDerivedLayerParam_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaDerivedLayerParam\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaDerivedLayerParam",
           (PyObject*)(&PyoaTimeAppDef_oaDerivedLayerParam_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaDerivedLayerParam\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaDerivedLayerParam_Type.tp_dict;
    for(method=oaTimeAppDef_oaDerivedLayerParam_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaDesign
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDesign_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaDesign_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaDesignObject* self = (PyoaTimeAppDef_oaDesignObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaDesign)
    {
        PyParamoaTimeAppDef_oaDesign p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaDesign_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaDesign, Choices are:\n"
        "    (oaTimeAppDef_oaDesign)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaDesign_tp_dealloc(PyoaTimeAppDef_oaDesignObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDesign_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaDesign value;
    int convert_status=PyoaTimeAppDef_oaDesign_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaTimeAppDef_oaDesign::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaDesign_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaDesign v1;
    PyParamoaTimeAppDef_oaDesign v2;
    int convert_status1=PyoaTimeAppDef_oaDesign_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaDesign_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaDesign_Convert(PyObject* ob,PyParamoaTimeAppDef_oaDesign* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaDesign_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaDesign**) ((PyoaTimeAppDef_oaDesignObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaDesign Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(oaTimeAppDef_oaDesign** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaDesign* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaDesign_Type.tp_alloc(&PyoaTimeAppDef_oaDesign_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaDesignObject* self = (PyoaTimeAppDef_oaDesignObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(oaTimeAppDef_oaDesign* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaDesign_Type.tp_alloc(&PyoaTimeAppDef_oaDesign_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaDesignObject* self = (PyoaTimeAppDef_oaDesignObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_get_doc[] = 
"Class: oaTimeAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaDesign)\n"
"    Calls: oaTime get(const oaDesign* object)\n"
"    Signature: get|simple-oaTime|cptr-oaDesign,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDesign_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDesign data;
    int convert_status=PyoaTimeAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDesignObject* self=(PyoaTimeAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesign_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_getDefault_doc[] = 
"Class: oaTimeAppDef_oaDesign, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaDesign_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDesign data;
    int convert_status=PyoaTimeAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDesignObject* self=(PyoaTimeAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_set_doc[] = 
"Class: oaTimeAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDesign,oaTime)\n"
"    Calls: void set(oaDesign* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaDesign,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDesign_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDesign data;
    int convert_status=PyoaTimeAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDesignObject* self=(PyoaTimeAppDef_oaDesignObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesign p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesign_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_isNull_doc[] =
"Class: oaTimeAppDef_oaDesign, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaDesign_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaDesign data;
    int convert_status=PyoaTimeAppDef_oaDesign_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaDesign_assign_doc[] = 
"Class: oaTimeAppDef_oaDesign, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaDesign_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaDesign data;
  int convert_status=PyoaTimeAppDef_oaDesign_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaDesign p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaDesign_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaDesign_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaDesign_get,METH_VARARGS,oaTimeAppDef_oaDesign_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaDesign_getDefault,METH_VARARGS,oaTimeAppDef_oaDesign_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaDesign_set,METH_VARARGS,oaTimeAppDef_oaDesign_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaDesign_tp_isNull,METH_VARARGS,oaTimeAppDef_oaDesign_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaDesign_tp_assign,METH_VARARGS,oaTimeAppDef_oaDesign_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_doc[] = 
"Class: oaTimeAppDef_oaDesign\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaDesign)\n"
"    Calls: (const oaTimeAppDef_oaDesign&)\n"
"    Signature: oaTimeAppDef_oaDesign||cref-oaTimeAppDef_oaDesign,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaDesign_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaDesign",
    sizeof(PyoaTimeAppDef_oaDesignObject),
    0,
    (destructor)oaTimeAppDef_oaDesign_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaDesign_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaDesign_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaDesign_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaDesign_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaDesign_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_static_find_doc[] = 
"Class: oaTimeAppDef_oaDesign, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDesign* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDesign|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDesign* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaDesign_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::find(p1.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDesign, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesign_static_get_doc[] = 
"Class: oaTimeAppDef_oaDesign, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDesign* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesign|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaDesign* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesign|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDesign* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesign|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDesign* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesign|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaDesign_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::get(p1.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignp result= (oaTimeAppDef_oaDesign::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaDesign_FromoaTimeAppDef_oaDesign(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDesign, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaDesign_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaDesign_static_find,METH_VARARGS,oaTimeAppDef_oaDesign_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaDesign_static_get,METH_VARARGS,oaTimeAppDef_oaDesign_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaDesign_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaDesign_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaDesign\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaDesign",
           (PyObject*)(&PyoaTimeAppDef_oaDesign_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaDesign\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaDesign_Type.tp_dict;
    for(method=oaTimeAppDef_oaDesign_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaDesignInst
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDesignInst_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaDesignInst_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaDesignInstObject* self = (PyoaTimeAppDef_oaDesignInstObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaDesignInst)
    {
        PyParamoaTimeAppDef_oaDesignInst p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaDesignInst_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaDesignInst, Choices are:\n"
        "    (oaTimeAppDef_oaDesignInst)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaDesignInst_tp_dealloc(PyoaTimeAppDef_oaDesignInstObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDesignInst_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaDesignInst value;
    int convert_status=PyoaTimeAppDef_oaDesignInst_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[47];
    sprintf(buffer,"<oaTimeAppDef_oaDesignInst::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaDesignInst_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaDesignInst v1;
    PyParamoaTimeAppDef_oaDesignInst v2;
    int convert_status1=PyoaTimeAppDef_oaDesignInst_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaDesignInst_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaDesignInst_Convert(PyObject* ob,PyParamoaTimeAppDef_oaDesignInst* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaDesignInst_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaDesignInst**) ((PyoaTimeAppDef_oaDesignInstObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaDesignInst Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(oaTimeAppDef_oaDesignInst** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaDesignInst* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaDesignInst_Type.tp_alloc(&PyoaTimeAppDef_oaDesignInst_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaDesignInstObject* self = (PyoaTimeAppDef_oaDesignInstObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(oaTimeAppDef_oaDesignInst* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaDesignInst_Type.tp_alloc(&PyoaTimeAppDef_oaDesignInst_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaDesignInstObject* self = (PyoaTimeAppDef_oaDesignInstObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_get_doc[] = 
"Class: oaTimeAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaDesignInst)\n"
"    Calls: oaTime get(const oaDesignInst* object)\n"
"    Signature: get|simple-oaTime|cptr-oaDesignInst,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDesignInst data;
    int convert_status=PyoaTimeAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDesignInstObject* self=(PyoaTimeAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDesignInst_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_getDefault_doc[] = 
"Class: oaTimeAppDef_oaDesignInst, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDesignInst data;
    int convert_status=PyoaTimeAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDesignInstObject* self=(PyoaTimeAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_set_doc[] = 
"Class: oaTimeAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDesignInst,oaTime)\n"
"    Calls: void set(oaDesignInst* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaDesignInst,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDesignInst data;
    int convert_status=PyoaTimeAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDesignInstObject* self=(PyoaTimeAppDef_oaDesignInstObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDesignInst p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDesignInst_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_isNull_doc[] =
"Class: oaTimeAppDef_oaDesignInst, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaDesignInst data;
    int convert_status=PyoaTimeAppDef_oaDesignInst_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaDesignInst_assign_doc[] = 
"Class: oaTimeAppDef_oaDesignInst, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaDesignInst data;
  int convert_status=PyoaTimeAppDef_oaDesignInst_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaDesignInst p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaDesignInst_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaDesignInst_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaDesignInst_get,METH_VARARGS,oaTimeAppDef_oaDesignInst_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaDesignInst_getDefault,METH_VARARGS,oaTimeAppDef_oaDesignInst_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaDesignInst_set,METH_VARARGS,oaTimeAppDef_oaDesignInst_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaDesignInst_tp_isNull,METH_VARARGS,oaTimeAppDef_oaDesignInst_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaDesignInst_tp_assign,METH_VARARGS,oaTimeAppDef_oaDesignInst_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_doc[] = 
"Class: oaTimeAppDef_oaDesignInst\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaDesignInst)\n"
"    Calls: (const oaTimeAppDef_oaDesignInst&)\n"
"    Signature: oaTimeAppDef_oaDesignInst||cref-oaTimeAppDef_oaDesignInst,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaDesignInst_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaDesignInst",
    sizeof(PyoaTimeAppDef_oaDesignInstObject),
    0,
    (destructor)oaTimeAppDef_oaDesignInst_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaDesignInst_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaDesignInst_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaDesignInst_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaDesignInst_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaDesignInst_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_static_find_doc[] = 
"Class: oaTimeAppDef_oaDesignInst, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDesignInst* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDesignInst* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::find(p1.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDesignInst, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDesignInst_static_get_doc[] = 
"Class: oaTimeAppDef_oaDesignInst, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDesignInst* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaDesignInst* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDesignInst* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDesignInst* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDesignInst|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaDesignInst_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::get(p1.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDesignInstp result= (oaTimeAppDef_oaDesignInst::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaDesignInst_FromoaTimeAppDef_oaDesignInst(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDesignInst, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaDesignInst_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaDesignInst_static_find,METH_VARARGS,oaTimeAppDef_oaDesignInst_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaDesignInst_static_get,METH_VARARGS,oaTimeAppDef_oaDesignInst_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaDesignInst_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaDesignInst_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaDesignInst\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaDesignInst",
           (PyObject*)(&PyoaTimeAppDef_oaDesignInst_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaDesignInst\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaDesignInst_Type.tp_dict;
    for(method=oaTimeAppDef_oaDesignInst_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaDevice
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDevice_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaDevice_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaDeviceObject* self = (PyoaTimeAppDef_oaDeviceObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaDevice)
    {
        PyParamoaTimeAppDef_oaDevice p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaDevice_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaDevice, Choices are:\n"
        "    (oaTimeAppDef_oaDevice)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaDevice_tp_dealloc(PyoaTimeAppDef_oaDeviceObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaDevice_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaDevice value;
    int convert_status=PyoaTimeAppDef_oaDevice_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaTimeAppDef_oaDevice::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaDevice_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaDevice v1;
    PyParamoaTimeAppDef_oaDevice v2;
    int convert_status1=PyoaTimeAppDef_oaDevice_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaDevice_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaDevice_Convert(PyObject* ob,PyParamoaTimeAppDef_oaDevice* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaDevice_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaDevice**) ((PyoaTimeAppDef_oaDeviceObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaDevice Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(oaTimeAppDef_oaDevice** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaDevice* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaDevice_Type.tp_alloc(&PyoaTimeAppDef_oaDevice_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaDeviceObject* self = (PyoaTimeAppDef_oaDeviceObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(oaTimeAppDef_oaDevice* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaDevice_Type.tp_alloc(&PyoaTimeAppDef_oaDevice_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaDeviceObject* self = (PyoaTimeAppDef_oaDeviceObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_get_doc[] = 
"Class: oaTimeAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaDevice)\n"
"    Calls: oaTime get(const oaDevice* object)\n"
"    Signature: get|simple-oaTime|cptr-oaDevice,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDevice_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDevice data;
    int convert_status=PyoaTimeAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDeviceObject* self=(PyoaTimeAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaDevice_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_getDefault_doc[] = 
"Class: oaTimeAppDef_oaDevice, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaDevice_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDevice data;
    int convert_status=PyoaTimeAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDeviceObject* self=(PyoaTimeAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_set_doc[] = 
"Class: oaTimeAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDevice,oaTime)\n"
"    Calls: void set(oaDevice* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaDevice,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaDevice_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaDevice data;
    int convert_status=PyoaTimeAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaDeviceObject* self=(PyoaTimeAppDef_oaDeviceObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaDevice p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaDevice_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_isNull_doc[] =
"Class: oaTimeAppDef_oaDevice, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaDevice_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaDevice data;
    int convert_status=PyoaTimeAppDef_oaDevice_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaDevice_assign_doc[] = 
"Class: oaTimeAppDef_oaDevice, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaDevice_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaDevice data;
  int convert_status=PyoaTimeAppDef_oaDevice_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaDevice p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaDevice_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaDevice_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaDevice_get,METH_VARARGS,oaTimeAppDef_oaDevice_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaDevice_getDefault,METH_VARARGS,oaTimeAppDef_oaDevice_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaDevice_set,METH_VARARGS,oaTimeAppDef_oaDevice_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaDevice_tp_isNull,METH_VARARGS,oaTimeAppDef_oaDevice_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaDevice_tp_assign,METH_VARARGS,oaTimeAppDef_oaDevice_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_doc[] = 
"Class: oaTimeAppDef_oaDevice\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaDevice)\n"
"    Calls: (const oaTimeAppDef_oaDevice&)\n"
"    Signature: oaTimeAppDef_oaDevice||cref-oaTimeAppDef_oaDevice,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaDevice_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaDevice",
    sizeof(PyoaTimeAppDef_oaDeviceObject),
    0,
    (destructor)oaTimeAppDef_oaDevice_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaDevice_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaDevice_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaDevice_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaDevice_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaDevice_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_static_find_doc[] = 
"Class: oaTimeAppDef_oaDevice, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDevice* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDevice|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDevice* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaDevice_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::find(p1.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDevice, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaDevice_static_get_doc[] = 
"Class: oaTimeAppDef_oaDevice, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaDevice* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDevice|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaDevice* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDevice|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDevice* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDevice|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaDevice* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaDevice|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaDevice_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::get(p1.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaDevicep result= (oaTimeAppDef_oaDevice::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaDevice_FromoaTimeAppDef_oaDevice(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaDevice, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaDevice_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaDevice_static_find,METH_VARARGS,oaTimeAppDef_oaDevice_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaDevice_static_get,METH_VARARGS,oaTimeAppDef_oaDevice_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaDevice_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaDevice_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaDevice\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaDevice",
           (PyObject*)(&PyoaTimeAppDef_oaDevice_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaDevice\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaDevice_Type.tp_dict;
    for(method=oaTimeAppDef_oaDevice_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaElmore
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaElmore_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaElmore_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaElmoreObject* self = (PyoaTimeAppDef_oaElmoreObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaElmore)
    {
        PyParamoaTimeAppDef_oaElmore p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaElmore_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaElmore, Choices are:\n"
        "    (oaTimeAppDef_oaElmore)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaElmore_tp_dealloc(PyoaTimeAppDef_oaElmoreObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaElmore_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaElmore value;
    int convert_status=PyoaTimeAppDef_oaElmore_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[43];
    sprintf(buffer,"<oaTimeAppDef_oaElmore::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaElmore_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaElmore v1;
    PyParamoaTimeAppDef_oaElmore v2;
    int convert_status1=PyoaTimeAppDef_oaElmore_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaElmore_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaElmore_Convert(PyObject* ob,PyParamoaTimeAppDef_oaElmore* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaElmore_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaElmore**) ((PyoaTimeAppDef_oaElmoreObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaElmore Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(oaTimeAppDef_oaElmore** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaElmore* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaElmore_Type.tp_alloc(&PyoaTimeAppDef_oaElmore_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaElmoreObject* self = (PyoaTimeAppDef_oaElmoreObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(oaTimeAppDef_oaElmore* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaElmore_Type.tp_alloc(&PyoaTimeAppDef_oaElmore_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaElmoreObject* self = (PyoaTimeAppDef_oaElmoreObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_get_doc[] = 
"Class: oaTimeAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaElmore)\n"
"    Calls: oaTime get(const oaElmore* object)\n"
"    Signature: get|simple-oaTime|cptr-oaElmore,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaElmore_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaElmore data;
    int convert_status=PyoaTimeAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaElmoreObject* self=(PyoaTimeAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaElmore_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_getDefault_doc[] = 
"Class: oaTimeAppDef_oaElmore, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaElmore_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaElmore data;
    int convert_status=PyoaTimeAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaElmoreObject* self=(PyoaTimeAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_set_doc[] = 
"Class: oaTimeAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaElmore,oaTime)\n"
"    Calls: void set(oaElmore* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaElmore,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaElmore_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaElmore data;
    int convert_status=PyoaTimeAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaElmoreObject* self=(PyoaTimeAppDef_oaElmoreObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaElmore p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaElmore_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_isNull_doc[] =
"Class: oaTimeAppDef_oaElmore, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaElmore_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaElmore data;
    int convert_status=PyoaTimeAppDef_oaElmore_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaElmore_assign_doc[] = 
"Class: oaTimeAppDef_oaElmore, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaElmore_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaElmore data;
  int convert_status=PyoaTimeAppDef_oaElmore_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaElmore p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaElmore_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaElmore_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaElmore_get,METH_VARARGS,oaTimeAppDef_oaElmore_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaElmore_getDefault,METH_VARARGS,oaTimeAppDef_oaElmore_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaElmore_set,METH_VARARGS,oaTimeAppDef_oaElmore_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaElmore_tp_isNull,METH_VARARGS,oaTimeAppDef_oaElmore_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaElmore_tp_assign,METH_VARARGS,oaTimeAppDef_oaElmore_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_doc[] = 
"Class: oaTimeAppDef_oaElmore\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaElmore)\n"
"    Calls: (const oaTimeAppDef_oaElmore&)\n"
"    Signature: oaTimeAppDef_oaElmore||cref-oaTimeAppDef_oaElmore,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaElmore_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaElmore",
    sizeof(PyoaTimeAppDef_oaElmoreObject),
    0,
    (destructor)oaTimeAppDef_oaElmore_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaElmore_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaElmore_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaElmore_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaElmore_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaElmore_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_static_find_doc[] = 
"Class: oaTimeAppDef_oaElmore, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaElmore* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaElmore|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaElmore* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaElmore_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::find(p1.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaElmore, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaElmore_static_get_doc[] = 
"Class: oaTimeAppDef_oaElmore, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaElmore* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaElmore|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaElmore* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaElmore|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaElmore* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaElmore|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaElmore* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaElmore|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaElmore_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::get(p1.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaElmorep result= (oaTimeAppDef_oaElmore::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaElmore_FromoaTimeAppDef_oaElmore(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaElmore, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaElmore_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaElmore_static_find,METH_VARARGS,oaTimeAppDef_oaElmore_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaElmore_static_get,METH_VARARGS,oaTimeAppDef_oaElmore_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaElmore_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaElmore_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaElmore\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaElmore",
           (PyObject*)(&PyoaTimeAppDef_oaElmore_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaElmore\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaElmore_Type.tp_dict;
    for(method=oaTimeAppDef_oaElmore_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}


/********************************************************************
 *   Copyright 2002-2008  LSI Corporation
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *******************************************************************/

#include "pyoa_header.h"


// ==================================================================
// Wrapper Implementation for Class: oaTimeAppDef_oaFigGroup
// ==================================================================


// ==================================================================
// Alloc/Dealloc Routines
// ==================================================================

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaFigGroup_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
  try {
    int is_raw=(type==&PyoaTimeAppDef_oaFigGroup_Type);
    PyObject* bself = type->tp_alloc(type,0);
    if (bself == NULL) return bself;
    PyoaTimeAppDef_oaFigGroupObject* self = (PyoaTimeAppDef_oaFigGroupObject*)bself;
    self->locks = NULL;
    self->borrow = 0;
    static char *kwlist [] = { NULL } ;
    // Case: (oaTimeAppDef_oaFigGroup)
    {
        PyParamoaTimeAppDef_oaFigGroup p1;
        if (PyArg_ParseTuple(args,(char*)"O&",
              &PyoaTimeAppDef_oaFigGroup_Convert,&p1)) {
            self->data=p1.Data();
            self->value=&(self->data);
            return bself;
        }
    }
    PyErr_Clear();
    // Case: ()
    {
        if (PyArg_ParseTuple(args,(char*)"")) {
          self->data=NULL;
          self->value=&(self->data);
          return bself;
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Constructor found for class: oaTimeAppDef_oaFigGroup, Choices are:\n"
        "    (oaTimeAppDef_oaFigGroup)\n"
    );
    Py_DECREF(self);
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static void
oaTimeAppDef_oaFigGroup_tp_dealloc(PyoaTimeAppDef_oaFigGroupObject* self)
{
    self->ob_type->tp_free((PyObject*)self);
}

// ------------------------------------------------------------------
static PyObject*
oaTimeAppDef_oaFigGroup_tp_repr(PyObject *ob)
{
    PyParamoaTimeAppDef_oaFigGroup value;
    int convert_status=PyoaTimeAppDef_oaFigGroup_Convert(ob,&value);
    assert(convert_status!=0);
    PyObject* result;

    char buffer[45];
    sprintf(buffer,"<oaTimeAppDef_oaFigGroup::" DISPLAY_FORMAT ">",POINTER_AS_DISPLAY(value.DataCall()));
    result=PyString_FromString(buffer);
    return result;
}
        
// ------------------------------------------------------------------
static int
oaTimeAppDef_oaFigGroup_tp_compare(PyObject *ob1,PyObject* ob2)
{
    PyParamoaTimeAppDef_oaFigGroup v1;
    PyParamoaTimeAppDef_oaFigGroup v2;
    int convert_status1=PyoaTimeAppDef_oaFigGroup_Convert(ob1,&v1);
    int convert_status2=PyoaTimeAppDef_oaFigGroup_Convert(ob2,&v2);
    assert(convert_status1!=0);
    assert(convert_status2!=0);
    if (v1.DataCall()==v2.DataCall()) return 0;
    return 1;
}
        
// ------------------------------------------------------------------
int
PyoaTimeAppDef_oaFigGroup_Convert(PyObject* ob,PyParamoaTimeAppDef_oaFigGroup* result)
{
    if (ob == NULL) return 1;
    if (PyoaTimeAppDef_oaFigGroup_Check(ob)) {
        result->SetData( (oaTimeAppDef_oaFigGroup**) ((PyoaTimeAppDef_oaFigGroupObject*)ob)->value);
        return 1;
    }
    PyErr_SetString(PyExc_TypeError,
        "Convertion of parameter to class: oaTimeAppDef_oaFigGroup Failed");
    return 0;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(oaTimeAppDef_oaFigGroup** value,int borrow,PyObject* lock)
{
    if (value && *value) {
        oaTimeAppDef_oaFigGroup* data=*value;
        PyObject* bself = PyoaTimeAppDef_oaFigGroup_Type.tp_alloc(&PyoaTimeAppDef_oaFigGroup_Type,0);
        if (bself == NULL) return bself;
        PyoaTimeAppDef_oaFigGroupObject* self = (PyoaTimeAppDef_oaFigGroupObject*)bself;
        self->value = (oaObject**) value;
        self->data = NULL;
        self->locks = NULL;
        self->borrow = 0; // Ignore borrow flag, since we copied
       if (lock) PyoaLockObject(self->locks,lock);
        return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}
// ------------------------------------------------------------------
PyObject* PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(oaTimeAppDef_oaFigGroup* data)
{
    if (data) {
       PyObject* bself = PyoaTimeAppDef_oaFigGroup_Type.tp_alloc(&PyoaTimeAppDef_oaFigGroup_Type,0);
       if (bself == NULL) return bself;
       PyoaTimeAppDef_oaFigGroupObject* self = (PyoaTimeAppDef_oaFigGroupObject*)bself;
       self->data = (oaObject*) data;
       self->value = &(self->data);
       self->borrow = 0; 
       self->locks = NULL;
       return bself;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

// ------------------------------------------------------------------
// FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_get_doc[] = 
"Class: oaTimeAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaFigGroup)\n"
"    Calls: oaTime get(const oaFigGroup* object)\n"
"    Signature: get|simple-oaTime|cptr-oaFigGroup,\n"
"    This function returns the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_get(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaFigGroup data;
    int convert_status=PyoaTimeAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaFigGroupObject* self=(PyoaTimeAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    if (PyArg_ParseTuple(args,"O&",
          &PyoaFigGroup_Convert,&p1)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        oaTime result= (data.DataCall()->get(p1.Data()));
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_getDefault_doc[] = 
"Class: oaTimeAppDef_oaFigGroup, Function: getDefault\n"
"  Paramegers: ()\n"
"    Calls: oaTime getDefault() const\n"
"    Signature: getDefault|simple-oaTime|\n"
"    BrowseData: 1\n"
"    This function returns the default value for this time extension.\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_getDefault(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaFigGroup data;
    int convert_status=PyoaTimeAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaFigGroupObject* self=(PyoaTimeAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    if (PyArg_ParseTuple(args,"")) {
        oaTime result= (data.DataCall()->getDefault());
        return PyoaTime_FromoaTime(result);
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_set_doc[] = 
"Class: oaTimeAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaFigGroup,oaTime)\n"
"    Calls: void set(oaFigGroup* object,oaTime value)\n"
"    Signature: set|void-void|ptr-oaFigGroup,simple-oaTime,\n"
"    This function sets the value of this extension.\n"
"    oacInvalidDesignObjectForAppDef\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_set(PyObject* ob, PyObject *args)
{
  try {
    PyParamoaTimeAppDef_oaFigGroup data;
    int convert_status=PyoaTimeAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    PyoaTimeAppDef_oaFigGroupObject* self=(PyoaTimeAppDef_oaFigGroupObject*)ob;
    if (!PyValidateDbObject(data.Data(),0)) return NULL;

    PyParamoaFigGroup p1;
    PyParamoaTime p2;
    if (PyArg_ParseTuple(args,"O&O&",
          &PyoaFigGroup_Convert,&p1,
          &PyoaTime_Convert,&p2)) {
        if (!PyValidateDbObject(p1.Data(),1)) return NULL;
        data.DataCall()->set(p1.Data(),p2.Data());
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_isNull_doc[] =
"Class: oaTimeAppDef_oaFigGroup, Function: isNull\n"
"  Parameters: () \n"
"    This functions returns 1 if the DbPointer is NULL, and 0 otherwise.\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_tp_isNull(PyObject* ob, PyObject *args)
{
    PyParamoaTimeAppDef_oaFigGroup data;
    int convert_status=PyoaTimeAppDef_oaFigGroup_Convert(ob,&data);
    assert(convert_status!=0);
    if (data.DataCall()==NULL)
        return PyInt_FromLong(1);
    else
        return PyInt_FromLong(0);
}
static char oaTimeAppDef_oaFigGroup_assign_doc[] = 
"Class: oaTimeAppDef_oaFigGroup, Function: set\n"
"  Paramegers: (oaDouble)\n"
"    This function sets the current value.\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_tp_assign(PyObject* ob, PyObject *args)
{
  PyParamoaTimeAppDef_oaFigGroup data;
  int convert_status=PyoaTimeAppDef_oaFigGroup_Convert(ob,&data);
  assert(convert_status!=0);
  try {
    PyParamoaTimeAppDef_oaFigGroup p1;
    if (PyArg_ParseTuple(args,(char*)"O&",
          &PyoaTimeAppDef_oaFigGroup_Convert,&p1)) {
        data.Data()=p1.Data();
        Py_INCREF(ob);
        return ob;
    }
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}


// ------------------------------------------------------------------
//  Function Methods Table:
// ------------------------------------------------------------------

static PyMethodDef oaTimeAppDef_oaFigGroup_methodlist[] = {
    {"get",(PyCFunction)oaTimeAppDef_oaFigGroup_get,METH_VARARGS,oaTimeAppDef_oaFigGroup_get_doc},
    {"getDefault",(PyCFunction)oaTimeAppDef_oaFigGroup_getDefault,METH_VARARGS,oaTimeAppDef_oaFigGroup_getDefault_doc},
    {"set",(PyCFunction)oaTimeAppDef_oaFigGroup_set,METH_VARARGS,oaTimeAppDef_oaFigGroup_set_doc},
    {"isNull",(PyCFunction)oaTimeAppDef_oaFigGroup_tp_isNull,METH_VARARGS,oaTimeAppDef_oaFigGroup_isNull_doc},
    {"assign",(PyCFunction)oaTimeAppDef_oaFigGroup_tp_assign,METH_VARARGS,oaTimeAppDef_oaFigGroup_assign_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Object:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_doc[] = 
"Class: oaTimeAppDef_oaFigGroup\n"
"  The oaTimeAppDef class implements an application-specific extension to a particular type of data in a database.\n"
"  Once are created, a time field is added to each object of the specified dataType. The default value for the time extension is the epoch (0). Applications can use the new time field for any purpose.\n"
"  For additional information on defining and using AppDefs, see oaAppDef and Extending the Database in the Programmer's Guide.\n"
"Constructors:\n"
"  Paramegers: (oaTimeAppDef_oaFigGroup)\n"
"    Calls: (const oaTimeAppDef_oaFigGroup&)\n"
"    Signature: oaTimeAppDef_oaFigGroup||cref-oaTimeAppDef_oaFigGroup,\n"
;

// ------------------------------------------------------------------
PyTypeObject PyoaTimeAppDef_oaFigGroup_Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,
    "oaTimeAppDef_oaFigGroup",
    sizeof(PyoaTimeAppDef_oaFigGroupObject),
    0,
    (destructor)oaTimeAppDef_oaFigGroup_tp_dealloc,	/* tp_dealloc */
    0,	/* tp_print */
    0,					/* tp_getattr */
    0,					/* tp_setattr */
    (cmpfunc)oaTimeAppDef_oaFigGroup_tp_compare,	/* tp_compare */
    (reprfunc)oaTimeAppDef_oaFigGroup_tp_repr,	/* tp_repr */
    0,					/* tp_as_number */
    0,					/* tp_as_sequence */
    0,					/* tp_as_mapping */
    0,					/* tp_as_hash */
    0,					/* tp_as_call */
    0,					/* tp_str */
    0,					/* tp_getattro */
    0,					/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
    oaTimeAppDef_oaFigGroup_doc,	/* tp_doc */
    0,					/* tp_traverse */
    0,					/* tp_clear */
    0,					/* tp_richcompre */
    0,					/* tp_weaklistoffset */
    0,					/* tp_iter */
    0,					/* tp_iternext */
    oaTimeAppDef_oaFigGroup_methodlist,	/* tp_methods */
    0,					/* tp_members */
    0,					/* tp_getset */
    &PyoaAppDef_Type,	/* tp_base */
    0,					/* tp_dict */
    0,					/* tp_descr_get */
    0,					/* tp_descr_set */
    0,					/* tp_dictoffset */
    0,					/* tp_init */
    PyType_GenericAlloc,	/* tp_alloc */
    oaTimeAppDef_oaFigGroup_new,	/* tp_new */
    _PyObject_Del,	/* tp_free */
};


// ------------------------------------------------------------------
// Static FunctionMethods:
// ------------------------------------------------------------------

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_static_find_doc[] = 
"Class: oaTimeAppDef_oaFigGroup, Function: find\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaFigGroup* find(const oaString& name)\n"
"    Signature: find|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' if it exists.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaFigGroup* find(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: find|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,\n"
"    This function returns an oaTimeAppDef object with this dataType and the specified 'name' that is associated with the specified object extension 'objDef'.\n"
"    name\n"
"    The name of the oaAppDef object to look for\n"
"    objDef\n"
"    A constant pointer to the object extension\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_static_find(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::find(p1.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::find(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaFigGroup, function: find, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaAppObjectDef)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static char oaTimeAppDef_oaFigGroup_static_get_doc[] = 
"Class: oaTimeAppDef_oaFigGroup, Function: get\n"
"  Paramegers: (oaString)\n"
"    Calls: oaTimeAppDef_oaFigGroup* get(const oaString& name)\n"
"    Signature: get|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime)\n"
"    Calls: oaTimeAppDef_oaFigGroup* get(const oaString& name,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaFigGroup* get(const oaString& name,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef class time extension with the specified name . You can create a time extension on any object except another extension.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef)\n"
"    Calls: oaTimeAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef)\n"
"    Signature: get|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime)\n"
"    Calls: oaTimeAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue)\n"
"    Signature: get|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
"  Paramegers: (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
"    Calls: oaTimeAppDef_oaFigGroup* get(const oaString& name,const oaAppObjectDef* objDef,oaTime defValue,oaBoolean persist)\n"
"    Signature: get|ptr-oaTimeAppDef_oaFigGroup|cref-oaString,cptr-oaAppObjectDef,simple-oaTime,simple-oaBoolean,\n"
"    This function constructs an oaTimeAppDef object, creating a time extension with the specified name for the specified object type.\n"
"    name\n"
"    The name given to the oaTimeAppDef object\n"
"    objDef\n"
"    The object extension with which to associate the extension\n"
"    defValue\n"
"    An optional default value\n"
"    persist\n"
"    Saves the oaTimeAppDef data in the database\n"
"    oacAppDefExists\n"
;

static PyObject*
oaTimeAppDef_oaFigGroup_static_get(PyObject* ob, PyObject *args)
{
  try {
    // Case: (oaString)
    {
        PyParamoaString p1;
        if (PyArg_ParseTuple(args,"O&",
              &PyoaString_Convert,&p1)) {
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::get(p1.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2)) {
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaTime p2;
        PyParamoaBoolean p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaTime_Convert,&p2,
              &PyoaBoolean_Convert,&p3)) {
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        if (PyArg_ParseTuple(args,"O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::get(p1.Data(),p2.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        if (PyArg_ParseTuple(args,"O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    // Case: (oaString,oaAppObjectDef,oaTime,oaBoolean)
    {
        PyParamoaString p1;
        PyParamoaAppObjectDef p2;
        PyParamoaTime p3;
        PyParamoaBoolean p4;
        if (PyArg_ParseTuple(args,"O&O&O&O&",
              &PyoaString_Convert,&p1,
              &PyoaAppObjectDef_Convert,&p2,
              &PyoaTime_Convert,&p3,
              &PyoaBoolean_Convert,&p4)) {
            if (!PyValidateDbObject(p2.Data(),2)) return NULL;
            oaTimeAppDef_oaFigGroupp result= (oaTimeAppDef_oaFigGroup::get(p1.Data(),p2.Data(),p3.Data(),p4.Data()));
            return PyoaTimeAppDef_oaFigGroup_FromoaTimeAppDef_oaFigGroup(result);
        }
    }
    PyErr_Clear();
    PyErr_SetString(PyExc_TypeError,
        "No Arg-Matching Function found for class: oaTimeAppDef_oaFigGroup, function: get, Choices are:\n"
        "    (oaString)\n"
        "    (oaString,oaTime)\n"
        "    (oaString,oaTime,oaBoolean)\n"
        "    (oaString,oaAppObjectDef)\n"
        "    (oaString,oaAppObjectDef,oaTime)\n"
        "    (oaString,oaAppObjectDef,oaTime,oaBoolean)\n"
    );
    return NULL;
  }
  catch (oaException &excp) {
    PyErr_OpenAccess(excp);
    return NULL;
  }
}

// ------------------------------------------------------------------
static PyMethodDef oaTimeAppDef_oaFigGroup_staticmethodlist[] = {
    {"static_find",(PyCFunction)oaTimeAppDef_oaFigGroup_static_find,METH_VARARGS,oaTimeAppDef_oaFigGroup_static_find_doc},
    {"static_get",(PyCFunction)oaTimeAppDef_oaFigGroup_static_get,METH_VARARGS,oaTimeAppDef_oaFigGroup_static_get_doc},
   {NULL,NULL,0,NULL}
};


// ------------------------------------------------------------------
//  Type Init:
// ------------------------------------------------------------------

int
PyoaTimeAppDef_oaFigGroup_TypeInit(PyObject* mod_dict)
{
    if (PyType_Ready(&PyoaTimeAppDef_oaFigGroup_Type)<0) {
      printf("** PyType_Ready failed for: oaTimeAppDef_oaFigGroup\n");
      return -1;
    }

    if (PyDict_SetItemString(mod_dict,"oaTimeAppDef_oaFigGroup",
           (PyObject*)(&PyoaTimeAppDef_oaFigGroup_Type))<0) {
       printf("** Failed to add type name to module dictionary for: oaTimeAppDef_oaFigGroup\n");
       return -1;
    }

    PyObject *dict, *value;
    PyMethodDef *method;
    dict=PyoaTimeAppDef_oaFigGroup_Type.tp_dict;
    for(method=oaTimeAppDef_oaFigGroup_staticmethodlist;method->ml_name!=NULL;method++) {
        value=PyCFunction_New(method,NULL);
    if (value==NULL) return -1;
        if (PyDict_SetItemString(dict,method->ml_name,value)!=0) {
        Py_DECREF(value);
            printf("** Failed to add static function to module dictionary for: %s\n",
                method->ml_name);
            return -1;
        }
        Py_DECREF(value);
    }
    return 0;
}

